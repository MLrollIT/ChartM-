[
    {
        "id": "Violin_a279d48b8bd99eb5",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nepidermal_cells = [60, 55, 58, 62, 63, 57, 59, 61, 56, 64]\npalisade_cells = [80, 85, 78, 82, 79, 84, 81, 83, 77, 86]\nspongy_mesophyll_cells = [70, 75, 69, 72, 68, 73, 71, 74, 67, 76]\n\n# Creating a DataFrame \ndata = {'Epidermal Cells': epidermal_cells, 'Palisade Cells': palisade_cells, 'Spongy Mesophyll Cells': spongy_mesophyll_cells}\ndf = pd.DataFrame(data)\n\n# Reshaping DataFrame\ndf_melt = pd.melt(df.reset_index(), id_vars=['index'], value_vars=['Epidermal Cells', 'Palisade Cells', 'Spongy Mesophyll Cells'])\ndf_melt.columns = ['index', 'Cell Type', 'Cell Size']\n\n# Creating the violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='Cell Type', y='Cell Size', data=df_melt)\n\nplt.title('Distribution of Leaf Cell Sizes')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the legend label of the violin that contains the center point of the bounding box to 'A new Label'. Also, adjust its transformation to match the data's coordinate system.",
        "Input_image": "./test_dataset/Violin/Violin_a279d48b8bd99eb5/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nepidermal_cells = [60, 55, 58, 62, 63, 57, 59, 61, 56, 64]\npalisade_cells = [80, 85, 78, 82, 79, 84, 81, 83, 77, 86]\nspongy_mesophyll_cells = [70, 75, 69, 72, 68, 73, 71, 74, 67, 76]\n\n# Creating a DataFrame \ndata = {'Epidermal Cells': epidermal_cells, 'Palisade Cells': palisade_cells, 'Spongy Mesophyll Cells': spongy_mesophyll_cells}\ndf = pd.DataFrame(data)\n\n# Reshaping DataFrame\ndf_melt = pd.melt(df.reset_index(), id_vars=['index'], value_vars=['Epidermal Cells', 'Palisade Cells', 'Spongy Mesophyll Cells'])\ndf_melt.columns = ['index', 'Cell Type', 'Cell Size']\n\n# Creating the violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='Cell Type', y='Cell Size', data=df_melt)\n\n# Modifying the label and transform of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Palisade Cells' is the target object\n        violin.set_label('A new Label')\n        violin.set_transform(plt.gca().transData)\n\nplt.title('Distribution of Leaf Cell Sizes')\nplt.legend()\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_a279d48b8bd99eb5/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_a279d48b8bd99eb5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_a279d48b8bd99eb5/figure.png"
    },
    {
        "id": "Violin_b6460ac2ae4a6da2",
        "Input_code": "import pandas as pd\n# Required Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Data\nfish_lengths = {\n    'Anglerfish': [15, 18, 16, 20, 17, 19, 16, 18, 20, 16], \n    'Gulper Eel': [25, 28, 26, 30, 27, 29, 26, 28, 30, 25], \n    'Viperfish': [20, 23, 21, 25, 22, 24, 21, 23, 25, 20]\n}\n\n# Preprocess data for visualization\nfish_species = []\nlengths = []\nfor species, lengths_ in fish_lengths.items():\n    fish_species.extend([species]*len(lengths_))\n    lengths.extend(lengths_)\n    \ndata = pd.DataFrame({'Species': fish_species, 'Length (cm)': lengths})\n\n# Create Violin Plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x=\"Species\", y=\"Length (cm)\", data=data)\nplt.title(\"Deep Sea Creatures Distribution Patterns\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the median line of the violin that contain the center point of the bounding box to #b45d53, and also set the visibility of its box part to false.",
        "Input_image": "./test_dataset/Violin/Violin_b6460ac2ae4a6da2/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Required Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Data\nfish_lengths = {\n    'Anglerfish': [15, 18, 16, 20, 17, 19, 16, 18, 20, 16], \n    'Gulper Eel': [25, 28, 26, 30, 27, 29, 26, 28, 30, 25], \n    'Viperfish': [20, 23, 21, 25, 22, 24, 21, 23, 25, 20]\n}\n\n# Preprocess data for visualization\nfish_species = []\nlengths = []\nfor species, lengths_ in fish_lengths.items():\n    fish_species.extend([species]*len(lengths_))\n    lengths.extend(lengths_)\n    \ndata = pd.DataFrame({'Species': fish_species, 'Length (cm)': lengths})\n\n# Create Violin Plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x=\"Species\", y=\"Length (cm)\", data=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Gulper Eel' is the target object\n        violin.set_visible(False)\nfor i, line in enumerate(plt.gca().lines):\n    if i ==1*3+1:  # Assuming 'Gulper Eel' is the target object\n        line.set_color('#b45d53')\n        \nplt.title(\"Deep Sea Creatures Distribution Patterns\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_b6460ac2ae4a6da2/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_b6460ac2ae4a6da2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_b6460ac2ae4a6da2/figure.png"
    },
    {
        "id": "Violin_d080ab5d7ffe5dbe",
        "Input_code": "# Required Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data Preparation\nstellar_black_holes = [250, 260, 245, 255, 270, 240, 265, 250, 255, 260]\nintermediate_mass_black_holes = [300, 310, 320, 290, 305, 315, 295, 300, 310, 295]\nsupermassive_black_holes = [350, 340, 360, 335, 345, 355, 330, 340, 350, 345]\n\n# Creating DataFrame\ndf = pd.DataFrame({\n    'Type': ['Stellar Black Holes'] * len(stellar_black_holes) + \n            ['Intermediate-Mass Black Holes'] * len(intermediate_mass_black_holes) +\n            ['Supermassive Black Holes'] * len(supermassive_black_holes),\n    'Rotation Velocity (In Km/S)': stellar_black_holes + intermediate_mass_black_holes + supermassive_black_holes\n})\n\n# Violin Plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Type\", y=\"Rotation Velocity (In Km/S)\", data=df)\nplt.title('Galactic Black Hole Exploration')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the fill pattern of the violin that contains the center point of the bounding box to an 'x' hatch pattern.",
        "Input_image": "./test_dataset/Violin/Violin_d080ab5d7ffe5dbe/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data Preparation\nstellar_black_holes = [250, 260, 245, 255, 270, 240, 265, 250, 255, 260]\nintermediate_mass_black_holes = [300, 310, 320, 290, 305, 315, 295, 300, 310, 295]\nsupermassive_black_holes = [350, 340, 360, 335, 345, 355, 330, 340, 350, 345]\n\n# Creating DataFrame\ndf = pd.DataFrame({\n    'Type': ['Stellar Black Holes'] * len(stellar_black_holes) + \n            ['Intermediate-Mass Black Holes'] * len(intermediate_mass_black_holes) +\n            ['Supermassive Black Holes'] * len(supermassive_black_holes),\n    'Rotation Velocity (In Km/S)': stellar_black_holes + intermediate_mass_black_holes + supermassive_black_holes\n})\n\n# Violin Plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Type\", y=\"Rotation Velocity (In Km/S)\", data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Targeting the second violin\n        violin.set_hatch('x')\nplt.title('Galactic Black Hole Exploration')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_d080ab5d7ffe5dbe/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_d080ab5d7ffe5dbe/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_d080ab5d7ffe5dbe/figure.png"
    },
    {
        "id": "Violin_15fb3997ec576474",
        "Input_code": "# Necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Specifying data\nage_groups = ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70+']\ndeaths = [[10, 12, 15, 8, 14, 13, 9, 11, 10, 12, 13, 8, 15, 16, 14, 13, 12, 11, 10, 9],\n          [5, 7, 6, 9, 8, 7, 6, 4, 9, 12, 7, 6, 8, 5, 10, 8, 9, 7, 6, 7],\n          [15, 12, 10, 13, 16, 18, 19, 14, 17, 15, 12, 10, 13, 16, 18, 19, 14, 17, 15, 12],\n          [21, 20, 23, 22, 20, 19, 25, 24, 22, 21, 20, 23, 22, 20, 19, 25, 24, 22, 21, 20],\n          [18, 15, 16, 20, 22, 21, 19, 20, 18, 15, 16, 20, 22, 21, 19, 20, 18, 15, 16, 18],\n          [25, 24, 22, 20, 25, 23, 22, 21, 24, 22, 20, 25, 23, 22, 21, 24, 22, 20, 25, 23],\n          [18, 17, 16, 19, 21, 20, 18, 22, 17, 16, 19, 21, 20, 18, 22, 17, 16, 19, 21, 20],\n          [30, 32, 29, 27, 31, 33, 28, 29, 30, 32, 29, 27, 31, 33, 28, 29, 30, 32, 29, 30]]\n\n# Transforming the data into a suitable format\ndata = []\nfor age_group, death_values in zip(age_groups, deaths):\n    for value in death_values:\n        data.append([age_group, value])\n\n# Converting data to pandas DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Age Group', 'Number of Deaths'])\n\n# Creating the violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Age Group', y='Number of Deaths', data=df)\nplt.title('Distribution of Deaths Across Age Groups')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the color of the violins that contain the center point of the bounding box to #3b6e71. Also, for those same violins, change the linestyle to 'dashdot'.",
        "Input_image": "./test_dataset/Violin/Violin_15fb3997ec576474/Visual_figure.png",
        "Test_code": "# Necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Specifying data\nage_groups = ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70+']\ndeaths = [[10, 12, 15, 8, 14, 13, 9, 11, 10, 12, 13, 8, 15, 16, 14, 13, 12, 11, 10, 9],\n          [5, 7, 6, 9, 8, 7, 6, 4, 9, 12, 7, 6, 8, 5, 10, 8, 9, 7, 6, 7],\n          [15, 12, 10, 13, 16, 18, 19, 14, 17, 15, 12, 10, 13, 16, 18, 19, 14, 17, 15, 12],\n          [21, 20, 23, 22, 20, 19, 25, 24, 22, 21, 20, 23, 22, 20, 19, 25, 24, 22, 21, 20],\n          [18, 15, 16, 20, 22, 21, 19, 20, 18, 15, 16, 20, 22, 21, 19, 20, 18, 15, 16, 18],\n          [25, 24, 22, 20, 25, 23, 22, 21, 24, 22, 20, 25, 23, 22, 21, 24, 22, 20, 25, 23],\n          [18, 17, 16, 19, 21, 20, 18, 22, 17, 16, 19, 21, 20, 18, 22, 17, 16, 19, 21, 20],\n          [30, 32, 29, 27, 31, 33, 28, 29, 30, 32, 29, 27, 31, 33, 28, 29, 30, 32, 29, 30]]\n\n# Transforming the data into a suitable format\ndata = []\nfor age_group, death_values in zip(age_groups, deaths):\n    for value in death_values:\n        data.append([age_group, value])\n\n# Converting data to pandas DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Age Group', 'Number of Deaths'])\n\n# Creating the violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Age Group', y='Number of Deaths', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 3:  # Assuming '30-40' is the target object\n        violin.set_facecolor('#3b6e71')\n        violin.set_edgecolor('black')\n        violin.set_linestyle('dashdot')\nplt.title('Distribution of Deaths Across Age Groups')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "3",
        "Test_image": "./test_dataset/Violin/Violin_15fb3997ec576474/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_15fb3997ec576474/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_15fb3997ec576474/figure.png"
    },
    {
        "id": "Violin_d47a804b5cf33ec8",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n# Data for each genre\npop = [145, 152, 136, 143, 154, 158, 140, 150, 132, 136, 142, 148, 137, 157, 151, 133, 146, 154, 138, 145]\nrock = [103, 98, 95, 101, 97, 94, 100, 106, 93, 105, 99, 97, 102, 108, 101, 96, 104, 99, 102, 100]\nhip_hop = [85, 91, 84, 93, 88, 85, 92, 88, 83, 94, 90, 95, 87, 91, 86, 89, 93, 87, 92, 82]\nelectronic = [74, 79, 81, 83, 78, 76, 73, 79, 77, 80, 75, 84, 78, 82, 79, 80, 76, 81, 77, 75]\ncountry = [67, 62, 65, 68, 61, 64, 63, 60, 66, 62, 69, 58, 67, 61, 63, 60, 64, 66, 65, 59]\n\n# Combine data into a format suitable for seaborn\ndata = pop + rock + hip_hop + electronic + country\nlabels = ['Pop']*len(pop) + ['Rock']*len(rock) + ['Hip Hop']*len(hip_hop) + ['Electronic']*len(electronic) + ['Country']*len(country)\n\n# Create a DataFrame\ndf = pd.DataFrame({'Genre': labels, 'Streams': data})\n\n# Create the violinplot with the data\nplt.figure(figsize=(10, 6))\nsns.violinplot(x=\"Genre\", y=\"Streams\", data=df)\n\n# Set a title and labels\nplt.title('Music Genre Preferences')\nplt.xlabel('Genre')\nplt.ylabel('No. of Monthly Streams')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the violins that contain the center point of the bounding box to True, and also make this violin's box part invisible.",
        "Input_image": "./test_dataset/Violin/Violin_d47a804b5cf33ec8/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n# Data for each genre\npop = [145, 152, 136, 143, 154, 158, 140, 150, 132, 136, 142, 148, 137, 157, 151, 133, 146, 154, 138, 145]\nrock = [103, 98, 95, 101, 97, 94, 100, 106, 93, 105, 99, 97, 102, 108, 101, 96, 104, 99, 102, 100]\nhip_hop = [85, 91, 84, 93, 88, 85, 92, 88, 83, 94, 90, 95, 87, 91, 86, 89, 93, 87, 92, 82]\nelectronic = [74, 79, 81, 83, 78, 76, 73, 79, 77, 80, 75, 84, 78, 82, 79, 80, 76, 81, 77, 75]\ncountry = [67, 62, 65, 68, 61, 64, 63, 60, 66, 62, 69, 58, 67, 61, 63, 60, 64, 66, 65, 59]\n\n# Combine data into a format suitable for seaborn\ndata = pop + rock + hip_hop + electronic + country\nlabels = ['Pop']*len(pop) + ['Rock']*len(rock) + ['Hip Hop']*len(hip_hop) + ['Electronic']*len(electronic) + ['Country']*len(country)\n\n# Create a DataFrame\ndf = pd.DataFrame({'Genre': labels, 'Streams': data})\n\n# Create the violinplot with the data\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x=\"Genre\", y=\"Streams\", data=df)\n\n# Set a title and labels\nplt.title('Music Genre Preferences')\nplt.xlabel('Genre')\nplt.ylabel('No. of Monthly Streams')\n\n# Modify the clipping state and visibility of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Rock' is the target object\n        violin.set_clip_on(True)\n        violin.set_visible(False)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_d47a804b5cf33ec8/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_d47a804b5cf33ec8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_d47a804b5cf33ec8/figure.png"
    },
    {
        "id": "Violin_85bc1f1210ca7e0c",
        "Input_code": "import pandas as pd\n# import required libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Prepare the bond lengths data\nStellarite_lengths = [135, 140, 138, 142, 137, 139, 136, 141]\nCelestene_lengths = [132, 136, 134, 137, 131, 135, 133, 139]\nNebulon_lengths = [130, 133, 128, 135, 131, 137, 129, 136]\n\n# Pack all bond lengths into a single list\nall_lengths = Stellarite_lengths + Celestene_lengths + Nebulon_lengths\n\n# Create labels for each bond length\nall_labels = ['Stellarite']*len(Stellarite_lengths) + ['Celestene']*len(Celestene_lengths) + ['Nebulon']*len(Nebulon_lengths)\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x=all_labels, y=all_lengths)\n\n# Add title and labels\nplt.title('Carbon-Carbon Bond Lengths of Interstellar Compounds')\nplt.xlabel('Compounds')\nplt.ylabel('Bond Lengths (pm)')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the violins containing the center point of the bounding box to the area defined by the points (300, 200) with a width of 260 and a height of 300 using matplotlib.transforms.Bbox. Also, update the line color of the violins that contain the center point of the bounding box to #a1ff29.",
        "Input_image": "./test_dataset/Violin/Violin_85bc1f1210ca7e0c/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.transforms import Bbox\n\n# Prepare the bond lengths data\nStellarite_lengths = [135, 140, 138, 142, 137, 139, 136, 141]\nCelestene_lengths = [132, 136, 134, 137, 131, 135, 133, 139]\nNebulon_lengths = [130, 133, 128, 135, 131, 137, 129, 136]\n\n# Pack all bond lengths into a single list\nall_lengths = Stellarite_lengths + Celestene_lengths + Nebulon_lengths\n\n# Create labels for each bond length\nall_labels = ['Stellarite']*len(Stellarite_lengths) + ['Celestene']*len(Celestene_lengths) + ['Nebulon']*len(Nebulon_lengths)\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x=all_labels, y=all_lengths)\n\n# Set clip box and line color for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Celestene' is the target object\n        violin.set_clip_box(Bbox.from_bounds(300, 200, 260, 300))\n        violin.set_edgecolor('#a1ff29')\n\n# Add title and labels\nplt.title('Carbon-Carbon Bond Lengths of Interstellar Compounds')\nplt.xlabel('Compounds')\nplt.ylabel('Bond Lengths (pm)')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_85bc1f1210ca7e0c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_85bc1f1210ca7e0c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_85bc1f1210ca7e0c/figure.png"
    },
    {
        "id": "Violin_3f1a24fbd5867dbc",
        "Input_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Industry 1': [3, 5, 7, 9, 12],\n    'Industry 2': [2, 4, 6, 8, 10, 12, 14],\n    'Industry 3': [6, 8, 10, 12, 14, 16, 18],\n    'Industry 4': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'Industry 5': [5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15]\n}\n\n# Format the data for seaborn\nformatted_data = [(industry, growth_rate) for industry, growth_rates in data.items() for growth_rate in growth_rates]\n\n# Create the dataframe\ndf = pd.DataFrame(formatted_data, columns=['Industry', 'Growth Rate'])\n\n# Create the plot\nplt.figure(figsize=(10,8))\nsns.violinplot(x='Growth Rate', y='Industry', data=df)\n\nplt.title('Growth Rates of Various Industries over a Five-Year Period')\nplt.xlabel('Growth Rate (%)')\nplt.ylabel('Industry')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "For the portion at the center point of the bounding box, set the transparency of the violins to 0.82. Also, change the face color of these violins to #e2c047.",
        "Input_image": "./test_dataset/Violin/Violin_3f1a24fbd5867dbc/Visual_figure.png",
        "Test_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Industry 1': [3, 5, 7, 9, 12],\n    'Industry 2': [2, 4, 6, 8, 10, 12, 14],\n    'Industry 3': [6, 8, 10, 12, 14, 16, 18],\n    'Industry 4': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'Industry 5': [5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15]\n}\n\n# Format the data for seaborn\nformatted_data = [(industry, growth_rate) for industry, growth_rates in data.items() for growth_rate in growth_rates]\n\n# Create the dataframe\ndf = pd.DataFrame(formatted_data, columns=['Industry', 'Growth Rate'])\n\n# Create the plot\nplt.figure(figsize=(10,8))\nvp = sns.violinplot(x='Growth Rate', y='Industry', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Industry 2' is the target object\n        violin.set_facecolor('#e2c047')\n        violin.set_alpha(0.82)\nplt.title('Growth Rates of Various Industries over a Five-Year Period')\nplt.xlabel('Growth Rate (%)')\nplt.ylabel('Industry')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_3f1a24fbd5867dbc/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_3f1a24fbd5867dbc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_3f1a24fbd5867dbc/figure.png"
    },
    {
        "id": "Violin_ee9d2e019d1ce8f2",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars']\nNitrogen = [[0.02, 0.03, 0.01, 0.02, 0.03, 0.02, 0.03, 0.02, 0.01, 0.02],\n            [0.05, 0.04, 0.06, 0.05, 0.07, 0.06, 0.05, 0.04, 0.06, 0.05],\n            [0.78, 0.77, 0.79, 0.76, 0.80, 0.78, 0.79, 0.77, 0.78, 0.79],\n            [0.02, 0.01, 0.03, 0.02, 0.04, 0.03, 0.02, 0.01, 0.03, 0.02]]\n\nOxygen = [[0.01, 0.02, 0.01, 0.03, 0.02, 0.01, 0.02, 0.01, 0.03, 0.02],\n          [0.03, 0.04, 0.05, 0.03, 0.06, 0.04, 0.03, 0.05, 0.04, 0.03],\n          [0.21, 0.22, 0.20, 0.23, 0.25, 0.24, 0.22, 0.21, 0.23, 0.20],\n          [0.01, 0.02, 0.01, 0.03, 0.02, 0.01, 0.02, 0.01, 0.03, 0.02]]\n\nCarbon_Dioxide = [[0.05, 0.04, 0.06, 0.05, 0.07, 0.06, 0.05, 0.04, 0.06, 0.05],\n                  [0.80, 0.78, 0.82, 0.79, 0.85, 0.81, 0.80, 0.78, 0.82, 0.79],\n                  [0.03, 0.02, 0.04, 0.03, 0.05, 0.04, 0.03, 0.02, 0.04, 0.03],\n                  [0.95, 0.94, 0.96, 0.95, 0.97, 0.96, 0.94, 0.95, 0.96, 0.95]]\n\nMethane = [[0.001, 0.002, 0.001, 0.003, 0.002, 0.001, 0.002, 0.001, 0.003, 0.002],\n           [0.004, 0.003, 0.005, 0.004, 0.006, 0.004, 0.003, 0.005, 0.004, 0.003],\n           [0.0002, 0.0003, 0.0001, 0.0004, 0.0002, 0.0003, 0.0001, 0.0002, 0.0004, 0.0002],\n           [0.002, 0.001, 0.003, 0.002, 0.004, 0.003, 0.001, 0.002, 0.003, 0.002]]\n\ncomponents = [Nitrogen, Oxygen, Carbon_Dioxide, Methane]\nlabels = ['Nitrogen', 'Oxygen', 'Carbon Dioxide', 'Methane']\n\n# Plotting\nfig, axs = plt.subplots(2, 2, figsize=(15, 10))\n\nfor ax, component, label in zip(axs.flat, components, labels):\n    sns.violinplot(data=component, ax=ax)\n    ax.set_xticklabels(planets)\n    ax.set_title(label)\n    ax.set_ylabel('Concentration')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add an outline to the violins that contain the center point of the bounding box with a line thickness of 1.69 and a color of '#3a3105'.",
        "Input_image": "./test_dataset/Violin/Violin_ee9d2e019d1ce8f2/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars']\nNitrogen = [[0.02, 0.03, 0.01, 0.02, 0.03, 0.02, 0.03, 0.02, 0.01, 0.02],\n            [0.05, 0.04, 0.06, 0.05, 0.07, 0.06, 0.05, 0.04, 0.06, 0.05],\n            [0.78, 0.77, 0.79, 0.76, 0.80, 0.78, 0.79, 0.77, 0.78, 0.79],\n            [0.02, 0.01, 0.03, 0.02, 0.04, 0.03, 0.02, 0.01, 0.03, 0.02]]\n\nOxygen = [[0.01, 0.02, 0.01, 0.03, 0.02, 0.01, 0.02, 0.01, 0.03, 0.02],\n          [0.03, 0.04, 0.05, 0.03, 0.06, 0.04, 0.03, 0.05, 0.04, 0.03],\n          [0.21, 0.22, 0.20, 0.23, 0.25, 0.24, 0.22, 0.21, 0.23, 0.20],\n          [0.01, 0.02, 0.01, 0.03, 0.02, 0.01, 0.02, 0.01, 0.03, 0.02]]\n\nCarbon_Dioxide = [[0.05, 0.04, 0.06, 0.05, 0.07, 0.06, 0.05, 0.04, 0.06, 0.05],\n                  [0.80, 0.78, 0.82, 0.79, 0.85, 0.81, 0.80, 0.78, 0.82, 0.79],\n                  [0.03, 0.02, 0.04, 0.03, 0.05, 0.04, 0.03, 0.02, 0.04, 0.03],\n                  [0.95, 0.94, 0.96, 0.95, 0.97, 0.96, 0.94, 0.95, 0.96, 0.95]]\n\nMethane = [[0.001, 0.002, 0.001, 0.003, 0.002, 0.001, 0.002, 0.001, 0.003, 0.002],\n           [0.004, 0.003, 0.005, 0.004, 0.006, 0.004, 0.003, 0.005, 0.004, 0.003],\n           [0.0002, 0.0003, 0.0001, 0.0004, 0.0002, 0.0003, 0.0001, 0.0002, 0.0004, 0.0002],\n           [0.002, 0.001, 0.003, 0.002, 0.004, 0.003, 0.001, 0.002, 0.003, 0.002]]\n\ncomponents = [Nitrogen, Oxygen, Carbon_Dioxide, Methane]\nlabels = ['Nitrogen', 'Oxygen', 'Carbon Dioxide', 'Methane']\n\n# Plotting\nfig, axs = plt.subplots(2, 2, figsize=(15, 10))\n\nfor ax, component, label in zip(axs.flat, components, labels):\n    vp = sns.violinplot(data=component, ax=ax)\n    ax.set_xticklabels(planets)\n    ax.set_title(label)\n    ax.set_ylabel('Concentration')\n    for i, violin in enumerate(vp.collections):\n        if i in [0, 2]:\n            violin.set_edgecolor('#3a3105')\n            violin.set_linewidth(1.69)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Violin/Violin_ee9d2e019d1ce8f2/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_ee9d2e019d1ce8f2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_ee9d2e019d1ce8f2/figure.png"
    },
    {
        "id": "Violin_bb227183211ae03e",
        "Input_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Industry 1': [3, 5, 7, 9, 12],\n    'Industry 2': [2, 4, 6, 8, 10, 12, 14],\n    'Industry 3': [6, 8, 10, 12, 14, 16, 18],\n    'Industry 4': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'Industry 5': [5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15]\n}\n\n# Format the data for seaborn\nformatted_data = [(industry, growth_rate) for industry, growth_rates in data.items() for growth_rate in growth_rates]\n\n# Create the dataframe\ndf = pd.DataFrame(formatted_data, columns=['Industry', 'Growth Rate'])\n\n# Create the plot\nplt.figure(figsize=(10,8))\nsns.violinplot(x='Growth Rate', y='Industry', data=df)\n\nplt.title('Growth Rates of Various Industries over a Five-Year Period')\nplt.xlabel('Growth Rate (%)')\nplt.ylabel('Industry')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the violin that contains the center point of the bounding box to 0.49.",
        "Input_image": "./test_dataset/Violin/Violin_bb227183211ae03e/Visual_figure.png",
        "Test_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Industry 1': [3, 5, 7, 9, 12],\n    'Industry 2': [2, 4, 6, 8, 10, 12, 14],\n    'Industry 3': [6, 8, 10, 12, 14, 16, 18],\n    'Industry 4': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'Industry 5': [5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15]\n}\n\n# Format the data for seaborn\nformatted_data = [(industry, growth_rate) for industry, growth_rates in data.items() for growth_rate in growth_rates]\n\n# Create the dataframe\ndf = pd.DataFrame(formatted_data, columns=['Industry', 'Growth Rate'])\n\n# Create the plot\nplt.figure(figsize=(10,8))\nvp = sns.violinplot(x='Growth Rate', y='Industry', data=df)\n\n# Set transparency for the target violin\nfor i, violin in enumerate(vp.collections):\n    if i == 2:  # Assuming 'Industry 3' is the target\n        violin.set_alpha(0.49)\n\nplt.title('Growth Rates of Various Industries over a Five-Year Period')\nplt.xlabel('Growth Rate (%)')\nplt.ylabel('Industry')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Violin/Violin_bb227183211ae03e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_bb227183211ae03e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_bb227183211ae03e/figure.png"
    },
    {
        "id": "Violin_466d2dce0ce68b45",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndata = {\n    \"Fish\": [150, 120, 140, 160, 130, 110, 170, 180, 125, 135],\n    \"Invertebrates\": [80, 90, 100, 85, 95, 105, 110, 75, 85, 95],\n    \"Coral\": [50, 60, 55, 65, 70, 45, 75, 65, 55, 50],\n    \"Algae\": [40, 45, 50, 55, 60, 35, 65, 70, 40, 50]\n}\n\n# Create a dataframe\ndf = pd.DataFrame(data)\n\n# Melt the data\ndf_melt = df.melt(var_name='Species', value_name='Richness')\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create violin plot\nsns.violinplot(ax=ax, x=\"Species\", y=\"Richness\", data=df_melt)\n\n# Set title and labels\nax.set_title('Species richness of marine organisms in a coral reef')\nax.set_xlabel('Species')\nax.set_ylabel('Richness')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the violins that contain the center point of the bounding box to 0.34.",
        "Input_image": "./test_dataset/Violin/Violin_466d2dce0ce68b45/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndata = {\n    \"Fish\": [150, 120, 140, 160, 130, 110, 170, 180, 125, 135],\n    \"Invertebrates\": [80, 90, 100, 85, 95, 105, 110, 75, 85, 95],\n    \"Coral\": [50, 60, 55, 65, 70, 45, 75, 65, 55, 50],\n    \"Algae\": [40, 45, 50, 55, 60, 35, 65, 70, 40, 50]\n}\n\n# Create a dataframe\ndf = pd.DataFrame(data)\n\n# Melt the data\ndf_melt = df.melt(var_name='Species', value_name='Richness')\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create violin plot\nvp = sns.violinplot(ax=ax, x=\"Species\", y=\"Richness\", data=df_melt)\n\n# Set transparency for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Invertebrates' is the target object\n        violin.set_alpha(0.34)\n\n# Set title and labels\nax.set_title('Species richness of marine organisms in a coral reef')\nax.set_xlabel('Species')\nax.set_ylabel('Richness')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_466d2dce0ce68b45/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_466d2dce0ce68b45/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_466d2dce0ce68b45/figure.png"
    },
    {
        "id": "Violin_b265969ac2dbb07b",
        "Input_code": "import pandas as pd\n# Importing required libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Chemical reactions:\nreactions = ['Methane Oxidation', 'Ammonia Synthesis', 'Water Splitting']\n\n# Reaction rates:\nmoles_per_litre_second = [\n  [0.05, 0.04, 0.07, 0.06, 0.05, 0.06, 0.03, 0.08, 0.07, 0.05], # Methane Oxidation\n  [0.02, 0.03, 0.01, 0.02, 0.03, 0.02, 0.02, 0.01, 0.03, 0.02], # Ammonia Synthesis\n  [0.03, 0.02, 0.04, 0.03, 0.04, 0.03, 0.02, 0.05, 0.04, 0.03]  # Water Splitting\n]\n\n# Preparing data for violin plot\ndata = []\nfor reaction, rates in zip(reactions, moles_per_litre_second):\n    for rate in rates:\n        data.append([reaction, rate])\n\n# Plot Settings\nplt.figure(figsize=(10,6))\nsns.violinplot(x=[item[0] for item in data], y=[item[1] for item in data])\nplt.title('Violin plot of Reaction Rates in the Cosmos')\nplt.xlabel('Chemical Reactions')\nplt.ylabel('Reaction Rates (mol/L/s)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the median line of the violin that contains the center point of the bounding box to #293201. Also, adjust this part to align with the figure's coordinate system.",
        "Input_image": "./test_dataset/Violin/Violin_b265969ac2dbb07b/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Importing required libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Chemical reactions:\nreactions = ['Methane Oxidation', 'Ammonia Synthesis', 'Water Splitting']\n\n# Reaction rates:\nmoles_per_litre_second = [\n  [0.05, 0.04, 0.07, 0.06, 0.05, 0.06, 0.03, 0.08, 0.07, 0.05], # Methane Oxidation\n  [0.02, 0.03, 0.01, 0.02, 0.03, 0.02, 0.02, 0.01, 0.03, 0.02], # Ammonia Synthesis\n  [0.03, 0.02, 0.04, 0.03, 0.04, 0.03, 0.02, 0.05, 0.04, 0.03]  # Water Splitting\n]\n\n# Preparing data for violin plot\ndata = []\nfor reaction, rates in zip(reactions, moles_per_litre_second):\n    for rate in rates:\n        data.append([reaction, rate])\n\n# Plot Settings\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=[item[0] for item in data], y=[item[1] for item in data])\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Ammonia Synthesis' is the target object\n        violin.set_transform(plt.gcf().transFigure)\nfor i,line in enumerate(plt.gca().lines):\n    if i==3*1+1:\n        line.set_color('#293201')\nplt.title('Violin plot of Reaction Rates in the Cosmos')\nplt.xlabel('Chemical Reactions')\nplt.ylabel('Reaction Rates (mol/L/s)')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_b265969ac2dbb07b/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_b265969ac2dbb07b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_b265969ac2dbb07b/figure.png"
    },
    {
        "id": "Violin_96a4ada427894c31",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Dataset\nevs_emissions = [78, 80, 76, 79, 75, 74, 77, 81, 82, 85, 83]\ngps_emissions = [170, 175, 172, 168, 173, 169, 171, 174, 176, 170, 173]\n\n# Combine the data\ndata = evs_emissions + gps_emissions\ntypes = ['EVs']*len(evs_emissions) + ['GPs']*len(gps_emissions)\n\n# Create a DataFrame\ndf = pd.DataFrame({'Type': types, 'Carbon Emissions (g/km)': data})\n\n# Create the violin plot\nplt.figure(figsize=(8, 6))\nsns.violinplot(x='Type', y='Carbon Emissions (g/km)', data=df)\nplt.title('Comparison of Carbon Emissions (g/km) of EVs vs GPs')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the violins that contain the center point of the bounding box to 0.47 and change their color to #773685.",
        "Input_image": "./test_dataset/Violin/Violin_96a4ada427894c31/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Dataset\nevs_emissions = [78, 80, 76, 79, 75, 74, 77, 81, 82, 85, 83]\ngps_emissions = [170, 175, 172, 168, 173, 169, 171, 174, 176, 170, 173]\n\n# Combine the data\ndata = evs_emissions + gps_emissions\ntypes = ['EVs']*len(evs_emissions) + ['GPs']*len(gps_emissions)\n\n# Create a DataFrame\ndf = pd.DataFrame({'Type': types, 'Carbon Emissions (g/km)': data})\n\n# Create the violin plot\nplt.figure(figsize=(8, 6))\nvp = sns.violinplot(x='Type', y='Carbon Emissions (g/km)', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 0:  # Assuming 'EVs' is the target object\n        violin.set_facecolor('#773685')\n        violin.set_alpha(0.47)\nplt.title('Comparison of Carbon Emissions (g/km) of EVs vs GPs')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Violin/Violin_96a4ada427894c31/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_96a4ada427894c31/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_96a4ada427894c31/figure.png"
    },
    {
        "id": "Violin_c3c440aa2fc07e01",
        "Input_code": "import pandas as pd\n# Importing required libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndowntown_temps = [18.5, 19.2, 20.1, 21.4, 22.0, 20.8, 20.3, 21.7, 22.5, 20.9]\nsuburban_temps = [17.2, 17.9, 18.8, 19.2, 18.6, 17.8, 19.0, 18.7, 18.3, 19.5]\nindustrial_temps = [21.8, 22.5, 23.0, 23.6, 23.2, 22.9, 21.5, 23.1, 22.8, 24.0]\n\n# Preparing the data for plotting\nplot_data = [downtown_temps, suburban_temps, industrial_temps]\nlabels = [\"Downtown District\", \"Suburban Area\", \"Industrial Zone\"]\n\n# Creating the violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(data=plot_data)\nplt.xticks([0, 1, 2], labels)\n\n# Setting the title and labels\nplt.title('Dynamic Temperature Mapping in Urban Areas')\nplt.xlabel('Neighborhoods')\nplt.ylabel('Temperature (\u00b0C)')\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violins that contain the center point of the bounding box to #3aaf73. Also, apply a stroke to these violins with a linewidth of 4.23 and a foreground color of #746165.",
        "Input_image": "./test_dataset/Violin/Violin_c3c440aa2fc07e01/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Importing required libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndowntown_temps = [18.5, 19.2, 20.1, 21.4, 22.0, 20.8, 20.3, 21.7, 22.5, 20.9]\nsuburban_temps = [17.2, 17.9, 18.8, 19.2, 18.6, 17.8, 19.0, 18.7, 18.3, 19.5]\nindustrial_temps = [21.8, 22.5, 23.0, 23.6, 23.2, 22.9, 21.5, 23.1, 22.8, 24.0]\n\n# Preparing the data for plotting\nplot_data = [downtown_temps, suburban_temps, industrial_temps]\nlabels = [\"Downtown District\", \"Suburban Area\", \"Industrial Zone\"]\n\n# Creating the violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(data=plot_data)\nplt.xticks([0, 1, 2], labels)\n\n# Setting the title and labels\nplt.title('Dynamic Temperature Mapping in Urban Areas')\nplt.xlabel('Neighborhoods')\nplt.ylabel('Temperature (\u00b0C)')\n\n# Modifying the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Suburban Area' is the target object\n        violin.set_facecolor('#3aaf73')\n        violin.set_edgecolor('#746165')\n        violin.set_linewidth(4.230221998416608)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_c3c440aa2fc07e01/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_c3c440aa2fc07e01/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_c3c440aa2fc07e01/figure.png"
    },
    {
        "id": "Violin_b92839f8921d6545",
        "Input_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nmeningioma_vol = [45, 50, 47, 55, 52, 60, 48, 53, 50, 58]\nglioblastoma_vol = [75, 80, 82, 78, 85, 79, 76, 81, 83, 77]\npituitary_adenoma_vol = [30, 35, 32, 38, 37, 33, 36, 34, 39, 31]\nastrocytoma_vol = [65, 70, 68, 72, 69, 67, 73, 71, 66, 74]\nhemangioblastoma_vol = [40, 42, 45, 44, 48, 47, 43, 46, 41, 49]\n\ndata = [meningioma_vol, glioblastoma_vol, pituitary_adenoma_vol, astrocytoma_vol, hemangioblastoma_vol]\nlabels = [\"Meningioma\", \"Glioblastoma\", \"Pituitary Adenoma\", \"Astrocytoma\", \"Hemangioblastoma\"]\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(data=data)\nplt.xticks([0, 1, 2, 3, 4], labels)\nplt.title(\"Brain Tumor Volume Analysis\")\nplt.ylabel(\"Tumor Volume (cc)\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the violins that contain the center point of the bounding box to 0.36. Additionally, for these same points, set the clipping state of the violins to False.",
        "Input_image": "./test_dataset/Violin/Violin_b92839f8921d6545/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nmeningioma_vol = [45, 50, 47, 55, 52, 60, 48, 53, 50, 58]\nglioblastoma_vol = [75, 80, 82, 78, 85, 79, 76, 81, 83, 77]\npituitary_adenoma_vol = [30, 35, 32, 38, 37, 33, 36, 34, 39, 31]\nastrocytoma_vol = [65, 70, 68, 72, 69, 67, 73, 71, 66, 74]\nhemangioblastoma_vol = [40, 42, 45, 44, 48, 47, 43, 46, 41, 49]\n\ndata = [meningioma_vol, glioblastoma_vol, pituitary_adenoma_vol, astrocytoma_vol, hemangioblastoma_vol]\nlabels = [\"Meningioma\", \"Glioblastoma\", \"Pituitary Adenoma\", \"Astrocytoma\", \"Hemangioblastoma\"]\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(data=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Glioblastoma' is the target object\n        violin.set_alpha(0.36)\n        violin.set_clip_on(False)\nplt.xticks([0, 1, 2, 3, 4], labels)\nplt.title(\"Brain Tumor Volume Analysis\")\nplt.ylabel(\"Tumor Volume (cc)\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_b92839f8921d6545/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_b92839f8921d6545/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_b92839f8921d6545/figure.png"
    },
    {
        "id": "Violin_56fce563c79801c6",
        "Input_code": "import pandas as pd\n# Import necessary libraries pyplot and seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define Data\n\nslope_25_35 = [0.8, 1.2, 1.0, 1.1, 0.9, 1.3, 1.0, 0.9, 1.2, 1.1, 1.0, 1.3]\nslope_35_45 = [1.5, 1.8, 1.6, 1.7, 1.9, 1.5, 1.7, 1.6, 1.8, 1.9, 1.6, 1.5]\nslope_45_55 = [2.2, 2.4, 2.0, 2.1, 2.3, 2.5, 2.2, 2.1, 2.4, 2.3, 2.0, 2.2]\nslope_55_65 = [2.8, 3.0, 2.7, 2.9, 2.6, 3.1, 2.8, 2.7, 3.0, 2.9, 3.1, 2.8]\n\n# Store the data and labels together\ndata = [slope_25_35, slope_35_45, slope_45_55, slope_55_65]\nlabels = ['25-35 deg', '35-45 deg', '45-55 deg', '55-65 deg']\n\n# Create the violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data, palette=\"Set3\")\n\n# Set title and labels\nplt.title('Avalanche Dynamics in Mountainous Regions')\nplt.xlabel('Slope Inclination (degrees)')\nplt.ylabel('Snow Slab Depth (meters)')\nplt.xticks(ticks=range(4), labels=labels)\n\n# Show plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add an outline around the violins that contain the center point of the bounding box, using a line thickness of 1.63 and the color '#388b28'.",
        "Input_image": "./test_dataset/Violin/Violin_56fce563c79801c6/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nslope_25_35 = [0.8, 1.2, 1.0, 1.1, 0.9, 1.3, 1.0, 0.9, 1.2, 1.1, 1.0, 1.3]\nslope_35_45 = [1.5, 1.8, 1.6, 1.7, 1.9, 1.5, 1.7, 1.6, 1.8, 1.9, 1.6, 1.5]\nslope_45_55 = [2.2, 2.4, 2.0, 2.1, 2.3, 2.5, 2.2, 2.1, 2.4, 2.3, 2.0, 2.2]\nslope_55_65 = [2.8, 3.0, 2.7, 2.9, 2.6, 3.1, 2.8, 2.7, 3.0, 2.9, 3.1, 2.8]\n\ndata = [slope_25_35, slope_35_45, slope_45_55, slope_55_65]\nlabels = ['25-35 deg', '35-45 deg', '45-55 deg', '55-65 deg']\n\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data, palette=\"Set3\")\n\nfor i, violin in enumerate(vp.collections):\n    if i in [0, 2]:\n        violin.set_edgecolor('#388b28')\n        violin.set_linewidth(1.63)\n\nplt.title('Avalanche Dynamics in Mountainous Regions')\nplt.xlabel('Slope Inclination (degrees)')\nplt.ylabel('Snow Slab Depth (meters)')\nplt.xticks(ticks=range(4), labels=labels)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0, 2",
        "Test_image": "./test_dataset/Violin/Violin_56fce563c79801c6/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_56fce563c79801c6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_56fce563c79801c6/figure.png"
    },
    {
        "id": "Violin_cb3288bbf203cc13",
        "Input_code": "# Library imports\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\ncrop_types = [\"Wheat\", \"Maize\",\"Rice\",\"Soybeans\",\"Barley\"]\ndata = [[2.5, 2.3, 2.6, 2.4, 2.7, 2.8, 2.9, 2.7, 2.8, 2.6],\n        [3.8, 4.0, 3.9, 3.7, 3.6, 3.8, 3.9, 4.2, 4.1, 3.9],\n        [6.2, 6.4, 6.5, 6.3, 6.6, 6.4, 6.8, 6.7, 6.6, 6.5],\n        [2.0, 2.2, 2.1, 1.9, 2.0, 2.1, 2.2, 2.3, 2.1, 2.0],\n        [2.8, 2.9, 3.0, 2.8, 2.7, 3.1, 3.0, 2.9, 3.1, 2.8]]\n\n# Figure initialization\nplt.figure(figsize=(10, 6))\n\n# Creating violin plot\nsns.violinplot(data=data)\n\n# Setting x and y axes labels\nplt.xlabel('Crops')\nplt.ylabel('Yield (metric tons per hectare)')\n\n# Setting x-axis tick labels to the crop names\nplt.xticks(list(range(len(crop_types))), crop_types)\n\n# Setting plot title\nplt.title('Effects of Climate Change on Global Crop Yields (Last Decade)')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the box part of the violin that contains the center point of the bounding box to True. Also, update its transformation to align with the figure's coordinate system.",
        "Input_image": "./test_dataset/Violin/Violin_cb3288bbf203cc13/Visual_figure.png",
        "Test_code": "# Library imports\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\ncrop_types = [\"Wheat\", \"Maize\",\"Rice\",\"Soybeans\",\"Barley\"]\ndata = [[2.5, 2.3, 2.6, 2.4, 2.7, 2.8, 2.9, 2.7, 2.8, 2.6],\n        [3.8, 4.0, 3.9, 3.7, 3.6, 3.8, 3.9, 4.2, 4.1, 3.9],\n        [6.2, 6.4, 6.5, 6.3, 6.6, 6.4, 6.8, 6.7, 6.6, 6.5],\n        [2.0, 2.2, 2.1, 1.9, 2.0, 2.1, 2.2, 2.3, 2.1, 2.0],\n        [2.8, 2.9, 3.0, 2.8, 2.7, 3.1, 3.0, 2.9, 3.1, 2.8]]\n\n# Figure initialization\nplt.figure(figsize=(10, 6))\n\n# Creating violin plot\nvp = sns.violinplot(data=data)\n\n# Setting x and y axes labels\nplt.xlabel('Crops')\nplt.ylabel('Yield (metric tons per hectare)')\n\n# Setting x-axis tick labels to the crop names\nplt.xticks(list(range(len(crop_types))), crop_types)\n\n# Setting plot title\nplt.title('Effects of Climate Change on Global Crop Yields (Last Decade)')\n\n# Modifying the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Maize' is the target object\n        violin.set_animated(True)\n        violin.set_transform(plt.gcf().transFigure)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_cb3288bbf203cc13/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_cb3288bbf203cc13/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_cb3288bbf203cc13/figure.png"
    },
    {
        "id": "Violin_32a513d079876215",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data \ntemp_25 = [18, 21, 19, 22, 20, 19, 21, 20, 19, 22, 20, 19, 20, 21, 20, 19, 21, 19, 20, 21]\ntemp_30 = [21, 23, 22, 24, 23, 22, 23, 22, 24, 23, 23, 22, 23, 24, 22, 23, 22, 23, 24, 22]\ntemp_35 = [20, 19, 22, 19, 20, 21, 19, 21, 19, 22, 19, 20, 19, 21, 19, 21, 20, 21, 19, 22]\n\ntemps = ['25\u00b0C']*len(temp_25) + ['30\u00b0C']*len(temp_30) + ['35\u00b0C']*len(temp_35)\nheights = temp_25 + temp_30 + temp_35\n\n# Plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=temps, y=heights)\nplt.title('Impact of Temperature Conditions on plant growth')\nplt.xlabel('Temperature Conditions')\nplt.ylabel('Plant height (cm)')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the fill pattern of the violin that contains the center point of the bounding box to a dashed O hatch pattern, and set its color to #8f8cfa.",
        "Input_image": "./test_dataset/Violin/Violin_32a513d079876215/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data \ntemp_25 = [18, 21, 19, 22, 20, 19, 21, 20, 19, 22, 20, 19, 20, 21, 20, 19, 21, 19, 20, 21]\ntemp_30 = [21, 23, 22, 24, 23, 22, 23, 22, 24, 23, 23, 22, 23, 24, 22, 23, 22, 23, 24, 22]\ntemp_35 = [20, 19, 22, 19, 20, 21, 19, 21, 19, 22, 19, 20, 19, 21, 19, 21, 20, 21, 19, 22]\n\ntemps = ['25\u00b0C']*len(temp_25) + ['30\u00b0C']*len(temp_30) + ['35\u00b0C']*len(temp_35)\nheights = temp_25 + temp_30 + temp_35\n\n# Plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=temps, y=heights)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Selecting the second violin as target\n        violin.set_facecolor('#8f8cfa')\n        violin.set_hatch('O')\nplt.title('Impact of Temperature Conditions on plant growth')\nplt.xlabel('Temperature Conditions')\nplt.ylabel('Plant height (cm)')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_32a513d079876215/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_32a513d079876215/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_32a513d079876215/figure.png"
    },
    {
        "id": "Violin_7bb25bd8099f7a8e",
        "Input_code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Initialize Dataset\ndepth = ['5m', '10m', '15m', '20m', '25m', '30m', '35m', '40m', '45m', '50m']\nseagrass_coverage = [20, 25, 22, 26, 30, 28, 32, 35, 30, 28]\nkelp_coverage = [15, 18, 20, 22, 24, 26, 30, 28, 25, 20]\nalgae_coverage = [25, 25, 30, 32, 35, 40, 38, 36, 32, 30]\ncoral_coverage = [10, 12, 15, 18, 20, 22, 25, 23, 20, 18]\n\n# Create DataFrame\ndf = pd.DataFrame({'Depth': depth*4, \n                   'Coverage': seagrass_coverage + kelp_coverage + algae_coverage + coral_coverage,\n                   'Species': ['Seagrass']*len(depth) + ['Kelp']*len(depth) + ['Algae']*len(depth) + ['Coral']*len(depth)})\n\n# Initialize Figure\nplt.figure(figsize=(10, 6))\n\n# Create Violin Plot\nsns.violinplot(x='Species', y='Coverage', data=df, order=['Seagrass', 'Kelp', 'Algae', 'Coral'])\n\n# Labeling\nplt.title('Underwater Plant Distribution')\nplt.xlabel('Plant Species')\nplt.ylabel('Coverage Percentage')\n\n# Display Plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the violins that contain the center point of the bounding box to False. Additionally, for the same points, set the snap state of the violins that are related to the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Violin/Violin_7bb25bd8099f7a8e/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Initialize Dataset\ndepth = ['5m', '10m', '15m', '20m', '25m', '30m', '35m', '40m', '45m', '50m']\nseagrass_coverage = [20, 25, 22, 26, 30, 28, 32, 35, 30, 28]\nkelp_coverage = [15, 18, 20, 22, 24, 26, 30, 28, 25, 20]\nalgae_coverage = [25, 25, 30, 32, 35, 40, 38, 36, 32, 30]\ncoral_coverage = [10, 12, 15, 18, 20, 22, 25, 23, 20, 18]\n\n# Create DataFrame\ndf = pd.DataFrame({'Depth': depth*4, \n                   'Coverage': seagrass_coverage + kelp_coverage + algae_coverage + coral_coverage,\n                   'Species': ['Seagrass']*len(depth) + ['Kelp']*len(depth) + ['Algae']*len(depth) + ['Coral']*len(depth)})\n\n# Initialize Figure\nplt.figure(figsize=(10, 6))\n\n# Create Violin Plot\nvp = sns.violinplot(x='Species', y='Coverage', data=df, order=['Seagrass', 'Kelp', 'Algae', 'Coral'])\n\n# Modify specific violins\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Kelp' is the target object\n        violin.set_animated(False)\n        violin.set_snap(True)\n\n# Labeling\nplt.title('Underwater Plant Distribution')\nplt.xlabel('Plant Species')\nplt.ylabel('Coverage Percentage')\n\n# Display Plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_7bb25bd8099f7a8e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_7bb25bd8099f7a8e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_7bb25bd8099f7a8e/figure.png"
    },
    {
        "id": "Violin_0e0210aff2b02ea4",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data \nstring1 = [23.5, 23.8, 24.0, 24.2, 23.7, 24.1, 23.8, 24.3]\nstring2 = [23.9, 24.2, 24.5, 24.0, 24.4, 24.1, 24.3, 24.2]\nstring3 = [24.1, 23.7, 24.3, 23.9, 24.5, 24.0, 24.2, 23.8]\nstring4 = [23.8, 24.0, 23.9, 24.2, 24.3, 23.7, 24.1, 24.4]\nstring5 = [24.0, 24.3, 24.2, 24.1, 23.8, 24.5, 23.9, 24.0]\n\n# Consolidate the data into a list of lists\ndata = [string1, string2, string3, string4, string5]\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Create the violin plot\nsns.violinplot(data=data, ax=ax)\n\n# Set the x-tick labels to be the string numbers\nax.set_xticklabels(['String 1', 'String 2', 'String 3', 'String 4', 'String 5'])\n\n# Set the y label \nax.set_ylabel('String Lengths (in inches)')\n\n# Set the title\nax.set_title(\"Distribution of Guitar String Lengths Among a Sample of Musicians\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the label of the violin that contains the center point of the bounding box to 'A new Label'. Also, make sure that this violin is not rasterized by setting its rasterized state to False.",
        "Input_image": "./test_dataset/Violin/Violin_0e0210aff2b02ea4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data \nstring1 = [23.5, 23.8, 24.0, 24.2, 23.7, 24.1, 23.8, 24.3]\nstring2 = [23.9, 24.2, 24.5, 24.0, 24.4, 24.1, 24.3, 24.2]\nstring3 = [24.1, 23.7, 24.3, 23.9, 24.5, 24.0, 24.2, 23.8]\nstring4 = [23.8, 24.0, 23.9, 24.2, 24.3, 23.7, 24.1, 24.4]\nstring5 = [24.0, 24.3, 24.2, 24.1, 23.8, 24.5, 23.9, 24.0]\n\n# Consolidate the data into a list of lists\ndata = [string1, string2, string3, string4, string5]\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Create the violin plot\nvp = sns.violinplot(data=data, ax=ax)\n\n# Set the x-tick labels to be the string numbers\nax.set_xticklabels(['String 1', 'String 2', 'String 3', 'String 4', 'String 5'])\n\n# Set the y label \nax.set_ylabel('String Lengths (in inches)')\n\n# Set the title\nax.set_title(\"Distribution of Guitar String Lengths Among a Sample of Musicians\")\n\n# Modify the label and rasterized state of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'String 2' is the target object\n        ax.set_xticklabels(['String 1', 'A new Label', 'String 3', 'String 4', 'String 5'])\n        violin.set_rasterized(False)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_0e0210aff2b02ea4/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_0e0210aff2b02ea4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_0e0210aff2b02ea4/figure.png"
    },
    {
        "id": "Violin_a04740cf9de7ccf0",
        "Input_code": "import pandas as pd\n# import required libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Prepare the bond lengths data\nStellarite_lengths = [135, 140, 138, 142, 137, 139, 136, 141]\nCelestene_lengths = [132, 136, 134, 137, 131, 135, 133, 139]\nNebulon_lengths = [130, 133, 128, 135, 131, 137, 129, 136]\n\n# Pack all bond lengths into a single list\nall_lengths = Stellarite_lengths + Celestene_lengths + Nebulon_lengths\n\n# Create labels for each bond length\nall_labels = ['Stellarite']*len(Stellarite_lengths) + ['Celestene']*len(Celestene_lengths) + ['Nebulon']*len(Nebulon_lengths)\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x=all_labels, y=all_lengths)\n\n# Add title and labels\nplt.title('Carbon-Carbon Bond Lengths of Interstellar Compounds')\nplt.xlabel('Compounds')\nplt.ylabel('Bond Lengths (pm)')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the edges of the violins that contain the center point of the bounding box to 2.6.",
        "Input_image": "./test_dataset/Violin/Violin_a04740cf9de7ccf0/Visual_figure.png",
        "Test_code": "import pandas as pd\n# import required libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Prepare the bond lengths data\nStellarite_lengths = [135, 140, 138, 142, 137, 139, 136, 141]\nCelestene_lengths = [132, 136, 134, 137, 131, 135, 133, 139]\nNebulon_lengths = [130, 133, 128, 135, 131, 137, 129, 136]\n\n# Pack all bond lengths into a single list\nall_lengths = Stellarite_lengths + Celestene_lengths + Nebulon_lengths\n\n# Create labels for each bond length\nall_labels = ['Stellarite']*len(Stellarite_lengths) + ['Celestene']*len(Celestene_lengths) + ['Nebulon']*len(Nebulon_lengths)\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x=all_labels, y=all_lengths)\n\n# Modify the linewidth of the violins' edge corresponding to the Target_object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Celestene' is the target object\n        violin.set_linewidth(2.6)\n        violin.set_edgecolor('red')\n\n# Add title and labels\nplt.title('Carbon-Carbon Bond Lengths of Interstellar Compounds')\nplt.xlabel('Compounds')\nplt.ylabel('Bond Lengths (pm)')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_a04740cf9de7ccf0/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_a04740cf9de7ccf0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_a04740cf9de7ccf0/figure.png"
    },
    {
        "id": "Violin_1715200ed2d2473e",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n\n# Elevation Data\nmars_elevation = [1200, 1300, 1100, 1400, 1250, 1350]\nvenus_elevation = [900, 950, 870, 920, 880, 930]\ntitan_elevation = [1600, 1550, 1650, 1500, 1620, 1560]\n\n# Creating DataFrame\ndata = pd.DataFrame({\n    'Planet': ['Mars'] * len(mars_elevation) + ['Venus'] * len(venus_elevation) + ['Titan'] * len(titan_elevation),\n    'Elevation': mars_elevation + venus_elevation + titan_elevation\n})\n\n# Plotting\nplt.figure(figsize=(9, 6))\nsns.violinplot(x='Planet', y='Elevation', data=data)\nplt.title('Planet Surface Elevation Mapping')\nplt.xlabel('Planet')\nplt.ylabel('Elevation (in meters)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the violins that contain the center point of the bounding box to the area defined by the coordinates (194, 60), with a width of 292 and a height of 611, using the `matplotlib.transforms.Bbox` pattern. Also, enable the rasterized state for these violins by setting it to True.",
        "Input_image": "./test_dataset/Violin/Violin_1715200ed2d2473e/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# Elevation Data\nmars_elevation = [1200, 1300, 1100, 1400, 1250, 1350]\nvenus_elevation = [900, 950, 870, 920, 880, 930]\ntitan_elevation = [1600, 1550, 1650, 1500, 1620, 1560]\n\n# Creating DataFrame\ndata = pd.DataFrame({\n    'Planet': ['Mars'] * len(mars_elevation) + ['Venus'] * len(venus_elevation) + ['Titan'] * len(titan_elevation),\n    'Elevation': mars_elevation + venus_elevation + titan_elevation\n})\n\n# Plotting\nplt.figure(figsize=(9, 6))\nvp = sns.violinplot(x='Planet', y='Elevation', data=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Venus' is the target object\n        bbox = Bbox.from_bounds(180, 60, 280, 211)\n        violin.set_clip_box(bbox)\n        violin.set_rasterized(True)\nplt.title('Planet Surface Elevation Mapping')\nplt.xlabel('Planet')\nplt.ylabel('Elevation (in meters)')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_1715200ed2d2473e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_1715200ed2d2473e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_1715200ed2d2473e/figure.png"
    },
    {
        "id": "Violin_0f98966890a8cdc6",
        "Input_code": "import pandas as pd\n# Import libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data\nrandom_movement = [2.5, 3.0, 2.7, 3.2, 2.8, 3.4, 3.1, 2.9, 2.6, 3.3]\ncircular_path = [4.5, 4.0, 4.2, 4.8, 4.1, 4.9, 4.6, 4.3, 4.7, 4.4]\ntargeted_navigation = [5.5, 5.3, 5.1, 5.7, 5.4, 5.6, 5.9, 5.2, 5.8, 5.0]\n\n# Combine all the data and labels\ndata = [random_movement, circular_path, targeted_navigation]\nlabels = ['Random Movement', 'Circular Path', 'Targeted Navigation']\n\n# Create the violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(data=data)\n\n# Set the x ticks and labels\nplt.xticks([0, 1, 2], labels)\n\n# Add title & labels\nplt.title('Robot Speed Distributions under Different Experimental Conditions')\nplt.xlabel('Experimental Condition')\nplt.ylabel('Speed (cm/s)')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of all of the lines in the violin that contains the center point of the bounding box to 0.42. Additionally, set the visibility of its box part to False.",
        "Input_image": "./test_dataset/Violin/Violin_0f98966890a8cdc6/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data\nrandom_movement = [2.5, 3.0, 2.7, 3.2, 2.8, 3.4, 3.1, 2.9, 2.6, 3.3]\ncircular_path = [4.5, 4.0, 4.2, 4.8, 4.1, 4.9, 4.6, 4.3, 4.7, 4.4]\ntargeted_navigation = [5.5, 5.3, 5.1, 5.7, 5.4, 5.6, 5.9, 5.2, 5.8, 5.0]\n\n# Combine all the data and labels\ndata = [random_movement, circular_path, targeted_navigation]\nlabels = ['Random Movement', 'Circular Path', 'Targeted Navigation']\n\n# Create the violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(data=data)\n\n# Set the x ticks and labels\nplt.xticks([0, 1, 2], labels)\n\n# Add title & labels\nplt.title('Robot Speed Distributions under Different Experimental Conditions')\nplt.xlabel('Experimental Condition')\nplt.ylabel('Speed (cm/s)')\n\n# Modify the violin plot\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Circular Path' is the target object\n        violin.set_visible(False)\nfor i,line in enumerate(plt.gca().lines):\n    if i in [1*3]+[1*3+1]+[1*3+2]:\n        line.set_alpha(0.42)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_0f98966890a8cdc6/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_0f98966890a8cdc6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_0f98966890a8cdc6/figure.png"
    },
    {
        "id": "Violin_c47148b040eb3a37",
        "Input_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Using pandas to handle the data\nimport pandas as pd\n\ndata = {\n    '1970-1980': {'SST': [26, 26.5, 26.2, 25.8, 26.1, 26.3, 25.9, 26.6, 26.4, 26.7], 'Coral Cover Percentage': [80, 75, 79, 83, 77, 78, 82, 81, 76, 79]},\n    '1980-1990': {'SST': [26.4, 26.7, 27, 26.5, 26.3, 26.8, 26.9, 26.6, 26.2, 26.5], 'Coral Cover Percentage': [76, 74, 72, 69, 75, 73, 71, 70, 77, 72]},\n    '1990-2000': {'SST': [26.8, 27.1, 26.9, 26.5, 26.7, 26.6, 26.4, 26.2, 26.9, 27.2], 'Coral Cover Percentage': [70, 68, 65, 67, 71, 69, 66, 63, 70, 68]},\n    '2000-2010': {'SST': [27, 27.2, 27.6, 26.8, 26.4, 26.9, 27.1, 27.3, 27.5, 26.7], 'Coral Cover Percentage': [65, 62, 61, 63, 64, 60, 58, 59, 63, 61]},\n    '2010-2020': {'SST': [27.5, 27.8, 28, 27.2, 26.9, 27.1, 27.7, 28.1, 27.6, 27.4], 'Coral Cover Percentage': [60, 58, 55, 52, 54, 59, 57, 53, 56, 51]}\n}\n\n# Transforming the data into a dataframe accepted by seaborn\n# Melting the dataframe to have period, SST and Coral Cover Percentage in different columns\ndf = pd.concat({k: pd.DataFrame(v) for k, v in data.items()}).reset_index().drop(columns=['level_1']).rename(columns={'level_0':'Period'})\n\ndf_melted = pd.melt(df, id_vars=['Period'], var_name='Category', value_name='Value')\n\n# Create the violinplot using seaborn\nsns.violinplot(x='Period', y='Value', hue='Category', data=df_melted, split=True)\n\nplt.title('Effect of Climate Change on Ocean Temperatures and Coral Reefs (1970-2020)')\nplt.xlabel('Time Period')\nplt.xticks(rotation=45)\nplt.ylabel('Value')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #15edc3, and also update the line color of that same violin to #21689b.",
        "Input_image": "./test_dataset/Violin/Violin_c47148b040eb3a37/Visual_figure.png",
        "Test_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Using pandas to handle the data\nimport pandas as pd\n\ndata = {\n    '1970-1980': {'SST': [26, 26.5, 26.2, 25.8, 26.1, 26.3, 25.9, 26.6, 26.4, 26.7], 'Coral Cover Percentage': [80, 75, 79, 83, 77, 78, 82, 81, 76, 79]},\n    '1980-1990': {'SST': [26.4, 26.7, 27, 26.5, 26.3, 26.8, 26.9, 26.6, 26.2, 26.5], 'Coral Cover Percentage': [76, 74, 72, 69, 75, 73, 71, 70, 77, 72]},\n    '1990-2000': {'SST': [26.8, 27.1, 26.9, 26.5, 26.7, 26.6, 26.4, 26.2, 26.9, 27.2], 'Coral Cover Percentage': [70, 68, 65, 67, 71, 69, 66, 63, 70, 68]},\n    '2000-2010': {'SST': [27, 27.2, 27.6, 26.8, 26.4, 26.9, 27.1, 27.3, 27.5, 26.7], 'Coral Cover Percentage': [65, 62, 61, 63, 64, 60, 58, 59, 63, 61]},\n    '2010-2020': {'SST': [27.5, 27.8, 28, 27.2, 26.9, 27.1, 27.7, 28.1, 27.6, 27.4], 'Coral Cover Percentage': [60, 58, 55, 52, 54, 59, 57, 53, 56, 51]}\n}\n\n# Transforming the data into a dataframe accepted by seaborn\n# Melting the dataframe to have period, SST and Coral Cover Percentage in different columns\ndf = pd.concat({k: pd.DataFrame(v) for k, v in data.items()}).reset_index().drop(columns=['level_1']).rename(columns={'level_0':'Period'})\n\ndf_melted = pd.melt(df, id_vars=['Period'], var_name='Category', value_name='Value')\n\n# Create the violinplot using seaborn\nvp = sns.violinplot(x='Period', y='Value', hue='Category', data=df_melted, split=True)\n\nfor i, violin in enumerate(vp.collections):\n    if i in [0, 1]:  # Assuming '1970-1980' and '1980-1990' are the target objects\n        violin.set_facecolor('#15edc3')\n        violin.set_edgecolor('#21689b')\n\nplt.title('Effect of Climate Change on Ocean Temperatures and Coral Reefs (1970-2020)')\nplt.xlabel('Time Period')\nplt.xticks(rotation=45)\nplt.ylabel('Value')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0,1",
        "Test_image": "./test_dataset/Violin/Violin_c47148b040eb3a37/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_c47148b040eb3a37/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_c47148b040eb3a37/figure.png"
    },
    {
        "id": "Violin_c608f3d5bd2524cf",
        "Input_code": "import pandas as pd\n# First, we need to import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# The log(stellar mass density) data for each region\nregion_A = [2.5, 2.4, 2.3, 2.2, 2.4, 2.5, 2.3, 2.6]\nregion_B = [2.0, 2.1, 2.2, 2.0, 2.3, 2.1, 2.4, 2.2]\nregion_C = [2.7, 2.6, 2.5, 2.9, 3.0, 2.8, 2.7, 2.6]\nregion_D = [1.8, 1.9, 2.0, 2.1, 1.8, 2.0, 2.2, 2.1]\nregion_E = [2.3, 2.3, 2.4, 2.5, 2.2, 2.4, 2.6, 2.5]\n\n# Labels for the plot\nlabels = ['Region A', 'Region B', 'Region C', 'Region D', 'Region E']\n\n# Combine all data lists into a single list for plotting\ndata = [region_A, region_B, region_C, region_D, region_E]\n\n# Create a new figure\nplt.figure(figsize=(10,10))\n\n# Create the violinplot\nsns.violinplot(data=data)\n\n# Set the title and labels\nplt.title('Distribution of Stellar Mass Densities in Different Star Formation Regions')\nplt.xlabel('Star Forming Regions')\nplt.ylabel('Log(Stellar Mass Density) [Solar Masses / Square Parsec]')\nplt.xticks(range(len(labels)), labels)\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violins that contain the center point of the bounding box to #404bf2. Also, make sure the picker state for these violins is set to False.",
        "Input_image": "./test_dataset/Violin/Violin_c608f3d5bd2524cf/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# The log(stellar mass density) data for each region\nregion_A = [2.5, 2.4, 2.3, 2.2, 2.4, 2.5, 2.3, 2.6]\nregion_B = [2.0, 2.1, 2.2, 2.0, 2.3, 2.1, 2.4, 2.2]\nregion_C = [2.7, 2.6, 2.5, 2.9, 3.0, 2.8, 2.7, 2.6]\nregion_D = [1.8, 1.9, 2.0, 2.1, 1.8, 2.0, 2.2, 2.1]\nregion_E = [2.3, 2.3, 2.4, 2.5, 2.2, 2.4, 2.6, 2.5]\n\n# Labels for the plot\nlabels = ['Region A', 'Region B', 'Region C', 'Region D', 'Region E']\n\n# Combine all data lists into a single list for plotting\ndata = [region_A, region_B, region_C, region_D, region_E]\n\n# Create a new figure\nplt.figure(figsize=(10,10))\n\n# Create the violinplot\nvp = sns.violinplot(data=data)\n\n# Set the title and labels\nplt.title('Distribution of Stellar Mass Densities in Different Star Formation Regions')\nplt.xlabel('Star Forming Regions')\nplt.ylabel('Log(Stellar Mass Density) [Solar Masses / Square Parsec]')\nplt.xticks(range(len(labels)), labels)\n\n# Modify the color and picker state of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Region B' is the target object\n        violin.set_facecolor('#404bf2')\n        violin.set_picker(False)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_c608f3d5bd2524cf/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_c608f3d5bd2524cf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_c608f3d5bd2524cf/figure.png"
    },
    {
        "id": "Violin_827a4ab1890994bb",
        "Input_code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Creating a dictionary for dreamland's terrain elevation data\ndreamland_terrains = {\n    'Sunset Valley' : [300, 310, 320, 325, 315, 330, 335, 340, 310, 325],\n    'Misty Mountains' : [600, 610, 590, 570, 630, 605, 615, 620, 585, 595],\n    'Crystal Lake' : [150, 155, 160, 145, 165, 140, 150, 155, 135, 160],\n    'Whispering Woods' : [400, 410, 405, 395, 415, 420, 390, 400, 415, 415]\n}\n\n# Preprocess the data for seaborn by transforming the above dictionary into two lists: one for terrain and one for elevations\nterrain = []\nelevation = []\nfor k, v in dreamland_terrains.items():\n    terrain.extend([k]*len(v))\n    elevation.extend(v)\n\n# Create a DataFrame from the lists\ndf = pd.DataFrame({'Terrain': terrain, 'Elevation': elevation})\n\n# Making the plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Terrain\", y=\"Elevation\", data=df)\nplt.title(\"Elevation Distribution in Dreamland Terrains\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the visibility of the box part of violin that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Violin/Violin_827a4ab1890994bb/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Creating a dictionary for dreamland's terrain elevation data\ndreamland_terrains = {\n    'Sunset Valley' : [300, 310, 320, 325, 315, 330, 335, 340, 310, 325],\n    'Misty Mountains' : [600, 610, 590, 570, 630, 605, 615, 620, 585, 595],\n    'Crystal Lake' : [150, 155, 160, 145, 165, 140, 150, 155, 135, 160],\n    'Whispering Woods' : [400, 410, 405, 395, 415, 420, 390, 400, 415, 415]\n}\n\n# Preprocess the data for seaborn by transforming the above dictionary into two lists: one for terrain and one for elevations\nterrain = []\nelevation = []\nfor k, v in dreamland_terrains.items():\n    terrain.extend([k]*len(v))\n    elevation.extend(v)\n\n# Create a DataFrame from the lists\ndf = pd.DataFrame({'Terrain': terrain, 'Elevation': elevation})\n\n# Making the plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Terrain\", y=\"Elevation\", data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Misty Mountains' is the target object\n        violin.set_visible(False)\nplt.title(\"Elevation Distribution in Dreamland Terrains\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_827a4ab1890994bb/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_827a4ab1890994bb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_827a4ab1890994bb/figure.png"
    },
    {
        "id": "Violin_a67947933db93ea2",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nnorth_atlantic_population = [200, 180, 190, 210, 220, 195, 205, 185, 192, 198]\nsouth_pacific_population = [150, 160, 155, 170, 165, 145, 140, 148, 152, 158]\nindian_ocean_population = [120, 110, 130, 118, 125, 135, 140, 128, 132, 138]\narctic_ocean_population = [80, 90, 85, 95, 100, 75, 78, 82, 88, 92]\n\n# Data collection in list of lists\ndata = [north_atlantic_population, south_pacific_population, indian_ocean_population, arctic_ocean_population]\n\n# Create a figure and axis \nfig, ax = plt.subplots()\n\n# Creating labels\noceans = ['North Atlantic', 'South Pacific', 'Indian Ocean', 'Arctic Ocean']\n\n# Creating violin plot\nsns.violinplot(data=data, ax=ax)\n\n# Set labels\nax.set_xticklabels(oceans)\n\n# Setting the title\nplt.title('Octopus Population Distribution in Oceans')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violins that contain the center point of the bounding box to #de60e9.",
        "Input_image": "./test_dataset/Violin/Violin_a67947933db93ea2/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nnorth_atlantic_population = [200, 180, 190, 210, 220, 195, 205, 185, 192, 198]\nsouth_pacific_population = [150, 160, 155, 170, 165, 145, 140, 148, 152, 158]\nindian_ocean_population = [120, 110, 130, 118, 125, 135, 140, 128, 132, 138]\narctic_ocean_population = [80, 90, 85, 95, 100, 75, 78, 82, 88, 92]\n\n# Data collection in list of lists\ndata = [north_atlantic_population, south_pacific_population, indian_ocean_population, arctic_ocean_population]\n\n# Create a figure and axis \nfig, ax = plt.subplots()\n\n# Creating labels\noceans = ['North Atlantic', 'South Pacific', 'Indian Ocean', 'Arctic Ocean']\n\n# Creating violin plot\nvp = sns.violinplot(data=data, ax=ax)\n\n# Set labels\nax.set_xticklabels(oceans)\n\n# Setting the title\nplt.title('Octopus Population Distribution in Oceans')\n\n# Modify the color of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'South Pacific' is the target object\n        violin.set_facecolor('#de60e9')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_a67947933db93ea2/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_a67947933db93ea2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_a67947933db93ea2/figure.png"
    },
    {
        "id": "Violin_0bff8a314446c52f",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Elevation data\ncrater_zone = [2.5, 2.8, 2.6, 2.7, 2.9, 3.1, 2.4, 3.0, 2.7, 2.8]\nmountain_range = [4.3, 4.1, 4.5, 4.2, 3.9, 4.4, 4.0, 4.3, 4.1, 4.6]\ndesert_plateau = [1.8, 2.1, 2.0, 1.9, 2.2, 1.7, 2.3, 2.0, 1.6, 2.2]\n\n# Combine data and labels\ndata = [crater_zone, mountain_range, desert_plateau]\nlabels = ['Crater Zone', 'Mountain Range', 'Desert Plateau']\n\n# Create a new figure and a subplot\nfig, ax = plt.subplots()\n\n# Create violin plot\nsns.violinplot(data=data, ax=ax)\n\n# Set the xtick labels with list of string labels\nax.set_xticklabels(labels)\n\n# Set title and labels\nax.set_title('Elevation Distributions on the Alien Planet')\nax.set_xlabel('Terrains')\nax.set_ylabel('Elevations (km)')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the rasterized state of the violins that contain the center point of the bounding box to True. For the same violins, set the z-order to 1. Also, apply a shadow effect to these violins with an offset of (2.59, 3.64) and choose a shadow color randomly from ['gray', 'gold'].",
        "Input_image": "./test_dataset/Violin/Violin_0bff8a314446c52f/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Elevation data\ncrater_zone = [2.5, 2.8, 2.6, 2.7, 2.9, 3.1, 2.4, 3.0, 2.7, 2.8]\nmountain_range = [4.3, 4.1, 4.5, 4.2, 3.9, 4.4, 4.0, 4.3, 4.1, 4.6]\ndesert_plateau = [1.8, 2.1, 2.0, 1.9, 2.2, 1.7, 2.3, 2.0, 1.6, 2.2]\n\n# Combine data and labels\ndata = [crater_zone, mountain_range, desert_plateau]\nlabels = ['Crater Zone', 'Mountain Range', 'Desert Plateau']\n\n# Create a new figure and a subplot\nfig, ax = plt.subplots()\n\n# Create violin plot\nvp = sns.violinplot(data=data, ax=ax)\n\n# Set the xtick labels with list of string labels\nax.set_xticklabels(labels)\n\n# Set title and labels\nax.set_title('Elevation Distributions on the Alien Planet')\nax.set_xlabel('Terrains')\nax.set_ylabel('Elevations (km)')\n\n# Modify the violin plot\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Mountain Range' is the target object\n        violin.set_rasterized(True)\n        violin.set_zorder(1)\n        shadow_color = random.choice(['gray','gold'])\n        violin.set_path_effects([SimplePatchShadow(offset=(2.59,3.64), shadow_rgbFace=shadow_color), Normal()])\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_0bff8a314446c52f/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_0bff8a314446c52f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_0bff8a314446c52f/figure.png"
    },
    {
        "id": "Violin_1008e0f17e1addb9",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Brain activity data for different regions \nfrontal_lobe = [0.25, 0.30, 0.28, 0.35, 0.32, 0.29, 0.27, 0.31]\ntemporal_lobe = [0.20, 0.22, 0.25, 0.18, 0.24, 0.21, 0.23, 0.26]\noccipital_lobe = [0.15, 0.17, 0.19, 0.21, 0.18, 0.16, 0.20, 0.22]\n\n# Packing data into a single list\ndata = [frontal_lobe, temporal_lobe, occipital_lobe]\n\n# Creating a figure instance\nplt.figure(figsize=(9, 6))\n\n# Creating violin plot\nsns.violinplot(data=data)\n\n# Adding title and labels\nplt.title('3D Brain Activity Mapping')\nplt.xlabel('Brain Region')\nplt.ylabel('Brain Activity Intensity')\n\n# Set names for x-axis points\nplt.xticks([0, 1, 2], ['Frontal Lobe', 'Temporal Lobe', 'Occipital Lobe'])\n\n# Showing the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the violins that correspond to the center point of the bounding box to False. Also, update the picker state to True for the violins that contain the center point of the bounding box.",
        "Input_image": "./test_dataset/Violin/Violin_1008e0f17e1addb9/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Brain activity data for different regions \nfrontal_lobe = [0.25, 0.30, 0.28, 0.35, 0.32, 0.29, 0.27, 0.31]\ntemporal_lobe = [0.20, 0.22, 0.25, 0.18, 0.24, 0.21, 0.23, 0.26]\noccipital_lobe = [0.15, 0.17, 0.19, 0.21, 0.18, 0.16, 0.20, 0.22]\n\n# Packing data into a single list\ndata = [frontal_lobe, temporal_lobe, occipital_lobe]\n\n# Creating a figure instance\nplt.figure(figsize=(9, 6))\n\n# Creating violin plot\nvp = sns.violinplot(data=data)\n\n# Modifying the animated and picker state for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Temporal Lobe' is the target object\n        violin.set_animated(False)\n        violin.set_picker(True)\n\n# Adding title and labels\nplt.title('3D Brain Activity Mapping')\nplt.xlabel('Brain Region')\nplt.ylabel('Brain Activity Intensity')\n\n# Set names for x-axis points\nplt.xticks([0, 1, 2], ['Frontal Lobe', 'Temporal Lobe', 'Occipital Lobe'])\n\n# Showing the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_1008e0f17e1addb9/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_1008e0f17e1addb9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_1008e0f17e1addb9/figure.png"
    },
    {
        "id": "Violin_724e42d07e7144dc",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\nrenewable_energy = [12, 15, 18, 20, 22, 24, 26, 29, 33, 36, 38, 40, 42, 45, 48, 50, 53, 57, 60, 64, 68, 72, 76, 80, 85]\nnonrenewable_energy = [80, 85, 88, 92, 95, 98, 102, 105, 110, 112, 115, 118, 120, 122, 124, 126, 128, 130, 133, 135, 138, 140, 142, 144, 146]\nnuclear_energy = [5, 8, 10, 12, 14, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73]\n\n# Combine Data\ndata = [renewable_energy, nonrenewable_energy, nuclear_energy]\nlabels = ['Renewable', 'Non-Renewable', 'Nuclear']\n\n# Create Violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data)\nplt.xticks([0, 1, 2], labels)\n\n# Title and Labels\nplt.title('Global Energy Consumption by Source Over The Past 50 Years')\nplt.xlabel('Energy Source')\nplt.ylabel('Energy Consumption')\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the violins that contain the center point of the bounding box to True. Additionally, make sure the picker state for those same violins is also set to True.",
        "Input_image": "./test_dataset/Violin/Violin_724e42d07e7144dc/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\nrenewable_energy = [12, 15, 18, 20, 22, 24, 26, 29, 33, 36, 38, 40, 42, 45, 48, 50, 53, 57, 60, 64, 68, 72, 76, 80, 85]\nnonrenewable_energy = [80, 85, 88, 92, 95, 98, 102, 105, 110, 112, 115, 118, 120, 122, 124, 126, 128, 130, 133, 135, 138, 140, 142, 144, 146]\nnuclear_energy = [5, 8, 10, 12, 14, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73]\n\n# Combine Data\ndata = [renewable_energy, nonrenewable_energy, nuclear_energy]\nlabels = ['Renewable', 'Non-Renewable', 'Nuclear']\n\n# Create Violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data)\nplt.xticks([0, 1, 2], labels)\n\n# Modify the clipping and picker state for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Non-Renewable' is the target object\n        violin.set_clip_on(True)\n        violin.set_picker(True)\n\n# Title and Labels\nplt.title('Global Energy Consumption by Source Over The Past 50 Years')\nplt.xlabel('Energy Source')\nplt.ylabel('Energy Consumption')\n\n# Display plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_724e42d07e7144dc/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_724e42d07e7144dc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_724e42d07e7144dc/figure.png"
    },
    {
        "id": "Violin_3d2912eabdaad034",
        "Input_code": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Prepare the data\nsimulations = ['Garden Oasis', 'Enchanted Forest', 'Underwater Paradise']\ncolor_intensities = [\n    [8, 5, 7, 6, 9, 8, 6, 7, 5, 6],\n    [7, 6, 5, 8, 7, 9, 6, 5, 8, 7],\n    [6, 8, 7, 5, 6, 5, 9, 7, 8, 6]\n]\n\n# Create a DataFrame\ndf = pd.DataFrame(dict(zip(simulations, color_intensities))).melt()\n\n# Rename columns\ndf.columns = ['Simulation', 'Color Intensity']\n\n# Create Violin Plot\nplt.figure(figsize=(10,8))\nsns.violinplot(x='Simulation', y='Color Intensity', data=df)\n\n# Display the plot\nplt.title('Violin plot of the floral color intensities in different VR simulations')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violins that contain the center point of the bounding box to #0b8c81, and ensure that these same violins have the rasterized state set to False.",
        "Input_image": "./test_dataset/Violin/Violin_3d2912eabdaad034/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Prepare the data\nsimulations = ['Garden Oasis', 'Enchanted Forest', 'Underwater Paradise']\ncolor_intensities = [\n    [8, 5, 7, 6, 9, 8, 6, 7, 5, 6],\n    [7, 6, 5, 8, 7, 9, 6, 5, 8, 7],\n    [6, 8, 7, 5, 6, 5, 9, 7, 8, 6]\n]\n\n# Create a DataFrame\ndf = pd.DataFrame(dict(zip(simulations, color_intensities))).melt()\n\n# Rename columns\ndf.columns = ['Simulation', 'Color Intensity']\n\n# Create Violin Plot\nplt.figure(figsize=(10,8))\nvp = sns.violinplot(x='Simulation', y='Color Intensity', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Enchanted Forest' is the target object\n        violin.set_facecolor('#0b8c81')\n        violin.set_rasterized(False)\n# Display the plot\nplt.title('Violin plot of the floral color intensities in different VR simulations')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_3d2912eabdaad034/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_3d2912eabdaad034/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_3d2912eabdaad034/figure.png"
    },
    {
        "id": "Violin_eaa4bd922deb50b3",
        "Input_code": "# Importing required libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\nhemoglobin_density = [1.4, 1.5, 1.6, 1.4, 1.3, 1.5, 1.3, 1.6, 1.4, 1.5]\ninsulin_density = [1.6, 1.7, 1.8, 1.9, 1.6, 1.7, 1.8, 1.9, 1.7, 1.8]\nlysozyme_density = [1.2, 1.3, 1.4, 1.2, 1.3, 1.5, 1.3, 1.4, 1.2, 1.5]\n\n# Creating the DataFrame\ndf = pd.DataFrame({\n    'Hemoglobin': hemoglobin_density,\n    'Insulin': insulin_density,\n    'Lysozyme': lysozyme_density\n})\n\n# Melting the DataFrame\ndf_melted = pd.melt(df)\n\n# Creating the Violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='variable', y='value', data=df_melted)\nplt.title('Molecular Density Distribution in Protein Structures')\n\nplt.xlabel('Protein')\nplt.ylabel('Molecular Density (g/cm\u00b3)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the violins that contain the center point of the bounding box to #cc5c04. Also, update the linewidth of those violins to 2.49.",
        "Input_image": "./test_dataset/Violin/Violin_eaa4bd922deb50b3/Visual_figure.png",
        "Test_code": "# Importing required libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\nhemoglobin_density = [1.4, 1.5, 1.6, 1.4, 1.3, 1.5, 1.3, 1.6, 1.4, 1.5]\ninsulin_density = [1.6, 1.7, 1.8, 1.9, 1.6, 1.7, 1.8, 1.9, 1.7, 1.8]\nlysozyme_density = [1.2, 1.3, 1.4, 1.2, 1.3, 1.5, 1.3, 1.4, 1.2, 1.5]\n\n# Creating the DataFrame\ndf = pd.DataFrame({\n    'Hemoglobin': hemoglobin_density,\n    'Insulin': insulin_density,\n    'Lysozyme': lysozyme_density\n})\n\n# Melting the DataFrame\ndf_melted = pd.melt(df)\n\n# Creating the Violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='variable', y='value', data=df_melted)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Insulin' is the target object\n        violin.set_facecolor('#cc5c04')\n        violin.set_linewidth(2.49)\nplt.title('Molecular Density Distribution in Protein Structures')\n\nplt.xlabel('Protein')\nplt.ylabel('Molecular Density (g/cm\u00b3)')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_eaa4bd922deb50b3/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_eaa4bd922deb50b3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_eaa4bd922deb50b3/figure.png"
    },
    {
        "id": "Violin_90e4beda819e54a6",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a dictionary of data\ncaverns = {'Territory A': [50, 55, 60, 65, 70, 75, 80, 85, 90],\n           'Territory B': [35, 40, 45, 50, 55, 60, 65, 70, 75],\n           'Territory C': [70, 75, 80, 85, 90, 95, 100, 105, 110],\n           'Territory D': [45, 50, 55, 60, 65, 70, 75, 80, 85],\n           'Territory E': [60, 65, 70, 75, 80, 85, 90, 95, 100],\n           'Territory F': [30, 35, 40, 45, 50, 55, 60, 65, 70]}\n\n# Convert the dictionary into a list of tuples\ndata = [(k, v) for k, vals in caverns.items() for v in vals]\n\n# Create a DataFrame\ndf = pd.DataFrame(data, columns=['Territory', 'Cavern Depth'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Territory', y='Cavern Depth', data=df, palette='viridis')\nplt.title('Distribution of Cavern Depths in Different Moon Territories')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the snap state of the violins that include the center point of the bounding box to True. Also, adjust the transformation of the box part to align with the figure's coordinate system.",
        "Input_image": "./test_dataset/Violin/Violin_90e4beda819e54a6/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a dictionary of data\ncaverns = {'Territory A': [50, 55, 60, 65, 70, 75, 80, 85, 90],\n           'Territory B': [35, 40, 45, 50, 55, 60, 65, 70, 75],\n           'Territory C': [70, 75, 80, 85, 90, 95, 100, 105, 110],\n           'Territory D': [45, 50, 55, 60, 65, 70, 75, 80, 85],\n           'Territory E': [60, 65, 70, 75, 80, 85, 90, 95, 100],\n           'Territory F': [30, 35, 40, 45, 50, 55, 60, 65, 70]}\n\n# Convert the dictionary into a list of tuples\ndata = [(k, v) for k, vals in caverns.items() for v in vals]\n\n# Create a DataFrame\ndf = pd.DataFrame(data, columns=['Territory', 'Cavern Depth'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Territory', y='Cavern Depth', data=df, palette='viridis')\nplt.title('Distribution of Cavern Depths in Different Moon Territories')\n\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Territory B' is the target object\n        violin.set_snap(True)\n        violin.set_transform(plt.gcf().transFigure)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_90e4beda819e54a6/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_90e4beda819e54a6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_90e4beda819e54a6/figure.png"
    },
    {
        "id": "Violin_5993d3d3bff0823f",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the dataset\nregion_a = [2.3, 2.6, 2.1, 2.8, 2.5, 3.0, 2.7, 2.4, 2.9, 2.2]\nregion_b = [1.9, 1.7, 1.5, 1.8, 2.0, 1.6, 1.4, 1.9, 2.1, 1.6]\nregion_c = [3.5, 3.2, 3.6, 3.8, 3.3, 3.1, 3.9, 3.7, 3.4, 3.0]\nregion_d = [4.2, 4.5, 4.1, 4.3, 4.6, 4.0, 4.4, 4.7, 4.8, 4.2]\n\n# Create a data structure that includes list name (the region)\nnebula_masses = [('region_a', mass) for mass in region_a] + \\\n                [('region_b', mass) for mass in region_b] + \\\n                [('region_c', mass) for mass in region_c] + \\\n                [('region_d', mass) for mass in region_d]\n\n# Transform into DataFrame\ndf = pd.DataFrame(nebula_masses, columns=['Region', 'Simulated Nebula Masses'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Region\", y=\"Simulated Nebula Masses\", data=df)\n\n# Show the plot with title and labels\nplt.title('Violin Plots of Simulated Nebula Masses in Different Galactic Regions')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the z-order of the violins that contain the center point of the bounding box to 13. Add a shadow effect to these violins, using a shadow offset of (2.19, 3.39) and a shadow color selected randomly from 'gray' or 'gold'.",
        "Input_image": "./test_dataset/Violin/Violin_5993d3d3bff0823f/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Define the dataset\nregion_a = [2.3, 2.6, 2.1, 2.8, 2.5, 3.0, 2.7, 2.4, 2.9, 2.2]\nregion_b = [1.9, 1.7, 1.5, 1.8, 2.0, 1.6, 1.4, 1.9, 2.1, 1.6]\nregion_c = [3.5, 3.2, 3.6, 3.8, 3.3, 3.1, 3.9, 3.7, 3.4, 3.0]\nregion_d = [4.2, 4.5, 4.1, 4.3, 4.6, 4.0, 4.4, 4.7, 4.8, 4.2]\n\n# Create a data structure that includes list name (the region)\nnebula_masses = [('region_a', mass) for mass in region_a] + \\\n                [('region_b', mass) for mass in region_b] + \\\n                [('region_c', mass) for mass in region_c] + \\\n                [('region_d', mass) for mass in region_d]\n\n# Transform into DataFrame\ndf = pd.DataFrame(nebula_masses, columns=['Region', 'Simulated Nebula Masses'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Region\", y=\"Simulated Nebula Masses\", data=df)\n\n# Set the z-order and shadow effect for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'region_b' is the target object\n        violin.set_zorder(13)\n        shadow_color = random.choice(['gray','gold'])\n        violin.set_path_effects([SimplePatchShadow(offset=(2.19,3.39), shadow_rgbFace=shadow_color), Normal()])\n\n# Show the plot with title and labels\nplt.title('Violin Plots of Simulated Nebula Masses in Different Galactic Regions')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_5993d3d3bff0823f/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_5993d3d3bff0823f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_5993d3d3bff0823f/figure.png"
    },
    {
        "id": "Violin_b30476d6b9dbc150",
        "Input_code": "# Required Libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n  \"Species A\": [50, 60, 55, 70, 65, 58, 45],\n  \"Species B\": [85, 80, 82, 78, 79, 81, 84, 86],\n  \"Species C\": [40, 38, 42, 37, 39, 41, 36, 43],\n  \"Species D\": [95, 92, 97, 93, 96, 91, 94]\n}\n\n# Converting the given data to a DataFrame\ndf = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in data.items()]))\n\n# Melting the DataFrame to a long form\ndf_melted = pd.melt(df)\n\n# Creating the Violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"variable\", y=\"value\", data=df_melted)\nplt.xlabel(\"Species\")\nplt.ylabel(\"Depths (m)\")\nplt.title(\"Underwater Creatures Habitat Mapping\")\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the color of the violins that contain the center point of the bounding box to #56d9e2. Additionally, for the same points, change the face color of those violins to #0e1046.",
        "Input_image": "./test_dataset/Violin/Violin_b30476d6b9dbc150/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n  \"Species A\": [50, 60, 55, 70, 65, 58, 45],\n  \"Species B\": [85, 80, 82, 78, 79, 81, 84, 86],\n  \"Species C\": [40, 38, 42, 37, 39, 41, 36, 43],\n  \"Species D\": [95, 92, 97, 93, 96, 91, 94]\n}\n\n# Converting the given data to a DataFrame\ndf = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in data.items()]))\n\n# Melting the DataFrame to a long form\ndf_melted = pd.melt(df)\n\n# Creating the Violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"variable\", y=\"value\", data=df_melted)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Species B' is the target object\n        violin.set_edgecolor('#56d9e2')\n        violin.set_facecolor('#0e1046')\nplt.xlabel(\"Species\")\nplt.ylabel(\"Depths (m)\")\nplt.title(\"Underwater Creatures Habitat Mapping\")\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_b30476d6b9dbc150/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_b30476d6b9dbc150/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_b30476d6b9dbc150/figure.png"
    },
    {
        "id": "Violin_30321984c50307cf",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n\n# Elevation Data\nmars_elevation = [1200, 1300, 1100, 1400, 1250, 1350]\nvenus_elevation = [900, 950, 870, 920, 880, 930]\ntitan_elevation = [1600, 1550, 1650, 1500, 1620, 1560]\n\n# Creating DataFrame\ndata = pd.DataFrame({\n    'Planet': ['Mars'] * len(mars_elevation) + ['Venus'] * len(venus_elevation) + ['Titan'] * len(titan_elevation),\n    'Elevation': mars_elevation + venus_elevation + titan_elevation\n})\n\n# Plotting\nplt.figure(figsize=(9, 6))\nsns.violinplot(x='Planet', y='Elevation', data=data)\nplt.title('Planet Surface Elevation Mapping')\nplt.xlabel('Planet')\nplt.ylabel('Elevation (in meters)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the fill pattern of the violin that contains the center point of the bounding box to an O hatch pattern and update its color to #e5ed86.",
        "Input_image": "./test_dataset/Violin/Violin_30321984c50307cf/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n\n# Elevation Data\nmars_elevation = [1200, 1300, 1100, 1400, 1250, 1350]\nvenus_elevation = [900, 950, 870, 920, 880, 930]\ntitan_elevation = [1600, 1550, 1650, 1500, 1620, 1560]\n\n# Creating DataFrame\ndata = pd.DataFrame({\n    'Planet': ['Mars'] * len(mars_elevation) + ['Venus'] * len(venus_elevation) + ['Titan'] * len(titan_elevation),\n    'Elevation': mars_elevation + venus_elevation + titan_elevation\n})\n\n# Plotting\nplt.figure(figsize=(9, 6))\nvp = sns.violinplot(x='Planet', y='Elevation', data=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:\n        violin.set_facecolor('#e5ed86')\n        violin.set_hatch('O')\nplt.title('Planet Surface Elevation Mapping')\nplt.xlabel('Planet')\nplt.ylabel('Elevation (in meters)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_30321984c50307cf/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_30321984c50307cf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_30321984c50307cf/figure.png"
    },
    {
        "id": "Violin_af1d88030b5be7ae",
        "Input_code": "# Importing libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Set the figure size\nplt.figure(figsize=(10, 6))\n\n# Income Brackets\nincome_brackets = ['$0 - $25,000', '$25,001 - $50,000', '$50,001 - $75,000', '$75,001 - $100,000', \n                   '$100,001 - $125,000', '$125,001 - $150,000', '$150,001 - $175,000', '$175,001 - $200,000']\n\n# Given net worth values\nnet_worth = [125000, 250000, 450000, 550000, 700000, 800000, 950000, 1200000]\n\n# Generate random data for each income bracket in accordance with the given net worth\ndata = {bracket: np.random.normal(loc=worth, scale=10000, size=100) for bracket, worth in zip(income_brackets, net_worth)}\n\n# Convert the dictionary to a pandas DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data)\n\n# Melting the DataFrame from wide to long format for seaborn\ndf_melted = df.melt(var_name='Income Bracket', value_name='Net Worth')\n\n# Create a violin plot \nsns.violinplot(x='Income Bracket', y='Net Worth', data=df_melted)\n\n# Set title and labels for axes\nplt.title('Wealth Distribution among Different Demographics')\nplt.xlabel('Income Brackets')\nplt.ylabel('Net Worth')\nplt.xticks(rotation=45)\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the line width of the violins that contain the center point of the bounding box to 4.42, and make sure their rasterized state is set to False.",
        "Input_image": "./test_dataset/Violin/Violin_af1d88030b5be7ae/Visual_figure.png",
        "Test_code": "# Importing libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Set the figure size\nplt.figure(figsize=(10, 6))\n\n# Income Brackets\nincome_brackets = ['$0 - $25,000', '$25,001 - $50,000', '$50,001 - $75,000', '$75,001 - $100,000', \n                   '$100,001 - $125,000', '$125,001 - $150,000', '$150,001 - $175,000', '$175,001 - $200,000']\n\n# Given net worth values\nnet_worth = [125000, 250000, 450000, 550000, 700000, 800000, 950000, 1200000]\n\n# Generate random data for each income bracket in accordance with the given net worth\ndata = {bracket: np.random.normal(loc=worth, scale=10000, size=100) for bracket, worth in zip(income_brackets, net_worth)}\n\n# Convert the dictionary to a pandas DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data)\n\n# Melting the DataFrame from wide to long format for seaborn\ndf_melted = df.melt(var_name='Income Bracket', value_name='Net Worth')\n\n# Create a violin plot \nvp = sns.violinplot(x='Income Bracket', y='Net Worth', data=df_melted)\n\n# Set title and labels for axes\nplt.title('Wealth Distribution among Different Demographics')\nplt.xlabel('Income Brackets')\nplt.ylabel('Net Worth')\nplt.xticks(rotation=45)\n\n# Modify specific violins\nfor i, violin in enumerate(vp.collections):\n    if i in [1, 3]:  # Assuming '$25,001 - $50,000' and '$75,001 - $100,000' are the target objects\n        violin.set_linewidth(4.42)\n        violin.set_rasterized(False)\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Violin/Violin_af1d88030b5be7ae/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_af1d88030b5be7ae/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_af1d88030b5be7ae/figure.png"
    },
    {
        "id": "Violin_c95910604f8e0a58",
        "Input_code": "# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nEST = [50.2, 48.9, 52.5, 58.1, 64.3, 70.2, 73.6, 75.8, 76.5, 75.2, 69.5, 60.7]\nGMT = [47.6, 49.1, 50.3, 51.2, 52.1, 53.5, 54.8, 56.2, 57.3, 58.4, 58.1, 56.9]\nJST = [45.3, 46.1, 47.9, 49.6, 51.1, 52.4, 53.6, 54.9, 56.2, 57.5, 58.9, 60.3]\nAEST = [43.8, 44.2, 45.9, 47.8, 50.1, 52.5, 55.0, 57.4, 59.6, 61.3, 61.9, 61.4]\nPST = [48.0, 50.1, 52.3, 55.0, 58.1, 61.4, 64.3, 66.0, 66.5, 65.9, 63.7, 60.3]\n\n# Combine Data\ndata = [EST, GMT, JST, AEST, PST]\ntimezone = ['EST', 'GMT', 'JST', 'AEST', 'PST']\n\n# Create the violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data)\nplt.xticks([0, 1, 2, 3, 4], timezone)\nplt.title('Energy Consumption by Time Zone')\nplt.xlabel('Time Zone')\nplt.ylabel('Energy Consumption (kWh)')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a dashed outline around the violins enclosed by the bounding box with a line thickness of 1.73 and color '#b9b37b'.",
        "Input_image": "./test_dataset/Violin/Violin_c95910604f8e0a58/Visual_figure.png",
        "Test_code": "# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nEST = [50.2, 48.9, 52.5, 58.1, 64.3, 70.2, 73.6, 75.8, 76.5, 75.2, 69.5, 60.7]\nGMT = [47.6, 49.1, 50.3, 51.2, 52.1, 53.5, 54.8, 56.2, 57.3, 58.4, 58.1, 56.9]\nJST = [45.3, 46.1, 47.9, 49.6, 51.1, 52.4, 53.6, 54.9, 56.2, 57.5, 58.9, 60.3]\nAEST = [43.8, 44.2, 45.9, 47.8, 50.1, 52.5, 55.0, 57.4, 59.6, 61.3, 61.9, 61.4]\nPST = [48.0, 50.1, 52.3, 55.0, 58.1, 61.4, 64.3, 66.0, 66.5, 65.9, 63.7, 60.3]\n\n# Combine Data\ndata = [EST, GMT, JST, AEST, PST]\ntimezone = ['EST', 'GMT', 'JST', 'AEST', 'PST']\n\n# Create the violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data)\nplt.xticks([0, 1, 2, 3, 4], timezone)\nfor i, violin in enumerate(vp.collections):\n    if i in [1, 3]:\n        violin.set_edgecolor('#b9b37b')\n        violin.set_linestyle('-')\n        violin.set_linewidth(1.73)\nplt.title('Energy Consumption by Time Zone')\nplt.xlabel('Time Zone')\nplt.ylabel('Energy Consumption (kWh)')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Violin/Violin_c95910604f8e0a58/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_c95910604f8e0a58/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_c95910604f8e0a58/figure.png"
    },
    {
        "id": "Violin_431dce2415b525a6",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport pandas as pd\n\n# Rainfall data for each region\nNorth = [50, 60, 45, 35, 45, 70, 80, 85, 75, 65, 55, 50]\nSouth = [100, 110, 90, 80, 70, 60, 50, 60, 70, 90, 100, 110]\nEast = [70, 75, 80, 85, 90, 95, 90, 85, 80, 75, 70, 65]\nWest = [120, 110, 100, 90, 80, 70, 70, 80, 90, 100, 110, 120]\n\n# Creating a dataframe\ndf = pd.DataFrame({\n    'North': North,\n    'South': South,\n    'East': East,\n    'West': West\n})\n\n# Changing the structure of dataframe to create violin plot\ndf_melt = pd.melt(df.reset_index(), id_vars=['index'], value_vars=['North', 'South', 'East', 'West'])\n\n# Replacing the column names\ndf_melt.columns = ['Month', 'Region', 'Rainfall']\n\n# Creating violin plot\nplt.figure(figsize=(10,7))\nsns.violinplot(x=\"Region\", y=\"Rainfall\", inner=\"quartile\", data=df_melt)\nplt.title('Seasonal variation in rainfall across four different regions')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the violins that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Violin/Violin_431dce2415b525a6/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport pandas as pd\n\n# Rainfall data for each region\nNorth = [50, 60, 45, 35, 45, 70, 80, 85, 75, 65, 55, 50]\nSouth = [100, 110, 90, 80, 70, 60, 50, 60, 70, 90, 100, 110]\nEast = [70, 75, 80, 85, 90, 95, 90, 85, 80, 75, 70, 65]\nWest = [120, 110, 100, 90, 80, 70, 70, 80, 90, 100, 110, 120]\n\n# Creating a dataframe\ndf = pd.DataFrame({\n    'North': North,\n    'South': South,\n    'East': East,\n    'West': West\n})\n\n# Changing the structure of dataframe to create violin plot\ndf_melt = pd.melt(df.reset_index(), id_vars=['index'], value_vars=['North', 'South', 'East', 'West'])\n\n# Replacing the column names\ndf_melt.columns = ['Month', 'Region', 'Rainfall']\n\n# Creating violin plot\nplt.figure(figsize=(10,7))\nvp = sns.violinplot(x=\"Region\", y=\"Rainfall\", inner=\"quartile\", data=df_melt)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'South' is the target object\n        violin.set_animated(False)\nplt.title('Seasonal variation in rainfall across four different regions')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_431dce2415b525a6/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_431dce2415b525a6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_431dce2415b525a6/figure.png"
    },
    {
        "id": "Violin_ee0e13f61663f389",
        "Input_code": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Prepare the data\nsimulations = ['Garden Oasis', 'Enchanted Forest', 'Underwater Paradise']\ncolor_intensities = [\n    [8, 5, 7, 6, 9, 8, 6, 7, 5, 6],\n    [7, 6, 5, 8, 7, 9, 6, 5, 8, 7],\n    [6, 8, 7, 5, 6, 5, 9, 7, 8, 6]\n]\n\n# Create a DataFrame\ndf = pd.DataFrame(dict(zip(simulations, color_intensities))).melt()\n\n# Rename columns\ndf.columns = ['Simulation', 'Color Intensity']\n\n# Create Violin Plot\nplt.figure(figsize=(10,8))\nsns.violinplot(x='Simulation', y='Color Intensity', data=df)\n\n# Display the plot\nplt.title('Violin plot of the floral color intensities in different VR simulations')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the picker state of the violins that contain the center point of the bounding box to True. For these same violins, apply a stroke with a line width of 2.985 and a foreground color of #74cc06.",
        "Input_image": "./test_dataset/Violin/Violin_ee0e13f61663f389/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.patheffects as path_effects\n\n# Prepare the data\nsimulations = ['Garden Oasis', 'Enchanted Forest', 'Underwater Paradise']\ncolor_intensities = [\n    [8, 5, 7, 6, 9, 8, 6, 7, 5, 6],\n    [7, 6, 5, 8, 7, 9, 6, 5, 8, 7],\n    [6, 8, 7, 5, 6, 5, 9, 7, 8, 6]\n]\n\n# Create a DataFrame\ndf = pd.DataFrame(dict(zip(simulations, color_intensities))).melt()\n\n# Rename columns\ndf.columns = ['Simulation', 'Color Intensity']\n\n# Create Violin Plot\nplt.figure(figsize=(10,8))\nvp = sns.violinplot(x='Simulation', y='Color Intensity', data=df)\n\n# Set picker state and stroke effect for the target object\nstroke_effect = path_effects.withStroke(linewidth=2.985254672392084, foreground='#74cc06')\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Enchanted Forest' is the target object\n        violin.set_picker(True)\n        violin.set_path_effects([stroke_effect])\n\n# Display the plot\nplt.title('Violin plot of the floral color intensities in different VR simulations')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_ee0e13f61663f389/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_ee0e13f61663f389/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_ee0e13f61663f389/figure.png"
    },
    {
        "id": "Violin_0da2ee80f28a2dc9",
        "Input_code": "# Import necessary libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create data\nLEO = [10, 12, 15, 11, 14, 13, 12, 16, 11, 10, 15, 14, 13, 12]\nMEO = [8, 11, 9, 10, 12, 8, 9, 10, 11, 10, 12, 8, 9, 10]\nGEO = [6, 7, 5, 8, 6, 7, 5, 8, 7, 6, 5, 8, 7, 6]\n\ndata = pd.DataFrame(list(zip(LEO+MEO+GEO, ['LEO']*len(LEO) + ['MEO']*len(MEO) + ['GEO']*len(GEO))), \n                    columns=['Size (cm)', 'Orbit'])\n\n# Create violin plot\nplt.figure(figsize=(9, 6))\nsns.violinplot(x='Orbit', y='Size (cm)', data=data)\n\n# Set title and labels\nplt.title('Space Debris Size Distribution at Different Orbital Altitudes')\nplt.xlabel('Orbital Altitudes')\nplt.ylabel('Size of Debris (in cm)')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the violins that contain the center point of the bounding box to 3.67, and change their linestyle to 'dashdot' as well.",
        "Input_image": "./test_dataset/Violin/Violin_0da2ee80f28a2dc9/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create data\nLEO = [10, 12, 15, 11, 14, 13, 12, 16, 11, 10, 15, 14, 13, 12]\nMEO = [8, 11, 9, 10, 12, 8, 9, 10, 11, 10, 12, 8, 9, 10]\nGEO = [6, 7, 5, 8, 6, 7, 5, 8, 7, 6, 5, 8, 7, 6]\n\ndata = pd.DataFrame(list(zip(LEO+MEO+GEO, ['LEO']*len(LEO) + ['MEO']*len(MEO) + ['GEO']*len(GEO))), \n                    columns=['Size (cm)', 'Orbit'])\n\n# Create violin plot\nplt.figure(figsize=(9, 6))\nvp = sns.violinplot(x='Orbit', y='Size (cm)', data=data)\n\n# Modify the linewidth and linestyle of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'MEO' is the target object\n        violin.set_linewidth(3.67)\n        violin.set_linestyle('dashdot')\n\n# Set title and labels\nplt.title('Space Debris Size Distribution at Different Orbital Altitudes')\nplt.xlabel('Orbital Altitudes')\nplt.ylabel('Size of Debris (in cm)')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_0da2ee80f28a2dc9/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_0da2ee80f28a2dc9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_0da2ee80f28a2dc9/figure.png"
    },
    {
        "id": "Violin_4feb3bcfa856bd4c",
        "Input_code": "# import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# given data\npH_level = ['4.5', '6.5', '8.5']\ngrowth_rates = [[0.4, 0.5, 0.3, 0.6, 0.7, 0.5, 0.4, 0.6, 0.7, 0.4], \n                [0.8, 0.9, 0.8, 0.7, 0.6, 0.5, 0.7, 0.9, 0.8, 0.7], \n                [0.3, 0.2, 0.4, 0.3, 0.5, 0.4, 0.5, 0.4, 0.3, 0.2]]\n\n# preparing data for plotting\ndata = []\nfor i in range(len(pH_level)):\n    for rate in growth_rates[i]:\n        data.append([pH_level[i], rate])\n\ndf = pd.DataFrame(data, columns=[\"Soil pH Level\", \"Growth Rates of Plant Species\"])\n\n# creating violin plot\nplt.figure(figsize=(8, 6))\nsns.violinplot(x=\"Soil pH Level\", y=\"Growth Rates of Plant Species\", data=df, inner=\"quartile\")\nplt.title(\"Growth Rate of Different Plant Species Across Various Soil pH Levels\")\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the face color of the violin that contains the center point of the bounding box to #3d54c4. Also, transform the whole violin to align with the axes' coordinate system.",
        "Input_image": "./test_dataset/Violin/Violin_4feb3bcfa856bd4c/Visual_figure.png",
        "Test_code": "# import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# given data\npH_level = ['4.5', '6.5', '8.5']\ngrowth_rates = [[0.4, 0.5, 0.3, 0.6, 0.7, 0.5, 0.4, 0.6, 0.7, 0.4], \n                [0.8, 0.9, 0.8, 0.7, 0.6, 0.5, 0.7, 0.9, 0.8, 0.7], \n                [0.3, 0.2, 0.4, 0.3, 0.5, 0.4, 0.5, 0.4, 0.3, 0.2]]\n\n# preparing data for plotting\ndata = []\nfor i in range(len(pH_level)):\n    for rate in growth_rates[i]:\n        data.append([pH_level[i], rate])\n\ndf = pd.DataFrame(data, columns=[\"Soil pH Level\", \"Growth Rates of Plant Species\"])\n\n# creating violin plot\nplt.figure(figsize=(8, 6))\nvp = sns.violinplot(x=\"Soil pH Level\", y=\"Growth Rates of Plant Species\", data=df, inner=\"quartile\")\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming '6.5' is the target object\n        violin.set_facecolor('#3d54c4')\n        violin.set_transform(plt.gca().transAxes)\nfor i, line in enumerate(plt.gca().lines):\n    if i in [1*3]+[1*3+1]+[1*3+2]:  # Assuming '6.5' is the target object\n        line.set_transform(plt.gca().transAxes)\nplt.title(\"Growth Rate of Different Plant Species Across Various Soil pH Levels\")\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_4feb3bcfa856bd4c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_4feb3bcfa856bd4c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_4feb3bcfa856bd4c/figure.png"
    },
    {
        "id": "Violin_3f9b8e0fbbd9a621",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# given data\nsatisfaction_scores = {\n    \"2016\": [3.5, 3.7, 4.0, 3.9, 4.1, 3.8, 3.6, 3.9, 3.8, 4.2, 3.7, 3.9, 4.0, 3.6, 3.8, 4.1, 3.9, 4.0, 4.3, 3.7],\n    \"2017\": [3.9, 4.1, 4.3, 4.6, 4.4, 4.2, 4.1, 4.3, 4.2, 4.5, 4.1, 4.3, 4.2, 4.4, 4.5, 4.7, 4.3, 4.2, 4.4, 4.6],\n    \"2018\": [4.6, 4.7, 4.8, 4.5, 4.7, 4.9, 4.7, 4.8, 4.9, 5.0, 4.6, 4.8, 4.7, 4.9, 5.1, 5.0, 4.8, 4.7, 4.9, 5.1],\n    \"2019\": [5.2, 5.3, 5.1, 5.5, 5.4, 5.7, 5.3, 5.6, 5.4, 5.2, 5.5, 5.3, 5.6, 5.8, 5.7, 5.4, 5.6, 5.3, 5.5, 5.7],\n    \"2020\": [5.8, 6.1, 6.0, 6.2, 6.4, 6.1, 6.3, 6.0, 6.4, 6.2, 6.0, 6.3, 6.2, 6.5, 6.4, 6.7, 6.3, 6.5, 6.4, 6.6]\n}\n\n# prepare data for violin plot\nyears = []\nscores = []\nfor year, score in satisfaction_scores.items():\n    years += [year] * len(score)\n    scores += score\n\n# create dataframe\ndf = pd.DataFrame({\"Year\": years, \"Satisfaction Score\": scores})\n\n# create violin plot\nsns.violinplot(x=\"Year\", y=\"Satisfaction Score\", data=df)\n\nplt.title('Employee Satisfaction Levels Over Time')\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the violin that contains the center point of the bounding box to 0.78.",
        "Input_image": "./test_dataset/Violin/Violin_3f9b8e0fbbd9a621/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# given data\nsatisfaction_scores = {\n    \"2016\": [3.5, 3.7, 4.0, 3.9, 4.1, 3.8, 3.6, 3.9, 3.8, 4.2, 3.7, 3.9, 4.0, 3.6, 3.8, 4.1, 3.9, 4.0, 4.3, 3.7],\n    \"2017\": [3.9, 4.1, 4.3, 4.6, 4.4, 4.2, 4.1, 4.3, 4.2, 4.5, 4.1, 4.3, 4.2, 4.4, 4.5, 4.7, 4.3, 4.2, 4.4, 4.6],\n    \"2018\": [4.6, 4.7, 4.8, 4.5, 4.7, 4.9, 4.7, 4.8, 4.9, 5.0, 4.6, 4.8, 4.7, 4.9, 5.1, 5.0, 4.8, 4.7, 4.9, 5.1],\n    \"2019\": [5.2, 5.3, 5.1, 5.5, 5.4, 5.7, 5.3, 5.6, 5.4, 5.2, 5.5, 5.3, 5.6, 5.8, 5.7, 5.4, 5.6, 5.3, 5.5, 5.7],\n    \"2020\": [5.8, 6.1, 6.0, 6.2, 6.4, 6.1, 6.3, 6.0, 6.4, 6.2, 6.0, 6.3, 6.2, 6.5, 6.4, 6.7, 6.3, 6.5, 6.4, 6.6]\n}\n\n# prepare data for violin plot\nyears = []\nscores = []\nfor year, score in satisfaction_scores.items():\n    years += [year] * len(score)\n    scores += score\n\n# create dataframe\ndf = pd.DataFrame({\"Year\": years, \"Satisfaction Score\": scores})\n\n# create violin plot\nvp = sns.violinplot(x=\"Year\", y=\"Satisfaction Score\", data=df)\nfor i, violin in enumerate(vp.collections):\n    if i in [0, 2]:\n        violin.set_alpha(0.78)\nplt.title('Employee Satisfaction Levels Over Time')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Violin/Violin_3f9b8e0fbbd9a621/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_3f9b8e0fbbd9a621/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_3f9b8e0fbbd9a621/figure.png"
    },
    {
        "id": "Violin_307b2b4528c8624c",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Initialize data\ncountries = ['France', 'Spain', 'United States', 'China', 'Germany']\ntourism_revenue = [[40, 42, 45, 48, 50, 52, 55, 58, 60, 62],     # France's revenue\n                   [35, 38, 40, 42, 45, 48, 50, 52, 55, 58],     # Spain's revenue\n                   [80, 85, 90, 92, 95, 98, 100, 105, 108, 110],     # US's revenue\n                   [50, 55, 58, 62, 65, 68, 70, 72, 75, 78],     # China's revenue\n                   [30, 32, 35, 38, 40, 42, 45, 48, 50, 52]]     # Germany's revenue\n\n# Convert data into format suitable for seaborn\ndata = []\n\nfor country, revenue in zip(countries, tourism_revenue):\n    for value in revenue:\n        data.append([country, value])\n\n# Convert into dataframe\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Country', 'Tourism Revenue'])\n\n# Initialize plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Country', y='Tourism Revenue', data=df)\n\n# Set title and labels\nplt.title('Tourism Revenue Comparison Over the Last Decade')\nplt.xlabel('Country')\nplt.ylabel('Tourism Revenue (Billions of Dollars)')\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the median line of the violin that contain the center point of the bounding box to #c26859. Also, set the visibility of its box part to False.",
        "Input_image": "./test_dataset/Violin/Violin_307b2b4528c8624c/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Initialize data\ncountries = ['France', 'Spain', 'United States', 'China', 'Germany']\ntourism_revenue = [[40, 42, 45, 48, 50, 52, 55, 58, 60, 62],     # France's revenue\n                   [35, 38, 40, 42, 45, 48, 50, 52, 55, 58],     # Spain's revenue\n                   [80, 85, 90, 92, 95, 98, 100, 105, 108, 110],     # US's revenue\n                   [50, 55, 58, 62, 65, 68, 70, 72, 75, 78],     # China's revenue\n                   [30, 32, 35, 38, 40, 42, 45, 48, 50, 52]]     # Germany's revenue\n\n# Convert data into format suitable for seaborn\ndata = []\n\nfor country, revenue in zip(countries, tourism_revenue):\n    for value in revenue:\n        data.append([country, value])\n\n# Convert into dataframe\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Country', 'Tourism Revenue'])\n\n# Initialize plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Country', y='Tourism Revenue', data=df)\n\n# Modify the face color and visibility of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Spain' is the target object\n        violin.set_visible(False)\nfor i, line in enumerate(plt.gca().lines):\n    if i == 1*3+1:  # Assuming 'Spain' is the target object\n        line.set_color('#c26859')\n\n# Set title and labels\nplt.title('Tourism Revenue Comparison Over the Last Decade')\nplt.xlabel('Country')\nplt.ylabel('Tourism Revenue (Billions of Dollars)')\n\n# Display plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_307b2b4528c8624c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_307b2b4528c8624c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_307b2b4528c8624c/figure.png"
    },
    {
        "id": "Violin_d10c9f4f50c7ca9a",
        "Input_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndepths_A = [1200, 1250, 1260, 1225, 1230, 1245, 1215, 1255]\ndepths_B = [1400, 1375, 1420, 1385, 1360, 1435, 1390, 1415]\ndepths_C = [1550, 1520, 1565, 1580, 1535, 1570, 1545, 1595]\ndepths_D = [1320, 1305, 1340, 1365, 1350, 1335, 1310, 1380]\n\n# Prepare data for seaborn\ndata = [depths_A, depths_B, depths_C, depths_D]\nlabels = ['Area A', 'Area B', 'Area C', 'Area D']\n\n# Create a new figure\nplt.figure(figsize=(10,6))\n\n# Create violin plot\nsns.violinplot(data=data, palette='viridis')\n\n# Set x-axis labels\nplt.xticks(range(4), labels)\n\n# Set title and labels\nplt.title(\"Seafloor Mapping using Sonar Data\")\nplt.ylabel(\"Depth (in meters)\")\nplt.xlabel(\"Seafloor Area\")\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the label of the violins that contain the center point of the bounding box to 'A new Label'.",
        "Input_image": "./test_dataset/Violin/Violin_d10c9f4f50c7ca9a/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndepths_A = [1200, 1250, 1260, 1225, 1230, 1245, 1215, 1255]\ndepths_B = [1400, 1375, 1420, 1385, 1360, 1435, 1390, 1415]\ndepths_C = [1550, 1520, 1565, 1580, 1535, 1570, 1545, 1595]\ndepths_D = [1320, 1305, 1340, 1365, 1350, 1335, 1310, 1380]\n\n# Prepare data for seaborn\ndata = [depths_A, depths_B, depths_C, depths_D]\nlabels = ['Area A', 'Area B', 'Area C', 'Area D']\n\n# Create a new figure\nplt.figure(figsize=(10,6))\n\n# Create violin plot\nvp = sns.violinplot(data=data, palette='viridis')\n\n# Set x-axis labels\nplt.xticks(range(4), labels)\n\n# Set title and labels\nplt.title(\"Seafloor Mapping using Sonar Data\")\nplt.ylabel(\"Depth (in meters)\")\nplt.xlabel(\"Seafloor Area\")\n\n# Modify the label of the target object\nlabels[1] = 'A new Label'\nplt.xticks(range(4), labels)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_d10c9f4f50c7ca9a/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_d10c9f4f50c7ca9a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_d10c9f4f50c7ca9a/figure.png"
    },
    {
        "id": "Violin_8d890b5d3dbd7e60",
        "Input_code": "# Import the necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\naltitude_0_1 = [380, 385, 382, 378, 381, 379, 383, 386, 384, 380]\naltitude_1_3 = [372, 370, 375, 373, 376, 371, 368, 374, 372, 377]\naltitude_3_5 = [365, 363, 362, 366, 360, 364, 368, 367, 363, 361]\naltitude_5_10 = [350, 355, 353, 358, 352, 357, 354, 356, 359, 351]\n\n# Create DataFrame from data\ndf = pd.DataFrame({\n    'CO2 Concentration (ppm)': altitude_0_1 + altitude_1_3 + altitude_3_5 + altitude_5_10,\n    'Altitude (km)': ['0-1']*len(altitude_0_1) + \n                     ['1_3']*len(altitude_1_3) + \n                     ['3_5']*len(altitude_3_5) + \n                     ['5_10']*len(altitude_5_10)\n})\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Altitude (km)', y='CO2 Concentration (ppm)', data=df)\n\n# Show the plot\nplt.title('Distribution of CO2 Concentration at Different Altitudes')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the animated state of the violins that contain the center point of the bounding box to False. Also, set their face color to #a72daa.",
        "Input_image": "./test_dataset/Violin/Violin_8d890b5d3dbd7e60/Visual_figure.png",
        "Test_code": "# Import the necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\naltitude_0_1 = [380, 385, 382, 378, 381, 379, 383, 386, 384, 380]\naltitude_1_3 = [372, 370, 375, 373, 376, 371, 368, 374, 372, 377]\naltitude_3_5 = [365, 363, 362, 366, 360, 364, 368, 367, 363, 361]\naltitude_5_10 = [350, 355, 353, 358, 352, 357, 354, 356, 359, 351]\n\n# Create DataFrame from data\ndf = pd.DataFrame({\n    'CO2 Concentration (ppm)': altitude_0_1 + altitude_1_3 + altitude_3_5 + altitude_5_10,\n    'Altitude (km)': ['0-1']*len(altitude_0_1) + \n                     ['1_3']*len(altitude_1_3) + \n                     ['3_5']*len(altitude_3_5) + \n                     ['5_10']*len(altitude_5_10)\n})\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Altitude (km)', y='CO2 Concentration (ppm)', data=df)\n\n# Modify the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming '1_3' is the target object\n        violin.set_animated(False)\n        violin.set_facecolor('#a72daa')\n\n# Show the plot\nplt.title('Distribution of CO2 Concentration at Different Altitudes')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_8d890b5d3dbd7e60/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_8d890b5d3dbd7e60/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_8d890b5d3dbd7e60/figure.png"
    },
    {
        "id": "Violin_ae5559e2f67babfb",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Star cluster ages\nyoung_star_cluster_ages = [100, 110, 120, 105, 115, 112, 108, 125, 130, 118]\nintermediate_star_cluster_ages = [500, 490, 510, 480, 495, 505, 515, 520, 485, 495]\nold_star_cluster_ages = [1000, 980, 1020, 995, 1015, 990, 1005, 1025, 985, 1010]\n\n# Combine all lists together\ndata = [young_star_cluster_ages, intermediate_star_cluster_ages, old_star_cluster_ages]\nlabels = ['Young', 'Intermediate Age', 'Old']\n\n# Create the violin plot\nplt.figure(figsize=(9, 6))\nsns.violinplot(data=data)\nplt.xticks([0, 1, 2], labels)\n\n# Provide the title and labels\nplt.title(\"Age Distribution of Star Clusters within the Milky Way Galaxy\")\nplt.xlabel(\"Star Cluster Age Group\")\nplt.ylabel(\"Age (Million Years)\")\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping for the violins that contain the center point of the bounding box to True. Additionally, ensure that the rasterized state for these violins is set to False.",
        "Input_image": "./test_dataset/Violin/Violin_ae5559e2f67babfb/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Star cluster ages\nyoung_star_cluster_ages = [100, 110, 120, 105, 115, 112, 108, 125, 130, 118]\nintermediate_star_cluster_ages = [500, 490, 510, 480, 495, 505, 515, 520, 485, 495]\nold_star_cluster_ages = [1000, 980, 1020, 995, 1015, 990, 1005, 1025, 985, 1010]\n\n# Combine all lists together\ndata = [young_star_cluster_ages, intermediate_star_cluster_ages, old_star_cluster_ages]\nlabels = ['Young', 'Intermediate Age', 'Old']\n\n# Create the violin plot\nplt.figure(figsize=(9, 6))\nvp = sns.violinplot(data=data)\nplt.xticks([0, 1, 2], labels)\n\n# Modify the clipping and rasterized state for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Intermediate Age' is the target object\n        violin.set_clip_on(True)\n        violin.set_rasterized(False)\n\n# Provide the title and labels\nplt.title(\"Age Distribution of Star Clusters within the Milky Way Galaxy\")\nplt.xlabel(\"Star Cluster Age Group\")\nplt.ylabel(\"Age (Million Years)\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_ae5559e2f67babfb/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_ae5559e2f67babfb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_ae5559e2f67babfb/figure.png"
    },
    {
        "id": "Violin_09e3de2bd62078cc",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Specify the datasets\nA = [0.34, 0.28, 0.42, 0.39, 0.25, 0.31, 0.37, 0.41, 0.29, 0.33]\nB = [0.45, 0.39, 0.58, 0.47, 0.55, 0.42, 0.49, 0.51, 0.44, 0.48]\nC = [0.61, 0.56, 0.49, 0.63, 0.58, 0.52, 0.59, 0.55, 0.57, 0.60]\nD = [0.72, 0.68, 0.76, 0.69, 0.74, 0.71, 0.67, 0.73, 0.75, 0.70]\nE = [0.83, 0.88, 0.79, 0.85, 0.81, 0.87, 0.82, 0.76, 0.84, 0.80]\n\n# Prepare a cumulative data list and labels\ndata = [A, B, C, D, E]\nlabels = ['Galaxy A', 'Galaxy B', 'Galaxy C', 'Galaxy D', 'Galaxy E']\n\n# Creates violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data)\nplt.title('Distribution of Cosmic Dust Levels in Five Different Galaxies')\nplt.xlabel('Galaxy')\nplt.ylabel('Cosmic Dust Level')\n\n# Set labels\nplt.xticks(range(len(data)), labels)\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the clipping state of the violins that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Violin/Violin_09e3de2bd62078cc/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Specify the datasets\nA = [0.34, 0.28, 0.42, 0.39, 0.25, 0.31, 0.37, 0.41, 0.29, 0.33]\nB = [0.45, 0.39, 0.58, 0.47, 0.55, 0.42, 0.49, 0.51, 0.44, 0.48]\nC = [0.61, 0.56, 0.49, 0.63, 0.58, 0.52, 0.59, 0.55, 0.57, 0.60]\nD = [0.72, 0.68, 0.76, 0.69, 0.74, 0.71, 0.67, 0.73, 0.75, 0.70]\nE = [0.83, 0.88, 0.79, 0.85, 0.81, 0.87, 0.82, 0.76, 0.84, 0.80]\n\n# Prepare a cumulative data list and labels\ndata = [A, B, C, D, E]\nlabels = ['Galaxy A', 'Galaxy B', 'Galaxy C', 'Galaxy D', 'Galaxy E']\n\n# Creates violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 2:  # Assuming 'Galaxy C' is the target object\n        violin.set_clip_on(False)\nplt.title('Distribution of Cosmic Dust Levels in Five Different Galaxies')\nplt.xlabel('Galaxy')\nplt.ylabel('Cosmic Dust Level')\n\n# Set labels\nplt.xticks(range(len(data)), labels)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Violin/Violin_09e3de2bd62078cc/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_09e3de2bd62078cc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_09e3de2bd62078cc/figure.png"
    },
    {
        "id": "Violin_6a9dca723d555c12",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Dataset\nsystolic_bp = [120, 122, 118, 125, 130, 132, 128, 134, 120, 115, 136, 128, 126, 124, 127, 130, 133, 129, 126, 122]\ndiastolic_bp = [80, 85, 82, 90, 88, 86, 85, 92, 81, 79, 88, 84, 86, 83, 84, 89, 90, 87, 85, 82]\nlabels = ['Systolic']*len(systolic_bp) + ['Diastolic']*len(diastolic_bp)\nvalues = systolic_bp + diastolic_bp\n\ndata = pd.DataFrame({'Blood Pressure Type': labels, 'Value (mmHg)': values})\n\n# Violin plot \nplt.figure(figsize=(10,6))\nsns.violinplot(x='Blood Pressure Type', y='Value (mmHg)', data=data)\nplt.title('Blood Pressure Distribution')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the violins that contain the center point of the bounding box using the coordinates (21, 272) for the lower left corner, a width of 504, and a height of 223 with matplotlib.transforms.Bbox. Additionally, enable the animated state for these violins by setting it to True.",
        "Input_image": "./test_dataset/Violin/Violin_6a9dca723d555c12/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib.transforms import Bbox\n\n# Dataset\nsystolic_bp = [120, 122, 118, 125, 130, 132, 128, 134, 120, 115, 136, 128, 126, 124, 127, 130, 133, 129, 126, 122]\ndiastolic_bp = [80, 85, 82, 90, 88, 86, 85, 92, 81, 79, 88, 84, 86, 83, 84, 89, 90, 87, 85, 82]\nlabels = ['Systolic']*len(systolic_bp) + ['Diastolic']*len(diastolic_bp)\nvalues = systolic_bp + diastolic_bp\n\ndata = pd.DataFrame({'Blood Pressure Type': labels, 'Value (mmHg)': values})\n\n# Violin plot \nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Blood Pressure Type', y='Value (mmHg)', data=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 0:  # Assuming 'Systolic' is the target object\n        bbox = Bbox.from_bounds(21,272, 504, 223)\n        violin.set_clip_box(bbox)\n        violin.set_animated(True)\nplt.title('Blood Pressure Distribution')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Violin/Violin_6a9dca723d555c12/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_6a9dca723d555c12/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_6a9dca723d555c12/figure.png"
    },
    {
        "id": "Violin_a51b250523f13db0",
        "Input_code": "# Importing Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data\ncity_A_temps = [25, 27, 28, 30, 26, 29, 31, 33, 28, 26, 29, 30, 32, 27, 31]\ncity_B_temps = [22, 24, 26, 28, 25, 27, 29, 31, 26, 23, 28, 29, 30, 25, 27]\ncity_C_temps = [20, 22, 24, 26, 23, 25, 27, 29, 24, 21, 26, 27, 28, 22, 25]\n\n# Creating a DataFrame\ndf = pd.DataFrame({\n    'City A': city_A_temps,\n    'City B': city_B_temps,\n    'City C': city_C_temps\n})\n\n# Melting DataFrame\ndf_melt = pd.melt(df)\n\n# Plotting the Data\nplt.figure(figsize=(10,7))\nsns.violinplot(x='variable', y='value', data=df_melt)\nplt.xlabel('City')\nplt.ylabel('Maximum Temperature')\nplt.title('Weather pattern analysis')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Disable rasterization and set the visibility to False for the box part that contains the center point of the bounding box.",
        "Input_image": "./test_dataset/Violin/Violin_a51b250523f13db0/Visual_figure.png",
        "Test_code": "# Importing Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data\ncity_A_temps = [25, 27, 28, 30, 26, 29, 31, 33, 28, 26, 29, 30, 32, 27, 31]\ncity_B_temps = [22, 24, 26, 28, 25, 27, 29, 31, 26, 23, 28, 29, 30, 25, 27]\ncity_C_temps = [20, 22, 24, 26, 23, 25, 27, 29, 24, 21, 26, 27, 28, 22, 25]\n\n# Creating a DataFrame\ndf = pd.DataFrame({\n    'City A': city_A_temps,\n    'City B': city_B_temps,\n    'City C': city_C_temps\n})\n\n# Melting DataFrame\ndf_melt = pd.melt(df)\n\n# Plotting the Data\nplt.figure(figsize=(10,7))\nvp = sns.violinplot(x='variable', y='value', data=df_melt)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'City B' is the target object\n        violin.set_rasterized(False)\n        violin.set_visible(False)\nplt.xlabel('City')\nplt.ylabel('Maximum Temperature')\nplt.title('Weather pattern analysis')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_a51b250523f13db0/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_a51b250523f13db0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_a51b250523f13db0/figure.png"
    },
    {
        "id": "Violin_488797c860bf3e25",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data\ndepths = ['0m']*5 + ['50m']*5 + ['100m']*5 + ['200m']*5 + ['500m']*5 + ['1000m']*5 + ['2000m']*5 + ['3000m']*5 + ['4000m']*5\nzones = ['Surface']*15 + ['Mesopelagic']*15 + ['Bathypelagic']*15\nabundance = [1000, 1200, 800, 1100, 900, 600, 700, 800, 500, 650, 400, 450, 500, 350, 300, 200, 250, 300, 180, 220, 150, 180, 200, 120, 160, 100, 120, 150, 80, 110, 50, 60, 70, 40, 55, 30, 40, 50, 25, 35, 20, 25, 30, 15, 18]\n\n# Create DataFrame\ndf = pd.DataFrame({'Depth': depths, 'Zone': zones, 'Abundance': abundance})\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Depth\", y=\"Abundance\", hue=\"Zone\", data=df)\nplt.title('Oceanic Microbe Abundance Distribution')\nplt.xlabel('Depth')\nplt.ylabel('Abundance (cells per ml)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the violin that contains the center point of the bounding box to True. Also, update the label of this violin to 'A new Label'.",
        "Input_image": "./test_dataset/Violin/Violin_488797c860bf3e25/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data\ndepths = ['0m']*5 + ['50m']*5 + ['100m']*5 + ['200m']*5 + ['500m']*5 + ['1000m']*5 + ['2000m']*5 + ['3000m']*5 + ['4000m']*5\nzones = ['Surface']*15 + ['Mesopelagic']*15 + ['Bathypelagic']*15\nabundance = [1000, 1200, 800, 1100, 900, 600, 700, 800, 500, 650, 400, 450, 500, 350, 300, 200, 250, 300, 180, 220, 150, 180, 200, 120, 160, 100, 120, 150, 80, 110, 50, 60, 70, 40, 55, 30, 40, 50, 25, 35, 20, 25, 30, 15, 18]\n\n# Create DataFrame\ndf = pd.DataFrame({'Depth': depths, 'Zone': zones, 'Abundance': abundance})\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Depth\", y=\"Abundance\", hue=\"Zone\", data=df)\nplt.title('Oceanic Microbe Abundance Distribution')\nplt.xlabel('Depth')\nplt.ylabel('Abundance (cells per ml)')\n\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Mesopelagic' zone is the target object\n        violin.set_clip_on(True)\n        # To set a label, we need to find the corresponding text object and modify it\n        # This is a workaround since direct label setting for violins is not straightforward\n        # We can add a text annotation near the violin\n        plt.text(i, df[df['Zone'] == 'Mesopelagic']['Abundance'].median(), 'A new Label', color='black', ha='center')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_488797c860bf3e25/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_488797c860bf3e25/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_488797c860bf3e25/figure.png"
    },
    {
        "id": "Violin_7c15e7e7fb8690ab",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nshallow = [15, 10, 12, 17, 14, 11, 13, 16, 18, 14]\nmid = [8, 12, 10, 15, 9, 11, 14, 8, 13, 12]\ndeep = [5, 7, 6, 9, 4, 8, 10, 6, 11, 7]\n\ndata = [shallow, mid, deep]\nlabels = ['Shallow', 'Mid', 'Deep']\n\n# Create figure\nfig, ax = plt.subplots()\n\n# Create violin plot\nsns.violinplot(data=data, ax=ax)\n\n# Set labels\nax.set_xticklabels(labels)\n\n# Set title and labels\nplt.title('Distribution of Fish Species Counts in Different Zones')\nplt.xlabel('Zones')\nplt.ylabel('Fish Species Counts')\n\n# Show plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the rasterized state of the violins that contain the center point of the bounding box to False. Also, set the snap state of these violins to True.",
        "Input_image": "./test_dataset/Violin/Violin_7c15e7e7fb8690ab/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nshallow = [15, 10, 12, 17, 14, 11, 13, 16, 18, 14]\nmid = [8, 12, 10, 15, 9, 11, 14, 8, 13, 12]\ndeep = [5, 7, 6, 9, 4, 8, 10, 6, 11, 7]\n\ndata = [shallow, mid, deep]\nlabels = ['Shallow', 'Mid', 'Deep']\n\n# Create figure\nfig, ax = plt.subplots()\n\n# Create violin plot\nviolins = sns.violinplot(data=data, ax=ax)\n\n# Set labels\nax.set_xticklabels(labels)\n\n# Set title and labels\nplt.title('Distribution of Fish Species Counts in Different Zones')\nplt.xlabel('Zones')\nplt.ylabel('Fish Species Counts')\n\n# Modify specific violins\nfor i, violin in enumerate(violins.collections):\n    if i == 1:  # Assuming 'Mid' is the target object\n        violin.set_rasterized(False)\n        violin.set_snap(True)\n\n# Show plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_7c15e7e7fb8690ab/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_7c15e7e7fb8690ab/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_7c15e7e7fb8690ab/figure.png"
    },
    {
        "id": "Violin_3cbca3458e9dd4fc",
        "Input_code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Data\ndepth = [0, 5, 10, 15, 20, 25, 30]\ntemperature = {\n    '0': [25, 25, 26, 26, 26.5, 26, 25.5],\n    '5': [24, 24.5, 25, 25.5, 26, 25.5, 25],\n    '10': [23, 23.5, 24, 24.5, 24.5, 24, 23.5],\n    '15': [22, 22.5, 23, 23, 23, 22.5, 22],\n    '20': [21, 21, 21.5, 22, 22, 21.5, 21],\n    '25': [20, 20.5, 20.5, 20.5, 20.5, 20, 19.5],\n    '30': [19, 19, 19, 19, 19, 18.5, 18]\n}\n\n# Convert the data into a pandas dataframe\ndf = pd.DataFrame(data=temperature)\n\n# Change the dataframe from wide to long form\ndf = df.melt(var_name='Depth (in meters)', value_name='Temperature (in degrees Celsius)')\n\n# Convert Depth from string to integer\ndf['Depth (in meters)'] = df['Depth (in meters)'].astype(int)\n\n# Plot the data using a violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='Depth (in meters)', y='Temperature (in degrees Celsius)', data=df)\nplt.title('Temperature Variations at Different Depths of an Underwater Cave System Over a 24-Hour Period')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Hide the median line of the violin that contain the center point of the bounding box. For the same violin, adjust its box part's transformation to align with the axes' coordinate system.",
        "Input_image": "./test_dataset/Violin/Violin_3cbca3458e9dd4fc/Visual_figure.png",
        "Test_code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Data\ndepth = [0, 5, 10, 15, 20, 25, 30]\ntemperature = {\n    '0': [25, 25, 26, 26, 26.5, 26, 25.5],\n    '5': [24, 24.5, 25, 25.5, 26, 25.5, 25],\n    '10': [23, 23.5, 24, 24.5, 24.5, 24, 23.5],\n    '15': [22, 22.5, 23, 23, 23, 22.5, 22],\n    '20': [21, 21, 21.5, 22, 22, 21.5, 21],\n    '25': [20, 20.5, 20.5, 20.5, 20.5, 20, 19.5],\n    '30': [19, 19, 19, 19, 19, 18.5, 18]\n}\n\n# Convert the data into a pandas dataframe\ndf = pd.DataFrame(data=temperature)\n\n# Change the dataframe from wide to long form\ndf = df.melt(var_name='Depth (in meters)', value_name='Temperature (in degrees Celsius)')\n\n# Convert Depth from string to integer\ndf['Depth (in meters)'] = df['Depth (in meters)'].astype(int)\n\n# Plot the data using a violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='Depth (in meters)', y='Temperature (in degrees Celsius)', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 3:  # Assuming '15' meters depth is the target object\n        violin.set_visible(False)\n        violin.set_transform(plt.gca().transAxes)\nfor i, line in enumerate(plt.gca().lines):\n    if i == 3*3+1:  # Assuming '15' meters depth is the target object\n        line.set_visible(False)\nplt.title('Temperature Variations at Different Depths of an Underwater Cave System Over a 24-Hour Period')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "3",
        "Test_image": "./test_dataset/Violin/Violin_3cbca3458e9dd4fc/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_3cbca3458e9dd4fc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_3cbca3458e9dd4fc/figure.png"
    },
    {
        "id": "Violin_d0dd22fd758497a6",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data \ntemp_25 = [18, 21, 19, 22, 20, 19, 21, 20, 19, 22, 20, 19, 20, 21, 20, 19, 21, 19, 20, 21]\ntemp_30 = [21, 23, 22, 24, 23, 22, 23, 22, 24, 23, 23, 22, 23, 24, 22, 23, 22, 23, 24, 22]\ntemp_35 = [20, 19, 22, 19, 20, 21, 19, 21, 19, 22, 19, 20, 19, 21, 19, 21, 20, 21, 19, 22]\n\ntemps = ['25\u00b0C']*len(temp_25) + ['30\u00b0C']*len(temp_30) + ['35\u00b0C']*len(temp_35)\nheights = temp_25 + temp_30 + temp_35\n\n# Plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=temps, y=heights)\nplt.title('Impact of Temperature Conditions on plant growth')\nplt.xlabel('Temperature Conditions')\nplt.ylabel('Plant height (cm)')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the violins that contain the center point of the bounding box to 0.56. For those same violins, set the z-order to 2. Additionally, apply a shadow effect with an offset of (3.85, 3.67) and randomly choose the shadow color from either 'gray' or 'gold'.",
        "Input_image": "./test_dataset/Violin/Violin_d0dd22fd758497a6/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Data \ntemp_25 = [18, 21, 19, 22, 20, 19, 21, 20, 19, 22, 20, 19, 20, 21, 20, 19, 21, 19, 20, 21]\ntemp_30 = [21, 23, 22, 24, 23, 22, 23, 22, 24, 23, 23, 22, 23, 24, 22, 23, 22, 23, 24, 22]\ntemp_35 = [20, 19, 22, 19, 20, 21, 19, 21, 19, 22, 19, 20, 19, 21, 19, 21, 20, 21, 19, 22]\n\ntemps = ['25\u00b0C']*len(temp_25) + ['30\u00b0C']*len(temp_30) + ['35\u00b0C']*len(temp_35)\nheights = temp_25 + temp_30 + temp_35\n\n# Plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=temps, y=heights)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming '30\u00b0C' is the target object\n        violin.set_alpha(0.56)\n        violin.set_zorder(2)\n        shadow_color = random.choice(['gray','gold'])\n        violin.set_path_effects([SimplePatchShadow(offset=(3.85,3.67), shadow_rgbFace=shadow_color), Normal()])\nplt.title('Impact of Temperature Conditions on plant growth')\nplt.xlabel('Temperature Conditions')\nplt.ylabel('Plant height (cm)')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_d0dd22fd758497a6/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_d0dd22fd758497a6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_d0dd22fd758497a6/figure.png"
    },
    {
        "id": "Violin_80ab84a7c2f6653a",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\nfruits = ['Apple', 'Banana', 'Cherry', 'Grapefruit', 'Kiwi', 'Lemon', 'Mango', 'Orange', 'Pineapple', 'Watermelon']\nsugar_content = [[10.3, 10.8, 11.2, 11.5, 11.3, 10.9, 11.7, 11.1, 11.9, 11.4],\n                 [16.3, 15.7, 16.1, 16.4, 16.2, 16.6, 15.5, 15.9, 16.2, 16.7],\n                 [8.9, 9.2, 9.4, 9.1, 9.7, 9.6, 9.8, 9.3, 9.5, 9.9],\n                 [6.4, 6.1, 5.7, 6.3, 6.0, 6.6, 5.9, 5.8, 6.2, 6.5],\n                 [8.3, 8.1, 8.6, 8.2, 8.5, 8.9, 8.7, 8.4, 8.8, 8.0],\n                 [2.5, 2.2, 2.4, 2.6, 2.3, 2.9, 2.7, 2.8, 2.6, 2.5],\n                 [14.3, 14.9, 14.6, 14.2, 15.1, 14.8, 14.4, 14.7, 14.5, 15.2],\n                 [8.7, 8.5, 8.9, 9.4, 8.6, 8.3, 8.8, 9.3, 8.4, 8.2],\n                 [8.4, 8.7, 8.2, 7.9, 8.6, 8.3, 9.0, 8.8, 8.5, 8.9],\n                 [6.2, 6.0, 6.4, 5.9, 6.1, 5.8, 6.3, 5.7, 6.5, 6.7]]\n\n# Prepare data for seaborn\ndata = []\nfor fruit, values in zip(fruits, sugar_content):\n    for value in values:\n        data.append({\"Fruit\": fruit, \"Sugar Content (g/100g)\": value})\n\n# Create DataFrame\ndf = pd.DataFrame(data)\n\n# Create Violin Plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Fruit\", y=\"Sugar Content (g/100g)\", data=df)\nplt.title('Sugar Content Composition of Various Fruits')\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the fill pattern of the violin that contains the center point of the bounding box to a hatch pattern, using the color #cb579d.",
        "Input_image": "./test_dataset/Violin/Violin_80ab84a7c2f6653a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\nfruits = ['Apple', 'Banana', 'Cherry', 'Grapefruit', 'Kiwi', 'Lemon', 'Mango', 'Orange', 'Pineapple', 'Watermelon']\nsugar_content = [[10.3, 10.8, 11.2, 11.5, 11.3, 10.9, 11.7, 11.1, 11.9, 11.4],\n                 [16.3, 15.7, 16.1, 16.4, 16.2, 16.6, 15.5, 15.9, 16.2, 16.7],\n                 [8.9, 9.2, 9.4, 9.1, 9.7, 9.6, 9.8, 9.3, 9.5, 9.9],\n                 [6.4, 6.1, 5.7, 6.3, 6.0, 6.6, 5.9, 5.8, 6.2, 6.5],\n                 [8.3, 8.1, 8.6, 8.2, 8.5, 8.9, 8.7, 8.4, 8.8, 8.0],\n                 [2.5, 2.2, 2.4, 2.6, 2.3, 2.9, 2.7, 2.8, 2.6, 2.5],\n                 [14.3, 14.9, 14.6, 14.2, 15.1, 14.8, 14.4, 14.7, 14.5, 15.2],\n                 [8.7, 8.5, 8.9, 9.4, 8.6, 8.3, 8.8, 9.3, 8.4, 8.2],\n                 [8.4, 8.7, 8.2, 7.9, 8.6, 8.3, 9.0, 8.8, 8.5, 8.9],\n                 [6.2, 6.0, 6.4, 5.9, 6.1, 5.8, 6.3, 5.7, 6.5, 6.7]]\n\n# Prepare data for seaborn\ndata = []\nfor fruit, values in zip(fruits, sugar_content):\n    for value in values:\n        data.append({\"Fruit\": fruit, \"Sugar Content (g/100g)\": value})\n\n# Create DataFrame\ndf = pd.DataFrame(data)\n\n# Create Violin Plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Fruit\", y=\"Sugar Content (g/100g)\", data=df)\nfor i, violin in enumerate(vp.collections):\n    if i in [2, 5]:\n        violin.set_facecolor('#cb579d')\n        violin.set_hatch('-')\nplt.title('Sugar Content Composition of Various Fruits')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Violin/Violin_80ab84a7c2f6653a/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_80ab84a7c2f6653a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_80ab84a7c2f6653a/figure.png"
    },
    {
        "id": "Violin_b9d5c5b0613b09a2",
        "Input_code": "# Required Libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n  \"Species A\": [50, 60, 55, 70, 65, 58, 45],\n  \"Species B\": [85, 80, 82, 78, 79, 81, 84, 86],\n  \"Species C\": [40, 38, 42, 37, 39, 41, 36, 43],\n  \"Species D\": [95, 92, 97, 93, 96, 91, 94]\n}\n\n# Converting the given data to a DataFrame\ndf = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in data.items()]))\n\n# Melting the DataFrame to a long form\ndf_melted = pd.melt(df)\n\n# Creating the Violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"variable\", y=\"value\", data=df_melted)\nplt.xlabel(\"Species\")\nplt.ylabel(\"Depths (m)\")\nplt.title(\"Underwater Creatures Habitat Mapping\")\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the edges of the violins that contain the center point of the bounding box to 1.1.",
        "Input_image": "./test_dataset/Violin/Violin_b9d5c5b0613b09a2/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n  \"Species A\": [50, 60, 55, 70, 65, 58, 45],\n  \"Species B\": [85, 80, 82, 78, 79, 81, 84, 86],\n  \"Species C\": [40, 38, 42, 37, 39, 41, 36, 43],\n  \"Species D\": [95, 92, 97, 93, 96, 91, 94]\n}\n\n# Converting the given data to a DataFrame\ndf = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in data.items()]))\n\n# Melting the DataFrame to a long form\ndf_melted = pd.melt(df)\n\n# Creating the Violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"variable\", y=\"value\", data=df_melted)\nfor i, violin in enumerate(vp.collections):\n    if i in [0, 2]:\n        violin.set_edgecolor('black')\n        violin.set_linewidth(1.1)\nplt.xlabel(\"Species\")\nplt.ylabel(\"Depths (m)\")\nplt.title(\"Underwater Creatures Habitat Mapping\")\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Violin/Violin_b9d5c5b0613b09a2/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_b9d5c5b0613b09a2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_b9d5c5b0613b09a2/figure.png"
    },
    {
        "id": "Violin_0e86349c737b48a1",
        "Input_code": "import pandas as pd\n# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ncrater_depths = {\n    'Mare Serenitatis': [10, 12, 8, 16, 14, 11, 9, 13],\n    'Crisium Basin': [18, 20, 22, 16, 19, 21, 17, 15],\n    'Plato Crater': [14, 11, 12, 10, 13, 15, 9, 16]\n}\n\n# Prepare data for seaborn\ndata = []\nlabels = []\nfor label, depths in crater_depths.items():\n    data.extend(depths)\n    labels.extend([label]*len(depths))\n\n# violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=labels, y=data)\nplt.title('Lunar Crater Depth Analysis')\nplt.xlabel('Lunar Region')\nplt.ylabel('Crater Depth (in meters)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin enclosed by the bounding box to #053a33 and set its transparency to 0.42.",
        "Input_image": "./test_dataset/Violin/Violin_0e86349c737b48a1/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ncrater_depths = {\n    'Mare Serenitatis': [10, 12, 8, 16, 14, 11, 9, 13],\n    'Crisium Basin': [18, 20, 22, 16, 19, 21, 17, 15],\n    'Plato Crater': [14, 11, 12, 10, 13, 15, 9, 16]\n}\n\n# Prepare data for seaborn\ndata = []\nlabels = []\nfor label, depths in crater_depths.items():\n    data.extend(depths)\n    labels.extend([label]*len(depths))\n\n# violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=labels, y=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Targeting the second violin\n        violin.set_facecolor('#053a33')\n        violin.set_alpha(0.42)\nplt.title('Lunar Crater Depth Analysis')\nplt.xlabel('Lunar Region')\nplt.ylabel('Crater Depth (in meters)')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_0e86349c737b48a1/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_0e86349c737b48a1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_0e86349c737b48a1/figure.png"
    },
    {
        "id": "Violin_6e35addbd76c6437",
        "Input_code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Creating a dictionary with the data\ndata = {'Species X': [12, 10, 14, 11, 13, 12, 15, 13, 11, 14],\n        'Species Y': [9, 8, 10, 7, 11, 9, 12, 10, 8, 11],\n        'Species Z': [16, 15, 17, 14, 18, 16, 19, 15, 14, 17]}\n\n# Transforming the dictionary into a DataFrame to work with Seaborn\ndf = pd.DataFrame(data)\n\n# Reshaping the DataFrame from wide to long format for better compatibility with Seaborn plotting\ndf_melted = df.melt(var_name='Species', value_name='Growth Duration')\n\n# Creating the violin plot\nplt.figure(figsize=(8,6))\nsns.violinplot(x='Species', y='Growth Duration', data=df_melted)\nplt.title('Psychedelic Mushroom Growth Patterns')\nplt.ylabel('Growth Duration in Days')\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the fill pattern of the violin that contains the center point of the bounding box to an 'x' hatch pattern.",
        "Input_image": "./test_dataset/Violin/Violin_6e35addbd76c6437/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Creating a dictionary with the data\ndata = {'Species X': [12, 10, 14, 11, 13, 12, 15, 13, 11, 14],\n        'Species Y': [9, 8, 10, 7, 11, 9, 12, 10, 8, 11],\n        'Species Z': [16, 15, 17, 14, 18, 16, 19, 15, 14, 17]}\n\n# Transforming the dictionary into a DataFrame to work with Seaborn\ndf = pd.DataFrame(data)\n\n# Reshaping the DataFrame from wide to long format for better compatibility with Seaborn plotting\ndf_melted = df.melt(var_name='Species', value_name='Growth Duration')\n\n# Creating the violin plot\nplt.figure(figsize=(8,6))\nvp = sns.violinplot(x='Species', y='Growth Duration', data=df_melted)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Selecting the second violin (Species Y) as the target\n        violin.set_hatch('x')\nplt.title('Psychedelic Mushroom Growth Patterns')\nplt.ylabel('Growth Duration in Days')\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_6e35addbd76c6437/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_6e35addbd76c6437/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_6e35addbd76c6437/figure.png"
    },
    {
        "id": "Violin_2e0a49341e8bd16d",
        "Input_code": "import pandas as pd\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Microbial data for each site\nsite_A = [200, 180, 220, 210, 190, 195, 205, 215, 190, 200]\nsite_B = [150, 160, 170, 165, 175, 155, 145, 180, 185, 170]\nsite_C = [120, 130, 110, 140, 125, 135, 115, 130, 145, 120]\n\n# Combine the different site data into one list\ndata = [site_A, site_B, site_C]\n# Give names to the datasets\nnames = [\"Site A\", \"Site B\", \"Site C\"]\n\n# Create a violin plot\nsns.violinplot(data=data)\n\n# Customize the axis labels\nplt.xlabel('Sites')\nplt.ylabel('Microbial Counts (in cells/ml)')\nplt.xticks([0, 1, 2], names)\n\n# Title of the plot\nplt.title('Microbial Abundance in Martian Underground Water Samples')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #005c60.",
        "Input_image": "./test_dataset/Violin/Violin_2e0a49341e8bd16d/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Microbial data for each site\nsite_A = [200, 180, 220, 210, 190, 195, 205, 215, 190, 200]\nsite_B = [150, 160, 170, 165, 175, 155, 145, 180, 185, 170]\nsite_C = [120, 130, 110, 140, 125, 135, 115, 130, 145, 120]\n\n# Combine the different site data into one list\ndata = [site_A, site_B, site_C]\n# Give names to the datasets\nnames = [\"Site A\", \"Site B\", \"Site C\"]\n\n# Create a violin plot\nvp = sns.violinplot(data=data)\n\n# Customize the axis labels\nplt.xlabel('Sites')\nplt.ylabel('Microbial Counts (in cells/ml)')\nplt.xticks([0, 1, 2], names)\n\n# Title of the plot\nplt.title('Microbial Abundance in Martian Underground Water Samples')\n\n# Modify the color of the violin corresponding to the Target_object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming we choose the second violin as the target\n        violin.set_facecolor('#005c60')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_2e0a49341e8bd16d/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_2e0a49341e8bd16d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_2e0a49341e8bd16d/figure.png"
    },
    {
        "id": "Violin_e35fb9adc0920b7f",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Define data\nmangoes = [5, 4, 6, 5, 7, 4, 6, 5, 7, 4, 6, 5, 7, 4, 6, 5, 7, 4, 6, 5, 7]\npapayas = [3, 4, 2, 4, 3, 5, 6, 5, 3, 2, 4, 6, 4, 5, 3, 6, 2, 5, 4, 3, 2]\nbananas = [2, 1, 3, 2, 3, 1, 2, 3, 1, 3, 2, 3, 2, 1, 3, 2, 3, 1, 2, 3, 1]\n\nfruit_dict = {\"Mangoes\": mangoes, \"Papayas\": papayas, \"Bananas\": bananas}\n\nfruit = []\nripening_time = []\n\nfor key, value in fruit_dict.items():\n    for i in value:\n        fruit.append(key)\n        ripening_time.append(i)\n\ndata = pd.DataFrame({\"Fruit\": fruit, \"Ripening Time\": ripening_time})\n\n# Violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Fruit\", y=\"Ripening Time\", data=data)\n\nplt.title(\"Ripening Time Distributions for Tropical Fruits\")\nplt.xlabel(\"Type of Fruit\")\nplt.ylabel(\"Ripening Time (in days)\")\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin enclosed by the bounding box to #a43be0.",
        "Input_image": "./test_dataset/Violin/Violin_e35fb9adc0920b7f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Define data\nmangoes = [5, 4, 6, 5, 7, 4, 6, 5, 7, 4, 6, 5, 7, 4, 6, 5, 7, 4, 6, 5, 7]\npapayas = [3, 4, 2, 4, 3, 5, 6, 5, 3, 2, 4, 6, 4, 5, 3, 6, 2, 5, 4, 3, 2]\nbananas = [2, 1, 3, 2, 3, 1, 2, 3, 1, 3, 2, 3, 2, 1, 3, 2, 3, 1, 2, 3, 1]\n\nfruit_dict = {\"Mangoes\": mangoes, \"Papayas\": papayas, \"Bananas\": bananas}\n\nfruit = []\nripening_time = []\n\nfor key, value in fruit_dict.items():\n    for i in value:\n        fruit.append(key)\n        ripening_time.append(i)\n\ndata = pd.DataFrame({\"Fruit\": fruit, \"Ripening Time\": ripening_time})\n\n# Violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Fruit\", y=\"Ripening Time\", data=data)\n\nfor i, violin in enumerate(vp.collections):\n    if i == 1:\n        violin.set_facecolor('#a43be0')\n\nplt.title(\"Ripening Time Distributions for Tropical Fruits\")\nplt.xlabel(\"Type of Fruit\")\nplt.ylabel(\"Ripening Time (in days)\")\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_e35fb9adc0920b7f/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_e35fb9adc0920b7f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_e35fb9adc0920b7f/figure.png"
    },
    {
        "id": "Violin_5a07e446e1a2e224",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n# Data\necosystems = ['Forests', 'Oceans', 'Grasslands', 'Mountains', 'Wetlands']\ndata = [[100, 110, 120, 130, 140, 150, 160, 170, 180, 190],    # Forests\n        [500, 520, 540, 560, 580, 600, 620, 640, 660, 680],    # Oceans\n        [200, 205, 210, 215, 220, 225, 230, 235, 240, 245],    # Grasslands\n        [90, 100, 110, 120, 130, 140, 150, 160, 170, 180],     # Mountains\n        [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]]    # Wetlands\n\n# Creating a dataframe\nimport pandas as pd\n\ndf = pd.DataFrame(data, index=ecosystems).transpose()\n\n# Plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(data=df)\nplt.title(\"Impact of Global Warming on Population of Endangered Species in Different Ecosystems\")\nplt.xlabel(\"Ecosystems\")\nplt.ylabel(\"Population Count\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the violins that contain the center point of the bounding box to True. For the same points, also apply a stroke to the violins linked to the center point, with a linewidth of 3.23 and a foreground color of #055fe7.",
        "Input_image": "./test_dataset/Violin/Violin_5a07e446e1a2e224/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom matplotlib.patheffects import withStroke\n# Data\necosystems = ['Forests', 'Oceans', 'Grasslands', 'Mountains', 'Wetlands']\ndata = [[100, 110, 120, 130, 140, 150, 160, 170, 180, 190],    # Forests\n        [500, 520, 540, 560, 580, 600, 620, 640, 660, 680],    # Oceans\n        [200, 205, 210, 215, 220, 225, 230, 235, 240, 245],    # Grasslands\n        [90, 100, 110, 120, 130, 140, 150, 160, 170, 180],     # Mountains\n        [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]]    # Wetlands\n\n# Creating a dataframe\nimport pandas as pd\n\ndf = pd.DataFrame(data, index=ecosystems).transpose()\n\n# Plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Oceans' is the target object\n        violin.set_animated(True)\n        violin.set_path_effects([withStroke(linewidth=3.2315966247271786, foreground='#055fe7')])\nplt.title(\"Impact of Global Warming on Population of Endangered Species in Different Ecosystems\")\nplt.xlabel(\"Ecosystems\")\nplt.ylabel(\"Population Count\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_5a07e446e1a2e224/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_5a07e446e1a2e224/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_5a07e446e1a2e224/figure.png"
    },
    {
        "id": "Violin_bb11a027f4e80853",
        "Input_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\nsustainable_packaging_sales = [3500, 5000, 4800, 6200, 5500, 4000, 5700, 4600, 3900, 5200]\nnon_sustainable_packaging_sales = [3000, 4200, 3700, 4800, 4000, 4200, 3500, 4300, 3900, 3800]\n\n# Creating a pandas DataFrame\ndata = {'Sustainable Packaging Sales': sustainable_packaging_sales,\n        'Non-Sustainable Packaging Sales': non_sustainable_packaging_sales}\ndf = pd.DataFrame(data)\n\n# Plotting the violin plot\nsns.violinplot(data=df)\n\n# Providing plot title and labels\nplt.title('Sales Performance of Sustainable vs Non-Sustainable Packaging in Beauty Industry')\nplt.ylabel('Sales')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the linestyle of the violins that contain the center point of the bounding box to 'dotted'. Also, apply a stroke to these violins with a linewidth of 3.78 and a foreground color of #8883f7.",
        "Input_image": "./test_dataset/Violin/Violin_bb11a027f4e80853/Visual_figure.png",
        "Test_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.patheffects as path_effects\n\n# Data\nsustainable_packaging_sales = [3500, 5000, 4800, 6200, 5500, 4000, 5700, 4600, 3900, 5200]\nnon_sustainable_packaging_sales = [3000, 4200, 3700, 4800, 4000, 4200, 3500, 4300, 3900, 3800]\n\n# Creating a pandas DataFrame\ndata = {'Sustainable Packaging Sales': sustainable_packaging_sales,\n        'Non-Sustainable Packaging Sales': non_sustainable_packaging_sales}\ndf = pd.DataFrame(data)\n\n# Plotting the violin plot\nvp = sns.violinplot(data=df)\n\n# Modifying the linestyle and adding stroke effect to the target object\nstroke_effect = path_effects.withStroke(linewidth=3.7769048036781254, foreground='#8883f7')\nfor i, violin in enumerate(vp.collections):\n    if i == 0:  # Assuming 'Sustainable Packaging Sales' is the target object\n        violin.set_linestyle('dotted')\n        violin.set_path_effects([stroke_effect])\n\n# Providing plot title and labels\nplt.title('Sales Performance of Sustainable vs Non-Sustainable Packaging in Beauty Industry')\nplt.ylabel('Sales')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Violin/Violin_bb11a027f4e80853/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_bb11a027f4e80853/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_bb11a027f4e80853/figure.png"
    },
    {
        "id": "Violin_1e4a902a81e0399e",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the data\ncoffee_consumption = ['No coffee', 'Moderate coffee', 'High coffee']\naccidents_no_coffee = [1, 0, 1, 2, 1]\naccidents_moderate_coffee = [2, 1, 2, 3, 2]\naccidents_high_coffee = [5, 4, 3, 6, 5]\n\n# Prepare data for plotting\ndata = {\n    'Coffee Consumption': (\n        ['No Coffee'] * len(accidents_no_coffee) + \n        ['Moderate Coffee'] * len(accidents_moderate_coffee) + \n        ['High Coffee'] * len(accidents_high_coffee)\n    ),\n    'Frequency of Accidents': accidents_no_coffee + accidents_moderate_coffee + accidents_high_coffee\n}\n\n# Create a DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data)\n\n# Create the violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='Coffee Consumption', y='Frequency of Accidents', data=df)\nplt.title('Relationship Between Coffee Consumption and Workplace Accidents Among Night Shift Workers')\nplt.xlabel('Coffee Consumption Levels')\nplt.ylabel('Frequency of Accidents (per month)')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the violins that contain the center point of the bounding box to #af0e61.",
        "Input_image": "./test_dataset/Violin/Violin_1e4a902a81e0399e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the data\ncoffee_consumption = ['No coffee', 'Moderate coffee', 'High coffee']\naccidents_no_coffee = [1, 0, 1, 2, 1]\naccidents_moderate_coffee = [2, 1, 2, 3, 2]\naccidents_high_coffee = [5, 4, 3, 6, 5]\n\n# Prepare data for plotting\ndata = {\n    'Coffee Consumption': (\n        ['No Coffee'] * len(accidents_no_coffee) + \n        ['Moderate Coffee'] * len(accidents_moderate_coffee) + \n        ['High Coffee'] * len(accidents_high_coffee)\n    ),\n    'Frequency of Accidents': accidents_no_coffee + accidents_moderate_coffee + accidents_high_coffee\n}\n\n# Create a DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data)\n\n# Create the violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='Coffee Consumption', y='Frequency of Accidents', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Moderate Coffee' is the target object\n        violin.set_facecolor('#af0e61')\nplt.title('Relationship Between Coffee Consumption and Workplace Accidents Among Night Shift Workers')\nplt.xlabel('Coffee Consumption Levels')\nplt.ylabel('Frequency of Accidents (per month)')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_1e4a902a81e0399e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_1e4a902a81e0399e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_1e4a902a81e0399e/figure.png"
    },
    {
        "id": "Violin_94d6c1d79f641b6d",
        "Input_code": "import pandas as pd\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nNorth_America = [150, 175, 160, 180, 165, 170, 185, 200, 190, 195]\nSouth_America = [120, 130, 140, 125, 135, 145, 128, 132, 138, 142]\nEurope = [100, 110, 105, 115, 108, 112, 120, 118, 125, 122]\nAfrica = [80, 85, 82, 88, 87, 84, 90, 86, 92, 89]\nAsia = [70, 75, 72, 78, 73, 77, 71, 76, 74, 79]\nAustralia = [60, 65, 62, 68, 63, 67, 61, 66, 64, 69]\n\ndata = [North_America, South_America, Europe, Africa, Asia, Australia]\nlabels = ['North America', 'South America', 'Europe', 'Africa', 'Asia', 'Australia']\n\n# Create a figure instance\nplt.figure(figsize=(10, 6))\n\n# Create violinplot\nsns.violinplot(data=data)\n\n# Giving the plot a title\nplt.title('Distribution and Size Variation of Impact Craters')\n\n# Giving labels to the x and y axes\nplt.xlabel('Region')\nplt.ylabel('Crater Diameter (in meters)')\n\n# defining the labels for the xaxis\nplt.xticks(range(len(labels)), labels)\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #cf0548 and set its transparency to 0.65.",
        "Input_image": "./test_dataset/Violin/Violin_94d6c1d79f641b6d/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nNorth_America = [150, 175, 160, 180, 165, 170, 185, 200, 190, 195]\nSouth_America = [120, 130, 140, 125, 135, 145, 128, 132, 138, 142]\nEurope = [100, 110, 105, 115, 108, 112, 120, 118, 125, 122]\nAfrica = [80, 85, 82, 88, 87, 84, 90, 86, 92, 89]\nAsia = [70, 75, 72, 78, 73, 77, 71, 76, 74, 79]\nAustralia = [60, 65, 62, 68, 63, 67, 61, 66, 64, 69]\n\ndata = [North_America, South_America, Europe, Africa, Asia, Australia]\nlabels = ['North America', 'South America', 'Europe', 'Africa', 'Asia', 'Australia']\n\n# Create a figure instance\nplt.figure(figsize=(10, 6))\n\n# Create violinplot\nvp = sns.violinplot(data=data)\n\n# Modify the color and transparency of the violin corresponding to the Target_object\nfor i, violin in enumerate(vp.collections):\n    if i in [1, 4]:\n        violin.set_facecolor('#cf0548')\n        violin.set_alpha(0.65)\n\n# Giving the plot a title\nplt.title('Distribution and Size Variation of Impact Craters')\n\n# Giving labels to the x and y axes\nplt.xlabel('Region')\nplt.ylabel('Crater Diameter (in meters)')\n\n# defining the labels for the xaxis\nplt.xticks(range(len(labels)), labels)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Violin/Violin_94d6c1d79f641b6d/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_94d6c1d79f641b6d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_94d6c1d79f641b6d/figure.png"
    },
    {
        "id": "Violin_c0df9435fd216bce",
        "Input_code": "# necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# data\ngroup = ['X','X','Y','Y','Z','Z']\ndata = [12,23,34,23,56,76]\n\n# data visualisation\nsns.violinplot(x=group, y=data, inner='stick')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the transparency of all the elements in the violin that contain the center point of the bounding box to 0.86. For these same violins, apply a stroke with a linewidth of 3.6 and a foreground color of #4cef0f for all the elements in the violin.",
        "Input_image": "./test_dataset/Violin/Violin_c0df9435fd216bce/Visual_figure.png",
        "Test_code": "# necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.patheffects as path_effects\n\n# data\ngroup = ['X','X','Y','Y','Z','Z']\ndata = [12,23,34,23,56,76]\n\n# data visualisation\nvp = sns.violinplot(x=group, y=data, inner='stick')\nstroke_effect = path_effects.withStroke(linewidth=3.6036246739940987, foreground='#4cef0f')\nfor i, violin in enumerate(vp.collections):\n    if i in [0,1]:  # Assuming 'Y' is the target object\n        violin.set_alpha(0.86)\n        violin.set_path_effects([stroke_effect])\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Masked_object": "0,1",
        "Test_image": "./test_dataset/Violin/Violin_c0df9435fd216bce/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_c0df9435fd216bce/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_c0df9435fd216bce/figure.png"
    },
    {
        "id": "Violin_8726345a7fe61f51",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data\nfull_sunlight = [10, 15, 13, 14, 12, 16, 13, 15, 14, 16, 13, 15, 16, 14, 17, 15, 13, 16, 12, 14, 15, 13, 16, 17, 15, 13, 14, 16, 18, 20]\npartial_shade = [7, 9, 8, 10, 9, 8, 11, 9, 10, 8, 7, 9, 11, 10, 7, 9, 8, 10, 9, 11, 8, 7, 9, 8, 10, 11, 9, 10, 8, 9]\nfull_shade = [5, 4, 6, 5, 7, 6, 5, 4, 7, 6, 5, 7, 6, 5, 4, 6, 7, 5, 6, 4, 7, 5, 6, 7, 5, 4, 6, 7, 5, 6]\n\n# Creating DataFrame\ndata = pd.DataFrame({\n    'Full Sunlight': full_sunlight,\n    'Partial Shade': partial_shade,\n    'Full Shade': full_shade\n})\n\n# Melting the DataFrame from wide format to long format\ndata_melted = data.melt(var_name='Light Condition', value_name='Plant Height (cm)')\n\n# Violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='Light Condition', y='Plant Height (cm)', data=data_melted)\nplt.title('Growth Pattern of Plant Species under Different Light Conditions')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the linestyle of the violins that contain the center point of the bounding box to 'dashed'. Also, set the rasterized state of the violins related to the same points to False.",
        "Input_image": "./test_dataset/Violin/Violin_8726345a7fe61f51/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data\nfull_sunlight = [10, 15, 13, 14, 12, 16, 13, 15, 14, 16, 13, 15, 16, 14, 17, 15, 13, 16, 12, 14, 15, 13, 16, 17, 15, 13, 14, 16, 18, 20]\npartial_shade = [7, 9, 8, 10, 9, 8, 11, 9, 10, 8, 7, 9, 11, 10, 7, 9, 8, 10, 9, 11, 8, 7, 9, 8, 10, 11, 9, 10, 8, 9]\nfull_shade = [5, 4, 6, 5, 7, 6, 5, 4, 7, 6, 5, 7, 6, 5, 4, 6, 7, 5, 6, 4, 7, 5, 6, 7, 5, 4, 6, 7, 5, 6]\n\n# Creating DataFrame\ndata = pd.DataFrame({\n    'Full Sunlight': full_sunlight,\n    'Partial Shade': partial_shade,\n    'Full Shade': full_shade\n})\n\n# Melting the DataFrame from wide format to long format\ndata_melted = data.melt(var_name='Light Condition', value_name='Plant Height (cm)')\n\n# Violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='Light Condition', y='Plant Height (cm)', data=data_melted)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Partial Shade' is the target object\n        violin.set_linestyle('dashed')\n        violin.set_rasterized(False)\nplt.title('Growth Pattern of Plant Species under Different Light Conditions')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_8726345a7fe61f51/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_8726345a7fe61f51/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_8726345a7fe61f51/figure.png"
    },
    {
        "id": "Violin_1c9f6ba1671e44b5",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a dictionary to hold our data\ndata = {\n    \"Bullfrog\": [1.8, 3.2, 2.9, 2.5, 2.7, 2.1, 2.4, 2.8, 1.9, 2.6],\n    \"Red-Eyed Tree Frog\": [1.2, 1.4, 1.3, 1.1, 1.5, 1.7, 1.6, 1.2, 1.3, 1.4],\n    \"Poison Dart Frog\": [0.9, 0.8, 1.1, 0.7, 0.9, 1.0, 0.8, 0.6, 0.5, 1.0],\n    \"Glass Frog\": [1.6, 1.5, 1.7, 1.4, 1.6, 1.3, 1.8, 1.5, 1.4, 1.7],\n    \"Leopard Frog\": [2.1, 2.2, 1.9, 2.0, 1.8, 2.3, 1.7, 2.1, 1.9, 2.2]\n}\n\n# Create labels and dataset in the form suitable for seaborn\nlabels, data_set = [*zip(*data.items())]\n\n# Create a figure and ax instance\nfig, ax = plt.subplots()\n\n# Make the violin plot\nsns.violinplot(ax=ax, data=data_set, palette='pastel')\n\n# Set the title and labels\nax.set_title('Jumping Distances of Different Frog Breeds')\nax.yaxis.grid(True)\nax.set_xlabel('Frog Breed')\nax.set_ylabel('Jumping Distance')\nplt.xticks(range(len(data)), labels)\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the transparency of the violins that contain the center point of the bounding box to 0.51. Also, adjust the clip box of this portion to a bounding box defined by the bottom-left corner coordinates (134, 140), with a width of 287 and a height of 220, following the matplotlib.transforms.Bbox format.",
        "Input_image": "./test_dataset/Violin/Violin_1c9f6ba1671e44b5/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.transforms import Bbox\n\n# Create a dictionary to hold our data\ndata = {\n    \"Bullfrog\": [1.8, 3.2, 2.9, 2.5, 2.7, 2.1, 2.4, 2.8, 1.9, 2.6],\n    \"Red-Eyed Tree Frog\": [1.2, 1.4, 1.3, 1.1, 1.5, 1.7, 1.6, 1.2, 1.3, 1.4],\n    \"Poison Dart Frog\": [0.9, 0.8, 1.1, 0.7, 0.9, 1.0, 0.8, 0.6, 0.5, 1.0],\n    \"Glass Frog\": [1.6, 1.5, 1.7, 1.4, 1.6, 1.3, 1.8, 1.5, 1.4, 1.7],\n    \"Leopard Frog\": [2.1, 2.2, 1.9, 2.0, 1.8, 2.3, 1.7, 2.1, 1.9, 2.2]\n}\n\n# Create labels and dataset in the form suitable for seaborn\nlabels, data_set = [*zip(*data.items())]\n\n# Create a figure and ax instance\nfig, ax = plt.subplots()\n\n# Make the violin plot\nvp = sns.violinplot(ax=ax, data=data_set, palette='pastel')\n\n# Set the title and labels\nax.set_title('Jumping Distances of Different Frog Breeds')\nax.yaxis.grid(True)\nax.set_xlabel('Frog Breed')\nax.set_ylabel('Jumping Distance')\nplt.xticks(range(len(data)), labels)\n\n# Modify the transparency and clip box of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Red-Eyed Tree Frog' is the target object\n        violin.set_alpha(0.51)\n        violin.set_clip_box(Bbox.from_bounds(134, 140, 287, 220))\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_1c9f6ba1671e44b5/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_1c9f6ba1671e44b5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_1c9f6ba1671e44b5/figure.png"
    },
    {
        "id": "Violin_37c930d62f3490fa",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars']\nNitrogen = [[0.02, 0.03, 0.01, 0.02, 0.03, 0.02, 0.03, 0.02, 0.01, 0.02],\n            [0.05, 0.04, 0.06, 0.05, 0.07, 0.06, 0.05, 0.04, 0.06, 0.05],\n            [0.78, 0.77, 0.79, 0.76, 0.80, 0.78, 0.79, 0.77, 0.78, 0.79],\n            [0.02, 0.01, 0.03, 0.02, 0.04, 0.03, 0.02, 0.01, 0.03, 0.02]]\n\nOxygen = [[0.01, 0.02, 0.01, 0.03, 0.02, 0.01, 0.02, 0.01, 0.03, 0.02],\n          [0.03, 0.04, 0.05, 0.03, 0.06, 0.04, 0.03, 0.05, 0.04, 0.03],\n          [0.21, 0.22, 0.20, 0.23, 0.25, 0.24, 0.22, 0.21, 0.23, 0.20],\n          [0.01, 0.02, 0.01, 0.03, 0.02, 0.01, 0.02, 0.01, 0.03, 0.02]]\n\nCarbon_Dioxide = [[0.05, 0.04, 0.06, 0.05, 0.07, 0.06, 0.05, 0.04, 0.06, 0.05],\n                  [0.80, 0.78, 0.82, 0.79, 0.85, 0.81, 0.80, 0.78, 0.82, 0.79],\n                  [0.03, 0.02, 0.04, 0.03, 0.05, 0.04, 0.03, 0.02, 0.04, 0.03],\n                  [0.95, 0.94, 0.96, 0.95, 0.97, 0.96, 0.94, 0.95, 0.96, 0.95]]\n\nMethane = [[0.001, 0.002, 0.001, 0.003, 0.002, 0.001, 0.002, 0.001, 0.003, 0.002],\n           [0.004, 0.003, 0.005, 0.004, 0.006, 0.004, 0.003, 0.005, 0.004, 0.003],\n           [0.0002, 0.0003, 0.0001, 0.0004, 0.0002, 0.0003, 0.0001, 0.0002, 0.0004, 0.0002],\n           [0.002, 0.001, 0.003, 0.002, 0.004, 0.003, 0.001, 0.002, 0.003, 0.002]]\n\ncomponents = [Nitrogen, Oxygen, Carbon_Dioxide, Methane]\nlabels = ['Nitrogen', 'Oxygen', 'Carbon Dioxide', 'Methane']\n\n# Plotting\nfig, axs = plt.subplots(2, 2, figsize=(15, 10))\n\nfor ax, component, label in zip(axs.flat, components, labels):\n    sns.violinplot(data=component, ax=ax)\n    ax.set_xticklabels(planets)\n    ax.set_title(label)\n    ax.set_ylabel('Concentration')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violins that contain the center point of the bounding box to #86583d. Also, make sure that the snap state for these violins is set to False.",
        "Input_image": "./test_dataset/Violin/Violin_37c930d62f3490fa/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars']\nNitrogen = [[0.02, 0.03, 0.01, 0.02, 0.03, 0.02, 0.03, 0.02, 0.01, 0.02],\n            [0.05, 0.04, 0.06, 0.05, 0.07, 0.06, 0.05, 0.04, 0.06, 0.05],\n            [0.78, 0.77, 0.79, 0.76, 0.80, 0.78, 0.79, 0.77, 0.78, 0.79],\n            [0.02, 0.01, 0.03, 0.02, 0.04, 0.03, 0.02, 0.01, 0.03, 0.02]]\n\nOxygen = [[0.01, 0.02, 0.01, 0.03, 0.02, 0.01, 0.02, 0.01, 0.03, 0.02],\n          [0.03, 0.04, 0.05, 0.03, 0.06, 0.04, 0.03, 0.05, 0.04, 0.03],\n          [0.21, 0.22, 0.20, 0.23, 0.25, 0.24, 0.22, 0.21, 0.23, 0.20],\n          [0.01, 0.02, 0.01, 0.03, 0.02, 0.01, 0.02, 0.01, 0.03, 0.02]]\n\nCarbon_Dioxide = [[0.05, 0.04, 0.06, 0.05, 0.07, 0.06, 0.05, 0.04, 0.06, 0.05],\n                  [0.80, 0.78, 0.82, 0.79, 0.85, 0.81, 0.80, 0.78, 0.82, 0.79],\n                  [0.03, 0.02, 0.04, 0.03, 0.05, 0.04, 0.03, 0.02, 0.04, 0.03],\n                  [0.95, 0.94, 0.96, 0.95, 0.97, 0.96, 0.94, 0.95, 0.96, 0.95]]\n\nMethane = [[0.001, 0.002, 0.001, 0.003, 0.002, 0.001, 0.002, 0.001, 0.003, 0.002],\n           [0.004, 0.003, 0.005, 0.004, 0.006, 0.004, 0.003, 0.005, 0.004, 0.003],\n           [0.0002, 0.0003, 0.0001, 0.0004, 0.0002, 0.0003, 0.0001, 0.0002, 0.0004, 0.0002],\n           [0.002, 0.001, 0.003, 0.002, 0.004, 0.003, 0.001, 0.002, 0.003, 0.002]]\n\ncomponents = [Nitrogen, Oxygen, Carbon_Dioxide, Methane]\nlabels = ['Nitrogen', 'Oxygen', 'Carbon Dioxide', 'Methane']\n\n# Plotting\nfig, axs = plt.subplots(2, 2, figsize=(15, 10))\n\nfor ax, component, label in zip(axs.flat, components, labels):\n    vp = sns.violinplot(data=component, ax=ax)\n    ax.set_xticklabels(planets)\n    ax.set_title(label)\n    ax.set_ylabel('Concentration')\n    for i, violin in enumerate(vp.collections):\n        if i == 2:  # Assuming 'Earth' is the target object\n            violin.set_facecolor('#86583d')\n            violin.set_snap(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Violin/Violin_37c930d62f3490fa/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_37c930d62f3490fa/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_37c930d62f3490fa/figure.png"
    },
    {
        "id": "Violin_9e9b688a97eb0bd9",
        "Input_code": "import pandas as pd\n# import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# avalanche sizes at different altitude bands\naltitude_band_1 = [1500, 1800, 1750, 1400, 1650, 1850, 1700, 1600, 1550, 1450]\naltitude_band_2 = [2200, 2500, 2350, 2400, 2300, 2100, 2700, 2250, 2650, 2450]\naltitude_band_3 = [3200, 3100, 3400, 3300, 3250, 3150, 3050, 3350, 3280, 3120]\n\n# combine lists into one list of tuples\ndata = [('Below 2000m', value) for value in altitude_band_1]\ndata += [('2000m-3000m', value) for value in altitude_band_2]\ndata += [('Above 3000m', value) for value in altitude_band_3]\n\n# create a DataFrame\ndf = pd.DataFrame(data, columns=['Altitude Band', 'Avalanche Size (cubic m)'])\n\n# create violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Altitude Band', y='Avalanche Size (cubic m)', data=df)\n\n# add title\nplt.title('Avalanche Sizes at Different Altitudes')\n\n# show plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the violins that contain the center point of the bounding box to True. Additionally, change their color to #cd8262 for the same points.",
        "Input_image": "./test_dataset/Violin/Violin_9e9b688a97eb0bd9/Visual_figure.png",
        "Test_code": "import pandas as pd\n# import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# avalanche sizes at different altitude bands\naltitude_band_1 = [1500, 1800, 1750, 1400, 1650, 1850, 1700, 1600, 1550, 1450]\naltitude_band_2 = [2200, 2500, 2350, 2400, 2300, 2100, 2700, 2250, 2650, 2450]\naltitude_band_3 = [3200, 3100, 3400, 3300, 3250, 3150, 3050, 3350, 3280, 3120]\n\n# combine lists into one list of tuples\ndata = [('Below 2000m', value) for value in altitude_band_1]\ndata += [('2000m-3000m', value) for value in altitude_band_2]\ndata += [('Above 3000m', value) for value in altitude_band_3]\n\n# create a DataFrame\ndf = pd.DataFrame(data, columns=['Altitude Band', 'Avalanche Size (cubic m)'])\n\n# create violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Altitude Band', y='Avalanche Size (cubic m)', data=df)\n\n# modify the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming '2000m-3000m' is the target object\n        violin.set_animated(True)\n        violin.set_facecolor('#cd8262')\n\n# add title\nplt.title('Avalanche Sizes at Different Altitudes')\n\n# show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_9e9b688a97eb0bd9/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_9e9b688a97eb0bd9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_9e9b688a97eb0bd9/figure.png"
    },
    {
        "id": "Violin_43abde784012bf3e",
        "Input_code": "import pandas as pd\n# Import libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Area measurements of tumor regions for each patient.\npatient_1 = [5.2, 4.8, 5.0, 5.1, 4.9, 5.3, 5.1, 4.7, 5.2, 4.8]\npatient_2 = [6.5, 6.3, 6.7, 6.4, 6.2, 6.6, 6.3, 6.8, 6.5, 6.7]\npatient_3 = [7.1, 7.3, 7.0, 7.2, 7.4, 7.1, 7.3, 7.0, 7.2, 7.4]\n\n# Consolidate all measurements and corresponding patient labels into lists.\nareas = patient_1 + patient_2 + patient_3\npatients = ['Patient 1']*len(patient_1) + ['Patient 2']*len(patient_2) + ['Patient 3']*len(patient_3)\n\n# Create a DataFrame from this data.\ndata = pd.DataFrame({'Patient': patients, 'Tumor Region Area (mm\u00b2)': areas})\n\n# Create the violin plot.\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Patient', y='Tumor Region Area (mm\u00b2)', data=data)\nplt.title('Tumor Region Areas Identified in Histopathological Imaging Analysis')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the violins that contain the center point of the bounding box to #007bfb, and also set the line style to 'dotted' for those same points.",
        "Input_image": "./test_dataset/Violin/Violin_43abde784012bf3e/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Area measurements of tumor regions for each patient.\npatient_1 = [5.2, 4.8, 5.0, 5.1, 4.9, 5.3, 5.1, 4.7, 5.2, 4.8]\npatient_2 = [6.5, 6.3, 6.7, 6.4, 6.2, 6.6, 6.3, 6.8, 6.5, 6.7]\npatient_3 = [7.1, 7.3, 7.0, 7.2, 7.4, 7.1, 7.3, 7.0, 7.2, 7.4]\n\n# Consolidate all measurements and corresponding patient labels into lists.\nareas = patient_1 + patient_2 + patient_3\npatients = ['Patient 1']*len(patient_1) + ['Patient 2']*len(patient_2) + ['Patient 3']*len(patient_3)\n\n# Create a DataFrame from this data.\ndata = pd.DataFrame({'Patient': patients, 'Tumor Region Area (mm\u00b2)': areas})\n\n# Create the violin plot.\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Patient', y='Tumor Region Area (mm\u00b2)', data=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Patient 2' is the target object\n        violin.set_edgecolor('#007bfb')\n        violin.set_linestyle('dotted')\nplt.title('Tumor Region Areas Identified in Histopathological Imaging Analysis')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_43abde784012bf3e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_43abde784012bf3e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_43abde784012bf3e/figure.png"
    },
    {
        "id": "Violin_da5d37b61563d2ca",
        "Input_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the RMSD data\nWild_Type_RMSD = [0.8, 0.7, 0.9, 0.6, 0.75, 0.85, 0.65, 0.7, 0.8, 0.7]\nMutant_A_RMSD = [1.2, 1.1, 1.3, 1.0, 1.15, 1.25, 1.05, 1.1, 1.2, 1.1]\nMutant_B_RMSD = [0.9, 0.8, 1.0, 0.7, 0.95, 1.1, 0.85, 0.8, 0.9, 0.8]\n\n# Gather data into a list of lists\ndata = [Wild_Type_RMSD, Mutant_A_RMSD, Mutant_B_RMSD]\n\n# Create a new figure\nplt.figure(figsize=(10, 6))\n\n# Create a violin plot\nsns.violinplot(data=data)\n\n# Assign labels to the x-axis\nplt.xticks([0, 1, 2], ['Wild-Type', 'Mutant A', 'Mutant B'])\n\n# Set the title and labels\nplt.title('Violin plot of RMSD values')\nplt.xlabel('Simulation scenario')\nplt.ylabel('RMSD values (in angstroms)')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the fill pattern of the violin that includes the center point of the bounding box to an \"a +\" hatch pattern.",
        "Input_image": "./test_dataset/Violin/Violin_da5d37b61563d2ca/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the RMSD data\nWild_Type_RMSD = [0.8, 0.7, 0.9, 0.6, 0.75, 0.85, 0.65, 0.7, 0.8, 0.7]\nMutant_A_RMSD = [1.2, 1.1, 1.3, 1.0, 1.15, 1.25, 1.05, 1.1, 1.2, 1.1]\nMutant_B_RMSD = [0.9, 0.8, 1.0, 0.7, 0.95, 1.1, 0.85, 0.8, 0.9, 0.8]\n\n# Gather data into a list of lists\ndata = [Wild_Type_RMSD, Mutant_A_RMSD, Mutant_B_RMSD]\n\n# Create a new figure\nplt.figure(figsize=(10, 6))\n\n# Create a violin plot\nvp = sns.violinplot(data=data)\n\n# Assign labels to the x-axis\nplt.xticks([0, 1, 2], ['Wild-Type', 'Mutant A', 'Mutant B'])\n\n# Set the title and labels\nplt.title('Violin plot of RMSD values')\nplt.xlabel('Simulation scenario')\nplt.ylabel('RMSD values (in angstroms)')\n\n# Modify the fill pattern of the violin corresponding to the Target_object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Selecting Mutant A as the target\n        violin.set_hatch('+')\n        violin.set_facecolor('#0cb484')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_da5d37b61563d2ca/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_da5d37b61563d2ca/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_da5d37b61563d2ca/figure.png"
    },
    {
        "id": "Violin_87d4d2bb5fec44a9",
        "Input_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Order fulfillment time data for each store\nstore_A = [30, 35, 40, 45, 50, 55, 60, 65, 70, 75]\nstore_B = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]\nstore_C = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\nstore_D = [30, 35, 40, 45, 50, 55, 60, 65, 70, 75]\nstore_E = [35, 40, 45, 50, 55, 60, 65, 70, 75, 80]\n\n# Combining the data\ndata = store_A + store_B + store_C + store_D + store_E\nstore = ['Store A']*10 + ['Store B']*10 + ['Store C']*10 + ['Store D']*10 + ['Store E']*10\n\ndf = pd.DataFrame({'Store': store, 'Order Fulfillment Time': data})\n\n# Making the plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Store', y='Order Fulfillment Time', data=df)\n\nplt.title('Comparison of Order Fulfillment Times Across Various Stores')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the line style of all the elements in the violin that contains the center point of the bounding box to 'dashed'. Additionally, adjust the transformation of its box part to align with the axes' coordinate system.",
        "Input_image": "./test_dataset/Violin/Violin_87d4d2bb5fec44a9/Visual_figure.png",
        "Test_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Order fulfillment time data for each store\nstore_A = [30, 35, 40, 45, 50, 55, 60, 65, 70, 75]\nstore_B = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]\nstore_C = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\nstore_D = [30, 35, 40, 45, 50, 55, 60, 65, 70, 75]\nstore_E = [35, 40, 45, 50, 55, 60, 65, 70, 75, 80]\n\n# Combining the data\ndata = store_A + store_B + store_C + store_D + store_E\nstore = ['Store A']*10 + ['Store B']*10 + ['Store C']*10 + ['Store D']*10 + ['Store E']*10\n\ndf = pd.DataFrame({'Store': store, 'Order Fulfillment Time': data})\n\n# Making the plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Store', y='Order Fulfillment Time', data=df)\n\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Store B' is the target object\n        violin.set_linestyle('dashed')\n        violin.set_transform(plt.gca().transAxes)\nfor i, line in enumerate(plt.gca().lines):\n    if i in[1*3]+[1*3+1]+[1*3+2]:  # Assuming 'Store B' is the target object\n        line.set_linestyle('dashed')\nplt.title('Comparison of Order Fulfillment Times Across Various Stores')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_87d4d2bb5fec44a9/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_87d4d2bb5fec44a9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_87d4d2bb5fec44a9/figure.png"
    },
    {
        "id": "Violin_31e169b7235d6a8e",
        "Input_code": "import pandas as pd\n# Importing libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Provided data\ngalaxies = ['Galaxy A'] * 10 + ['Galaxy B'] * 10 + ['Galaxy C'] * 10\n\nstar_formation_regions = [5000, 4800, 5100, 5200, 4900, 4950, 5050, 5150, 5300, 4850, \n                          7500, 7200, 7800, 7600, 7700, 7400, 7850, 7950, 7700, 7550,\n                          4000, 4200, 3800, 4300, 4100, 3900, 4050, 3950, 4150, 4250]\n\n# Initialising a figure\nplt.figure(figsize=(9, 6))\n\n# Creating violin plot \nsns.violinplot(x=galaxies, y=star_formation_regions)\n\n# Adding title, y-axis label and grid\nplt.title('Spatial distribution of Star Formation Regions across Galaxies')\nplt.ylabel('Radial Distance from Galactic Center (light-years)')\nplt.grid(True)\n\n# Code to display the created plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the linestyle of all the lines in the violins which contains the center point of the bounding box to '--'. Additionally, hide the visibility of the violins' box part by setting it to False.",
        "Input_image": "./test_dataset/Violin/Violin_31e169b7235d6a8e/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Importing libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Provided data\ngalaxies = ['Galaxy A'] * 10 + ['Galaxy B'] * 10 + ['Galaxy C'] * 10\n\nstar_formation_regions = [5000, 4800, 5100, 5200, 4900, 4950, 5050, 5150, 5300, 4850, \n                          7500, 7200, 7800, 7600, 7700, 7400, 7850, 7950, 7700, 7550,\n                          4000, 4200, 3800, 4300, 4100, 3900, 4050, 3950, 4150, 4250]\n\n# Initialising a figure\nplt.figure(figsize=(9, 6))\n\n# Creating violin plot \nvp = sns.violinplot(x=galaxies, y=star_formation_regions)\n\n# Modifying the violin plot\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Galaxy B' is the target object\n        violin.set_linestyle('--')\n        violin.set_visible(False)\nfor i, line in enumerate(plt.gca().lines):\n    if i in[1*3]+[1*3+1]+[1*3+2]:  # Assuming 'Galaxy B' is the target object\n        line.set_linestyle('--')\n\n# Adding title, y-axis label and grid\nplt.title('Spatial distribution of Star Formation Regions across Galaxies')\nplt.ylabel('Radial Distance from Galactic Center (light-years)')\nplt.grid(True)\n\n# Code to display the created plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_31e169b7235d6a8e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_31e169b7235d6a8e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_31e169b7235d6a8e/figure.png"
    },
    {
        "id": "Violin_44da06f0c16a3686",
        "Input_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nmeningioma_vol = [45, 50, 47, 55, 52, 60, 48, 53, 50, 58]\nglioblastoma_vol = [75, 80, 82, 78, 85, 79, 76, 81, 83, 77]\npituitary_adenoma_vol = [30, 35, 32, 38, 37, 33, 36, 34, 39, 31]\nastrocytoma_vol = [65, 70, 68, 72, 69, 67, 73, 71, 66, 74]\nhemangioblastoma_vol = [40, 42, 45, 44, 48, 47, 43, 46, 41, 49]\n\ndata = [meningioma_vol, glioblastoma_vol, pituitary_adenoma_vol, astrocytoma_vol, hemangioblastoma_vol]\nlabels = [\"Meningioma\", \"Glioblastoma\", \"Pituitary Adenoma\", \"Astrocytoma\", \"Hemangioblastoma\"]\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(data=data)\nplt.xticks([0, 1, 2, 3, 4], labels)\nplt.title(\"Brain Tumor Volume Analysis\")\nplt.ylabel(\"Tumor Volume (cc)\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the violin that contains the center point of the bounding box to #26ec7e, and set the line width to 1.0.",
        "Input_image": "./test_dataset/Violin/Violin_44da06f0c16a3686/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nmeningioma_vol = [45, 50, 47, 55, 52, 60, 48, 53, 50, 58]\nglioblastoma_vol = [75, 80, 82, 78, 85, 79, 76, 81, 83, 77]\npituitary_adenoma_vol = [30, 35, 32, 38, 37, 33, 36, 34, 39, 31]\nastrocytoma_vol = [65, 70, 68, 72, 69, 67, 73, 71, 66, 74]\nhemangioblastoma_vol = [40, 42, 45, 44, 48, 47, 43, 46, 41, 49]\n\ndata = [meningioma_vol, glioblastoma_vol, pituitary_adenoma_vol, astrocytoma_vol, hemangioblastoma_vol]\nlabels = [\"Meningioma\", \"Glioblastoma\", \"Pituitary Adenoma\", \"Astrocytoma\", \"Hemangioblastoma\"]\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(data=data)\nplt.xticks([0, 1, 2, 3, 4], labels)\nplt.title(\"Brain Tumor Volume Analysis\")\nplt.ylabel(\"Tumor Volume (cc)\")\n\n# Modify the edge color and linewidth of the target violins\nfor i, violin in enumerate(vp.collections):\n    if i in [1, 3]:  # Target objects\n        violin.set_edgecolor('#26ec7e')\n        violin.set_linewidth(1.0)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Violin/Violin_44da06f0c16a3686/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_44da06f0c16a3686/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_44da06f0c16a3686/figure.png"
    },
    {
        "id": "Violin_576f1e04a1effe61",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Dataset\ncumulonimbus = [5.7, 6.2, 6.0, 5.5, 6.5, 6.3, 5.8, 6.1, 6.4, 5.9]\naltostratus = [1.2, 1.5, 1.3, 1.4, 1.1, 1.6, 1.2, 1.3, 1.5, 1.4]\ncirrocumulus = [0.3, 0.2, 0.4, 0.5, 0.3, 0.2, 0.4, 0.5, 0.6, 0.4]\nstratocumulus = [2.8, 2.6, 2.5, 2.7, 2.9, 2.5, 2.8, 2.7, 2.6, 2.4]\n\ndata = [cumulonimbus, altostratus, cirrocumulus, stratocumulus]\nlabels = ['Cumulonimbus', 'Altostratus', 'Cirrocumulus', 'Stratocumulus']\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Create violin plot\nsns.violinplot(data=data)\n\n# Set labels\nax.set_xticklabels(labels)\n\n# Populating other details for the plot \nplt.title('Distribution of Precipitation Rates Across Different Cloud Types')\nplt.ylabel('Precipitation Rates (mm/hr)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the snap state of the violin that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Violin/Violin_576f1e04a1effe61/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Dataset\ncumulonimbus = [5.7, 6.2, 6.0, 5.5, 6.5, 6.3, 5.8, 6.1, 6.4, 5.9]\naltostratus = [1.2, 1.5, 1.3, 1.4, 1.1, 1.6, 1.2, 1.3, 1.5, 1.4]\ncirrocumulus = [0.3, 0.2, 0.4, 0.5, 0.3, 0.2, 0.4, 0.5, 0.6, 0.4]\nstratocumulus = [2.8, 2.6, 2.5, 2.7, 2.9, 2.5, 2.8, 2.7, 2.6, 2.4]\n\ndata = [cumulonimbus, altostratus, cirrocumulus, stratocumulus]\nlabels = ['Cumulonimbus', 'Altostratus', 'Cirrocumulus', 'Stratocumulus']\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Create violin plot\nvp = sns.violinplot(data=data)\n\n# Set labels\nax.set_xticklabels(labels)\n\n# Modify the snap state of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Altostratus' is the target object\n        violin.set_snap(False)\n\n# Populating other details for the plot \nplt.title('Distribution of Precipitation Rates Across Different Cloud Types')\nplt.ylabel('Precipitation Rates (mm/hr)')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_576f1e04a1effe61/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_576f1e04a1effe61/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_576f1e04a1effe61/figure.png"
    },
    {
        "id": "Violin_3311abcb37e7fc8d",
        "Input_code": "import pandas as pd\n# Import necessary libraries pyplot and seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define Data\n\nslope_25_35 = [0.8, 1.2, 1.0, 1.1, 0.9, 1.3, 1.0, 0.9, 1.2, 1.1, 1.0, 1.3]\nslope_35_45 = [1.5, 1.8, 1.6, 1.7, 1.9, 1.5, 1.7, 1.6, 1.8, 1.9, 1.6, 1.5]\nslope_45_55 = [2.2, 2.4, 2.0, 2.1, 2.3, 2.5, 2.2, 2.1, 2.4, 2.3, 2.0, 2.2]\nslope_55_65 = [2.8, 3.0, 2.7, 2.9, 2.6, 3.1, 2.8, 2.7, 3.0, 2.9, 3.1, 2.8]\n\n# Store the data and labels together\ndata = [slope_25_35, slope_35_45, slope_45_55, slope_55_65]\nlabels = ['25-35 deg', '35-45 deg', '45-55 deg', '55-65 deg']\n\n# Create the violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data, palette=\"Set3\")\n\n# Set title and labels\nplt.title('Avalanche Dynamics in Mountainous Regions')\nplt.xlabel('Slope Inclination (degrees)')\nplt.ylabel('Snow Slab Depth (meters)')\nplt.xticks(ticks=range(4), labels=labels)\n\n# Show plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the violins that contain the center point of the bounding box to a bounding box defined by the coordinates (42, 286), with a width of 395 and a height of 353, using the matplotlib.transforms.Bbox pattern. Also, update the label of these violins to 'A new Label'.",
        "Input_image": "./test_dataset/Violin/Violin_3311abcb37e7fc8d/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import necessary libraries pyplot and seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.transforms as transforms\n\n# Define Data\n\nslope_25_35 = [0.8, 1.2, 1.0, 1.1, 0.9, 1.3, 1.0, 0.9, 1.2, 1.1, 1.0, 1.3]\nslope_35_45 = [1.5, 1.8, 1.6, 1.7, 1.9, 1.5, 1.7, 1.6, 1.8, 1.9, 1.6, 1.5]\nslope_45_55 = [2.2, 2.4, 2.0, 2.1, 2.3, 2.5, 2.2, 2.1, 2.4, 2.3, 2.0, 2.2]\nslope_55_65 = [2.8, 3.0, 2.7, 2.9, 2.6, 3.1, 2.8, 2.7, 3.0, 2.9, 3.1, 2.8]\n\n# Store the data and labels together\ndata = [slope_25_35, slope_35_45, slope_45_55, slope_55_65]\nlabels = ['25-35 deg', '35-45 deg', '45-55 deg', '55-65 deg']\n\n# Create the violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data, palette=\"Set3\")\n\n# Set title and labels\nplt.title('Avalanche Dynamics in Mountainous Regions')\nplt.xlabel('Slope Inclination (degrees)')\nplt.ylabel('Snow Slab Depth (meters)')\nplt.xticks(ticks=range(4), labels=labels)\n\n# Modify the clip box and label of the target object\nbbox = transforms.Bbox.from_bounds(42, 286, 395, 353)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming '35-45 deg' is the target object\n        violin.set_clip_box(bbox)\n        labels[1] = 'A new Label'\n        plt.xticks(ticks=range(4), labels=labels)\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_3311abcb37e7fc8d/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_3311abcb37e7fc8d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_3311abcb37e7fc8d/figure.png"
    },
    {
        "id": "Violin_656f0ce940687a3c",
        "Input_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Creating dataset\noceans_dict = {\n    'Atlantic Ocean': [2000, 2100, 2200, 2150, 2050, 1950, 2250, 2300, 2350, 2400],\n    'Pacific Ocean': [1800, 1900, 2000, 1950, 1850, 1750, 2050, 2100, 2150, 2200],\n    'Indian Ocean': [2200, 2300, 2400, 2350, 2250, 2150, 2450, 2500, 2550, 2600],\n    'Arctic Ocean': [2500, 2600, 2700, 2650, 2550, 2450, 2750, 2800, 2850, 2900],\n    'Southern Ocean': [2100, 2200, 2300, 2250, 2150, 2050, 2350, 2400, 2450, 2500]\n}\n\n# Forming dataframe\nimport pandas as pd\ndata = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in oceans_dict.items()]))\ndata = pd.melt(data,var_name='Oceans', value_name='Depth')\n\n# Creating violin plot\nplt.figure(figsize=(10,8))\nsns.violinplot(data=data,x='Oceans',y='Depth')\nplt.title('Ocean Floor Elevation')\nplt.ylabel('Depth in meters')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the fill pattern of the violin that contains the center point of the bounding box to an 'x' hatch pattern, and update its color to #ea3b48.",
        "Input_image": "./test_dataset/Violin/Violin_656f0ce940687a3c/Visual_figure.png",
        "Test_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Creating dataset\noceans_dict = {\n    'Atlantic Ocean': [2000, 2100, 2200, 2150, 2050, 1950, 2250, 2300, 2350, 2400],\n    'Pacific Ocean': [1800, 1900, 2000, 1950, 1850, 1750, 2050, 2100, 2150, 2200],\n    'Indian Ocean': [2200, 2300, 2400, 2350, 2250, 2150, 2450, 2500, 2550, 2600],\n    'Arctic Ocean': [2500, 2600, 2700, 2650, 2550, 2450, 2750, 2800, 2850, 2900],\n    'Southern Ocean': [2100, 2200, 2300, 2250, 2150, 2050, 2350, 2400, 2450, 2500]\n}\n\n# Forming dataframe\nimport pandas as pd\ndata = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in oceans_dict.items()]))\ndata = pd.melt(data,var_name='Oceans', value_name='Depth')\n\n# Creating violin plot\nplt.figure(figsize=(10,8))\nvp=sns.violinplot(data=data,x='Oceans',y='Depth')\nfor i,violin in enumerate(vp.collections):\n    if i in [0,2]:\n        violin.set_facecolor('#ea3b48')\n        violin.set_hatch('x')\nplt.title('Ocean Floor Elevation')\nplt.ylabel('Depth in meters')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Violin/Violin_656f0ce940687a3c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_656f0ce940687a3c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_656f0ce940687a3c/figure.png"
    },
    {
        "id": "Violin_81c67fb091891db3",
        "Input_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\nstep_counts = [4564, 5678, 3845, 4987, 5321, 4210, 5874, 3765, 5123, 4980, \n               5439, 5120, 4625, 5890, 5745, 5123, 5980, 4398, 5214, 5534, \n               6890, 7412, 6543, 7089, 6545, 7120, 6874, 7210, 6880, 7678]\n\n# Categories\nsteps_types = ['Urban'] * 10 + ['Suburban'] * 10 + ['Rural'] * 10\n\n# Creating DataFrame\ndf = pd.DataFrame()\ndf['Area'] = steps_types\ndf['Average Daily Steps'] = step_counts\n\n# Plotting\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Area', y='Average Daily Steps', data=df, inner='point')\nplt.title('Average Daily Steps Taken by Individuals Living in Different Areas')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the rasterized state of the violin that contains the center point of the bounding box to True, and change its transform to the axes' coordinate system.",
        "Input_image": "./test_dataset/Violin/Violin_81c67fb091891db3/Visual_figure.png",
        "Test_code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\nstep_counts = [4564, 5678, 3845, 4987, 5321, 4210, 5874, 3765, 5123, 4980, \n               5439, 5120, 4625, 5890, 5745, 5123, 5980, 4398, 5214, 5534, \n               6890, 7412, 6543, 7089, 6545, 7120, 6874, 7210, 6880, 7678]\n\n# Categories\nsteps_types = ['Urban'] * 10 + ['Suburban'] * 10 + ['Rural'] * 10\n\n# Creating DataFrame\ndf = pd.DataFrame()\ndf['Area'] = steps_types\ndf['Average Daily Steps'] = step_counts\n\n# Plotting\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Area', y='Average Daily Steps', data=df, inner='point')\nfor i, violin in enumerate(vp.collections):\n    if i == 2:  # Assuming 'Suburban' is the target object\n        violin.set_rasterized(True)\n        violin.set_transform(plt.gca().transData)\nplt.title('Average Daily Steps Taken by Individuals Living in Different Areas')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Violin/Violin_81c67fb091891db3/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_81c67fb091891db3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_81c67fb091891db3/figure.png"
    },
    {
        "id": "Violin_0d1bde204feb5774",
        "Input_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Defining the dataset\naltitudes = ['Altitude 1000 ft', 'Altitude 2000 ft', 'Altitude 3000 ft','Altitude 4000 ft','Altitude 5000 ft']\nenergy_levels = [[50, 55, 52, 57, 60, 49, 53, 58, 62, 56],\n[57, 61, 59, 64, 67, 55, 58, 63, 69, 60],\n[62, 66, 64, 70, 73, 61, 65, 71, 75, 65],\n[68, 72, 70, 77, 80, 66, 69, 76, 82, 71],\n[75, 79, 77, 84, 87, 73, 78, 85, 90, 79]]\n\n# Formatting the data for seaborn\ndata = {altitude: energy for altitude, energy in zip(altitudes, energy_levels)}\n\n# Create a DataFrame from the data\nimport pandas as pd\ndf = pd.DataFrame(data)\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=df)\nplt.title('Magical Energy Levels at Different Altitudes')\nplt.xlabel('Altitude')\nplt.ylabel('Magical Energy Levels (Mana)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the fill pattern of the violin enclosed by the bounding box to a hatch pattern, and change its color to #559e6d.",
        "Input_image": "./test_dataset/Violin/Violin_0d1bde204feb5774/Visual_figure.png",
        "Test_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Defining the dataset\naltitudes = ['Altitude 1000 ft', 'Altitude 2000 ft', 'Altitude 3000 ft','Altitude 4000 ft','Altitude 5000 ft']\nenergy_levels = [[50, 55, 52, 57, 60, 49, 53, 58, 62, 56],\n[57, 61, 59, 64, 67, 55, 58, 63, 69, 60],\n[62, 66, 64, 70, 73, 61, 65, 71, 75, 65],\n[68, 72, 70, 77, 80, 66, 69, 76, 82, 71],\n[75, 79, 77, 84, 87, 73, 78, 85, 90, 79]]\n\n# Formatting the data for seaborn\ndata = {altitude: energy for altitude, energy in zip(altitudes, energy_levels)}\n\n# Create a DataFrame from the data\nimport pandas as pd\ndf = pd.DataFrame(data)\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=df)\nfor i, violin in enumerate(vp.collections):\n    if i in [1, 3]:\n        violin.set_facecolor('#559e6d')\n        violin.set_hatch('|')\nplt.title('Magical Energy Levels at Different Altitudes')\nplt.xlabel('Altitude')\nplt.ylabel('Magical Energy Levels (Mana)')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Violin/Violin_0d1bde204feb5774/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_0d1bde204feb5774/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_0d1bde204feb5774/figure.png"
    },
    {
        "id": "Violin_0d1a344dbd0e80f3",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ncompany_A = [12, 15, 20, 17, 14, 22, 19, 24, 28, 16, 18, 21, 23]\ncompany_B = [10, 13, 18, 14, 17, 21, 19, 26, 22, 16, 20, 24, 25]\ncompany_C = [9, 11, 16, 13, 15, 19, 18, 23, 20, 14, 17, 21, 22]\ndata = [company_A, company_B, company_C]\ncompany_names = ['Company A', 'Company B', 'Company C']\n\n# Create figure\nfig, ax = plt.subplots(figsize=(10,6))\n\n# Create violinplot\nsns.violinplot(data=data)\n\n# Set x-axis labels\nax.set_xticklabels(company_names)\n\n# Set title and labels\nplt.title('Ride-Sharing Trip Duration Analysis')\nplt.xlabel('Companies')\nplt.ylabel('Trip Duration in Minutes')\n\n# Show plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the xlabel of the violin that contains the center point of the bounding box to 'A new Label', and set its box part's visibility to false.",
        "Input_image": "./test_dataset/Violin/Violin_0d1a344dbd0e80f3/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ncompany_A = [12, 15, 20, 17, 14, 22, 19, 24, 28, 16, 18, 21, 23]\ncompany_B = [10, 13, 18, 14, 17, 21, 19, 26, 22, 16, 20, 24, 25]\ncompany_C = [9, 11, 16, 13, 15, 19, 18, 23, 20, 14, 17, 21, 22]\ndata = [company_A, company_B, company_C]\ncompany_names = ['Company A', 'Company B', 'Company C']\nnew_company_names = ['Company A', 'A new Label', 'Company C']\n# Create figure\nfig, ax = plt.subplots(figsize=(10,6))\n\n# Create violinplot\nviolins = sns.violinplot(data=data)\n\n# Set x-axis labels\nax.set_xticklabels(new_company_names)\n\n# Modify the label and visibility of the target object\nfor i, violin in enumerate(violins.collections):\n    if i == 1:  # Assuming 'Company B' is the target object\n        violin.set_visible(False)\n\n# Set title and labels\nplt.title('Ride-Sharing Trip Duration Analysis')\nplt.xlabel('Companies')\nplt.ylabel('Trip Duration in Minutes')\n\n# Show plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_0d1a344dbd0e80f3/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_0d1a344dbd0e80f3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_0d1a344dbd0e80f3/figure.png"
    },
    {
        "id": "Violin_02b7f4dd79d8e95c",
        "Input_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the RMSD data\nWild_Type_RMSD = [0.8, 0.7, 0.9, 0.6, 0.75, 0.85, 0.65, 0.7, 0.8, 0.7]\nMutant_A_RMSD = [1.2, 1.1, 1.3, 1.0, 1.15, 1.25, 1.05, 1.1, 1.2, 1.1]\nMutant_B_RMSD = [0.9, 0.8, 1.0, 0.7, 0.95, 1.1, 0.85, 0.8, 0.9, 0.8]\n\n# Gather data into a list of lists\ndata = [Wild_Type_RMSD, Mutant_A_RMSD, Mutant_B_RMSD]\n\n# Create a new figure\nplt.figure(figsize=(10, 6))\n\n# Create a violin plot\nsns.violinplot(data=data)\n\n# Assign labels to the x-axis\nplt.xticks([0, 1, 2], ['Wild-Type', 'Mutant A', 'Mutant B'])\n\n# Set the title and labels\nplt.title('Violin plot of RMSD values')\nplt.xlabel('Simulation scenario')\nplt.ylabel('RMSD values (in angstroms)')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the violin that contains the center point at (449, 426) to a bounding box with a width of 632 and a height of 798, following the matplotlib.transforms.Bbox pattern. Also, update the face color of this violin to #da31aa.",
        "Input_image": "./test_dataset/Violin/Violin_02b7f4dd79d8e95c/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.transforms import Bbox\n\n# Define the RMSD data\nWild_Type_RMSD = [0.8, 0.7, 0.9, 0.6, 0.75, 0.85, 0.65, 0.7, 0.8, 0.7]\nMutant_A_RMSD = [1.2, 1.1, 1.3, 1.0, 1.15, 1.25, 1.05, 1.1, 1.2, 1.1]\nMutant_B_RMSD = [0.9, 0.8, 1.0, 0.7, 0.95, 1.1, 0.85, 0.8, 0.9, 0.8]\n\n# Gather data into a list of lists\ndata = [Wild_Type_RMSD, Mutant_A_RMSD, Mutant_B_RMSD]\n\n# Create a new figure\nplt.figure(figsize=(10, 6))\n\n# Create a violin plot\nvp = sns.violinplot(data=data)\n\n# Assign labels to the x-axis\nplt.xticks([0, 1, 2], ['Wild-Type', 'Mutant A', 'Mutant B'])\n\n# Set the title and labels\nplt.title('Violin plot of RMSD values')\nplt.xlabel('Simulation scenario')\nplt.ylabel('RMSD values (in angstroms)')\n\n# Modify the clip box and face color of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Mutant A' is the target object\n        violin.set_clip_box(Bbox.from_bounds(449, 426, 632, 798))\n        violin.set_facecolor('#da31aa')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_02b7f4dd79d8e95c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_02b7f4dd79d8e95c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_02b7f4dd79d8e95c/figure.png"
    },
    {
        "id": "Violin_1bbe125c366e26fe",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Elevation Data\nValles_Marineris = [1200, 1300, 1250, 1350, 1400, 1100, 1150, 1250]\nOlympus_Mons = [1600, 1700, 1800, 1750, 1650, 1550, 1700, 1850]\nHellas_Planitia = [900, 950, 1000, 1050, 1100, 950, 1000, 1050]\n\n# Create data frame\ndata = {\n    'Region': ['Valles Marineris']*len(Valles_Marineris) + ['Olympus Mons']*len(Olympus_Mons) + ['Hellas Planitia']*len(Hellas_Planitia),\n    'Elevation': Valles_Marineris + Olympus_Mons + Hellas_Planitia\n}\n\ndf = pd.DataFrame(data)\n\n# Violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='Region', y='Elevation', data=df)\nplt.title('Martian Terrain Elevation Mapping')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the violins that contain the center point of the bounding box to True. Also, stroke these violins with a line width of 2.64 and a foreground color of #773541.",
        "Input_image": "./test_dataset/Violin/Violin_1bbe125c366e26fe/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.patheffects as path_effects\n\n# Elevation Data\nValles_Marineris = [1200, 1300, 1250, 1350, 1400, 1100, 1150, 1250]\nOlympus_Mons = [1600, 1700, 1800, 1750, 1650, 1550, 1700, 1850]\nHellas_Planitia = [900, 950, 1000, 1050, 1100, 950, 1000, 1050]\n\n# Create data frame\ndata = {\n    'Region': ['Valles Marineris']*len(Valles_Marineris) + ['Olympus Mons']*len(Olympus_Mons) + ['Hellas Planitia']*len(Hellas_Planitia),\n    'Elevation': Valles_Marineris + Olympus_Mons + Hellas_Planitia\n}\n\ndf = pd.DataFrame(data)\n\n# Violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='Region', y='Elevation', data=df)\nstroke_effect = path_effects.withStroke(linewidth=2.640000325077637, foreground='#773541')\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Olympus Mons' is the target object\n        violin.set_clip_on(True)\n        violin.set_path_effects([stroke_effect])\nplt.title('Martian Terrain Elevation Mapping')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_1bbe125c366e26fe/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_1bbe125c366e26fe/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_1bbe125c366e26fe/figure.png"
    },
    {
        "id": "Violin_9ca6884058cf2147",
        "Input_code": "import pandas as pd\n# Importing required libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndowntown_temps = [18.5, 19.2, 20.1, 21.4, 22.0, 20.8, 20.3, 21.7, 22.5, 20.9]\nsuburban_temps = [17.2, 17.9, 18.8, 19.2, 18.6, 17.8, 19.0, 18.7, 18.3, 19.5]\nindustrial_temps = [21.8, 22.5, 23.0, 23.6, 23.2, 22.9, 21.5, 23.1, 22.8, 24.0]\n\n# Preparing the data for plotting\nplot_data = [downtown_temps, suburban_temps, industrial_temps]\nlabels = [\"Downtown District\", \"Suburban Area\", \"Industrial Zone\"]\n\n# Creating the violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(data=plot_data)\nplt.xticks([0, 1, 2], labels)\n\n# Setting the title and labels\nplt.title('Dynamic Temperature Mapping in Urban Areas')\nplt.xlabel('Neighborhoods')\nplt.ylabel('Temperature (\u00b0C)')\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the linestyle of the violins' box part that contain the center point of the bounding box to 'dashdot' and change its z-order to 5. Also, add a shadow effect to the same part with an offset of (3.15, 3.95) using a shadow color gold.",
        "Input_image": "./test_dataset/Violin/Violin_9ca6884058cf2147/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Importing required libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Data\ndowntown_temps = [18.5, 19.2, 20.1, 21.4, 22.0, 20.8, 20.3, 21.7, 22.5, 20.9]\nsuburban_temps = [17.2, 17.9, 18.8, 19.2, 18.6, 17.8, 19.0, 18.7, 18.3, 19.5]\nindustrial_temps = [21.8, 22.5, 23.0, 23.6, 23.2, 22.9, 21.5, 23.1, 22.8, 24.0]\n\n# Preparing the data for plotting\nplot_data = [downtown_temps, suburban_temps, industrial_temps]\nlabels = [\"Downtown District\", \"Suburban Area\", \"Industrial Zone\"]\n\n# Creating the violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(data=plot_data)\nplt.xticks([0, 1, 2], labels)\n\n# Setting the title and labels\nplt.title('Dynamic Temperature Mapping in Urban Areas')\nplt.xlabel('Neighborhoods')\nplt.ylabel('Temperature (\u00b0C)')\n\n# Modifying the violin plot\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Suburban Area' is the target object\n        violin.set_linestyle('dashdot')\n        violin.set_zorder(5)\n        shadow_color = 'gold'\n        violin.set_path_effects([SimplePatchShadow(offset=(3.15,3.95), shadow_rgbFace=shadow_color), Normal()])\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_9ca6884058cf2147/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_9ca6884058cf2147/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_9ca6884058cf2147/figure.png"
    },
    {
        "id": "Violin_ad91a31b5ce79125",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# pet ownership data\nnumber_of_pets_owned = [0, 1, 2, 3, 1, 0, 2, 1, 2, 3, 4, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 1, 0, 2, 3, 4, 1, 0, 2, 3, 1, 0, 1, 2, 4, 3, 1, 0, 2, 3, 4, 1, 0, 2, 3, 1, 0, 1, 2, 3, 4, 1, 0, 2, 3, 1, 0, 1, 2, 3, 4, 1, 0, 2, 3, 1, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]\n\n# create the violin plot\nplt.figure(figsize=(10,6)) # creating the figure\nsns.violinplot(y=number_of_pets_owned)\nplt.xlabel('Pets Owned')  # Add an x-label to the axes.\nplt.ylabel('Density')  # Add a y-label to the axes.\nplt.title('Household Pet Ownership Distribution')  # Add a title to the axes.\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violins that contain the center point of the bounding box to #ce4bb0. For the same points, update the label to 'A new Label'.",
        "Input_image": "./test_dataset/Violin/Violin_ad91a31b5ce79125/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# pet ownership data\nnumber_of_pets_owned = [0, 1, 2, 3, 1, 0, 2, 1, 2, 3, 4, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 1, 0, 2, 3, 4, 1, 0, 2, 3, 1, 0, 1, 2, 4, 3, 1, 0, 2, 3, 4, 1, 0, 2, 3, 1, 0, 1, 2, 3, 4, 1, 0, 2, 3, 1, 0, 1, 2, 3, 4, 1, 0, 2, 3, 1, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3]\n\n# create the violin plot\nplt.figure(figsize=(10,6)) # creating the figure\nvp = sns.violinplot(y=number_of_pets_owned)\nfor i, violin in enumerate(vp.collections):\n    if i == 0:  # Assuming the first violin is the target object\n        violin.set_facecolor('#ce4bb0')\n        violin.set_label('A new Label')\nplt.xlabel('Pets Owned')  # Add an x-label to the axes.\nplt.ylabel('Density')  # Add a y-label to the axes.\nplt.title('Household Pet Ownership Distribution')  # Add a title to the axes.\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Violin/Violin_ad91a31b5ce79125/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_ad91a31b5ce79125/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_ad91a31b5ce79125/figure.png"
    },
    {
        "id": "Violin_493030549667b9bc",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Dataset\nsystolic_bp = [120, 122, 118, 125, 130, 132, 128, 134, 120, 115, 136, 128, 126, 124, 127, 130, 133, 129, 126, 122]\ndiastolic_bp = [80, 85, 82, 90, 88, 86, 85, 92, 81, 79, 88, 84, 86, 83, 84, 89, 90, 87, 85, 82]\nlabels = ['Systolic']*len(systolic_bp) + ['Diastolic']*len(diastolic_bp)\nvalues = systolic_bp + diastolic_bp\n\ndata = pd.DataFrame({'Blood Pressure Type': labels, 'Value (mmHg)': values})\n\n# Violin plot \nplt.figure(figsize=(10,6))\nsns.violinplot(x='Blood Pressure Type', y='Value (mmHg)', data=data)\nplt.title('Blood Pressure Distribution')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #78dd28.",
        "Input_image": "./test_dataset/Violin/Violin_493030549667b9bc/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Dataset\nsystolic_bp = [120, 122, 118, 125, 130, 132, 128, 134, 120, 115, 136, 128, 126, 124, 127, 130, 133, 129, 126, 122]\ndiastolic_bp = [80, 85, 82, 90, 88, 86, 85, 92, 81, 79, 88, 84, 86, 83, 84, 89, 90, 87, 85, 82]\nlabels = ['Systolic']*len(systolic_bp) + ['Diastolic']*len(diastolic_bp)\nvalues = systolic_bp + diastolic_bp\n\ndata = pd.DataFrame({'Blood Pressure Type': labels, 'Value (mmHg)': values})\n\n# Violin plot \nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Blood Pressure Type', y='Value (mmHg)', data=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 0:\n        violin.set_facecolor('#78dd28')\nplt.title('Blood Pressure Distribution')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Violin/Violin_493030549667b9bc/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_493030549667b9bc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_493030549667b9bc/figure.png"
    },
    {
        "id": "Violin_7dfb3b9a528dc94e",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Defining the data\nemotions = ['Bliss', 'Confusion', 'Fear', 'Nostalgia', 'Serenity']\nvalues = [[4, 4, 3, 5, 4, 3, 5, 4],\n          [2, 3, 2, 4, 3, 3, 2, 4],\n          [5, 4, 5, 3, 4, 5, 3, 4],\n          [3, 2, 4, 3, 2, 3, 4, 3],\n          [4, 5, 3, 4, 5, 4, 3, 5]]\n\n# Preparing data for the plot\ndata = pd.DataFrame(dict(zip(emotions, values)))\n\n# Melting the dataframe\ndata_melted = data.melt(var_name='Emotion', value_name='Intensity')\n\n# Creating the violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Emotion', y='Intensity', data=data_melted)\nplt.title(\"Emotions intensity in Dreamscapes\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violins that contain the center point of the bounding box to #c6262f. Set their z-order to 7. Additionally, apply a shadow effect to these violins with an offset of (2.58, 2.72), using a shadow color randomly selected from ['gray', 'gold'].",
        "Input_image": "./test_dataset/Violin/Violin_7dfb3b9a528dc94e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Defining the data\nemotions = ['Bliss', 'Confusion', 'Fear', 'Nostalgia', 'Serenity']\nvalues = [[4, 4, 3, 5, 4, 3, 5, 4],\n          [2, 3, 2, 4, 3, 3, 2, 4],\n          [5, 4, 5, 3, 4, 5, 3, 4],\n          [3, 2, 4, 3, 2, 3, 4, 3],\n          [4, 5, 3, 4, 5, 4, 3, 5]]\n\n# Preparing data for the plot\ndata = pd.DataFrame(dict(zip(emotions, values)))\n\n# Melting the dataframe\ndata_melted = data.melt(var_name='Emotion', value_name='Intensity')\n\n# Creating the violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Emotion', y='Intensity', data=data_melted)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Confusion' is the target object\n        violin.set_facecolor('#c6262f')\n        violin.set_zorder(7)\n        shadow_color = random.choice(['gray','gold'])\n        violin.set_path_effects([SimplePatchShadow(offset=(2.58,2.72), shadow_rgbFace=shadow_color), Normal()])\nplt.title(\"Emotions intensity in Dreamscapes\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_7dfb3b9a528dc94e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_7dfb3b9a528dc94e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_7dfb3b9a528dc94e/figure.png"
    },
    {
        "id": "Violin_e70f6ae39cc44c6d",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\nrenewable_energy = [12, 15, 18, 20, 22, 24, 26, 29, 33, 36, 38, 40, 42, 45, 48, 50, 53, 57, 60, 64, 68, 72, 76, 80, 85]\nnonrenewable_energy = [80, 85, 88, 92, 95, 98, 102, 105, 110, 112, 115, 118, 120, 122, 124, 126, 128, 130, 133, 135, 138, 140, 142, 144, 146]\nnuclear_energy = [5, 8, 10, 12, 14, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73]\n\n# Combine Data\ndata = [renewable_energy, nonrenewable_energy, nuclear_energy]\nlabels = ['Renewable', 'Non-Renewable', 'Nuclear']\n\n# Create Violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data)\nplt.xticks([0, 1, 2], labels)\n\n# Title and Labels\nplt.title('Global Energy Consumption by Source Over The Past 50 Years')\nplt.xlabel('Energy Source')\nplt.ylabel('Energy Consumption')\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the fill pattern of the violin that contains the center point of the bounding box to a hatch pattern, and update its color to #524cc6.",
        "Input_image": "./test_dataset/Violin/Violin_e70f6ae39cc44c6d/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\nrenewable_energy = [12, 15, 18, 20, 22, 24, 26, 29, 33, 36, 38, 40, 42, 45, 48, 50, 53, 57, 60, 64, 68, 72, 76, 80, 85]\nnonrenewable_energy = [80, 85, 88, 92, 95, 98, 102, 105, 110, 112, 115, 118, 120, 122, 124, 126, 128, 130, 133, 135, 138, 140, 142, 144, 146]\nnuclear_energy = [5, 8, 10, 12, 14, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73]\n\n# Combine Data\ndata = [renewable_energy, nonrenewable_energy, nuclear_energy]\nlabels = ['Renewable', 'Non-Renewable', 'Nuclear']\n\n# Create Violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data)\nplt.xticks([0, 1, 2], labels)\n\n# Modify the violin corresponding to the Target_object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Targeting the second violin (Non-Renewable)\n        violin.set_facecolor('#524cc6')\n        violin.set_hatch('*')\n\n# Title and Labels\nplt.title('Global Energy Consumption by Source Over The Past 50 Years')\nplt.xlabel('Energy Source')\nplt.ylabel('Energy Consumption')\n\n# Display plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_e70f6ae39cc44c6d/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_e70f6ae39cc44c6d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_e70f6ae39cc44c6d/figure.png"
    },
    {
        "id": "Violin_12739fbdbca34b92",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Seabed depth data for different locations\nlocations = ['A', 'B', 'C']\ndepths = [[1500, 1550, 1600, 1550, 1650, 1600, 1500, 1520, 1580, 1610],\n          [1450, 1500, 1550, 1520, 1580, 1600, 1530, 1560, 1500, 1470],\n          [1400, 1450, 1480, 1500, 1550, 1520, 1450, 1420, 1500, 1490]]\n\n# Prepare data for seaborn\ndata = []\nfor location, depth in zip(locations, depths):\n    data.extend([(location, value) for value in depth])\n\n# Convert data to a DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Location', 'Depth'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Location\", y=\"Depth\", data=df)\n\n# Add title and labels\nplt.title(\"Ocean Floor Seabed Topography Mapping\")\nplt.xlabel(\"Location\")\nplt.ylabel(\"Seabed Depth (in meters)\")\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the violins that contain the center point of the bounding box, using a bounding box defined by the bottom-left corner at (245, 145), with a width of 409 and a height of 263, following the `matplotlib.transforms.Bbox` pattern. Also, ensure that the snap state for these violins is set to True.",
        "Input_image": "./test_dataset/Violin/Violin_12739fbdbca34b92/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.transforms import Bbox\n\n# Seabed depth data for different locations\nlocations = ['A', 'B', 'C']\ndepths = [[1500, 1550, 1600, 1550, 1650, 1600, 1500, 1520, 1580, 1610],\n          [1450, 1500, 1550, 1520, 1580, 1600, 1530, 1560, 1500, 1470],\n          [1400, 1450, 1480, 1500, 1550, 1520, 1450, 1420, 1500, 1490]]\n\n# Prepare data for seaborn\ndata = []\nfor location, depth in zip(locations, depths):\n    data.extend([(location, value) for value in depth])\n\n# Convert data to a DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Location', 'Depth'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Location\", y=\"Depth\", data=df)\n\n# Add title and labels\nplt.title(\"Ocean Floor Seabed Topography Mapping\")\nplt.xlabel(\"Location\")\nplt.ylabel(\"Seabed Depth (in meters)\")\n\n# Modify the clip box and snap state for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'B' is the target object\n        bbox = Bbox.from_bounds(245, 145, 409, 263)\n        violin.set_clip_box(bbox)\n        violin.set_snap(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_12739fbdbca34b92/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_12739fbdbca34b92/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_12739fbdbca34b92/figure.png"
    },
    {
        "id": "Violin_14e55adab242cb9e",
        "Input_code": "# Required libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data \nemoji = ['\ud83d\ude0a', '\ud83d\ude02', '\ud83d\ude0d', '\ud83d\udd25', '\ud83d\ude0e', '\ud83e\udd14', '\u2764\ufe0f', '\ud83d\udc4d', '\ud83d\ude2d', '\ud83d\ude4f']\nscores = [[0.8, 0.7, 0.9, 0.6, 0.8],\n[0.9, 0.8, 0.7, 0.5, 0.9],\n[0.7, 0.6, 0.8, 0.9, 0.7],\n[0.6, 0.9, 0.7, 0.8, 0.7],\n[0.5, 0.8, 0.9, 0.6, 0.8],\n[0.4, 0.7, 0.5, 0.8, 0.6],\n[0.9, 0.8, 0.9, 0.7, 0.5],\n[0.8, 0.9, 0.8, 0.7, 0.6],\n[0.7, 0.9, 0.4, 0.8, 0.5],\n[0.6, 0.5, 0.7, 0.9, 0.8]]\n\n# Prepare data for plotting:\nemoji_scores = []\nfor e, s in zip(emoji, scores):\n    emoji_scores.extend([(e, sv) for sv in s])\ndf = pd.DataFrame(emoji_scores, columns=['emoji', 'score'])\n\n# Set the plot style \nsns.set(style=\"whitegrid\")\n\n# Create a violin plot\nplt.figure(figsize=(10,8))\nviolin = sns.violinplot(x='emoji', y='score', data=df)\nplt.title('Sentiment Distribution for Emojis')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the fill pattern of the violin that contains the center point of the bounding box to a * hatch pattern, and change its color to #b130c3.",
        "Input_image": "./test_dataset/Violin/Violin_14e55adab242cb9e/Visual_figure.png",
        "Test_code": "# Required libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data \nemoji = ['\ud83d\ude0a', '\ud83d\ude02', '\ud83d\ude0d', '\ud83d\udd25', '\ud83d\ude0e', '\ud83e\udd14', '\u2764\ufe0f', '\ud83d\udc4d', '\ud83d\ude2d', '\ud83d\ude4f']\nscores = [[0.8, 0.7, 0.9, 0.6, 0.8],\n[0.9, 0.8, 0.7, 0.5, 0.9],\n[0.7, 0.6, 0.8, 0.9, 0.7],\n[0.6, 0.9, 0.7, 0.8, 0.7],\n[0.5, 0.8, 0.9, 0.6, 0.8],\n[0.4, 0.7, 0.5, 0.8, 0.6],\n[0.9, 0.8, 0.9, 0.7, 0.5],\n[0.8, 0.9, 0.8, 0.7, 0.6],\n[0.7, 0.9, 0.4, 0.8, 0.5],\n[0.6, 0.5, 0.7, 0.9, 0.8]]\n\n# Prepare data for plotting:\nemoji_scores = []\nfor e, s in zip(emoji, scores):\n    emoji_scores.extend([(e, sv) for sv in s])\ndf = pd.DataFrame(emoji_scores, columns=['emoji', 'score'])\n\n# Set the plot style \nsns.set(style=\"whitegrid\")\n\n# Create a violin plot\nplt.figure(figsize=(10,8))\nvp = sns.violinplot(x='emoji', y='score', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i in [2,5]:\n        violin.set_facecolor('#b130c3')\n        violin.set_hatch('*')\nplt.title('Sentiment Distribution for Emojis')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Violin/Violin_14e55adab242cb9e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_14e55adab242cb9e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_14e55adab242cb9e/figure.png"
    },
    {
        "id": "Violin_90ea48d827f43c37",
        "Input_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data \ninlet_velocity = [240, 245, 238, 250, 245, 242, 248, 252, 239, 246]\ncompressor_velocity = [300, 305, 308, 295, 310, 302, 298, 315, 303, 307]\ncombustion_chamber_velocity = [450, 445, 460, 455, 448, 465, 452, 458, 447, 462]\nturbine_velocity = [400, 405, 398, 410, 415, 402, 395, 408, 412, 420]\nexhaust_velocity = [600, 610, 605, 595, 620, 615, 602, 608, 625, 630]\n\n# Prepare data for seaborn\ndata = [inlet_velocity, compressor_velocity, combustion_chamber_velocity, turbine_velocity, exhaust_velocity]\nlabels = ['Inlet', 'Compressor', 'Combustion Chamber', 'Turbine', 'Exhaust']\n\n# Create violin plot\nplt.figure(figsize=(10,8))\nsns.violinplot(data=data)\nplt.title('Fluid Flow Velocities in a Jet Engine')\nplt.xlabel('Sections of Jet Engine')\nplt.ylabel('Velocity (m/s)')\nplt.xticks(range(5), labels)\n\n# show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the violins that contain the center point of the bounding box to False. Additionally, update the label of those violins to 'A new Label'.",
        "Input_image": "./test_dataset/Violin/Violin_90ea48d827f43c37/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data \ninlet_velocity = [240, 245, 238, 250, 245, 242, 248, 252, 239, 246]\ncompressor_velocity = [300, 305, 308, 295, 310, 302, 298, 315, 303, 307]\ncombustion_chamber_velocity = [450, 445, 460, 455, 448, 465, 452, 458, 447, 462]\nturbine_velocity = [400, 405, 398, 410, 415, 402, 395, 408, 412, 420]\nexhaust_velocity = [600, 610, 605, 595, 620, 615, 602, 608, 625, 630]\n\n# Prepare data for seaborn\ndata = [inlet_velocity, compressor_velocity, combustion_chamber_velocity, turbine_velocity, exhaust_velocity]\nlabels = ['Inlet', 'Compressor', 'Combustion Chamber', 'Turbine', 'Exhaust']\n\n# Create violin plot\nplt.figure(figsize=(10,8))\nvp = sns.violinplot(data=data)\nplt.title('Fluid Flow Velocities in a Jet Engine')\nplt.xlabel('Sections of Jet Engine')\nplt.ylabel('Velocity (m/s)')\nplt.xticks(range(5), labels)\n\n# Modify the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Compressor' is the target object\n        violin.set_animated(False)\n        violin.set_label('A new Label')\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_90ea48d827f43c37/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_90ea48d827f43c37/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_90ea48d827f43c37/figure.png"
    },
    {
        "id": "Violin_17f96237c47db350",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Define the age groups and corresponding average daily screen time data\nage_groups = ['18-24', '25-34', '35-44', '45-54', '55-64', '65+']\nscreen_times = [[5.6, 6.2, 5.8, 6.1, 5.9, 6.5, 5.7, 6.0],\n                [6.8, 7.2, 6.5, 6.9, 7.3, 6.7, 7.1, 6.6],\n                [7.5, 8.1, 7.7, 7.3, 8.0, 7.8, 7.9, 7.6],\n                [8.3, 7.9, 8.2, 8.5, 8.1, 7.5, 8.4, 7.8],\n                [6.9, 7.3, 7.6, 7.0, 7.2, 7.4, 7.1, 7.5],\n                [4.5, 4.2, 4.9, 4.8, 4.3, 4.6, 4.7, 4.4]]\n\n# Prepare data for violin plot\ndata = []\nfor group, times in zip(age_groups, screen_times):\n    for time in times:\n        data.append([group, time])\n\n# Convert the data to pandas DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Age Group', 'Average Daily Screen Time'])\n\n# Create the violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='Age Group', y='Average Daily Screen Time', data=df)\n\n# Display the plot\nplt.title('Smartphone Usage Pattern Among Different Age Groups')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the violins that contain the center point of the bounding box to False. Also, make the box part of this violin invisible by setting its visibility to False.",
        "Input_image": "./test_dataset/Violin/Violin_17f96237c47db350/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Define the age groups and corresponding average daily screen time data\nage_groups = ['18-24', '25-34', '35-44', '45-54', '55-64', '65+']\nscreen_times = [[5.6, 6.2, 5.8, 6.1, 5.9, 6.5, 5.7, 6.0],\n                [6.8, 7.2, 6.5, 6.9, 7.3, 6.7, 7.1, 6.6],\n                [7.5, 8.1, 7.7, 7.3, 8.0, 7.8, 7.9, 7.6],\n                [8.3, 7.9, 8.2, 8.5, 8.1, 7.5, 8.4, 7.8],\n                [6.9, 7.3, 7.6, 7.0, 7.2, 7.4, 7.1, 7.5],\n                [4.5, 4.2, 4.9, 4.8, 4.3, 4.6, 4.7, 4.4]]\n\n# Prepare data for violin plot\ndata = []\nfor group, times in zip(age_groups, screen_times):\n    for time in times:\n        data.append([group, time])\n\n# Convert the data to pandas DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Age Group', 'Average Daily Screen Time'])\n\n# Create the violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='Age Group', y='Average Daily Screen Time', data=df)\n\n# Modify the violin plot\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming '25-34' is the target object\n        violin.set_animated(False)\n        violin.set_visible(False)\n\n# Display the plot\nplt.title('Smartphone Usage Pattern Among Different Age Groups')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_17f96237c47db350/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_17f96237c47db350/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_17f96237c47db350/figure.png"
    },
    {
        "id": "Violin_8c200d5ffc82ede2",
        "Input_code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# prepare the dataset\ndf = pd.DataFrame({\n    'Monday': [3, 2, 2, 4, 3, 3, 2, 3],\n    'Tuesday': [4, 3, 3, 5, 5, 2, 3, 4],\n    'Wednesday': [5, 5, 6, 6, 7, 6, 4, 5],\n    'Thursday': [4, 5, 5, 6, 5, 4, 4, 3],\n    'Friday': [2, 3, 2, 4, 2, 2, 3, 3],\n    'Saturday': [1, 1, 0, 1, 1, 1, 1, 0],\n    'Sunday': [0, 1, 0, 1, 0, 1, 0, 0]\n})\n\n# transpose the dataframe and reset the index\ndf = df.T.reset_index()\n\n# rename the columns\ndf.columns = ['Day_of_Week', 'Week1', 'Week2', 'Week3', 'Week4', 'Week5', 'Week6', 'Week7', 'Week8']\n\n# melt the dataframe to long format to create a variable column for week and value column for coffee consumption\ndf_melted = df.melt(id_vars='Day_of_Week', var_name='Week', value_name='Coffee_Consumption')\n\n# plot the violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='Day_of_Week', y='Coffee_Consumption', data=df_melted)\nplt.title(\"Coffee Consumption Pattern Over A 4-Week Period\")\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the violins that contain the center point of the bounding box to #a220c7. Also, for these same violins, set the linestyle to 'dashdot'.",
        "Input_image": "./test_dataset/Violin/Violin_8c200d5ffc82ede2/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# prepare the dataset\ndf = pd.DataFrame({\n    'Monday': [3, 2, 2, 4, 3, 3, 2, 3],\n    'Tuesday': [4, 3, 3, 5, 5, 2, 3, 4],\n    'Wednesday': [5, 5, 6, 6, 7, 6, 4, 5],\n    'Thursday': [4, 5, 5, 6, 5, 4, 4, 3],\n    'Friday': [2, 3, 2, 4, 2, 2, 3, 3],\n    'Saturday': [1, 1, 0, 1, 1, 1, 1, 0],\n    'Sunday': [0, 1, 0, 1, 0, 1, 0, 0]\n})\n\n# transpose the dataframe and reset the index\ndf = df.T.reset_index()\n\n# rename the columns\ndf.columns = ['Day_of_Week', 'Week1', 'Week2', 'Week3', 'Week4', 'Week5', 'Week6', 'Week7', 'Week8']\n\n# melt the dataframe to long format to create a variable column for week and value column for coffee consumption\ndf_melted = df.melt(id_vars='Day_of_Week', var_name='Week', value_name='Coffee_Consumption')\n\n# plot the violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='Day_of_Week', y='Coffee_Consumption', data=df_melted)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Tuesday' is the target object\n        violin.set_facecolor('#a220c7')\n        violin.set_edgecolor('black')\n        violin.set_linestyle('dashdot')\nplt.title(\"Coffee Consumption Pattern Over A 4-Week Period\")\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_8c200d5ffc82ede2/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_8c200d5ffc82ede2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_8c200d5ffc82ede2/figure.png"
    },
    {
        "id": "Violin_e4915f69b8fd59c0",
        "Input_code": "# importing necessary libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# the population data\ndata = {\n    'Africa': [1.3, 1.2, 1.1, 1.5, 1.4, 1.6, 1.3, 1.2, 1.2, 1.5],\n    'Asia': [4.5, 4.6, 4.3, 4.8, 5.1, 4.9, 5.2, 5.3, 4.7, 5],\n    'Europe': [0.7, 0.8, 0.9, 0.9, 0.7, 0.8, 0.7, 0.8, 0.9, 0.9],\n    'North America': [0.4, 0.3, 0.5, 0.6, 0.7, 0.6, 0.5, 0.4, 0.3, 0.7],\n    'Oceania': [0.05, 0.06, 0.06, 0.07, 0.08, 0.07, 0.06, 0.08, 0.07, 0.09],\n    'South America': [0.4, 0.3, 0.4, 0.5, 0.6, 0.5, 0.4, 0.3, 0.4, 0.5]\n}\n\n# create a new dataframe\ndf = pd.DataFrame(data)\n\n# change the dataframe to long-form\ndf = df.melt(var_name='Continents', value_name='Population')\n\n# create the violin plot\nplt.figure(figsize=(14,8))\nsns.violinplot(x='Continents', y='Population', data=df)\n\n# Title and labels\nplt.title('Population Distribution among Continents', fontsize=20)\nplt.xlabel('Continents', fontsize=14)\nplt.ylabel('Population (billions)', fontsize=14)\n\n# showing the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #1ff229, and set its transparency to 0.40.",
        "Input_image": "./test_dataset/Violin/Violin_e4915f69b8fd59c0/Visual_figure.png",
        "Test_code": "# importing necessary libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# the population data\ndata = {\n    'Africa': [1.3, 1.2, 1.1, 1.5, 1.4, 1.6, 1.3, 1.2, 1.2, 1.5],\n    'Asia': [4.5, 4.6, 4.3, 4.8, 5.1, 4.9, 5.2, 5.3, 4.7, 5],\n    'Europe': [0.7, 0.8, 0.9, 0.9, 0.7, 0.8, 0.7, 0.8, 0.9, 0.9],\n    'North America': [0.4, 0.3, 0.5, 0.6, 0.7, 0.6, 0.5, 0.4, 0.3, 0.7],\n    'Oceania': [0.05, 0.06, 0.06, 0.07, 0.08, 0.07, 0.06, 0.08, 0.07, 0.09],\n    'South America': [0.4, 0.3, 0.4, 0.5, 0.6, 0.5, 0.4, 0.3, 0.4, 0.5]\n}\n\n# create a new dataframe\ndf = pd.DataFrame(data)\n\n# change the dataframe to long-form\ndf = df.melt(var_name='Continents', value_name='Population')\n\n# create the violin plot\nplt.figure(figsize=(14,8))\nvp = sns.violinplot(x='Continents', y='Population', data=df)\n\n# Modify the violin corresponding to the Target_object\nfor i, violin in enumerate(vp.collections):\n    if i == 2:  # Assuming 'Europe' is the target object\n        violin.set_facecolor('#1ff229')\n        violin.set_alpha(0.40)\n\n# Title and labels\nplt.title('Population Distribution among Continents', fontsize=20)\nplt.xlabel('Continents', fontsize=14)\nplt.ylabel('Population (billions)', fontsize=14)\n\n# showing the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Violin/Violin_e4915f69b8fd59c0/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_e4915f69b8fd59c0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_e4915f69b8fd59c0/figure.png"
    },
    {
        "id": "Violin_cf0316524fb7c91c",
        "Input_code": "import pandas as pd\n# necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nInlet = [50, 52, 48, 55, 53, 49, 51, 54, 52, 50, 45, 47, 44, 46, 43, 48, 42, 45, 49, 46]\nCompressor = [200, 205, 210, 198, 202, 207, 195, 200, 203, 208, 190, 195, 198, 192, 198, 205, 187, 193, 199, 196]\nCombustor = [700, 710, 695, 705, 690, 715, 685, 700, 690, 705, 680, 692, 675, 685, 670, 695, 665, 680, 685, 692]\nTurbine = [400, 410, 395, 405, 390, 415, 385, 400, 395, 410, 390, 395, 390, 392, 385, 400, 382, 390, 395, 398]\n\n# Combining the data\ndata = [Inlet, Compressor, Combustor, Turbine]\nlabels=['Inlet', 'Compressor', 'Combustor', 'Turbine']\n\n# Creating violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data)\nplt.xticks([0, 1, 2, 3], labels)\n\nplt.title('Fluid Dynamics in a Jet Engine')\nplt.ylabel('Velocity (m/s)')\nplt.xlabel('Engine Sections')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Disable the animated state of the violins that contain the center point of the bounding box. Also, update their linewidth to 4.65.",
        "Input_image": "./test_dataset/Violin/Violin_cf0316524fb7c91c/Visual_figure.png",
        "Test_code": "import pandas as pd\n# necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nInlet = [50, 52, 48, 55, 53, 49, 51, 54, 52, 50, 45, 47, 44, 46, 43, 48, 42, 45, 49, 46]\nCompressor = [200, 205, 210, 198, 202, 207, 195, 200, 203, 208, 190, 195, 198, 192, 198, 205, 187, 193, 199, 196]\nCombustor = [700, 710, 695, 705, 690, 715, 685, 700, 690, 705, 680, 692, 675, 685, 670, 695, 665, 680, 685, 692]\nTurbine = [400, 410, 395, 405, 390, 415, 385, 400, 395, 410, 390, 395, 390, 392, 385, 400, 382, 390, 395, 398]\n\n# Combining the data\ndata = [Inlet, Compressor, Combustor, Turbine]\nlabels=['Inlet', 'Compressor', 'Combustor', 'Turbine']\n\n# Creating violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data)\nplt.xticks([0, 1, 2, 3], labels)\n\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Compressor' is the target object\n        violin.set_animated(False)\n        violin.set_linewidth(4.65)\n\nplt.title('Fluid Dynamics in a Jet Engine')\nplt.ylabel('Velocity (m/s)')\nplt.xlabel('Engine Sections')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_cf0316524fb7c91c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_cf0316524fb7c91c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_cf0316524fb7c91c/figure.png"
    },
    {
        "id": "Violin_86cd56ff4af7713c",
        "Input_code": "# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\ntransportation_modes = ['Car', 'Bus', 'Bicycle', 'Walking']\ndata = [[350, 400, 330, 380, 360, 365, 350, 390, 400, 375], [100, 120, 110, 105, 98, 103, 108, 100, 112, 115], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\n# Data Preparation\ndata_dict = dict(zip(transportation_modes, data))\ndf = pd.DataFrame(data_dict)\n\n# Plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=df)\n\nplt.title('Energy Consumption Patterns and Carbon Footprint of Different Transportation Modes')\nplt.xlabel('Transportation Modes')\nplt.ylabel('Energy Consumption & Carbon Footprint (kgCO2e)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #ba3ace and set its transparency to 0.37.",
        "Input_image": "./test_dataset/Violin/Violin_86cd56ff4af7713c/Visual_figure.png",
        "Test_code": "# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\ntransportation_modes = ['Car', 'Bus', 'Bicycle', 'Walking']\ndata = [[350, 400, 330, 380, 360, 365, 350, 390, 400, 375], [100, 120, 110, 105, 98, 103, 108, 100, 112, 115], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\n# Data Preparation\ndata_dict = dict(zip(transportation_modes, data))\ndf = pd.DataFrame(data_dict)\n\n# Plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=df)\n\nfor i, violin in enumerate(vp.collections):\n    if i == 0:  # Target object is the first violin (Car)\n        violin.set_facecolor('#ba3ace')\n        violin.set_alpha(0.37)\n\nplt.title('Energy Consumption Patterns and Carbon Footprint of Different Transportation Modes')\nplt.xlabel('Transportation Modes')\nplt.ylabel('Energy Consumption & Carbon Footprint (kgCO2e)')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Violin/Violin_86cd56ff4af7713c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_86cd56ff4af7713c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_86cd56ff4af7713c/figure.png"
    },
    {
        "id": "Violin_e99d7b6c65bfc383",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\nrenewable_energy = [12, 15, 18, 20, 22, 24, 26, 29, 33, 36, 38, 40, 42, 45, 48, 50, 53, 57, 60, 64, 68, 72, 76, 80, 85]\nnonrenewable_energy = [80, 85, 88, 92, 95, 98, 102, 105, 110, 112, 115, 118, 120, 122, 124, 126, 128, 130, 133, 135, 138, 140, 142, 144, 146]\nnuclear_energy = [5, 8, 10, 12, 14, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73]\n\n# Combine Data\ndata = [renewable_energy, nonrenewable_energy, nuclear_energy]\nlabels = ['Renewable', 'Non-Renewable', 'Nuclear']\n\n# Create Violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data)\nplt.xticks([0, 1, 2], labels)\n\n# Title and Labels\nplt.title('Global Energy Consumption by Source Over The Past 50 Years')\nplt.xlabel('Energy Source')\nplt.ylabel('Energy Consumption')\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the violins that contain the center point of the bounding box to #0c5b84 and set their z-order to 0. Also, add a shadow effect to this portion with an offset of (2.90, 3.87) using a shadow color chosen randomly from ['gray', 'gold'].",
        "Input_image": "./test_dataset/Violin/Violin_e99d7b6c65bfc383/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Data\nrenewable_energy = [12, 15, 18, 20, 22, 24, 26, 29, 33, 36, 38, 40, 42, 45, 48, 50, 53, 57, 60, 64, 68, 72, 76, 80, 85]\nnonrenewable_energy = [80, 85, 88, 92, 95, 98, 102, 105, 110, 112, 115, 118, 120, 122, 124, 126, 128, 130, 133, 135, 138, 140, 142, 144, 146]\nnuclear_energy = [5, 8, 10, 12, 14, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73]\n\n# Combine Data\ndata = [renewable_energy, nonrenewable_energy, nuclear_energy]\nlabels = ['Renewable', 'Non-Renewable', 'Nuclear']\n\n# Create Violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data)\nplt.xticks([0, 1, 2], labels)\n\n# Modify the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Non-Renewable' is the target object\n        violin.set_facecolor('#0c5b84')\n        violin.set_zorder(0)\n        shadow_color = random.choice(['gray','gold'])\n        violin.set_path_effects([SimplePatchShadow(offset=(2.90,3.87), shadow_rgbFace=shadow_color), Normal()])\n\n# Title and Labels\nplt.title('Global Energy Consumption by Source Over The Past 50 Years')\nplt.xlabel('Energy Source')\nplt.ylabel('Energy Consumption')\n\n# Display plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_e99d7b6c65bfc383/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_e99d7b6c65bfc383/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_e99d7b6c65bfc383/figure.png"
    },
    {
        "id": "Violin_ed6e4a1378d43145",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n# Data\nage_groups = [\"Children\", \"Teenagers\", \"Young Adults\", \"Adults\", \"Older Adults\"]\nreading_hours = {\n    \"Children\": [3, 4, 2, 5, 3, 4, 2, 5, 4, 3],\n    \"Teenagers\": [4, 5, 3, 6, 4, 5, 3, 6, 5, 4],\n    \"Young Adults\": [5, 6, 4, 7, 5, 6, 4, 7, 6, 5],\n    \"Adults\": [6, 7, 5, 8, 6, 7, 5, 8, 7, 6],\n    \"Older Adults\": [4, 5, 3, 6, 4, 5, 3, 6, 5, 4],\n}\n\n# Preprocess data\ndata = []\nfor group in age_groups:\n    data.append(reading_hours[group])\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(data=data)\nplt.title('Hours Spent Reading per Week by Age Groups')\nplt.xlabel('Age Groups')\nplt.ylabel('Hours Spent Reading per Week')\nplt.xticks(range(len(age_groups)), age_groups)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the clipping state of the violins that contain the center point of the bounding box to False. Additionally, update their face color to #5c5e55 for the same violins.",
        "Input_image": "./test_dataset/Violin/Violin_ed6e4a1378d43145/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n# Data\nage_groups = [\"Children\", \"Teenagers\", \"Young Adults\", \"Adults\", \"Older Adults\"]\nreading_hours = {\n    \"Children\": [3, 4, 2, 5, 3, 4, 2, 5, 4, 3],\n    \"Teenagers\": [4, 5, 3, 6, 4, 5, 3, 6, 5, 4],\n    \"Young Adults\": [5, 6, 4, 7, 5, 6, 4, 7, 6, 5],\n    \"Adults\": [6, 7, 5, 8, 6, 7, 5, 8, 7, 6],\n    \"Older Adults\": [4, 5, 3, 6, 4, 5, 3, 6, 5, 4],\n}\n\n# Preprocess data\ndata = []\nfor group in age_groups:\n    data.append(reading_hours[group])\n\n# Create violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(data=data)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Teenagers' is the target object\n        violin.set_clip_on(False)\n        violin.set_facecolor('#5c5e55')\nplt.title('Hours Spent Reading per Week by Age Groups')\nplt.xlabel('Age Groups')\nplt.ylabel('Hours Spent Reading per Week')\nplt.xticks(range(len(age_groups)), age_groups)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_ed6e4a1378d43145/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_ed6e4a1378d43145/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_ed6e4a1378d43145/figure.png"
    },
    {
        "id": "Violin_59d9e9caae624dbe",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Define the data\nelectronics_ratings = [4, 5, 3, 4, 2, 5, 4, 3, 4, 5, 1, 3, 2, 4, 5]\nclothing_ratings = [3, 4, 2, 4, 3, 1, 5, 4, 2, 3, 4, 5, 3, 4, 2]\nhome_goods_ratings = [5, 4, 3, 2, 5, 4, 4, 3, 5, 2, 1, 4, 3, 2, 5]\n\nratings_data = {\n    'Electronics': electronics_ratings,\n    'Clothing': clothing_ratings,\n    'Home Goods': home_goods_ratings\n}\n\n# Melt the data\nmelted_data = pd.melt(pd.DataFrame(ratings_data), var_name='Product Category', value_name='Ratings')\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Product Category', y='Ratings', data=melted_data, inner='point')\nplt.title('Product Ratings by Category')\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the violins that contain the center point of the bounding box to 0.5406 and fill them with a texture of 'O'.",
        "Input_image": "./test_dataset/Violin/Violin_59d9e9caae624dbe/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Define the data\nelectronics_ratings = [4, 5, 3, 4, 2, 5, 4, 3, 4, 5, 1, 3, 2, 4, 5]\nclothing_ratings = [3, 4, 2, 4, 3, 1, 5, 4, 2, 3, 4, 5, 3, 4, 2]\nhome_goods_ratings = [5, 4, 3, 2, 5, 4, 4, 3, 5, 2, 1, 4, 3, 2, 5]\n\nratings_data = {\n    'Electronics': electronics_ratings,\n    'Clothing': clothing_ratings,\n    'Home Goods': home_goods_ratings\n}\n\n# Melt the data\nmelted_data = pd.melt(pd.DataFrame(ratings_data), var_name='Product Category', value_name='Ratings')\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Product Category', y='Ratings', data=melted_data, inner='point')\nfor i, violin in enumerate(vp.collections):\n    if i in [0, 2]:\n        violin.set_alpha(0.5406071249455384)\n        violin.set_hatch('O')\nplt.title('Product Ratings by Category')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Violin/Violin_59d9e9caae624dbe/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_59d9e9caae624dbe/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_59d9e9caae624dbe/figure.png"
    },
    {
        "id": "Violin_5de070247eb24b83",
        "Input_code": "import pandas as pd\n# Importing necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Specifying the data\nbedrock_elevation = [100, 120, 110, 130, 115, 105, 125, 135, 140, 115]\nsandstone_elevation = [200, 180, 190, 210, 220, 230, 240, 200, 210, 195]\nlimestone_elevation = [300, 280, 270, 290, 305, 295, 310, 320, 315, 300]\nshale_elevation = [150, 160, 140, 130, 145, 155, 165, 170, 175, 160]\n\n# Preparing the data for presentation\ndata = [bedrock_elevation, sandstone_elevation, limestone_elevation, shale_elevation]\nlayers = [\"Bedrock\", \"Sandstone\", \"Limestone\", \"Shale\"]\n\n# Creating the plot\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data)\nplt.title('Violin Plot of Geological Layer Elevations')\nplt.xlabel('Geological Layers')\nplt.ylabel('Elevation in meters')\nplt.xticks(ticks=[0, 1, 2, 3], labels=layers)\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the label of the violin that contains the center point of the bounding box to 'A new Label'. Also, update its linestyle to 'dotted'.",
        "Input_image": "./test_dataset/Violin/Violin_5de070247eb24b83/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Importing necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Specifying the data\nbedrock_elevation = [100, 120, 110, 130, 115, 105, 125, 135, 140, 115]\nsandstone_elevation = [200, 180, 190, 210, 220, 230, 240, 200, 210, 195]\nlimestone_elevation = [300, 280, 270, 290, 305, 295, 310, 320, 315, 300]\nshale_elevation = [150, 160, 140, 130, 145, 155, 165, 170, 175, 160]\n\n# Preparing the data for presentation\ndata = [bedrock_elevation, sandstone_elevation, limestone_elevation, shale_elevation]\nlayers = [\"Bedrock\", \"Sandstone\", \"Limestone\", \"Shale\"]\n\n# Creating the plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data)\nplt.title('Violin Plot of Geological Layer Elevations')\nplt.xlabel('Geological Layers')\nplt.ylabel('Elevation in meters')\nplt.xticks(ticks=[0, 1, 2, 3], labels=layers)\n\n# Modifying the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Sandstone' is the target object\n        violin.set_label('A new Label')\n        violin.set_linestyle('dotted')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_5de070247eb24b83/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_5de070247eb24b83/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_5de070247eb24b83/figure.png"
    },
    {
        "id": "Violin_6e31ff100c355f2f",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Seabed depth data for different locations\nlocations = ['A', 'B', 'C']\ndepths = [[1500, 1550, 1600, 1550, 1650, 1600, 1500, 1520, 1580, 1610],\n          [1450, 1500, 1550, 1520, 1580, 1600, 1530, 1560, 1500, 1470],\n          [1400, 1450, 1480, 1500, 1550, 1520, 1450, 1420, 1500, 1490]]\n\n# Prepare data for seaborn\ndata = []\nfor location, depth in zip(locations, depths):\n    data.extend([(location, value) for value in depth])\n\n# Convert data to a DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Location', 'Depth'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Location\", y=\"Depth\", data=df)\n\n# Add title and labels\nplt.title(\"Ocean Floor Seabed Topography Mapping\")\nplt.xlabel(\"Location\")\nplt.ylabel(\"Seabed Depth (in meters)\")\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #580c11.",
        "Input_image": "./test_dataset/Violin/Violin_6e31ff100c355f2f/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Seabed depth data for different locations\nlocations = ['A', 'B', 'C']\ndepths = [[1500, 1550, 1600, 1550, 1650, 1600, 1500, 1520, 1580, 1610],\n          [1450, 1500, 1550, 1520, 1580, 1600, 1530, 1560, 1500, 1470],\n          [1400, 1450, 1480, 1500, 1550, 1520, 1450, 1420, 1500, 1490]]\n\n# Prepare data for seaborn\ndata = []\nfor location, depth in zip(locations, depths):\n    data.extend([(location, value) for value in depth])\n\n# Convert data to a DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Location', 'Depth'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Location\", y=\"Depth\", data=df)\n\n# Modify the color of the violin corresponding to the Target_object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming we choose the second violin as the target\n        violin.set_facecolor('#580c11')\n\n# Add title and labels\nplt.title(\"Ocean Floor Seabed Topography Mapping\")\nplt.xlabel(\"Location\")\nplt.ylabel(\"Seabed Depth (in meters)\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_6e31ff100c355f2f/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_6e31ff100c355f2f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_6e31ff100c355f2f/figure.png"
    },
    {
        "id": "Violin_ab779340759dc07f",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Define the exercise frequencies and associated happiness levels\nex_freq = ['None', 'Rarely', 'Occasionally', 'Regularly', 'Daily']\nhappiness_levels = {\n    'None': [2, 3, 1, 4, 2, 3, 1, 2, 1, 3, 2, 1, 3, 4, 2, 4, 3, 2, 1, 3],\n    'Rarely': [3, 3, 2, 3, 3, 4, 2, 3, 4, 3, 3, 2, 3, 4, 3, 4, 2, 3, 4, 2],\n    'Occasionally': [4, 3, 3, 3, 4, 4, 3, 4, 3, 3, 2, 3, 4, 4, 4, 4, 3, 4, 3, 3],\n    'Regularly': [4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 3, 4, 4, 3, 4, 4, 4],\n    'Daily': [5, 4, 4, 5, 5, 5, 5, 4, 5, 4, 4, 5, 4, 5, 5, 5, 4, 5, 4, 5]\n}\n\n# Prepare data for plotting\nfreq = []\nhap_scores = []\nfor key, values in happiness_levels.items():\n    freq += [key]*len(values)\n    hap_scores += values\n\ndata = pd.DataFrame({'Exercise Frequency': freq, 'Happiness Scores': hap_scores})\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Exercise Frequency', y='Happiness Scores', data=data, order=ex_freq)\n\n# Provide the necessary labels\nplt.title('Relationship between the frequency of exercise and levels of happiness among adults aged 30-50 years')\nplt.xlabel('Exercise Frequency')\nplt.ylabel('Happiness Score')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the z-order of the violins that contain the center point of the bounding box to 16. Apply a shadow effect to these violins with an offset of (2.35, 2.45) and randomly choose a shadow color from ['gray', 'gold']. Also, add a stroke to the violins corresponding to the center point of the bounding box with a linewidth of 2.92 and a foreground color of #46c377.",
        "Input_image": "./test_dataset/Violin/Violin_ab779340759dc07f/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal, withStroke\n\n# Define the exercise frequencies and associated happiness levels\nex_freq = ['None', 'Rarely', 'Occasionally', 'Regularly', 'Daily']\nhappiness_levels = {\n    'None': [2, 3, 1, 4, 2, 3, 1, 2, 1, 3, 2, 1, 3, 4, 2, 4, 3, 2, 1, 3],\n    'Rarely': [3, 3, 2, 3, 3, 4, 2, 3, 4, 3, 3, 2, 3, 4, 3, 4, 2, 3, 4, 2],\n    'Occasionally': [4, 3, 3, 3, 4, 4, 3, 4, 3, 3, 2, 3, 4, 4, 4, 4, 3, 4, 3, 3],\n    'Regularly': [4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 3, 4, 4, 3, 4, 4, 4],\n    'Daily': [5, 4, 4, 5, 5, 5, 5, 4, 5, 4, 4, 5, 4, 5, 5, 5, 4, 5, 4, 5]\n}\n\n# Prepare data for plotting\nfreq = []\nhap_scores = []\nfor key, values in happiness_levels.items():\n    freq += [key]*len(values)\n    hap_scores += values\n\ndata = pd.DataFrame({'Exercise Frequency': freq, 'Happiness Scores': hap_scores})\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Exercise Frequency', y='Happiness Scores', data=data, order=ex_freq)\n\n# Modify the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Rarely' is the target object\n        violin.set_zorder(16)\n        shadow_color = random.choice(['gray','gold'])\n        violin.set_path_effects([SimplePatchShadow(offset=(2.35,2.45), shadow_rgbFace=shadow_color), withStroke(linewidth=2.9210523059120304, foreground='#46c377'), Normal()])\n\n# Provide the necessary labels\nplt.title('Relationship between the frequency of exercise and levels of happiness among adults aged 30-50 years')\nplt.xlabel('Exercise Frequency')\nplt.ylabel('Happiness Score')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_ab779340759dc07f/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_ab779340759dc07f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_ab779340759dc07f/figure.png"
    },
    {
        "id": "Violin_30c2f87775059690",
        "Input_code": "import pandas as pd\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Dataset for Depths (in kilometers)\ndepths = [4.2, 3.8, 4.5, 3.9, 3.7, 4.0, 4.3, 4.1, 3.6, 4.4, 3.5, 4.2, 4.6, 3.8, 4.0]\n\n# Create the violin plot\nplt.figure(figsize=(10,6)) # adjust the size as per your needs\nsns.violinplot(y=depths)\n\n# Format the plot\nplt.title('Violin plot of Ocean Floor Topography')\nplt.ylabel('Depth (in kilometers)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the violin that contains the center point of the bounding box to 0.56.",
        "Input_image": "./test_dataset/Violin/Violin_30c2f87775059690/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Dataset for Depths (in kilometers)\ndepths = [4.2, 3.8, 4.5, 3.9, 3.7, 4.0, 4.3, 4.1, 3.6, 4.4, 3.5, 4.2, 4.6, 3.8, 4.0]\n\n# Create the violin plot\nplt.figure(figsize=(10,6)) # adjust the size as per your needs\nvp = sns.violinplot(y=depths)\n\n# Modify the transparency of the violin\nfor i, violin in enumerate(vp.collections):\n    if i == 0:  # Since there's only one violin, its index is 0\n        violin.set_alpha(0.56)\n        violin.set_linewidth(0.8)\n\n# Format the plot\nplt.title('Violin plot of Ocean Floor Topography')\nplt.ylabel('Depth (in kilometers)')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Violin/Violin_30c2f87775059690/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_30c2f87775059690/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_30c2f87775059690/figure.png"
    },
    {
        "id": "Violin_af22ea239411980c",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the dataset\nregion_a = [2.3, 2.6, 2.1, 2.8, 2.5, 3.0, 2.7, 2.4, 2.9, 2.2]\nregion_b = [1.9, 1.7, 1.5, 1.8, 2.0, 1.6, 1.4, 1.9, 2.1, 1.6]\nregion_c = [3.5, 3.2, 3.6, 3.8, 3.3, 3.1, 3.9, 3.7, 3.4, 3.0]\nregion_d = [4.2, 4.5, 4.1, 4.3, 4.6, 4.0, 4.4, 4.7, 4.8, 4.2]\n\n# Create a data structure that includes list name (the region)\nnebula_masses = [('region_a', mass) for mass in region_a] + \\\n                [('region_b', mass) for mass in region_b] + \\\n                [('region_c', mass) for mass in region_c] + \\\n                [('region_d', mass) for mass in region_d]\n\n# Transform into DataFrame\ndf = pd.DataFrame(nebula_masses, columns=['Region', 'Simulated Nebula Masses'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Region\", y=\"Simulated Nebula Masses\", data=df)\n\n# Show the plot with title and labels\nplt.title('Violin Plots of Simulated Nebula Masses in Different Galactic Regions')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transform of the box part of the violin that contains the center point of the bounding box to align with the coordinate system of the axes.",
        "Input_image": "./test_dataset/Violin/Violin_af22ea239411980c/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the dataset\nregion_a = [2.3, 2.6, 2.1, 2.8, 2.5, 3.0, 2.7, 2.4, 2.9, 2.2]\nregion_b = [1.9, 1.7, 1.5, 1.8, 2.0, 1.6, 1.4, 1.9, 2.1, 1.6]\nregion_c = [3.5, 3.2, 3.6, 3.8, 3.3, 3.1, 3.9, 3.7, 3.4, 3.0]\nregion_d = [4.2, 4.5, 4.1, 4.3, 4.6, 4.0, 4.4, 4.7, 4.8, 4.2]\n\n# Create a data structure that includes list name (the region)\nnebula_masses = [('region_a', mass) for mass in region_a] + \\\n                [('region_b', mass) for mass in region_b] + \\\n                [('region_c', mass) for mass in region_c] + \\\n                [('region_d', mass) for mass in region_d]\n\n# Transform into DataFrame\ndf = pd.DataFrame(nebula_masses, columns=['Region', 'Simulated Nebula Masses'])\n\n# Create a violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Region\", y=\"Simulated Nebula Masses\", data=df)\n\n# Set the transform of the object corresponding to the Target_object to the Coordinate system of axes\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'region_b' is the target object\n        violin.set_transform(plt.gca().transAxes)\n\n# Show the plot with title and labels\nplt.title('Violin Plots of Simulated Nebula Masses in Different Galactic Regions')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_af22ea239411980c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_af22ea239411980c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_af22ea239411980c/figure.png"
    },
    {
        "id": "Violin_fe6a4577e7041d69",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Bean types and their corresponding values\nbeans_data = {\n    'Kidney Beans': [22, 24, 26, 28, 30, 21, 23, 25],\n    'Black Beans': [18, 20, 21, 23, 25, 19, 22, 24],\n    'Chickpeas': [14, 16, 17, 19, 20, 18, 21, 23],\n    'Navy Beans': [25, 27, 29, 30, 28, 26, 24, 22],\n    'Pinto Beans': [20, 22, 24, 23, 21, 19, 18, 25],\n    'Lentils': [16, 18, 19, 17, 20, 21, 22, 24],\n}\n\n# Prepare lists for plotting\nkinds = []\nvalues = []\nfor kind, value in beans_data.items():\n    kinds.extend([kind]*len(value))\n    values.extend(value)\n\n# Create a DataFrame\ndf = pd.DataFrame({'Beans': kinds, 'Value': values})\n\n# Create a violin plot\nplt.figure(figsize=[10,8])\nsns.violinplot(x=df['Beans'], y=df['Value'])\n\n# Display the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the line color of the violin that contains the center point of the bounding box to #c75454. For the same points, apply a stroke to the violin with a linewidth of 2.14 and a foreground color of #9de9bf.",
        "Input_image": "./test_dataset/Violin/Violin_fe6a4577e7041d69/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.patheffects as path_effects\n\n# Bean types and their corresponding values\nbeans_data = {\n    'Kidney Beans': [22, 24, 26, 28, 30, 21, 23, 25],\n    'Black Beans': [18, 20, 21, 23, 25, 19, 22, 24],\n    'Chickpeas': [14, 16, 17, 19, 20, 18, 21, 23],\n    'Navy Beans': [25, 27, 29, 30, 28, 26, 24, 22],\n    'Pinto Beans': [20, 22, 24, 23, 21, 19, 18, 25],\n    'Lentils': [16, 18, 19, 17, 20, 21, 22, 24],\n}\n\n# Prepare lists for plotting\nkinds = []\nvalues = []\nfor kind, value in beans_data.items():\n    kinds.extend([kind]*len(value))\n    values.extend(value)\n\n# Create a DataFrame\ndf = pd.DataFrame({'Beans': kinds, 'Value': values})\n\n# Create a violin plot\nplt.figure(figsize=[10,8])\nvp = sns.violinplot(x=df['Beans'], y=df['Value'])\n\n# Set the line color and stroke effect for the target object\nstroke_effect = path_effects.withStroke(linewidth=2.142649639002267, foreground='#9de9bf')\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Black Beans' is the target object\n        violin.set_edgecolor('#c75454')\n        violin.set_path_effects([stroke_effect])\n\n# Display the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_fe6a4577e7041d69/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_fe6a4577e7041d69/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_fe6a4577e7041d69/figure.png"
    },
    {
        "id": "Violin_d5fb8991fa0567bf",
        "Input_code": "import pandas as pd\n# Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Define soil diversity scores\nZone_A = [6, 5, 5, 4, 4, 6, 6, 7, 5, 4]\nZone_B = [3, 3, 4, 2, 4, 3, 2, 5, 4, 3]\nZone_C = [8, 8, 9, 7, 8, 7, 6, 9, 9, 8]\n\n# Combine the lists into a dataframe\ndata = {'Zone A': Zone_A, 'Zone B': Zone_B, 'Zone C': Zone_C}\ndf = pd.DataFrame(data)\n\n# Melt the dataframe for easier plotting\ndf_melt = pd.melt(df)\n\n# set up the figure size\nplt.figure(figsize=(9,6))\n\n# Draw the violin plot\nsns.violinplot(x='variable', y='value', data=df_melt)\n\n# Set the title\nplt.title(\"Distribution of Soil Diversity Scores in Different Regions\")\n\n# Set the y-label\nplt.ylabel(\"Soil Diversity Score\")\n\n# display plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Make the portion of the violins that contains the center point of the bounding box rasterized by setting its state to True.",
        "Input_image": "./test_dataset/Violin/Violin_d5fb8991fa0567bf/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Define soil diversity scores\nZone_A = [6, 5, 5, 4, 4, 6, 6, 7, 5, 4]\nZone_B = [3, 3, 4, 2, 4, 3, 2, 5, 4, 3]\nZone_C = [8, 8, 9, 7, 8, 7, 6, 9, 9, 8]\n\n# Combine the lists into a dataframe\ndata = {'Zone A': Zone_A, 'Zone B': Zone_B, 'Zone C': Zone_C}\ndf = pd.DataFrame(data)\n\n# Melt the dataframe for easier plotting\ndf_melt = pd.melt(df)\n\n# set up the figure size\nplt.figure(figsize=(9,6))\n\n# Draw the violin plot\nvp = sns.violinplot(x='variable', y='value', data=df_melt)\n\n# Set the rasterized state of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Zone B' is the target object\n        violin.set_rasterized(True)\n\n# Set the title\nplt.title(\"Distribution of Soil Diversity Scores in Different Regions\")\n\n# Set the y-label\nplt.ylabel(\"Soil Diversity Score\")\n\n# display plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_d5fb8991fa0567bf/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_d5fb8991fa0567bf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_d5fb8991fa0567bf/figure.png"
    },
    {
        "id": "Violin_02f53feac27a3c89",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Density values datasets\nspiral_arm_a = [12, 15, 14, 11, 13, 10, 16, 12, 13, 14]\nnebula_fields = [8, 9, 11, 10, 12, 9, 10, 11, 9, 10]\ngalactic_core = [20, 18, 22, 19, 21, 23, 17, 20, 19, 21]\n\n# Compact all datasets into a list\ndata = [spiral_arm_a, nebula_fields, galactic_core]\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Create a violin plot\nsns.violinplot(data=data, ax=ax)\n\n# Set the y-axis label\nax.set_ylabel('Density (Clusters per Square Parsec)')\n\n# Customizing the x-axis labels\nax.set_xticklabels(['Spiral Arm A', 'Nebula Fields', 'Galactic Core'])\n\n# Set the title\nax.set_title('Galactic Cluster Density Mapping')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the violins that contain the center point of the bounding box to False. Additionally, set the clipping state of those violins to False as well.",
        "Input_image": "./test_dataset/Violin/Violin_02f53feac27a3c89/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Density values datasets\nspiral_arm_a = [12, 15, 14, 11, 13, 10, 16, 12, 13, 14]\nnebula_fields = [8, 9, 11, 10, 12, 9, 10, 11, 9, 10]\ngalactic_core = [20, 18, 22, 19, 21, 23, 17, 20, 19, 21]\n\n# Compact all datasets into a list\ndata = [spiral_arm_a, nebula_fields, galactic_core]\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Create a violin plot\nvp = sns.violinplot(data=data, ax=ax)\n\n# Set the y-axis label\nax.set_ylabel('Density (Clusters per Square Parsec)')\n\n# Customizing the x-axis labels\nax.set_xticklabels(['Spiral Arm A', 'Nebula Fields', 'Galactic Core'])\n\n# Set the title\nax.set_title('Galactic Cluster Density Mapping')\n\n# Modify the animated and clipping state of the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Nebula Fields' is the target object\n        violin.set_animated(False)\n        violin.set_clip_on(False)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_02f53feac27a3c89/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_02f53feac27a3c89/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_02f53feac27a3c89/figure.png"
    },
    {
        "id": "Violin_4b220e8aea1d035c",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# User session durations\ndurations = [10, 7, 12, 15, 21, 18, 13, 11, 9, 8, 10, 12, 15, 13, 14, 19, 16, 20, 8, 11, 13, 17, 14, 12, 9, 10, 15, 16, 11, 13, 18, 19, 16, 14, 13, 12, 10, 11, 9, 17, 8, 12, 15, 16, 18, 14, 13, 19, 11, 10, 9, 17, 12, 15, 16, 13, 18, 14, 11, 13, 12, 15, 17, 19, 14]\n\n# Create the violin plot\nplt.figure(figsize=(9, 6))\nsns.violinplot(y=durations, inner=\"stick\")\nplt.title('Violin plot of user session durations')\nplt.ylabel('Session duration (in minutes)')\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the part that contains the center point of the bounding box to 4.57.",
        "Input_image": "./test_dataset/Violin/Violin_4b220e8aea1d035c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# User session durations\ndurations = [10, 7, 12, 15, 21, 18, 13, 11, 9, 8, 10, 12, 15, 13, 14, 19, 16, 20, 8, 11, 13, 17, 14, 12, 9, 10, 15, 16, 11, 13, 18, 19, 16, 14, 13, 12, 10, 11, 9, 17, 8, 12, 15, 16, 18, 14, 13, 19, 11, 10, 9, 17, 12, 15, 16, 13, 18, 14, 11, 13, 12, 15, 17, 19, 14]\n\n# Create the violin plot\nplt.figure(figsize=(9, 6))\nvp = sns.violinplot(y=durations, inner=\"stick\")\nfor i, violin in enumerate(vp.collections):\n    if i == 0:  # Assuming the first violin is the target object\n        violin.set_linewidth(4.57)\nplt.title('Violin plot of user session durations')\nplt.ylabel('Session duration (in minutes)')\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Violin/Violin_4b220e8aea1d035c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_4b220e8aea1d035c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_4b220e8aea1d035c/figure.png"
    },
    {
        "id": "Violin_6cce01812697b2d3",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# define data\ngen1 = [170, 175, 180, 165, 170, 175, 160, 168, 172, 165]\ngen2 = [175, 180, 185, 182, 178, 177, 173, 176, 180, 185]\ngen3 = [180, 185, 190, 195, 188, 186, 182, 187, 190, 184]\ngen4 = [185, 190, 195, 200, 198, 192, 196, 193, 190, 188]\n\ndata = [gen1, gen2, gen3, gen4]\nlabels=['Generation 1', 'Generation 2', 'Generation 3', 'Generation 4']\n\n# create a new figure\nplt.figure(figsize=(10,6))\n\n# create violin plot\nsns.violinplot(data=data, inner=\"points\", orient=\"v\")\n\n# set plot title and labels\nplt.title(\"Height Distribution Across Four Generations\")\nplt.ylabel('Height in cm')\nplt.xlabel('Generation')\nplt.xticks(ticks=[0, 1, 2, 3], labels=labels)\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the violin plots that contain the center point of the bounding box to #108369, and set the z-order of the violin body to 10. Additionally, apply a shadow effect to these violin plots with an offset of (2.57, 2.16), using gray as the shadow color.",
        "Input_image": "./test_dataset/Violin/Violin_6cce01812697b2d3/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# define data\ngen1 = [170, 175, 180, 165, 170, 175, 160, 168, 172, 165]\ngen2 = [175, 180, 185, 182, 178, 177, 173, 176, 180, 185]\ngen3 = [180, 185, 190, 195, 188, 186, 182, 187, 190, 184]\ngen4 = [185, 190, 195, 200, 198, 192, 196, 193, 190, 188]\n\ndata = [gen1, gen2, gen3, gen4]\nlabels=['Generation 1', 'Generation 2', 'Generation 3', 'Generation 4']\n\n# create a new figure\nplt.figure(figsize=(10,6))\n\n# create violin plot\nvp = sns.violinplot(data=data, inner=\"points\", orient=\"v\")\n\n# set plot title and labels\nplt.title(\"Height Distribution Across Four Generations\")\nplt.ylabel('Height in cm')\nplt.xlabel('Generation')\nplt.xticks(ticks=[0, 1, 2, 3], labels=labels)\n\n# modify the violin plots\nfor i, violin in enumerate(vp.collections):\n    if i == 1*2:  \n        violin.set_edgecolor('#108369')\n        violin.set_zorder(10)\n        shadow_color = 'gray'\n        violin.set_path_effects([SimplePatchShadow(offset=(2.57,2.16), shadow_rgbFace=shadow_color), Normal()])\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Violin/Violin_6cce01812697b2d3/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_6cce01812697b2d3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_6cce01812697b2d3/figure.png"
    },
    {
        "id": "Violin_467ebc7abea06a93",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n#Data\nhours_of_sunlight = [6, 7, 7, 8, 7, 6, 8, 9, 9, 10, 7, 6, 8, 9, 9, 10, 8, 7, 8, 9, 10, 11, 7, 6, 8, 9, 9, 10, 8, 7, 6, 8, 9, 9, 10, 11]\nplant_growth_and_yield = [10, 12, 14, 15, 11, 9, 16, 18, 20, 17, 13, 11, 14, 15, 17, 19, 15, 12, 14, 16, 19, 21, 13, 10, 13, 15, 17, 20, 15, 12, 10, 13, 15, 17, 20, 22]\n\n# Ensure that the numpy arrays are of the same length\nassert len(hours_of_sunlight) == len(plant_growth_and_yield), \"The input arrays should have the same length!\"\n\n# Create a DataFrame\ndf = pd.DataFrame(list(zip(hours_of_sunlight, plant_growth_and_yield)), columns =['Hours of Sunlight', 'Plant Growth and Yield'])\n\n# Create a violin plot\nsns.violinplot(x = \"Hours of Sunlight\", y = \"Plant Growth and Yield\", data = df)\n\n# Show the plot\nplt.title('Violin plot of the relation between hours of sunlight and plant growth and yield')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the violins that contain the center point of the bounding box to a region defined by a lower-left corner at (94, 188) and with a width of 480 units and a height of 141 units, following the matplotlib.transforms.Bbox pattern.",
        "Input_image": "./test_dataset/Violin/Violin_467ebc7abea06a93/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n#Data\nhours_of_sunlight = [6, 7, 7, 8, 7, 6, 8, 9, 9, 10, 7, 6, 8, 9, 9, 10, 8, 7, 8, 9, 10, 11, 7, 6, 8, 9, 9, 10, 8, 7, 6, 8, 9, 9, 10, 11]\nplant_growth_and_yield = [10, 12, 14, 15, 11, 9, 16, 18, 20, 17, 13, 11, 14, 15, 17, 19, 15, 12, 14, 16, 19, 21, 13, 10, 13, 15, 17, 20, 15, 12, 10, 13, 15, 17, 20, 22]\n\n# Ensure that the numpy arrays are of the same length\nassert len(hours_of_sunlight) == len(plant_growth_and_yield), \"The input arrays should have the same length!\"\n\n# Create a DataFrame\ndf = pd.DataFrame(list(zip(hours_of_sunlight, plant_growth_and_yield)), columns =['Hours of Sunlight', 'Plant Growth and Yield'])\n\n# Create a violin plot\nvp = sns.violinplot(x = \"Hours of Sunlight\", y = \"Plant Growth and Yield\", data = df)\n\n# Set the clip box for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming the second violin is the target object\n        violin.set_clip_box(Bbox.from_bounds(94, 188, 480, 141))\n\n# Show the plot\nplt.title('Violin plot of the relation between hours of sunlight and plant growth and yield')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_467ebc7abea06a93/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_467ebc7abea06a93/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_467ebc7abea06a93/figure.png"
    },
    {
        "id": "Violin_7bff1ae5d6564215",
        "Input_code": "import pandas as pd\n# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nrocky_surfaces = [45, 50, 42, 48, 38, 55, 43, 47, 52, 40]\nsandy_dunes = [30, 35, 28, 32, 37, 29, 31, 36, 34, 33]\ncrater_interiors = [15, 20, 18, 17, 22, 16, 19, 21, 23, 14]\nmountainous_regions = [70, 65, 72, 68, 75, 66, 71, 73, 69, 74]\n\n# Combine data for plotting\ndata = [rocky_surfaces, sandy_dunes, crater_interiors, mountainous_regions]\nlabels = ['Rocky Surfaces', 'Sandy Dunes', 'Crater Interiors', 'Mountainous Regions']\n\n# Seaborn violinplot\nsns.set(style='whitegrid')\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data, inner='quartiles')\nplt.xticks([0, 1, 2, 3], labels)\nplt.ylabel('Elevation Level (m)')\nplt.title('Elevation Levels across Different Terrains on Mars')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the violins that contain the center point of the bounding box to True. Additionally, update the linestyle of that area to 'dashdot'.",
        "Input_image": "./test_dataset/Violin/Violin_7bff1ae5d6564215/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nrocky_surfaces = [45, 50, 42, 48, 38, 55, 43, 47, 52, 40]\nsandy_dunes = [30, 35, 28, 32, 37, 29, 31, 36, 34, 33]\ncrater_interiors = [15, 20, 18, 17, 22, 16, 19, 21, 23, 14]\nmountainous_regions = [70, 65, 72, 68, 75, 66, 71, 73, 69, 74]\n\n# Combine data for plotting\ndata = [rocky_surfaces, sandy_dunes, crater_interiors, mountainous_regions]\nlabels = ['Rocky Surfaces', 'Sandy Dunes', 'Crater Interiors', 'Mountainous Regions']\n\n# Seaborn violinplot\nsns.set(style='whitegrid')\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data, inner='quartiles')\nplt.xticks([0, 1, 2, 3], labels)\nplt.ylabel('Elevation Level (m)')\nplt.title('Elevation Levels across Different Terrains on Mars')\n\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Sandy Dunes' is the target object\n        violin.set_clip_on(True)\n        violin.set_linestyle('dashdot')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_7bff1ae5d6564215/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_7bff1ae5d6564215/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_7bff1ae5d6564215/figure.png"
    },
    {
        "id": "Violin_d5b7f0ab439fb0a1",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndata = {\n    \"Fish\": [150, 120, 140, 160, 130, 110, 170, 180, 125, 135],\n    \"Invertebrates\": [80, 90, 100, 85, 95, 105, 110, 75, 85, 95],\n    \"Coral\": [50, 60, 55, 65, 70, 45, 75, 65, 55, 50],\n    \"Algae\": [40, 45, 50, 55, 60, 35, 65, 70, 40, 50]\n}\n\n# Create a dataframe\ndf = pd.DataFrame(data)\n\n# Melt the data\ndf_melt = df.melt(var_name='Species', value_name='Richness')\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create violin plot\nsns.violinplot(ax=ax, x=\"Species\", y=\"Richness\", data=df_melt)\n\n# Set title and labels\nax.set_title('Species richness of marine organisms in a coral reef')\nax.set_xlabel('Species')\nax.set_ylabel('Richness')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #698be7.",
        "Input_image": "./test_dataset/Violin/Violin_d5b7f0ab439fb0a1/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndata = {\n    \"Fish\": [150, 120, 140, 160, 130, 110, 170, 180, 125, 135],\n    \"Invertebrates\": [80, 90, 100, 85, 95, 105, 110, 75, 85, 95],\n    \"Coral\": [50, 60, 55, 65, 70, 45, 75, 65, 55, 50],\n    \"Algae\": [40, 45, 50, 55, 60, 35, 65, 70, 40, 50]\n}\n\n# Create a dataframe\ndf = pd.DataFrame(data)\n\n# Melt the data\ndf_melt = df.melt(var_name='Species', value_name='Richness')\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create violin plot\nvp = sns.violinplot(ax=ax, x=\"Species\", y=\"Richness\", data=df_melt)\n\n# Modify the color of the violin corresponding to the Target_object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Invertebrates' is the target\n        violin.set_facecolor('#698be7')\n\n# Set title and labels\nax.set_title('Species richness of marine organisms in a coral reef')\nax.set_xlabel('Species')\nax.set_ylabel('Richness')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_d5b7f0ab439fb0a1/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_d5b7f0ab439fb0a1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_d5b7f0ab439fb0a1/figure.png"
    },
    {
        "id": "Violin_6fe2c3de73321ccf",
        "Input_code": "# import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# dataset\ndepths = ['100m', '200m', '300m', '400m', '500m']\ntemperatures = [[800, 810, 805, 815, 820, 800, 805, 810, 800, 815],\n                [850, 860, 855, 865, 870, 855, 850, 860, 845, 865],\n                [900, 920, 905, 915, 910, 900, 905, 915, 895, 920],\n                [950, 940, 945, 955, 960, 950, 955, 940, 940, 960],\n                [1000, 990, 995, 1005, 1010, 1000, 995, 990, 1005, 1010]]\n\n# convert the dataset into a format suitable for seaborn\ndata = []\nfor depth, temp in zip(depths, temperatures):\n    for t in temp:\n        data.append((depth, t))\n\n# convert the data to pandas DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Depth', 'Temperature'])\n\n# create a violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='Depth', y='Temperature', data=df)\n\n# show the plot\nplt.title('Temperature distribution at different depths within the volcanic crater')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the portions of the violin that contain the center point of the bounding box to #f22d05, and set their rasterized state to True.",
        "Input_image": "./test_dataset/Violin/Violin_6fe2c3de73321ccf/Visual_figure.png",
        "Test_code": "# import necessary libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# dataset\ndepths = ['100m', '200m', '300m', '400m', '500m']\ntemperatures = [[800, 810, 805, 815, 820, 800, 805, 810, 800, 815],\n                [850, 860, 855, 865, 870, 855, 850, 860, 845, 865],\n                [900, 920, 905, 915, 910, 900, 905, 915, 895, 920],\n                [950, 940, 945, 955, 960, 950, 955, 940, 940, 960],\n                [1000, 990, 995, 1005, 1010, 1000, 995, 990, 1005, 1010]]\n\n# convert the dataset into a format suitable for seaborn\ndata = []\nfor depth, temp in zip(depths, temperatures):\n    for t in temp:\n        data.append((depth, t))\n\n# convert the data to pandas DataFrame\nimport pandas as pd\ndf = pd.DataFrame(data, columns=['Depth', 'Temperature'])\n\n# create a violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='Depth', y='Temperature', data=df)\n\n# modify the line color and rasterized state for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming '200m' is the target object\n        violin.set_edgecolor('#f22d05')\n        violin.set_rasterized(True)\n\n# show the plot\nplt.title('Temperature distribution at different depths within the volcanic crater')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_6fe2c3de73321ccf/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_6fe2c3de73321ccf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_6fe2c3de73321ccf/figure.png"
    },
    {
        "id": "Violin_98237b4ca0e47705",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data\ndepths = ['0m']*5 + ['50m']*5 + ['100m']*5 + ['200m']*5 + ['500m']*5 + ['1000m']*5 + ['2000m']*5 + ['3000m']*5 + ['4000m']*5\nzones = ['Surface']*15 + ['Mesopelagic']*15 + ['Bathypelagic']*15\nabundance = [1000, 1200, 800, 1100, 900, 600, 700, 800, 500, 650, 400, 450, 500, 350, 300, 200, 250, 300, 180, 220, 150, 180, 200, 120, 160, 100, 120, 150, 80, 110, 50, 60, 70, 40, 55, 30, 40, 50, 25, 35, 20, 25, 30, 15, 18]\n\n# Create DataFrame\ndf = pd.DataFrame({'Depth': depths, 'Zone': zones, 'Abundance': abundance})\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Depth\", y=\"Abundance\", hue=\"Zone\", data=df)\nplt.title('Oceanic Microbe Abundance Distribution')\nplt.xlabel('Depth')\nplt.ylabel('Abundance (cells per ml)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the violin that contains the center point of the bounding box to #44f759. Also, enable the rasterized state for that violin by setting it to True.",
        "Input_image": "./test_dataset/Violin/Violin_98237b4ca0e47705/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data\ndepths = ['0m']*5 + ['50m']*5 + ['100m']*5 + ['200m']*5 + ['500m']*5 + ['1000m']*5 + ['2000m']*5 + ['3000m']*5 + ['4000m']*5\nzones = ['Surface']*15 + ['Mesopelagic']*15 + ['Bathypelagic']*15\nabundance = [1000, 1200, 800, 1100, 900, 600, 700, 800, 500, 650, 400, 450, 500, 350, 300, 200, 250, 300, 180, 220, 150, 180, 200, 120, 160, 100, 120, 150, 80, 110, 50, 60, 70, 40, 55, 30, 40, 50, 25, 35, 20, 25, 30, 15, 18]\n\n# Create DataFrame\ndf = pd.DataFrame({'Depth': depths, 'Zone': zones, 'Abundance': abundance})\n\n# Create violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Depth\", y=\"Abundance\", hue=\"Zone\", data=df)\nplt.title('Oceanic Microbe Abundance Distribution')\nplt.xlabel('Depth')\nplt.ylabel('Abundance (cells per ml)')\n\nfor i, violin in enumerate(vp.collections):\n    if i in [0, 1]:  # Assuming 'Surface' and 'Mesopelagic' zones are the target objects\n        violin.set_facecolor('#44f759')\n        violin.set_rasterized(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,1",
        "Test_image": "./test_dataset/Violin/Violin_98237b4ca0e47705/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_98237b4ca0e47705/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_98237b4ca0e47705/figure.png"
    },
    {
        "id": "Violin_b79813fead4f143a",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data\np1 = [6, 4, 8, 7, 7, 6, 6, 5, 8, 9]\np2 = [3, 2, 5, 6, 4, 7, 8, 5, 6, 5]\np3 = [9, 7, 6, 5, 8, 7, 8, 9, 10, 9]\np4 = [2, 3, 4, 2, 5, 4, 6, 7, 3, 4]\nratings = p1 + p2 + p3 + p4\nparticipants = ['Participant 1']*len(p1) + ['Participant 2']*len(p2) + ['Participant 3']*len(p3) + ['Participant 4']*len(p4)\n\n# DataFrame\ndf = pd.DataFrame({'Participant': participants, 'Rating': ratings})\n\n# Violin plot\nplt.figure(figsize=(10, 6))\nsns.violinplot(x='Participant', y='Rating', data=df, inner=\"point\")\nplt.title('Distribution of Skydiving Experience Ratings')\nplt.xlabel('Participants')\nplt.ylabel('Experience Ratings')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the visibility of the violin's inner whose violin's body contains the center point of the bounding box to False, and Stroke the corresponding violin body with a linewidth of 3.3632925631129478 and a #da7b93 foreground color.",
        "Input_image": "./test_dataset/Violin/Violin_b79813fead4f143a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.patheffects as path_effects\n\n# Data\np1 = [6, 4, 8, 7, 7, 6, 6, 5, 8, 9]\np2 = [3, 2, 5, 6, 4, 7, 8, 5, 6, 5]\np3 = [9, 7, 6, 5, 8, 7, 8, 9, 10, 9]\np4 = [2, 3, 4, 2, 5, 4, 6, 7, 3, 4]\nratings = p1 + p2 + p3 + p4\nparticipants = ['Participant 1']*len(p1) + ['Participant 2']*len(p2) + ['Participant 3']*len(p3) + ['Participant 4']*len(p4)\n\n# DataFrame\ndf = pd.DataFrame({'Participant': participants, 'Rating': ratings})\n\n# Violin plot\nplt.figure(figsize=(10, 6))\nvp = sns.violinplot(x='Participant', y='Rating', data=df, inner=\"point\")\nstroke_effect = path_effects.withStroke(linewidth=3.3632925631129478, foreground='#da7b93')\nfor i, violin in enumerate(vp.collections):  # \u6bcf\u4e2a\u5c0f\u63d0\u7434\u6709\u4e24\u90e8\u5206\uff0c\u4e3b\u4f53\u5728\u5076\u6570\u7d22\u5f15\n    if i ==3 :\n        violin.set_visible(False)\n    elif i==2:\n        violin.set_path_effects([stroke_effect])\n        \nplt.title('Distribution of Skydiving Experience Ratings')\nplt.xlabel('Participants')\nplt.ylabel('Experience Ratings')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,3",
        "Test_image": "./test_dataset/Violin/Violin_b79813fead4f143a/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_b79813fead4f143a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_b79813fead4f143a/figure.png"
    },
    {
        "id": "Violin_4f5ba45e6bb5e3cd",
        "Input_code": "import pandas as pd\n# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nrocky_surfaces = [45, 50, 42, 48, 38, 55, 43, 47, 52, 40]\nsandy_dunes = [30, 35, 28, 32, 37, 29, 31, 36, 34, 33]\ncrater_interiors = [15, 20, 18, 17, 22, 16, 19, 21, 23, 14]\nmountainous_regions = [70, 65, 72, 68, 75, 66, 71, 73, 69, 74]\n\n# Combine data for plotting\ndata = [rocky_surfaces, sandy_dunes, crater_interiors, mountainous_regions]\nlabels = ['Rocky Surfaces', 'Sandy Dunes', 'Crater Interiors', 'Mountainous Regions']\n\n# Seaborn violinplot\nsns.set(style='whitegrid')\nplt.figure(figsize=(10,6))\nsns.violinplot(data=data, inner='quartiles')\nplt.xticks([0, 1, 2, 3], labels)\nplt.ylabel('Elevation Level (m)')\nplt.title('Elevation Levels across Different Terrains on Mars')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the violin that contains the center point of the bounding box to 0.42.",
        "Input_image": "./test_dataset/Violin/Violin_4f5ba45e6bb5e3cd/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nrocky_surfaces = [45, 50, 42, 48, 38, 55, 43, 47, 52, 40]\nsandy_dunes = [30, 35, 28, 32, 37, 29, 31, 36, 34, 33]\ncrater_interiors = [15, 20, 18, 17, 22, 16, 19, 21, 23, 14]\nmountainous_regions = [70, 65, 72, 68, 75, 66, 71, 73, 69, 74]\n\n# Combine data for plotting\ndata = [rocky_surfaces, sandy_dunes, crater_interiors, mountainous_regions]\nlabels = ['Rocky Surfaces', 'Sandy Dunes', 'Crater Interiors', 'Mountainous Regions']\n\n# Seaborn violinplot\nsns.set(style='whitegrid')\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(data=data, inner='quartiles')\nfor i, violin in enumerate(vp.collections):\n    if i == 2:  # Targeting the third violin (Crater Interiors)\n        violin.set_alpha(0.42)\nplt.xticks([0, 1, 2, 3], labels)\nplt.ylabel('Elevation Level (m)')\nplt.title('Elevation Levels across Different Terrains on Mars')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Violin/Violin_4f5ba45e6bb5e3cd/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_4f5ba45e6bb5e3cd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_4f5ba45e6bb5e3cd/figure.png"
    },
    {
        "id": "Violin_483d7bd7782eb0d2",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Defining the data\nemotions = ['Bliss', 'Confusion', 'Fear', 'Nostalgia', 'Serenity']\nvalues = [[4, 4, 3, 5, 4, 3, 5, 4],\n          [2, 3, 2, 4, 3, 3, 2, 4],\n          [5, 4, 5, 3, 4, 5, 3, 4],\n          [3, 2, 4, 3, 2, 3, 4, 3],\n          [4, 5, 3, 4, 5, 4, 3, 5]]\n\n# Preparing data for the plot\ndata = pd.DataFrame(dict(zip(emotions, values)))\n\n# Melting the dataframe\ndata_melted = data.melt(var_name='Emotion', value_name='Intensity')\n\n# Creating the violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Emotion', y='Intensity', data=data_melted)\nplt.title(\"Emotions intensity in Dreamscapes\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the picker state of the section that contains the center point of the violin chart to False.",
        "Input_image": "./test_dataset/Violin/Violin_483d7bd7782eb0d2/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Defining the data\nemotions = ['Bliss', 'Confusion', 'Fear', 'Nostalgia', 'Serenity']\nvalues = [[4, 4, 3, 5, 4, 3, 5, 4],\n          [2, 3, 2, 4, 3, 3, 2, 4],\n          [5, 4, 5, 3, 4, 5, 3, 4],\n          [3, 2, 4, 3, 2, 3, 4, 3],\n          [4, 5, 3, 4, 5, 4, 3, 5]]\n\n# Preparing data for the plot\ndata = pd.DataFrame(dict(zip(emotions, values)))\n\n# Melting the dataframe\ndata_melted = data.melt(var_name='Emotion', value_name='Intensity')\n\n# Creating the violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Emotion', y='Intensity', data=data_melted)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Confusion' is the target object\n        violin.set_picker(False)\nplt.title(\"Emotions intensity in Dreamscapes\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_483d7bd7782eb0d2/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_483d7bd7782eb0d2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_483d7bd7782eb0d2/figure.png"
    },
    {
        "id": "Violin_8b87b3b2c9dece5e",
        "Input_code": "# Required libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data \nemoji = ['\ud83d\ude0a', '\ud83d\ude02', '\ud83d\ude0d', '\ud83d\udd25', '\ud83d\ude0e', '\ud83e\udd14', '\u2764\ufe0f', '\ud83d\udc4d', '\ud83d\ude2d', '\ud83d\ude4f']\nscores = [[0.8, 0.7, 0.9, 0.6, 0.8],\n[0.9, 0.8, 0.7, 0.5, 0.9],\n[0.7, 0.6, 0.8, 0.9, 0.7],\n[0.6, 0.9, 0.7, 0.8, 0.7],\n[0.5, 0.8, 0.9, 0.6, 0.8],\n[0.4, 0.7, 0.5, 0.8, 0.6],\n[0.9, 0.8, 0.9, 0.7, 0.5],\n[0.8, 0.9, 0.8, 0.7, 0.6],\n[0.7, 0.9, 0.4, 0.8, 0.5],\n[0.6, 0.5, 0.7, 0.9, 0.8]]\n\n# Prepare data for plotting:\nemoji_scores = []\nfor e, s in zip(emoji, scores):\n    emoji_scores.extend([(e, sv) for sv in s])\ndf = pd.DataFrame(emoji_scores, columns=['emoji', 'score'])\n\n# Set the plot style \nsns.set(style=\"whitegrid\")\n\n# Create a violin plot\nplt.figure(figsize=(10,8))\nviolin = sns.violinplot(x='emoji', y='score', data=df)\nplt.title('Sentiment Distribution for Emojis')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #ea003e and set its transparency to 0.43.",
        "Input_image": "./test_dataset/Violin/Violin_8b87b3b2c9dece5e/Visual_figure.png",
        "Test_code": "# Required libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Data \nemoji = ['\ud83d\ude0a', '\ud83d\ude02', '\ud83d\ude0d', '\ud83d\udd25', '\ud83d\ude0e', '\ud83e\udd14', '\u2764\ufe0f', '\ud83d\udc4d', '\ud83d\ude2d', '\ud83d\ude4f']\nscores = [[0.8, 0.7, 0.9, 0.6, 0.8],\n[0.9, 0.8, 0.7, 0.5, 0.9],\n[0.7, 0.6, 0.8, 0.9, 0.7],\n[0.6, 0.9, 0.7, 0.8, 0.7],\n[0.5, 0.8, 0.9, 0.6, 0.8],\n[0.4, 0.7, 0.5, 0.8, 0.6],\n[0.9, 0.8, 0.9, 0.7, 0.5],\n[0.8, 0.9, 0.8, 0.7, 0.6],\n[0.7, 0.9, 0.4, 0.8, 0.5],\n[0.6, 0.5, 0.7, 0.9, 0.8]]\n\n# Prepare data for plotting:\nemoji_scores = []\nfor e, s in zip(emoji, scores):\n    emoji_scores.extend([(e, sv) for sv in s])\ndf = pd.DataFrame(emoji_scores, columns=['emoji', 'score'])\n\n# Set the plot style \nsns.set(style=\"whitegrid\")\n\n# Create a violin plot\nplt.figure(figsize=(10,8))\nvp = sns.violinplot(x='emoji', y='score', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i in [2, 5]:\n        violin.set_facecolor('#ea003e')\n        violin.set_alpha(0.43)\nplt.title('Sentiment Distribution for Emojis')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Violin/Violin_8b87b3b2c9dece5e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_8b87b3b2c9dece5e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_8b87b3b2c9dece5e/figure.png"
    },
    {
        "id": "Violin_8ed04ebe81dbd37c",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Creating a dictionary with keys as Shifts and Caffeine intake and values as Productivity levels\ndata_dict = {'Morning Shift (Low Caffeine)': [70, 60, 80, 75, 65, 55, 50, 45, 72, 68],\n             'Morning Shift (High Caffeine)': [75, 70, 82, 77, 68, 58, 55, 50, 75, 72],\n             'Afternoon Shift (Low Caffeine)': [60, 58, 70, 64, 50, 45, 40, 38, 65, 62],\n             'Afternoon Shift (High Caffeine)': [68, 65, 75, 70, 58, 50, 48, 44, 70, 68],\n             'Night Shift (Low Caffeine)': [55, 50, 62, 57, 45, 40, 38, 35, 60, 58],\n             'Night Shift (High Caffeine)': [62, 60, 70, 65, 50, 45, 42, 40, 65, 62]}\n\n# Converting the dictionary into a pandas DataFrame\nprod_df = pd.DataFrame(data_dict)\n\n# Melting the DataFrame to bring it in a proper format for the Violin Plot\nprod_df_melted = pd.melt(prod_df, var_name=\"Shift & Caffeine intake\", value_name=\"Productivity Levels\")\n\n# Plotting the Violin Plot using Seaborn\nplt.figure(figsize=(10, 8))\nsns.violinplot(x=\"Shift & Caffeine intake\", y=\"Productivity Levels\", data=prod_df_melted)\nplt.title('Violin Plot of Productivity Levels for each Shift and Caffeine Intake')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the median line color of the violins that contain the center point of the bounding box to #97dad0. Also, make this portion's box part invisible by setting its visibility to False.",
        "Input_image": "./test_dataset/Violin/Violin_8ed04ebe81dbd37c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Creating a dictionary with keys as Shifts and Caffeine intake and values as Productivity levels\ndata_dict = {'Morning Shift (Low Caffeine)': [70, 60, 80, 75, 65, 55, 50, 45, 72, 68],\n             'Morning Shift (High Caffeine)': [75, 70, 82, 77, 68, 58, 55, 50, 75, 72],\n             'Afternoon Shift (Low Caffeine)': [60, 58, 70, 64, 50, 45, 40, 38, 65, 62],\n             'Afternoon Shift (High Caffeine)': [68, 65, 75, 70, 58, 50, 48, 44, 70, 68],\n             'Night Shift (Low Caffeine)': [55, 50, 62, 57, 45, 40, 38, 35, 60, 58],\n             'Night Shift (High Caffeine)': [62, 60, 70, 65, 50, 45, 42, 40, 65, 62]}\n\n# Converting the dictionary into a pandas DataFrame\nprod_df = pd.DataFrame(data_dict)\n\n# Melting the DataFrame to bring it in a proper format for the Violin Plot\nprod_df_melted = pd.melt(prod_df, var_name=\"Shift & Caffeine intake\", value_name=\"Productivity Levels\")\n\n# Plotting the Violin Plot using Seaborn\nplt.figure(figsize=(10, 8))\nvp = sns.violinplot(x=\"Shift & Caffeine intake\", y=\"Productivity Levels\", data=prod_df_melted)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Morning Shift (High Caffeine)' is the target object\n        violin.set_visible(False)\nfor i,line in enumerate(plt.gca().lines):\n    if i in [1*2+2]:\n        line.set_color('#97dad0')\nplt.title('Violin Plot of Productivity Levels for each Shift and Caffeine Intake')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_8ed04ebe81dbd37c/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_8ed04ebe81dbd37c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_8ed04ebe81dbd37c/figure.png"
    },
    {
        "id": "Violin_8dce9d4865b34ff2",
        "Input_code": "# Required Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data Preparation\nstellar_black_holes = [250, 260, 245, 255, 270, 240, 265, 250, 255, 260]\nintermediate_mass_black_holes = [300, 310, 320, 290, 305, 315, 295, 300, 310, 295]\nsupermassive_black_holes = [350, 340, 360, 335, 345, 355, 330, 340, 350, 345]\n\n# Creating DataFrame\ndf = pd.DataFrame({\n    'Type': ['Stellar Black Holes'] * len(stellar_black_holes) + \n            ['Intermediate-Mass Black Holes'] * len(intermediate_mass_black_holes) +\n            ['Supermassive Black Holes'] * len(supermassive_black_holes),\n    'Rotation Velocity (In Km/S)': stellar_black_holes + intermediate_mass_black_holes + supermassive_black_holes\n})\n\n# Violin Plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x=\"Type\", y=\"Rotation Velocity (In Km/S)\", data=df)\nplt.title('Galactic Black Hole Exploration')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Highlight the portion of the violin that contains the center point of the bounding box by applying a linewidth of 2.58 and a foreground color of #45dfad.",
        "Input_image": "./test_dataset/Violin/Violin_8dce9d4865b34ff2/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\n\n# Data Preparation\nstellar_black_holes = [250, 260, 245, 255, 270, 240, 265, 250, 255, 260]\nintermediate_mass_black_holes = [300, 310, 320, 290, 305, 315, 295, 300, 310, 295]\nsupermassive_black_holes = [350, 340, 360, 335, 345, 355, 330, 340, 350, 345]\n\n# Creating DataFrame\ndf = pd.DataFrame({\n    'Type': ['Stellar Black Holes'] * len(stellar_black_holes) + \n            ['Intermediate-Mass Black Holes'] * len(intermediate_mass_black_holes) +\n            ['Supermassive Black Holes'] * len(supermassive_black_holes),\n    'Rotation Velocity (In Km/S)': stellar_black_holes + intermediate_mass_black_holes + supermassive_black_holes\n})\n\n# Violin Plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x=\"Type\", y=\"Rotation Velocity (In Km/S)\", data=df)\nstroke_effect = path_effects.withStroke(linewidth=2.583005447905065, foreground='#45dfad')\nfor idx, violin in enumerate(vp.collections):\n    if idx == 1:  # Assuming 'Intermediate-Mass Black Holes' is the target object\n        violin.set_path_effects([stroke_effect])\nplt.title('Galactic Black Hole Exploration')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_8dce9d4865b34ff2/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_8dce9d4865b34ff2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_8dce9d4865b34ff2/figure.png"
    },
    {
        "id": "Violin_378e93bbfb28ac6d",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ncity_x = {'6 AM': [40, 38, 42, 39, 41],\n          '12 PM': [55, 53, 58, 52, 57],\n          '6 PM': [65, 63, 67, 60, 68]}\n\ncity_y = {'6 AM': [35, 37, 40, 38, 36],\n          '12 PM': [48, 45, 50, 47, 52],\n          '6 PM': [60, 58, 62, 57, 65]}\n\ncity_z = {'6 AM': [30, 32, 29, 35, 31],\n          '12 PM': [42, 40, 44, 39, 46],\n          '6 PM': [55, 52, 58, 50, 60]}\n          \n# Format the data into a DataFrame\ntime = ['6 AM', '12 PM', '6 PM']\ndata = {}\n\nfor t in time:\n    for city_data, city_name in [(city_x, 'City X'), (city_y, 'City Y'), (city_z, 'City Z')]:\n        for val in city_data[t]:\n            data.setdefault('Time', []).append(t)\n            data.setdefault('Traffic Flow', []).append(val)\n            data.setdefault('City', []).append(city_name)\n\ndf = pd.DataFrame(data)\n\n# Plot the data\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Time', y='Traffic Flow', hue='City', data=df, palette='Set1')\nplt.title('Hourly Traffic Flow in Different Cities')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the violins that contain the center point of the bounding box to #fccc88. For the same points, adjust the transformation of the violins to use the pixel coordinate system.",
        "Input_image": "./test_dataset/Violin/Violin_378e93bbfb28ac6d/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ncity_x = {'6 AM': [40, 38, 42, 39, 41],\n          '12 PM': [55, 53, 58, 52, 57],\n          '6 PM': [65, 63, 67, 60, 68]}\n\ncity_y = {'6 AM': [35, 37, 40, 38, 36],\n          '12 PM': [48, 45, 50, 47, 52],\n          '6 PM': [60, 58, 62, 57, 65]}\n\ncity_z = {'6 AM': [30, 32, 29, 35, 31],\n          '12 PM': [42, 40, 44, 39, 46],\n          '6 PM': [55, 52, 58, 50, 60]}\n          \n# Format the data into a DataFrame\ntime = ['6 AM', '12 PM', '6 PM']\ndata = {}\n\nfor t in time:\n    for city_data, city_name in [(city_x, 'City X'), (city_y, 'City Y'), (city_z, 'City Z')]:\n        for val in city_data[t]:\n            data.setdefault('Time', []).append(t)\n            data.setdefault('Traffic Flow', []).append(val)\n            data.setdefault('City', []).append(city_name)\n\ndf = pd.DataFrame(data)\n\n# Plot the data\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Time', y='Traffic Flow', hue='City', data=df, palette='Set1')\nfor i, violin in enumerate(vp.collections):\n    if i in [0, 3]:  # Assuming 'City X' at '6 AM' and 'City Y' at '6 AM' are the target objects\n        violin.set_edgecolor('#fccc88')\n        violin.set_transform(plt.gca().transData)\nplt.title('Hourly Traffic Flow in Different Cities')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0, 3",
        "Test_image": "./test_dataset/Violin/Violin_378e93bbfb28ac6d/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_378e93bbfb28ac6d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_378e93bbfb28ac6d/figure.png"
    },
    {
        "id": "Violin_a1acd9a7ca34b420",
        "Input_code": "import pandas as pd\n# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Dataset\ndata = {'Region A': [23.5, 24.2, 25.1, 25.5, 26.0, 24.9, 23.8],\n        'Region B': [26.3, 27.0, 28.5, 29.1, 27.4, 26.8, 25.9],\n        'Region C': [25.2, 25.8, 26.6, 27.3, 28.0, 26.5, 24.7]}\n\n# Preprocessing to match the input requirement of violin plot\nvalues = sum(list(data.values()), [])\nlabels = sum([[key]*len(value) for key, value in data.items()], [])\n\n# Create Violin plot\nplt.figure(figsize=(10, 6))  \nsns.violinplot(x=labels, y=values)\n\n# Additional attributes\nplt.title('Sunken Treasure Map values distribution')\nplt.xlabel('Sea Regions')\nplt.ylabel('Treasure Map values')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the picker state of the violins that contain the center point of the bounding box to True. For the same points, also set the rasterized state of those violins to False.",
        "Input_image": "./test_dataset/Violin/Violin_a1acd9a7ca34b420/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Dataset\ndata = {'Region A': [23.5, 24.2, 25.1, 25.5, 26.0, 24.9, 23.8],\n        'Region B': [26.3, 27.0, 28.5, 29.1, 27.4, 26.8, 25.9],\n        'Region C': [25.2, 25.8, 26.6, 27.3, 28.0, 26.5, 24.7]}\n\n# Preprocessing to match the input requirement of violin plot\nvalues = sum(list(data.values()), [])\nlabels = sum([[key]*len(value) for key, value in data.items()], [])\n\n# Create Violin plot\nplt.figure(figsize=(10, 6))  \nvp = sns.violinplot(x=labels, y=values)\n\n# Additional attributes\nplt.title('Sunken Treasure Map values distribution')\nplt.xlabel('Sea Regions')\nplt.ylabel('Treasure Map values')\n\n# Modify the picker and rasterized state\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Region B' is the target object\n        violin.set_picker(True)\n        violin.set_rasterized(False)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_a1acd9a7ca34b420/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_a1acd9a7ca34b420/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_a1acd9a7ca34b420/figure.png"
    },
    {
        "id": "Violin_c003af2fd01819ee",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the data\neventide = [1200, 1180, 1220, 1215, 1190, 1175, 1225, 1205]\nquasarus = [1350, 1360, 1370, 1340, 1335, 1355, 1365, 1345]\nsingulon = [1400, 1390, 1385, 1410, 1380, 1405, 1395, 1375]\n\n# Combine all data into a list of tuples with category\ndata = [('Eventide', freq) for freq in eventide] + [('Quasarus', freq) for freq in quasarus] + [('Singulon', freq) for freq in singulon]\n\n# Transform your data into DataFrame (DataFrame is better to visualize with seaborn)\ndf = pd.DataFrame(data, columns=['Black Hole', 'Frequency'])\n\n# Visualize the violin plot\nplt.figure(figsize=(10,6))\nsns.violinplot(x='Black Hole', y='Frequency', data=df)\nplt.title('Gravitational Wave Frequencies')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the violins that contain the center point of the bounding box to False. Additionally, adjust their linewidth to 2.21.",
        "Input_image": "./test_dataset/Violin/Violin_c003af2fd01819ee/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the data\neventide = [1200, 1180, 1220, 1215, 1190, 1175, 1225, 1205]\nquasarus = [1350, 1360, 1370, 1340, 1335, 1355, 1365, 1345]\nsingulon = [1400, 1390, 1385, 1410, 1380, 1405, 1395, 1375]\n\n# Combine all data into a list of tuples with category\ndata = [('Eventide', freq) for freq in eventide] + [('Quasarus', freq) for freq in quasarus] + [('Singulon', freq) for freq in singulon]\n\n# Transform your data into DataFrame (DataFrame is better to visualize with seaborn)\ndf = pd.DataFrame(data, columns=['Black Hole', 'Frequency'])\n\n# Visualize the violin plot\nplt.figure(figsize=(10,6))\nvp = sns.violinplot(x='Black Hole', y='Frequency', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:  # Assuming 'Quasarus' is the target object\n        violin.set_clip_on(False)\n        violin.set_linewidth(2.21)\nplt.title('Gravitational Wave Frequencies')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_c003af2fd01819ee/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_c003af2fd01819ee/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_c003af2fd01819ee/figure.png"
    },
    {
        "id": "Violin_61e51340aa07dad9",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data for depths at different regions and coordinates\ndata = {\n    'Region': ['A', 'A', 'A', 'B', 'B', 'B'],\n    'Coordinates': ['(10,20)', '(20,30)', '(30,40)', '(40,50)', '(50,60)', '(60,70)'],\n    'Depth': [\n        [5000, 4900, 5100, 4800, 4950],\n        [4800, 4700, 4850, 4750, 4950],\n        [5200, 5250, 5100, 5150, 5000],\n        [4500, 4600, 4550, 4650, 4700],\n        [4700, 4750, 4650, 4850, 4800],\n        [4900, 4950, 4850, 5000, 5100]\n    ]\n}\n\n# Creating a DataFrame\ndf = pd.DataFrame(data)\n\n# Expanding the list of depths into separate rows for each depth measurement\ndf = df.explode('Depth')\ndf['Depth'] = pd.to_numeric(df['Depth'])\n\n# Creating the violin plot\nplt.figure(figsize=(12, 8))\nsns.violinplot(x='Coordinates', y='Depth', hue='Region', data=df, split=True, palette='muted')\nplt.title('Ocean Floor Seabed Topography')\nplt.xlabel('Coordinates (Latitude, Longitude)')\nplt.ylabel('Depth (in meters)')\nplt.legend(title='Region')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the violin that contains the center point of the bounding box to #895b92 and set its transparency to 0.76.",
        "Input_image": "./test_dataset/Violin/Violin_61e51340aa07dad9/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Data for depths at different regions and coordinates\ndata = {\n    'Region': ['A', 'A', 'A', 'B', 'B', 'B'],\n    'Coordinates': ['(10,20)', '(20,30)', '(30,40)', '(40,50)', '(50,60)', '(60,70)'],\n    'Depth': [\n        [5000, 4900, 5100, 4800, 4950],\n        [4800, 4700, 4850, 4750, 4950],\n        [5200, 5250, 5100, 5150, 5000],\n        [4500, 4600, 4550, 4650, 4700],\n        [4700, 4750, 4650, 4850, 4800],\n        [4900, 4950, 4850, 5000, 5100]\n    ]\n}\n\n# Creating a DataFrame\ndf = pd.DataFrame(data)\n\n# Expanding the list of depths into separate rows for each depth measurement\ndf = df.explode('Depth')\ndf['Depth'] = pd.to_numeric(df['Depth'])\n\n# Creating the violin plot\nplt.figure(figsize=(12, 8))\nvp = sns.violinplot(x='Coordinates', y='Depth', hue='Region', data=df, split=True, palette='muted')\nfor i, violin in enumerate(vp.collections):\n    if i in [0, 2]:\n        violin.set_facecolor('#895b92')\n        violin.set_alpha(0.76)\nplt.title('Ocean Floor Seabed Topography')\nplt.xlabel('Coordinates (Latitude, Longitude)')\nplt.ylabel('Depth (in meters)')\nplt.legend(title='Region')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Violin/Violin_61e51340aa07dad9/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_61e51340aa07dad9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_61e51340aa07dad9/figure.png"
    },
    {
        "id": "Violin_033fe45ed21e9805",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# depths of underwater caves in different oceans\npacific_ocean = [45, 50, 48, 52, 47, 46, 49, 51, 50, 48]\natlantic_ocean = [35, 40, 38, 42, 36, 39, 37, 43, 41, 39]\nindian_ocean = [55, 60, 58, 62, 57, 56, 59, 61, 60, 58]\n\n# compile data into a list of lists\ndata = [pacific_ocean, atlantic_ocean, indian_ocean]\n\n# create figure and axes\nfig, ax = plt.subplots()\n\n# create violin plot\nsns.violinplot(data=data, ax=ax)\n\n# set title and labels\nax.set_title('Depth Distributions of Underwater Caves in Different Oceans')\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Pacific Ocean', 'Atlantic Ocean', 'Indian Ocean'])\nax.set_ylabel('Depth (in meters)')\n\n# show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Hide all of the lines in the violin that is associated with the center point of the bounding box. For the same violin's box part, set the z-order to 6. Also, add a shadow effect to the violin's box part with a shadow offset of (3.15, 3.67) and use a shadow color blue.",
        "Input_image": "./test_dataset/Violin/Violin_033fe45ed21e9805/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# depths of underwater caves in different oceans\npacific_ocean = [45, 50, 48, 52, 47, 46, 49, 51, 50, 48]\natlantic_ocean = [35, 40, 38, 42, 36, 39, 37, 43, 41, 39]\nindian_ocean = [55, 60, 58, 62, 57, 56, 59, 61, 60, 58]\n\n# compile data into a list of lists\ndata = [pacific_ocean, atlantic_ocean, indian_ocean]\n\n# create figure and axes\nfig, ax = plt.subplots()\n\n# create violin plot\nviolins = sns.violinplot(data=data, ax=ax)\n\n# set title and labels\nax.set_title('Depth Distributions of Underwater Caves in Different Oceans')\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Pacific Ocean', 'Atlantic Ocean', 'Indian Ocean'])\nax.set_ylabel('Depth (in meters)')\n\n# modify the violin plot\nfor i, violin in enumerate(violins.collections):\n    if i == 1:  # Assuming 'Atlantic Ocean' is the target object\n        violin.set_zorder(6)\n        shadow_color = 'blue'\n        violin.set_path_effects([SimplePatchShadow(offset=(3.15,3.67), shadow_rgbFace=shadow_color), Normal()])\nfor i, line in enumerate(plt.gca().lines):\n    if i in[1*3]+[1*3+1]+[1*3+2]:  # Assuming 'Atlantic Ocean' is the target object\n        line.set_visible(False)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_033fe45ed21e9805/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_033fe45ed21e9805/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_033fe45ed21e9805/figure.png"
    },
    {
        "id": "Violin_188414122d27ee1e",
        "Input_code": "import pandas as pd\n# Import Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndata = {\n    'Topsoil Layer':{\n        'Location 1': [16.5, 17.0, 18.2, 16.8, 17.5, 17.3, 17.9, 16.7, 17.8, 16.1],\n        'Location 2': [15.8, 16.2, 17.0, 16.5, 17.2, 16.7, 16.9, 16.3, 17.1, 15.9],\n        'Location 3': [17.1, 17.5, 18.0, 17.2, 17.9, 18.4, 17.8, 17.3, 17.6, 16.9]\n    },\n    'Subsoil Layer':{\n        'Location 1': [14.3, 14.8, 15.2, 14.5, 15.0, 14.7, 14.9, 14.3, 15.1, 14.6],\n        'Location 2': [13.6, 14.0, 14.5, 13.8, 14.3, 14.1, 14.2, 13.7, 14.4, 13.9],\n        'Location 3': [15.0, 15.5, 16.0, 15.3, 15.8, 15.6, 15.9, 15.1, 15.7, 15.2]\n    },\n    'Bedrock Layer':{\n        'Location 1': [12.5, 12.8, 13.1, 12.7, 13.0, 12.9, 13.2, 12.6, 13.3, 12.4],\n        'Location 2': [11.8, 12.2, 12.6, 12.0, 12.5, 12.3, 12.4, 12.1, 12.7, 12.0],\n        'Location 3': [13.0, 13.5, 13.9, 13.2, 13.7, 13.6, 13.8, 13.3, 13.8, 13.1]\n    }\n}\n\n# Processing data to be in a suitable form for the violin plot\nlabels, temps = [], []\nfor layer, locations in data.items():\n    for location, temperatures in locations.items():\n        labels.append(f'{layer}\\n{location}')\n        temps.append(temperatures)\n\n# Plot\nplt.figure(figsize=(10, 8))\nsns.set(style=\"whitegrid\")\nsns.violinplot(data=temps, palette=\"Pastel1\", inner=\"stick\", scale=\"count\")\nplt.title('Surface Heat Distribution Analysis')\nplt.ylabel('Temperature (\u00b0C)')\nplt.xticks(range(len(labels)), labels)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the label of the violin that contain the center point of the bounding box to 'A new Label'. Also, set the picker state of the same violin to False.",
        "Input_image": "./test_dataset/Violin/Violin_188414122d27ee1e/Visual_figure.png",
        "Test_code": "import pandas as pd\n# Import Required Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ndata = {\n    'Topsoil Layer':{\n        'Location 1': [16.5, 17.0, 18.2, 16.8, 17.5, 17.3, 17.9, 16.7, 17.8, 16.1],\n        'Location 2': [15.8, 16.2, 17.0, 16.5, 17.2, 16.7, 16.9, 16.3, 17.1, 15.9],\n        'Location 3': [17.1, 17.5, 18.0, 17.2, 17.9, 18.4, 17.8, 17.3, 17.6, 16.9]\n    },\n    'Subsoil Layer':{\n        'Location 1': [14.3, 14.8, 15.2, 14.5, 15.0, 14.7, 14.9, 14.3, 15.1, 14.6],\n        'Location 2': [13.6, 14.0, 14.5, 13.8, 14.3, 14.1, 14.2, 13.7, 14.4, 13.9],\n        'Location 3': [15.0, 15.5, 16.0, 15.3, 15.8, 15.6, 15.9, 15.1, 15.7, 15.2]\n    },\n    'Bedrock Layer':{\n        'Location 1': [12.5, 12.8, 13.1, 12.7, 13.0, 12.9, 13.2, 12.6, 13.3, 12.4],\n        'Location 2': [11.8, 12.2, 12.6, 12.0, 12.5, 12.3, 12.4, 12.1, 12.7, 12.0],\n        'Location 3': [13.0, 13.5, 13.9, 13.2, 13.7, 13.6, 13.8, 13.3, 13.8, 13.1]\n    }\n}\n\n# Processing data to be in a suitable form for the violin plot\nlabels, temps = [], []\nfor layer, locations in data.items():\n    for location, temperatures in locations.items():\n        labels.append(f'{layer}\\n{location}')\n        temps.append(temperatures)\n\n# Plot\nplt.figure(figsize=(10, 8))\nsns.set(style=\"whitegrid\")\nvp = sns.violinplot(data=temps, palette=\"Pastel1\", inner=\"stick\", scale=\"count\")\nplt.title('Surface Heat Distribution Analysis')\nplt.ylabel('Temperature (\u00b0C)')\nplt.xticks(range(len(labels)), labels)\n\n# Modify the label and picker state for the target object\nfor i, violin in enumerate(vp.collections):\n    if i == 1*2:  # Assuming 'Location 2' in 'Topsoil Layer' is the target object\n        violin.set_label('A new Label')\n        violin.set_picker(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Violin/Violin_188414122d27ee1e/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_188414122d27ee1e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_188414122d27ee1e/figure.png"
    },
    {
        "id": "Violin_6f11bd3fc7f9e5ac",
        "Input_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ninner_rim = [4.2, 3.9, 4.5, 4.0, 4.2, 4.1, 3.8, 4.3, 4.4, 4.1]\nmid_rim = [2.8, 3.1, 3.0, 2.9, 3.2, 3.3, 3.1, 3.0, 3.2, 2.7]\nouter_rim = [1.5, 1.7, 1.4, 1.6, 1.8, 1.9, 1.6, 1.7, 1.5, 1.8]\n\n# Combining the data and creating labels\ndensities = inner_rim + mid_rim + outer_rim\nsectors = ['Inner Rim'] * len(inner_rim) + ['Mid Rim'] * len(mid_rim) + ['Outer Rim'] * len(outer_rim)\n\n# Creating a data frame\ndf = pd.DataFrame({'Galactic Sector': sectors, 'Planet Densities': densities})\n\n# Ploting the violin plot\nplt.figure(figsize=(9, 6))\nsns.violinplot(x='Galactic Sector', y='Planet Densities', data=df)\nplt.title('Galactic Planet Density Distribution')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the violin that contains the center point of the bounding box to #cd21eb.",
        "Input_image": "./test_dataset/Violin/Violin_6f11bd3fc7f9e5ac/Visual_figure.png",
        "Test_code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\ninner_rim = [4.2, 3.9, 4.5, 4.0, 4.2, 4.1, 3.8, 4.3, 4.4, 4.1]\nmid_rim = [2.8, 3.1, 3.0, 2.9, 3.2, 3.3, 3.1, 3.0, 3.2, 2.7]\nouter_rim = [1.5, 1.7, 1.4, 1.6, 1.8, 1.9, 1.6, 1.7, 1.5, 1.8]\n\n# Combining the data and creating labels\ndensities = inner_rim + mid_rim + outer_rim\nsectors = ['Inner Rim'] * len(inner_rim) + ['Mid Rim'] * len(mid_rim) + ['Outer Rim'] * len(outer_rim)\n\n# Creating a data frame\ndf = pd.DataFrame({'Galactic Sector': sectors, 'Planet Densities': densities})\n\n# Ploting the violin plot\nplt.figure(figsize=(9, 6))\nvp = sns.violinplot(x='Galactic Sector', y='Planet Densities', data=df)\nfor i, violin in enumerate(vp.collections):\n    if i == 1:\n        violin.set_edgecolor('#cd21eb')\nplt.title('Galactic Planet Density Distribution')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Violin/Violin_6f11bd3fc7f9e5ac/Edit_figure.png",
        "Masked_image": "./test_dataset/Violin/Violin_6f11bd3fc7f9e5ac/Masked_figure.png",
        "Initial_figure": "./test_dataset/Violin/Violin_6f11bd3fc7f9e5ac/figure.png"
    },
    {
        "id": "Bar_6490f0cafc4cf2e9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame from the given data\ndata = {\n    \"Days\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n    \"Dow Jones\": [25000, 25200, 25400, 24200, 24400, 24500, 24700],\n    \"NASDAQ\": [7000, 7100, 7200, 6800, 6900, 6950, 7000],\n    \"S&P 500\": [2700, 2750, 2800, 2600, 2650, 2675, 2700],\n}\ndf = pd.DataFrame(data)\n\n# Create a bar chart\nfig, ax = plt.subplots()\n\n# Generate bars for each index\ndow_bars = ax.bar(df.index - 0.2, df[\"Dow Jones\"], width=0.2, color='b', align='center', edgecolor='black', label='Dow Jones')\nnasdaq_bars = ax.bar(df.index, df[\"NASDAQ\"], width=0.2, color='r', align='center', edgecolor='black', label='NASDAQ')\nsp500_bars = ax.bar(df.index + 0.2, df[\"S&P 500\"], width=0.2, color='g', align='center', edgecolor='black', label='S&P 500')\n\n# Set labels, title, and legends\nax.set_xlabel('Days', fontsize=14)\nax.set_ylabel('Index Value', fontsize=14)\nax.set_title('Index Values by Day', fontsize=14)\nax.legend(title='Index', fontsize=14)\n\n# Set the x-ticks to be the days of the week\nax.set_xticks(df.index)\nax.set_xticklabels(df[\"Days\"], fontsize=14)\nax.tick_params(axis='y', labelsize=14)\n\n# Add a grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Add labels to the bars\nax.bar_label(dow_bars, padding=3, fontsize=14)\nax.bar_label(nasdaq_bars, padding=3, fontsize=14)\nax.bar_label(sp500_bars, padding=3, fontsize=14)\n\n# Adjust layout to make room for the labels\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the bars that share the same legend as those containing the center point of the bounding box to #a415a4.",
        "Input_image": "./test_dataset/Bar/Bar_6490f0cafc4cf2e9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame from the given data\ndata = {\n    \"Days\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n    \"Dow Jones\": [25000, 25200, 25400, 24200, 24400, 24500, 24700],\n    \"NASDAQ\": [7000, 7100, 7200, 6800, 6900, 6950, 7000],\n    \"S&P 500\": [2700, 2750, 2800, 2600, 2650, 2675, 2700],\n}\ndf = pd.DataFrame(data)\n\n# Create a bar chart\nfig, ax = plt.subplots()\n\n# Generate bars for each index\ndow_bars = ax.bar(df.index - 0.2, df[\"Dow Jones\"], width=0.2, color='b', align='center', edgecolor='black', label='Dow Jones')\nnasdaq_bars = ax.bar(df.index, df[\"NASDAQ\"], width=0.2, color='r', align='center', edgecolor='black', label='NASDAQ')\nsp500_bars = ax.bar(df.index + 0.2, df[\"S&P 500\"], width=0.2, color='g', align='center', edgecolor='black', label='S&P 500')\n\n# Change the color of the bars that are corresponding to the Target_object to #a415a4\nfor bar in plt.gca().containers[1]:\n    bar.set_color('#a415a4')\n\n# Set labels, title, and legends\nax.set_xlabel('Days', fontsize=14)\nax.set_ylabel('Index Value', fontsize=14)\nax.set_title('Index Values by Day', fontsize=14)\nax.legend(title='Index', fontsize=14)\n\n# Set the x-ticks to be the days of the week\nax.set_xticks(df.index)\nax.set_xticklabels(df[\"Days\"], fontsize=14)\nax.tick_params(axis='y', labelsize=14)\n\n# Add a grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Add labels to the bars\nax.bar_label(dow_bars, padding=3, fontsize=14)\nax.bar_label(nasdaq_bars, padding=3, fontsize=14)\nax.bar_label(sp500_bars, padding=3, fontsize=14)\n\n# Adjust layout to make room for the labels\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_6490f0cafc4cf2e9/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_6490f0cafc4cf2e9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_6490f0cafc4cf2e9/figure.png"
    },
    {
        "id": "Bar_108969800988bdee",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data in csv format\ndata = StringIO(\"\"\"\n\"Year\",\"Asia\",\"Africa\"\n2000,120,160\n2005,80,180\n2010,110,190\n\"\"\")\n\n# Reading the data into a pandas dataframe\ndf = pd.read_csv(data, sep=\",\")\n\n# The label locations\nx = np.arange(len(df[\"Year\"]))  \n\n# The width of the bars\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Creating the bar chart with updated colors and edge colors\nbars1 = ax.bar(x - width/2, df[\"Asia\"], width, label='Asia', color='magenta', edgecolor='white')\nbars2 = ax.bar(x + width/2, df[\"Africa\"], width, label='Africa', color='cyan', edgecolor='white')\n\n# Adding labels, title and custom x-axis tick labels\nax.set_ylabel('Population (in millions)')\nax.set_title('Population comparison between Asia and Africa')\nax.set_xticks(x)\nax.set_xticklabels(df[\"Year\"])\nax.legend()\n\n# Annotating the data value on the chart\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\n# Setting background color and grid\nax.set_facecolor('gray')\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the transparency of the bars that share the same legend with the bar that contains the center point of the bounding box to 0.90 and set their visibility to False.",
        "Input_image": "./test_dataset/Bar/Bar_108969800988bdee/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data in csv format\ndata = StringIO(\"\"\"\n\"Year\",\"Asia\",\"Africa\"\n2000,120,160\n2005,80,180\n2010,110,190\n\"\"\")\n\n# Reading the data into a pandas dataframe\ndf = pd.read_csv(data, sep=\",\")\n\n# The label locations\nx = np.arange(len(df[\"Year\"]))  \n\n# The width of the bars\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Creating the bar chart with updated colors and edge colors\nbars1 = ax.bar(x - width/2, df[\"Asia\"], width, label='Asia', color='magenta', edgecolor='white', alpha=0.90)\nbars2 = ax.bar(x + width/2, df[\"Africa\"], width, label='Africa', color='cyan', edgecolor='white', alpha=0.90)\n\n# Adding labels, title and custom x-axis tick labels\nax.set_ylabel('Population (in millions)')\nax.set_title('Population comparison between Asia and Africa')\nax.set_xticks(x)\nax.set_xticklabels(df[\"Year\"])\nax.legend()\n\n# Annotating the data value on the chart\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\n# Setting background color and grid\nax.set_facecolor('gray')\nax.grid(True)\n\n# Setting visibility of the object corresponding to the Target_object to False\nfor bar in bars1:\n    bar.set_visible(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_108969800988bdee/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_108969800988bdee/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_108969800988bdee/myplot.png"
    },
    {
        "id": "Bar_3923a9ec9c86ba60",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {\n    \"Platform\": [\"Facebook\", \"Instagram\", \"Twitter\", \"Snapchat\", \"LinkedIn\", \"Pinterest\", \"Reddit\", \"WeChat\", \"WhatsApp\"],\n    \"2016\": [100, 80, 90, 70, 60, 50, 30, 20, 10],\n    \"2017\": [120, 110, 70, 100, 80, 75, 60, 40, 5],\n    \"2018\": [85, 130, 95, 70, 85, 55, 65, 45, 30]\n}\n\ndf = pd.DataFrame(data)\n\n# Size of the figure\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Number of bars\nN = len(df[\"Platform\"])\n\n# Position of bars on x-axis\nind = np.arange(N)\n\n# Width of a bar \nwidth = 0.25       \n\n# Plotting\nax.bar(ind, df[\"2016\"], width, label='2016', color = 'b', edgecolor = 'gray')\nax.bar(ind + width, df[\"2017\"], width, label='2017', color = 'r', edgecolor = 'gray')\nax.bar(ind + width + width, df[\"2018\"], width, label='2018', color = 'g', edgecolor = 'gray')\n\nax.set_xlabel('Platform')\nax.set_ylabel('Usage')\nax.set_title('Usage of Social Media Platforms from 2016 to 2018')\n\n# Adding xticks  \nax.set_xticks(ind + width / 2)\nax.set_xticklabels(df[\"Platform\"])\n\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the transparency of the bars that share the same legend with the bar that contains the center point of the bounding box to 0.17, and also update their linewidth to 0.93.",
        "Input_image": "./test_dataset/Bar/Bar_3923a9ec9c86ba60/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {\n    \"Platform\": [\"Facebook\", \"Instagram\", \"Twitter\", \"Snapchat\", \"LinkedIn\", \"Pinterest\", \"Reddit\", \"WeChat\", \"WhatsApp\"],\n    \"2016\": [100, 80, 90, 70, 60, 50, 30, 20, 10],\n    \"2017\": [120, 110, 70, 100, 80, 75, 60, 40, 5],\n    \"2018\": [85, 130, 95, 70, 85, 55, 65, 45, 30]\n}\n\ndf = pd.DataFrame(data)\n\n# Size of the figure\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Number of bars\nN = len(df[\"Platform\"])\n\n# Position of bars on x-axis\nind = np.arange(N)\n\n# Width of a bar \nwidth = 0.25       \n\n# Plotting\nbars1 = ax.bar(ind, df[\"2016\"], width, label='2016', color = 'b', edgecolor = 'gray')\nbars2 = ax.bar(ind + width, df[\"2017\"], width, label='2017', color = 'r', edgecolor = 'gray')\nbars3 = ax.bar(ind + width + width, df[\"2018\"], width, label='2018', color = 'g', edgecolor = 'gray')\n\nfor bar in bars1:\n    bar.set_alpha(0.17)\n    bar.set_linewidth(0.93)\n\nax.set_xlabel('Platform')\nax.set_ylabel('Usage')\nax.set_title('Usage of Social Media Platforms from 2016 to 2018')\n\n# Adding xticks  \nax.set_xticks(ind + width / 2)\nax.set_xticklabels(df[\"Platform\"])\n\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_3923a9ec9c86ba60/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_3923a9ec9c86ba60/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_3923a9ec9c86ba60/myplot.png"
    },
    {
        "id": "Bar_0b61f3bee0a2175f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\ndata = {\n    'Year': [2016, 2017, 2018, 2019, 2020, 2021],\n    'Disease A': [100, 90, 70, 50, 30, 60],\n    'Disease B': [200, 225, 250, 275, 300, 150],\n    'Disease C': [300, 290, 275, 280, 265, 285]\n}\n\nfig, ax = plt.subplots()\n\n# Set background color\nax.set_facecolor('lightgray')\n\nyears = np.array(data['Year'])  # the label locations\nheight = 0.25  # the height of the bars\nmultiplier = 0\n\n# Define shades of blue\nshades_of_blue = ['navy', 'royalblue', 'lightblue']\n\nfor disease, counts in list(data.items())[1:]:\n    offset = height * multiplier\n    bars = ax.barh(years + offset, counts, height, label=disease, edgecolor='black', color=shades_of_blue[multiplier])\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Number of Cases')\nax.set_title('Cases of Diseases A, B and C over the years')\nax.set_yticks(years + height)\nax.set_yticklabels(data['Year'])\nax.legend(loc='upper right', ncol=1)\nax.invert_yaxis()  # labels read top-to-bottom\n\n# Adding grid\nax.grid(True)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the face color of the bars that share the same legend with the bar that contains the center point of the bounding box to #82f68e. Also, update the line color for those same bars to #ea26cf.",
        "Input_image": "./test_dataset/Bar/Bar_0b61f3bee0a2175f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\ndata = {\n    'Year': [2016, 2017, 2018, 2019, 2020, 2021],\n    'Disease A': [100, 90, 70, 50, 30, 60],\n    'Disease B': [200, 225, 250, 275, 300, 150],\n    'Disease C': [300, 290, 275, 280, 265, 285]\n}\n\nfig, ax = plt.subplots()\n\n# Set background color\nax.set_facecolor('lightgray')\n\nyears = np.array(data['Year'])  # the label locations\nheight = 0.25  # the height of the bars\nmultiplier = 0\n\n# Define shades of blue\nshades_of_blue = ['navy', 'royalblue', 'lightblue']\n\nfor disease, counts in list(data.items())[1:]:\n    offset = height * multiplier\n    bars = ax.barh(years + offset, counts, height, label=disease, edgecolor='black', color=shades_of_blue[multiplier])\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Modify the facecolor and linecolor of the selected bars\nfor bar in ax.containers[1]:\n    bar.set_facecolor('#82f68e')\n    bar.set_edgecolor('#ea26cf')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Number of Cases')\nax.set_title('Cases of Diseases A, B and C over the years')\nax.set_yticks(years + height)\nax.set_yticklabels(data['Year'])\nax.legend(loc='upper right', ncol=1)\nax.invert_yaxis()  # labels read top-to-bottom\n\n# Adding grid\nax.grid(True)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_0b61f3bee0a2175f/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_0b61f3bee0a2175f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_0b61f3bee0a2175f/myplot.png"
    },
    {
        "id": "Bar_2ce3361197d29b57",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nexercise_types = (\"Yoga\", \"Running\", \"Cycling\", \"Swimming\", \"CrossFit\", \"Zumba\", \"Kickboxing\", \"Pilates\")\ndata = {\n    \"Year 1\": np.array([100, 200, 150, 100, 250, 300, 350, 400]),\n    \"Year 2\": np.array([120, 180, 160, 90, 240, 280, 330, 380]),\n    \"Year 3\": np.array([130, 160, 250, 80, 230, 260, 310, 360]),\n    \"Year 4\": np.array([140, 250, 240, 70, 220, 240, 290, 340]),\n    \"Year 5\": np.array([60, 240, 250, 260, 210, 220, 270, 320]),\n    \"Year 6\": np.array([150, 220, 260, 250, 400, 200, 250, 300]),\n    \"Year 7\": np.array([160, 200, 270, 240, 390, 400, 230, 280]),\n    \"Year 8\": np.array([170, 180, 200, 230, 380, 380, 210, 260])\n}\nwidth = 0.1\n\n# Define a list of colors for each year\ncolors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'orange']\n\nfig, ax = plt.subplots()\nx = np.arange(len(exercise_types))\nbars = []\n\nfor i, (year, popularity) in enumerate(data.items()):\n    p = ax.bar(x + i*width, popularity, width, label=year, color=colors[i])  # Use color from colors list\n    bars.append(p)\n\nax.set_title(\"Popularity of Exercise Types Over 8 Years\")\nax.set_xlabel(\"Exercise Types\")\nax.set_ylabel(\"Popularity\")\nax.set_xticks(x + width / 2)\nax.set_xticklabels(exercise_types)\nax.legend(loc=\"upper right\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add labels to each bar\nfor bar in bars:\n    ax.bar_label(bar, label_type=\"center\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the snap state of the bars that share the same legend with the bar that contains the center point of the bounding box to False, and also set the visibility of these bars to False.",
        "Input_image": "./test_dataset/Bar/Bar_2ce3361197d29b57/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nexercise_types = (\"Yoga\", \"Running\", \"Cycling\", \"Swimming\", \"CrossFit\", \"Zumba\", \"Kickboxing\", \"Pilates\")\ndata = {\n    \"Year 1\": np.array([100, 200, 150, 100, 250, 300, 350, 400]),\n    \"Year 2\": np.array([120, 180, 160, 90, 240, 280, 330, 380]),\n    \"Year 3\": np.array([130, 160, 250, 80, 230, 260, 310, 360]),\n    \"Year 4\": np.array([140, 250, 240, 70, 220, 240, 290, 340]),\n    \"Year 5\": np.array([60, 240, 250, 260, 210, 220, 270, 320]),\n    \"Year 6\": np.array([150, 220, 260, 250, 400, 200, 250, 300]),\n    \"Year 7\": np.array([160, 200, 270, 240, 390, 400, 230, 280]),\n    \"Year 8\": np.array([170, 180, 200, 230, 380, 380, 210, 260])\n}\nwidth = 0.1\n\n# Define a list of colors for each year\ncolors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'orange']\n\nfig, ax = plt.subplots()\nx = np.arange(len(exercise_types))\nbars = []\n\nfor i, (year, popularity) in enumerate(data.items()):\n    p = ax.bar(x + i*width, popularity, width, label=year, color=colors[i])  # Use color from colors list\n    bars.append(p)\n\nax.set_title(\"Popularity of Exercise Types Over 8 Years\")\nax.set_xlabel(\"Exercise Types\")\nax.set_ylabel(\"Popularity\")\nax.set_xticks(x + width / 2)\nax.set_xticklabels(exercise_types)\nax.legend(loc=\"upper right\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add labels to each bar\nfor bar in bars:\n    ax.bar_label(bar, label_type=\"center\")\n\n# Modify the snap state and visibility of the target objects\nfor idx, bars in enumerate(bars):\n    if idx in [0, 2]:\n        for bar in bars:\n            bar.set_snap(False)\n            bar.set_visible(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0,2",
        "Test_image": "./test_dataset/Bar/Bar_2ce3361197d29b57/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_2ce3361197d29b57/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_2ce3361197d29b57/myplot.png"
    },
    {
        "id": "Bar_c02e3e21acbfb007",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nYear,USA Consumption,Brazil Consumption,Germany Consumption\n2017,10.2,13.4,7.8\n2018,9.7,14.2,7.3\n2019,10,15.1,8\n2020,10.3,15.9,8.9\n\"\"\")\n\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8,6))\n\n# Plot the data\nbar1 = ax.bar(df['Year'] - 0.2, df['USA Consumption'], color='skyblue', edgecolor='black', width=0.2)\nbar2 = ax.bar(df['Year'], df['Brazil Consumption'], color='lightgreen', edgecolor='black', width=0.2)\nbar3 = ax.bar(df['Year'] + 0.2, df['Germany Consumption'], color='lightcoral', edgecolor='black', width=0.2)\n\n# Add data value labels to the bars\nax.bar_label(bar1, padding=3)\nax.bar_label(bar2, padding=3)\nax.bar_label(bar3, padding=3)\n\n# Set title, x-label and y-label\nax.set_title('Country-wise Consumption Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Consumption')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend([\"USA\", \"Brazil\", \"Germany\"], loc='upper left')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow to the bars that share the same legend as those containing the center point of the bounding box, using a shadow offset of (2, 3) units.",
        "Input_image": "./test_dataset/Bar/Bar_c02e3e21acbfb007/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withSimplePatchShadow\n\n# Define the data\ndata = StringIO(\"\"\"\nYear,USA Consumption,Brazil Consumption,Germany Consumption\n2017,10.2,13.4,7.8\n2018,9.7,14.2,7.3\n2019,10,15.1,8\n2020,10.3,15.9,8.9\n\"\"\")\n\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8,6))\n\n# Plot the data\nbar1 = ax.bar(df['Year'] - 0.2, df['USA Consumption'], color='skyblue', edgecolor='black', width=0.2)\nbar2 = ax.bar(df['Year'], df['Brazil Consumption'], color='lightgreen', edgecolor='black', width=0.2)\nbar3 = ax.bar(df['Year'] + 0.2, df['Germany Consumption'], color='lightcoral', edgecolor='black', width=0.2)\n\n# Add data value labels to the bars\nax.bar_label(bar1, padding=3)\nax.bar_label(bar2, padding=3)\nax.bar_label(bar3, padding=3)\n\n# Set title, x-label and y-label\nax.set_title('Country-wise Consumption Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Consumption')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add shadow to the bars that are corresponding to the Target_object with offset of (2, 3)\n[bar.set_path_effects([withSimplePatchShadow(offset=(2, 3))]) for bar in plt.gca().containers[1]]\n\n# Add legend\nax.legend([\"USA\", \"Brazil\", \"Germany\"], loc='upper left')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_c02e3e21acbfb007/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_c02e3e21acbfb007/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_c02e3e21acbfb007/figure.png"
    },
    {
        "id": "Bar_ebc57dd11ae92a66",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The given data\nmeat_type = [\"Beef\", \"Poultry\", \"Pork\", \"Fish\", \"Lamb\"]\nmeat_data = {\n    '2000': [50, 30, 70, 40, 10],\n    '2005': [55, 35, 75, 50, 12],\n    '2010': [52, 37, 80, 60, 14],\n    '2015': [54, 40, 78, 45, 16],\n    '2020': [60, 80, 79, 48, 30]\n}\n\ny = np.arange(len(meat_type))  # the label locations\nheight = 0.15  # the height of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor year, consumption in meat_data.items():\n    offset = height * multiplier\n    bars = ax.barh(y + offset, consumption, height, label=year, edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Consumption (in tons)')\nax.set_title('Meat consumption by type in different years')\nax.set_yticks(y + height * 2)\nax.set_yticklabels(meat_type)\nax.legend(loc='upper right', ncol=1)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlim(0, 100)\n\n# Add grid and change background color\nax.grid(True)\n# Set the facecolor to light blue\nax.set_facecolor('#add8e6')  # light blue\n\nplt.tight_layout()\n\n# Save the final figure as \"myplot.png\"\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the bars that share the same legend as those containing the center point of the bounding box to 0.521. Also, apply a glow effect to these bars with the color #089CEB and an intensity of 0.15.",
        "Input_image": "./test_dataset/Bar/Bar_ebc57dd11ae92a66/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as pe\n# The given data\nmeat_type = [\"Beef\", \"Poultry\", \"Pork\", \"Fish\", \"Lamb\"]\nmeat_data = {\n    '2000': [50, 30, 70, 40, 10],\n    '2005': [55, 35, 75, 50, 12],\n    '2010': [52, 37, 80, 60, 14],\n    '2015': [54, 40, 78, 45, 16],\n    '2020': [60, 80, 79, 48, 30]\n}\n\ny = np.arange(len(meat_type))  # the label locations\nheight = 0.15  # the height of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor year, consumption in meat_data.items():\n    offset = height * multiplier\n    bars = ax.barh(y + offset, consumption, height, label=year, edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Consumption (in tons)')\nax.set_title('Meat consumption by type in different years')\nax.set_yticks(y + height * 2)\nax.set_yticklabels(meat_type)\nintensity=0.15\n# Set the transparency of the bars that are corresponding to the Target_object to 0.5210274384106004\nfor bar in plt.gca().containers[1]:\n    bar.set_alpha(0.5210274384106004)\n    bar.set_path_effects([pe.withStroke(linewidth=10*intensity, foreground='#089CEB'), pe.Normal()])\n    bar.set_zorder(10)\n\nax.legend(loc='upper right', ncol=1)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlim(0, 100)\n\n# Add grid and change background color\nax.grid(True)\n# Set the facecolor to light blue\nax.set_facecolor('#add8e6')  # light blue\n\nplt.tight_layout()\n\n# Save the final figure as \"Edit_figure.png\"\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_ebc57dd11ae92a66/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_ebc57dd11ae92a66/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_ebc57dd11ae92a66/figure.png"
    },
    {
        "id": "Bar_896452b442ec6530",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,Popularity\nRock,80\nPop,85\nCountry,70\nJazz,40\nClassical,60\nHip-Hop,90\nElectronic,75\nR&B,65\n\"\"\")\ndf = pd.read_csv(data)\n\ngenres = df['Genre'].values\npopularity = df['Popularity'].values\n\nfig, ax = plt.subplots()\n\n# Create bars\nbars = ax.bar(genres, popularity, color='skyblue', edgecolor='black')\n\n# Add title, labels and legend\nax.set_title(\"Popularity of Different Music Genres\")\nax.set_xlabel(\"Music Genres\")\nax.set_ylabel(\"Popularity\")\nax.legend(['Popularity'])\n\n# Add grids on the background\nax.grid(True)\n\n# Set the face color to a light color\nax.set_facecolor('lightgray')\n\n# Add data value on top of each bar\nax.bar_label(bars)\n\n# Save chart as a png file\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the face color of the bars that contain the center point of the bounding box to #eed889. Also, make sure that the rasterized state of these bars is set to False.",
        "Input_image": "./test_dataset/Bar/Bar_896452b442ec6530/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,Popularity\nRock,80\nPop,85\nCountry,70\nJazz,40\nClassical,60\nHip-Hop,90\nElectronic,75\nR&B,65\n\"\"\")\ndf = pd.read_csv(data)\n\ngenres = df['Genre'].values\npopularity = df['Popularity'].values\n\nfig, ax = plt.subplots()\n\n# Create bars\nbars = ax.bar(genres, popularity, color='skyblue', edgecolor='black')\n\n# Add title, labels and legend\nax.set_title(\"Popularity of Different Music Genres\")\nax.set_xlabel(\"Music Genres\")\nax.set_ylabel(\"Popularity\")\nax.legend(['Popularity'])\n\n# Add grids on the background\nax.grid(True)\n\n# Set the face color to a light color\nax.set_facecolor('lightgray')\n\n# Add data value on top of each bar\nax.bar_label(bars)\n\n# Modify the facecolor and rasterized state of the target objects\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_facecolor('#eed889')\n        bar.set_rasterized(False)\n\n# Save chart as a png file\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_896452b442ec6530/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_896452b442ec6530/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_896452b442ec6530/myplot.png"
    },
    {
        "id": "Bar_b31e2b3d6dbd2110",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nDemographics,Hours of Sleep,Anomalies\nYoung Adults,6.5,Sudden Spike\nMiddle-Aged Adults,7.2,Bimodal Trend\nSeniors,5.8,Decline with Sudden Jump\n\"\"\")\n\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(df['Demographics'], df['Hours of Sleep'], color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Sleep Hours by Demographics')\nax.set_xlabel('Demographics')\nax.set_ylabel('Hours of Sleep')\n\n# Add grid and set the background color of the plot\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval,1), ha='center', va='bottom')\n\n# Add legend\nax.legend([\"Hours of Sleep\"], loc='upper right')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the bars that contain the center point of the bounding box to #daf294.",
        "Input_image": "./test_dataset/Bar/Bar_b31e2b3d6dbd2110/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nDemographics,Hours of Sleep,Anomalies\nYoung Adults,6.5,Sudden Spike\nMiddle-Aged Adults,7.2,Bimodal Trend\nSeniors,5.8,Decline with Sudden Jump\n\"\"\")\n\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(df['Demographics'], df['Hours of Sleep'], color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Sleep Hours by Demographics')\nax.set_xlabel('Demographics')\nax.set_ylabel('Hours of Sleep')\n\n# Add grid and set the background color of the plot\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval,1), ha='center', va='bottom')\n\n# Change the color of the bars that are corresponding to the Target_object to #daf294\ntarget_indices = {0,2}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_color('#daf294')\n\n# Add legend\nax.legend([\"Hours of Sleep\"], loc='upper right')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_data_points": "0,2",
        "Test_image": "./test_dataset/Bar/Bar_b31e2b3d6dbd2110/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_b31e2b3d6dbd2110/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_b31e2b3d6dbd2110/figure.png"
    },
    {
        "id": "Bar_e59e6dcce7dd3077",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = '''Year,Bus,Rail,Car\n2010,12000,14000,10000\n2011,13000,16000,11000\n2012,14000,18000,12000\n2013,9000,20000,13000\n2014,10000,22000,14000\n2015,11000,24000,15000\n2016,12000,26000,16000\n2017,13000,12000,17000'''\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nwidth = 0.2 # the width of the bars\nx = np.arange(len(df['Year']))  # the label locations\n\nrects1 = ax.bar(x - width, df['Bus'], width, label='Bus', color='skyblue', edgecolor='black')\nrects2 = ax.bar(x, df['Rail'], width, label='Rail', color='green', edgecolor='black')\nrects3 = ax.bar(x + width, df['Car'], width, label='Car', color='red', edgecolor='black')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Number of Passengers')\nax.set_title('Number of Passengers by Year and Transportation Type')\nax.set_xticks(x)\nax.set_xticklabels(df['Year'])\nax.legend()\n\n# Add grid\nax.grid(True)\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add the corresponding value at the top of each bar\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\nax.bar_label(rects3, padding=3)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the bars that share the same legend with the bar that contains the center point of the bounding box to True. Additionally, make the visibility of the corresponding bars False.",
        "Input_image": "./test_dataset/Bar/Bar_e59e6dcce7dd3077/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = '''Year,Bus,Rail,Car\n2010,12000,14000,10000\n2011,13000,16000,11000\n2012,14000,18000,12000\n2013,9000,20000,13000\n2014,10000,22000,14000\n2015,11000,24000,15000\n2016,12000,26000,16000\n2017,13000,12000,17000'''\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nwidth = 0.2 # the width of the bars\nx = np.arange(len(df['Year']))  # the label locations\n\nrects1 = ax.bar(x - width, df['Bus'], width, label='Bus', color='skyblue', edgecolor='black')\nrects2 = ax.bar(x, df['Rail'], width, label='Rail', color='green', edgecolor='black')\nrects3 = ax.bar(x + width, df['Car'], width, label='Car', color='red', edgecolor='black')\n\n# Modify the clipping state and visibility of the target objects\nfor idx, rect in enumerate(plt.gca().containers):\n    if idx ==1:\n        for bar in rect:\n            bar.set_clip_on(True)\n            bar.set_visible(False)\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Number of Passengers')\nax.set_title('Number of Passengers by Year and Transportation Type')\nax.set_xticks(x)\nax.set_xticklabels(df['Year'])\nax.legend()\n\n# Add grid\nax.grid(True)\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add the corresponding value at the top of each bar\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\nax.bar_label(rects3, padding=3)\n\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_e59e6dcce7dd3077/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_e59e6dcce7dd3077/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_e59e6dcce7dd3077/myplot.png"
    },
    {
        "id": "Bar_952460855143ae05",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nCity,Recycling Rate (%)\nNew York,12\nSan Francisco,18\nChicago,20\nDallas,25\nLos Angeles,30\n\"\"\")\n\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(df['City'], df['Recycling Rate (%)'], color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label with updated font size\nax.set_title('Recycling Rate in Different Cities', fontsize=14)\nax.set_xlabel('City', fontsize=14)\nax.set_ylabel('Recycling Rate (%)', fontsize=14)\n\n# Set tick labels font size\nax.tick_params(axis='both', labelsize=14)\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend with updated font size\nax.legend([\"Recycling Rate (%)\"], loc='upper right', fontsize=14)\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the transparency of the bars that contain the center point of the bounding box to 0.14, and enable the animated state for these bars.",
        "Input_image": "./test_dataset/Bar/Bar_952460855143ae05/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nCity,Recycling Rate (%)\nNew York,12\nSan Francisco,18\nChicago,20\nDallas,25\nLos Angeles,30\n\"\"\")\n\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(df['City'], df['Recycling Rate (%)'], color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label with updated font size\nax.set_title('Recycling Rate in Different Cities', fontsize=14)\nax.set_xlabel('City', fontsize=14)\nax.set_ylabel('Recycling Rate (%)', fontsize=14)\n\n# Set tick labels font size\nax.tick_params(axis='both', labelsize=14)\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend with updated font size\nax.legend([\"Recycling Rate (%)\"], loc='upper right', fontsize=14)\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars)\n\n# Modify the transparency and animated state of the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_alpha(0.14)\n        bar.set_animated(True)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_952460855143ae05/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_952460855143ae05/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_952460855143ae05/myplot.png"
    },
    {
        "id": "Bar_d7eb70e4fdf9d05f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# The given data\ndata = '''\\\n\"Disorder\",\"2017\",\"2018\",\"2019\"\n\"Depression\",350,400,375\n\"Anxiety\",450,425,475\n\"Bipolar disorder\",250,300,250\n\"Schizophrenia\",150,250,150\n\"ADHD\",200,250,350\n'''\n# Read the data\ndf = pd.read_csv(StringIO(data))\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Plot the data\nwidth = 0.25\nyears = ['2017', '2018', '2019']\nx = np.arange(len(years))\n\nfor i, disorder in enumerate(df['Disorder']):\n    values = df.loc[i, years].values\n    ax.bar(x - width/2 + i*width, values, width, label=disorder, edgecolor=\"black\")\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\nax.set_title('Number of Cases per Disorder from 2017 to 2019')\nax.set_xticks(x)\nax.set_xticklabels(years)\nax.legend()\n\n# Add a grid\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add value annotations on each bar\nbars = ax.containers\nfor bar in bars:\n    ax.bar_label(bar, label_type='edge')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the bars that share the same legend as those containing the center point of the bounding box to 0.533.",
        "Input_image": "./test_dataset/Bar/Bar_d7eb70e4fdf9d05f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# The given data\ndata = '''\\\n\"Disorder\",\"2017\",\"2018\",\"2019\"\n\"Depression\",350,400,375\n\"Anxiety\",450,425,475\n\"Bipolar disorder\",250,300,250\n\"Schizophrenia\",150,250,150\n\"ADHD\",200,250,350\n'''\n# Read the data\ndf = pd.read_csv(StringIO(data))\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Plot the data\nwidth = 0.25\nyears = ['2017', '2018', '2019']\nx = np.arange(len(years))\n\nfor i, disorder in enumerate(df['Disorder']):\n    values = df.loc[i, years].values\n    ax.bar(x - width/2 + i*width, values, width, label=disorder, edgecolor=\"black\")\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\nax.set_title('Number of Cases per Disorder from 2017 to 2019')\nax.set_xticks(x)\nax.set_xticklabels(years)\n\n# Set the transparency of the bars that are corresponding to the Target_object to 0.5331385163961977\nfor bar in plt.gca().containers[2]:\n    bar.set_alpha(0.5331385163961977)\n\nax.legend()\n\n# Add a grid\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add value annotations on each bar\nbars = ax.containers\nfor bar in bars:\n    ax.bar_label(bar, label_type='edge')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "2",
        "Test_image": "./test_dataset/Bar/Bar_d7eb70e4fdf9d05f/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_d7eb70e4fdf9d05f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_d7eb70e4fdf9d05f/myplot.png"
    },
    {
        "id": "Bar_1c104ea72b79ded3",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\ncsv_data = StringIO(\"\"\"\nYear,Number of Migrants\n2000,1000000\n2001,950000\n2002,920000\n2003,1500000\n2004,1300000\n2005,1800000\n2006,1100000\n2007,1200000\n2008,900000\n\"\"\")\n\ndata = np.genfromtxt(csv_data, delimiter=\",\", names=True, dtype=None)\n\nyears = data['Year']\nmigrants = data['Number_of_Migrants']\n\ny = np.arange(len(years))\n\nfig, ax = plt.subplots()\n\n# Create a color map\nnorm = Normalize(vmin=min(migrants), vmax=max(migrants))\ncmap = plt.get_cmap('Greens')\ncolors = cmap(norm(migrants))\n\nbars = ax.barh(y, migrants, color=colors, edgecolor='green')\n\n# Add bar labels\nax.bar_label(bars, padding=3)\n\n# Create a ScalarMappable and initialize a data structure\nsm = ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\n\n# Optional: Create a colorbar\ncbar = plt.colorbar(sm)\ncbar.set_label('Number of Migrants')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Number of Migrants')\nax.set_title('Number of Migrants (2000-2008)')\nax.set_yticks(y)\nax.set_yticklabels(years)\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Invert the y-axis so the years read top-to-bottom\nax.invert_yaxis()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping box for the bars that contain the center point of the bounding box to the coordinates (2, 252), with a width of 277 and a height of 245, using the `matplotlib.transforms.Bbox` pattern. Also, enable the picker state for the bars related to the Target_object at the same coordinates by setting it to True.",
        "Input_image": "./test_dataset/Bar/Bar_1c104ea72b79ded3/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.transforms import Bbox\n\ncsv_data = StringIO(\"\"\"\nYear,Number of Migrants\n2000,1000000\n2001,950000\n2002,920000\n2003,1500000\n2004,1300000\n2005,1800000\n2006,1100000\n2007,1200000\n2008,900000\n\"\"\")\n\ndata = np.genfromtxt(csv_data, delimiter=\",\", names=True, dtype=None)\n\nyears = data['Year']\nmigrants = data['Number_of_Migrants']\n\ny = np.arange(len(years))\n\nfig, ax = plt.subplots()\n\n# Create a color map\nnorm = Normalize(vmin=min(migrants), vmax=max(migrants))\ncmap = plt.get_cmap('Greens')\ncolors = cmap(norm(migrants))\n\nbars = ax.barh(y, migrants, color=colors, edgecolor='green')\n\n# Add bar labels\nax.bar_label(bars, padding=3)\n\n# Create a ScalarMappable and initialize a data structure\nsm = ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\n\n# Optional: Create a colorbar\ncbar = plt.colorbar(sm)\ncbar.set_label('Number of Migrants')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Number of Migrants')\nax.set_title('Number of Migrants (2000-2008)')\nax.set_yticks(y)\nax.set_yticklabels(years)\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Invert the y-axis so the years read top-to-bottom\nax.invert_yaxis()\n\n# Set the clip box and picker state for the target object\nbbox = Bbox.from_bounds(2, 252, 277, 245)\nfor idx, bar in enumerate(bars):\n    if idx in [2, 4]:\n        bar.set_clip_box(bbox)\n        bar.set_picker(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,4",
        "Test_image": "./test_dataset/Bar/Bar_1c104ea72b79ded3/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_1c104ea72b79ded3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_1c104ea72b79ded3/myplot.png"
    },
    {
        "id": "Bar_acf16552dbb31c86",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = {'Country': ['USA', 'China', 'UK', 'India', 'Australia'],\n        '2016': [45, 110, 35, 80, 20],\n        '2017': [52, 120, 32, 85, 40],\n        '2018': [35, 60, 31, 95, 24]}\n\ndf = pd.DataFrame(data)\n\ncountries = df['Country'].values\nyears = ['2016', '2017', '2018']\n\nfig, ax = plt.subplots()\n\nbarWidth = 0.25\nr1 = np.arange(len(df['2016']))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n\nbars1 = ax.bar(r1, df['2016'], color='b', width=barWidth, edgecolor='grey', label='2016')\nbars2 = ax.bar(r2, df['2017'], color='y', width=barWidth, edgecolor='grey', label='2017')\nbars3 = ax.bar(r3, df['2018'], color='g', width=barWidth, edgecolor='grey', label='2018')\n\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\nax.set_title('Country Wise Data')\nax.set_xlabel('Countries', fontweight='bold')\nax.set_ylabel('Values', fontweight='bold')\nax.set_xticks([r + barWidth for r in range(len(df['2016']))])\nax.set_xticklabels(countries)\nax.legend()\n\nax.grid(True)\nax.set_facecolor(\"lightgray\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the linestyle of the bars that contain the center point of the bounding box to '-.'. Also, for the same bars, set the snap state to False.",
        "Input_image": "./test_dataset/Bar/Bar_acf16552dbb31c86/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = {'Country': ['USA', 'China', 'UK', 'India', 'Australia'],\n        '2016': [45, 110, 35, 80, 20],\n        '2017': [52, 120, 32, 85, 40],\n        '2018': [35, 60, 31, 95, 24]}\n\ndf = pd.DataFrame(data)\n\ncountries = df['Country'].values\nyears = ['2016', '2017', '2018']\n\nfig, ax = plt.subplots()\n\nbarWidth = 0.25\nr1 = np.arange(len(df['2016']))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n\nbars1 = ax.bar(r1, df['2016'], color='b', width=barWidth, edgecolor='grey', label='2016')\nbars2 = ax.bar(r2, df['2017'], color='y', width=barWidth, edgecolor='grey', label='2017')\nbars3 = ax.bar(r3, df['2018'], color='g', width=barWidth, edgecolor='grey', label='2018')\n\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\nfor bar in bars1:\n    bar.set_linestyle('-.')\n    bar.set_snap(False)\n\nax.set_title('Country Wise Data')\nax.set_xlabel('Countries', fontweight='bold')\nax.set_ylabel('Values', fontweight='bold')\nax.set_xticks([r + barWidth for r in range(len(df['2016']))])\nax.set_xticklabels(countries)\nax.legend()\n\nax.grid(True)\nax.set_facecolor(\"lightgray\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,1,2,3,4",
        "Test_image": "./test_dataset/Bar/Bar_acf16552dbb31c86/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_acf16552dbb31c86/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_acf16552dbb31c86/myplot.png"
    },
    {
        "id": "Bar_3cb620b1c0012054",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom io import StringIO\n\ncsv_data = StringIO(\"\"\"\nYear,Number of Migrants\n2000,1000000\n2001,950000\n2002,920000\n2003,1500000\n2004,1300000\n2005,1800000\n2006,1100000\n2007,1200000\n2008,900000\n\"\"\")\n\ndata = np.genfromtxt(csv_data, delimiter=\",\", names=True, dtype=None)\n\nyears = data['Year']\nmigrants = data['Number_of_Migrants']\n\ny = np.arange(len(years))\n\nfig, ax = plt.subplots()\n\nbars = ax.barh(y, migrants, color='skyblue', edgecolor='blue')\n\n# Add bar labels\nax.bar_label(bars, padding=3)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Number of Migrants')\nax.set_title('Number of Migrants (2000-2008)')\nax.set_yticks(y)\nax.set_yticklabels(years)\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Invert the y-axis so the years read top-to-bottom\nax.invert_yaxis()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow to the bars that contain the center point of the bounding box, using a shadow offset of (3, 5) units.",
        "Input_image": "./test_dataset/Bar/Bar_3cb620b1c0012054/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom io import StringIO\nfrom matplotlib.patheffects import withSimplePatchShadow\n\ncsv_data = StringIO(\"\"\"\nYear,Number of Migrants\n2000,1000000\n2001,950000\n2002,920000\n2003,1500000\n2004,1300000\n2005,1800000\n2006,1100000\n2007,1200000\n2008,900000\n\"\"\")\n\ndata = np.genfromtxt(csv_data, delimiter=\",\", names=True, dtype=None)\n\nyears = data['Year']\nmigrants = data['Number_of_Migrants']\n\ny = np.arange(len(years))\n\nfig, ax = plt.subplots()\n\nbars = ax.barh(y, migrants, color='skyblue', edgecolor='blue')\n\n# Add bar labels\nax.bar_label(bars, padding=3)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Number of Migrants')\nax.set_title('Number of Migrants (2000-2008)')\nax.set_yticks(y)\nax.set_yticklabels(years)\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Invert the y-axis so the years read top-to-bottom\nax.invert_yaxis()\n\n# Add shadow to the bars that are corresponding to the Target_object with offset of (3, 5)\ntarget_indices = {0, 2, 4}  # Example target indices\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_path_effects([withSimplePatchShadow(offset=(3, 5))])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_data_points": "0,2,4",
        "Test_image": "./test_dataset/Bar/Bar_3cb620b1c0012054/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_3cb620b1c0012054/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_3cb620b1c0012054/figure.png"
    },
    {
        "id": "Bar_b5300641f0a946a4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = StringIO(\"\"\"\nYear,Home Cooking,Takeout Meals,Meals at Restaurants\n2017,74,50,90\n2018,72,55,85\n2019,75,60,75\n\"\"\")\n\ndf = pd.read_csv(data)\n\nyears = df['Year']\nhome_cooking = df['Home Cooking']\ntakeout_meals = df['Takeout Meals']\nmeals_at_restaurants = df['Meals at Restaurants']\n\ny = np.arange(len(years))\nheight = 0.2\n\nfig, ax = plt.subplots()\n\nbars1 = ax.bar(y - height, home_cooking, height, label='Home Cooking', color='lightgreen', edgecolor='green')\nbars2 = ax.bar(y, takeout_meals, height, label='Takeout Meals', color='skyblue', edgecolor='blue')\nbars3 = ax.bar(y + height, meals_at_restaurants, height, label='Meals at Restaurants', color='pink', edgecolor='red')\n\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\nax.set_xlabel('Year')\nax.set_ylabel('Count')\nax.set_title('Comparison of Home Cooking, Takeout Meals, and Meals at Restaurants (2017-2019)')\nax.set_xticks(y)\nax.set_xticklabels(years)\nax.legend(loc='upper right')\nax.grid(visible=True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label of the bars that share the same legend with the bar that contains the center point of the bounding box to 'A new Label'. Additionally, make sure these bars are rasterized by setting their rasterized state to True.",
        "Input_image": "./test_dataset/Bar/Bar_b5300641f0a946a4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = StringIO(\"\"\"\nYear,Home Cooking,Takeout Meals,Meals at Restaurants\n2017,74,50,90\n2018,72,55,85\n2019,75,60,75\n\"\"\")\n\ndf = pd.read_csv(data)\n\nyears = df['Year']\nhome_cooking = df['Home Cooking']\ntakeout_meals = df['Takeout Meals']\nmeals_at_restaurants = df['Meals at Restaurants']\n\ny = np.arange(len(years))\nheight = 0.2\n\nfig, ax = plt.subplots()\n\nbars1 = ax.bar(y - height, home_cooking, height, label='Home Cooking', color='lightgreen', edgecolor='green')\nbars2 = ax.bar(y, takeout_meals, height, label='Takeout Meals', color='skyblue', edgecolor='blue')\nbars3 = ax.bar(y + height, meals_at_restaurants, height, label='Meals at Restaurants', color='pink', edgecolor='red')\n\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\nfor bar in bars2:\n    bar.set_label('A new Label')\n    bar.set_rasterized(True)\n\nax.set_xlabel('Year')\nax.set_ylabel('Count')\nax.set_title('Comparison of Home Cooking, Takeout Meals, and Meals at Restaurants (2017-2019)')\nax.set_xticks(y)\nax.set_xticklabels(years)\nax.legend(loc='upper right')\nax.grid(visible=True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_b5300641f0a946a4/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_b5300641f0a946a4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_b5300641f0a946a4/myplot.png"
    },
    {
        "id": "Bar_327121806157dc07",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = {\n    \"Smartphone\": np.array([600, 700, 800, 500, 700]),\n    \"Laptop\": np.array([500, 400, 900, 850, 1000]),\n    \"Tablet\": np.array([500, 600, 400, 800, 900]),\n    \"Smartwatch\": np.array([400, 300, 500, 150, 400]),\n    \"Smart TV\": np.array([700, 600, 600, 700, 600]),\n}\nyears = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\n\n# Setting up the plot\nfig, ax = plt.subplots()\nwidth = 0.15\nx = np.arange(len(years))\n\n# Iterating over the data and creating bars\nfor i, (gadget, values) in enumerate(data.items()):\n    bars = ax.bar(x + i*width, values, width, label=gadget)\n    ax.bar_label(bars)\n\n# Adjusting the axes and adding labels, title, legend\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\nax.set_title('Gadget Sales Over the Years')\nax.set_xticks(x + width / 2)\nax.set_xticklabels(years)\nax.legend()\nax.grid(True)\n\n# Change the background color to white\nax.set_facecolor('white')  # This line has been modified\n\n# Saving the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill pattern of the bars that share the same legend as those containing the center point of the bounding box to '|', and set their edge color to '#be6205'.",
        "Input_image": "./test_dataset/Bar/Bar_327121806157dc07/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = {\n    \"Smartphone\": np.array([600, 700, 800, 500, 700]),\n    \"Laptop\": np.array([500, 400, 900, 850, 1000]),\n    \"Tablet\": np.array([500, 600, 400, 800, 900]),\n    \"Smartwatch\": np.array([400, 300, 500, 150, 400]),\n    \"Smart TV\": np.array([700, 600, 600, 700, 600]),\n}\nyears = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\n\n# Setting up the plot\nfig, ax = plt.subplots()\nwidth = 0.15\nx = np.arange(len(years))\n\n# Iterating over the data and creating bars\nfor i, (gadget, values) in enumerate(data.items()):\n    bars = ax.bar(x + i*width, values, width, label=gadget)\n    ax.bar_label(bars)\n\n# Adjusting the axes and adding labels, title, legend\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\nax.set_title('Gadget Sales Over the Years')\nax.set_xticks(x + width / 2)\nax.set_xticklabels(years)\n\n# Adding hatch and changing edge color for the bars corresponding to the Target_object\nfor bar in plt.gca().containers[2]:\n    bar.set_hatch('|')\n    bar.set_edgecolor('#be6205')\n\nax.legend()\nax.grid(True)\n\n# Change the background color to white\nax.set_facecolor('white')  # This line has been modified\n\n# Saving the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "2",
        "Test_image": "./test_dataset/Bar/Bar_327121806157dc07/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_327121806157dc07/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_327121806157dc07/figure.png"
    },
    {
        "id": "Bar_fe54d3cb5f9e76b4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = {\n    \"Year\": [2015, 2016, 2017, 2018, 2019, 2020],\n    \"Solar Power (GWh)\": [206, 215, 550, 565, 540, 480],\n    \"Wind Power (GWh)\": [450, 470, 480, 440, 750, 760],\n}\n\nfig, ax = plt.subplots()\n\n# Bar width\nwidth = 0.35\n\n# The x locations for the groups\nind = np.arange(len(data[\"Year\"]))\n\n# Plot bars\nbars1 = ax.bar(ind - width/2, data[\"Solar Power (GWh)\"], width,\n               label=\"Solar Power (GWh)\", color='b', edgecolor='black')\nbars2 = ax.bar(ind + width/2, data[\"Wind Power (GWh)\"], width,\n               label=\"Wind Power (GWh)\", color='r', edgecolor='black')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Power (GWh)')\nax.set_title('Yearly Solar and Wind Power Production')\nax.set_xticks(ind)\nax.set_xticklabels(data[\"Year\"])\nax.legend(loc='upper left', ncol=1)\n\n# Change background color to white and remove gridlines\nax.set_facecolor('white') # Changed from 'gray' to 'white'\nax.grid(False) # Changed from True to False\n\n# Annotate bars\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the line width of the bars that share the same legend with the bar that contains the center point of the bounding box to 0.65.",
        "Input_image": "./test_dataset/Bar/Bar_fe54d3cb5f9e76b4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = {\n    \"Year\": [2015, 2016, 2017, 2018, 2019, 2020],\n    \"Solar Power (GWh)\": [206, 215, 550, 565, 540, 480],\n    \"Wind Power (GWh)\": [450, 470, 480, 440, 750, 760],\n}\n\nfig, ax = plt.subplots()\n\n# Bar width\nwidth = 0.35\n\n# The x locations for the groups\nind = np.arange(len(data[\"Year\"]))\n\n# Plot bars\nbars1 = ax.bar(ind - width/2, data[\"Solar Power (GWh)\"], width,\n               label=\"Solar Power (GWh)\", color='b', edgecolor='black', linewidth=0.65)\nbars2 = ax.bar(ind + width/2, data[\"Wind Power (GWh)\"], width,\n               label=\"Wind Power (GWh)\", color='r', edgecolor='black')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Power (GWh)')\nax.set_title('Yearly Solar and Wind Power Production')\nax.set_xticks(ind)\nax.set_xticklabels(data[\"Year\"])\nax.legend(loc='upper left', ncol=1)\n\n# Change background color to white and remove gridlines\nax.set_facecolor('white') # Changed from 'gray' to 'white'\nax.grid(False) # Changed from True to False\n\n# Annotate bars\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_fe54d3cb5f9e76b4/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_fe54d3cb5f9e76b4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_fe54d3cb5f9e76b4/myplot.png"
    },
    {
        "id": "Bar_40ac600ee7787d79",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nsubjects = (\"Mathematics\", \"Physics\", \"Chemistry\", \"Biology\", \"English\", \"History\", \"Geography\")\npopularity = (100, 200, 50, 300, 150, 50, 80)\n\nx = np.arange(len(subjects))  # the label locations\n\nfig, ax = plt.subplots()\n\n# Plotting the bar chart\nbars = ax.bar(x, popularity, tick_label=subjects, color=\"steelblue\", edgecolor=\"black\")\n\n# Annotating the data value on the chart\nax.bar_label(bars)\n\n# Adding labels and title\nax.set_ylabel('Popularity')\nax.set_xlabel('Subjects')\nax.set_title('Popularity of Different Subjects')\n\n# Adding a legend\nax.legend([\"Popularity\"], loc='upper right')\n\n# Setting the face color\nax.set_facecolor(\"lightgray\")\n\n# Adding grids\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the linewidth of the bars that contain the center point of the bounding box to 1.93. Also, ensure that the rasterized state of these bars is set to False.",
        "Input_image": "./test_dataset/Bar/Bar_40ac600ee7787d79/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nsubjects = (\"Mathematics\", \"Physics\", \"Chemistry\", \"Biology\", \"English\", \"History\", \"Geography\")\npopularity = (100, 200, 50, 300, 150, 50, 80)\n\nx = np.arange(len(subjects))  # the label locations\n\nfig, ax = plt.subplots()\n\n# Plotting the bar chart\nbars = ax.bar(x, popularity, tick_label=subjects, color=\"steelblue\", edgecolor=\"black\")\n\n# Annotating the data value on the chart\nax.bar_label(bars)\n\n# Adding labels and title\nax.set_ylabel('Popularity')\nax.set_xlabel('Subjects')\nax.set_title('Popularity of Different Subjects')\n\n# Adding a legend\nax.legend([\"Popularity\"], loc='upper right')\n\n# Setting the face color\nax.set_facecolor(\"lightgray\")\n\n# Adding grids\nax.grid(True)\n\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_linewidth(1.93)\n        bar.set_rasterized(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_40ac600ee7787d79/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_40ac600ee7787d79/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_40ac600ee7787d79/myplot.png"
    },
    {
        "id": "Bar_4afdcc992c69c2dd",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplatforms = (\"Facebook\", \"Instagram\", \"Snapchat\", \"Twitter\", \"LinkedIn\", \"YouTube\")\nscores = np.array([85, 120, 80, 70, 90, 110])\nwidth = 0.5\n\nfig, ax = plt.subplots()\n\n# Set background color\nax.set_facecolor('gray')\n\nbars = ax.bar(platforms, scores, width, color='blue', edgecolor='black')\n\nax.set_title('Impact Score of Different Social Media Platforms')\nax.set_xlabel('Social Media Platform')\nax.set_ylabel('Impact Score')\n\n# Add grid\nax.grid(True)\n\n# Add labels to each bar\nax.bar_label(bars, label_type=\"center\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the transparency of the bars that contain the center point of the bounding box to 0.535.",
        "Input_image": "./test_dataset/Bar/Bar_4afdcc992c69c2dd/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplatforms = (\"Facebook\", \"Instagram\", \"Snapchat\", \"Twitter\", \"LinkedIn\", \"YouTube\")\nscores = np.array([85, 120, 80, 70, 90, 110])\nwidth = 0.5\n\nfig, ax = plt.subplots()\n\n# Set background color\nax.set_facecolor('gray')\n\nbars = ax.bar(platforms, scores, width, color='blue', edgecolor='black')\n\nax.set_title('Impact Score of Different Social Media Platforms')\nax.set_xlabel('Social Media Platform')\nax.set_ylabel('Impact Score')\n\n\n# Add grid\nax.grid(True)\n\n# Add labels to each bar\nax.bar_label(bars, label_type=\"center\")\n\n# Set the transparency of the bars that are corresponding to the Target_object to 0.5354680748630518\ntarget_indices = {1, 3, 5}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_alpha(0.5354680748630518)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_data_points": "1,3,5",
        "Test_image": "./test_dataset/Bar/Bar_4afdcc992c69c2dd/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_4afdcc992c69c2dd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_4afdcc992c69c2dd/figure.png"
    },
    {
        "id": "Bar_159f6c298bb08eb5",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom io import StringIO\nimport pandas as pd\n\n# Input data\ndata = \"\"\"Year,USA,Germany,China\n2017,244,95,45\n2018,234,105,30\n2019,235,85,35\n2020,225,90,20\n2021,250,80,50\"\"\"\n\n# Convert data to pandas DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Set parameters for drawing\ny = np.arange(len(df.Year))\nheight = 0.2\n\nfig, ax = plt.subplots()\n\n# Draw bars\nbars1 = ax.barh(y + height, df.USA, height, color='skyblue', edgecolor='blue', label='USA')\nbars2 = ax.barh(y, df.Germany, height, color='lightgreen', edgecolor='green', label='Germany')\nbars3 = ax.barh(y - height, df.China, height, color='pink', edgecolor='red', label='China')\n\n# Add bar labels\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\n# Set labels, title, legend, and grids\nax.set_xlabel('Value')\nax.set_ylabel('Year')\nax.set_title('Comparative Bar Chart')\nax.set_yticks(y)\nax.set_yticklabels(df.Year)\nax.legend(loc='upper right', ncol=1)\n\n# Remove grids and set background color to white\nax.grid(False)  # This line removes the grid lines\nax.set_facecolor('white')  # This line changes the background color to white\n\n# Invert y-axis to make the year read from top to bottom\nax.invert_yaxis()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the fill pattern of the bars that share the same legend as those containing the center point of the bounding box to 'x', and change their edge color to '#67d3c0'.",
        "Input_image": "./test_dataset/Bar/Bar_159f6c298bb08eb5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom io import StringIO\nimport pandas as pd\n\n# Input data\ndata = \"\"\"Year,USA,Germany,China\n2017,244,95,45\n2018,234,105,30\n2019,235,85,35\n2020,225,90,20\n2021,250,80,50\"\"\"\n\n# Convert data to pandas DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Set parameters for drawing\ny = np.arange(len(df.Year))\nheight = 0.2\n\nfig, ax = plt.subplots()\n\n# Draw bars\nbars1 = ax.barh(y + height, df.USA, height, color='skyblue', edgecolor='blue', label='USA')\nbars2 = ax.barh(y, df.Germany, height, color='lightgreen', edgecolor='green', label='Germany')\nbars3 = ax.barh(y - height, df.China, height, color='pink', edgecolor='red', label='China')\n\n# Add bar labels\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\n# Set labels, title, legend, and grids\nax.set_xlabel('Value')\nax.set_ylabel('Year')\nax.set_title('Comparative Bar Chart')\nax.set_yticks(y)\nax.set_yticklabels(df.Year)\n\n# Modify the bars corresponding to the Target_object\nfor bar in plt.gca().containers[1]:\n    bar.set_hatch('x')\n    bar.set_edgecolor('#67d3c0')\n\nax.legend(loc='upper right', ncol=1)\n\n# Remove grids and set background color to white\nax.grid(False)  # This line removes the grid lines\nax.set_facecolor('white')  # This line changes the background color to white\n\n# Invert y-axis to make the year read from top to bottom\nax.invert_yaxis()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_159f6c298bb08eb5/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_159f6c298bb08eb5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_159f6c298bb08eb5/figure.png"
    },
    {
        "id": "Bar_24cf06e6b9a7b9e9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = StringIO(\"\"\"\n\"Social Media Platform\",\"Monthly Active Users\"\n\"Facebook\",2.8\n\"Instagram\",1.5\n\"Twitter\",1.2\n\"Snapchat\",0.5\n\"WeChat\",1.1\n\"WhatsApp\",2.0\n\"\"\")\ndf = pd.read_csv(data, sep=\",\")\nplatforms = df['Social Media Platform'].tolist()\nusers = df['Monthly Active Users'].tolist()\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(platforms, users, color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Monthly Active Users on Social Media Platforms')\nax.set_xlabel('Social Media Platforms')\nax.set_ylabel('Monthly Active Users (in billions)')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend([\"Monthly Active Users\"], loc='upper right')\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Stroke the bars that contain the center point of the bounding box with a linewidth of 3.78 and a foreground color of #12bae6. Additionally, for these same bars, set the clipping box to a bounding box defined by the coordinates (102, 47), with a width of 297 and a height of 188, following the matplotlib.transforms.Bbox pattern.",
        "Input_image": "./test_dataset/Bar/Bar_24cf06e6b9a7b9e9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\nimport matplotlib.transforms as mtransforms\nimport matplotlib.patheffects as path_effects\n\n# Define the data\ndata = StringIO(\"\"\"\n\"Social Media Platform\",\"Monthly Active Users\"\n\"Facebook\",2.8\n\"Instagram\",1.5\n\"Twitter\",1.2\n\"Snapchat\",0.5\n\"WeChat\",1.1\n\"WhatsApp\",2.0\n\"\"\")\ndf = pd.read_csv(data, sep=\",\")\nplatforms = df['Social Media Platform'].tolist()\nusers = df['Monthly Active Users'].tolist()\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(platforms, users, color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Monthly Active Users on Social Media Platforms')\nax.set_xlabel('Social Media Platforms')\nax.set_ylabel('Monthly Active Users (in billions)')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend([\"Monthly Active Users\"], loc='upper right')\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars)\n\n# Stroke and clip box modifications\nstroke_effect = path_effects.withStroke(linewidth=3.778177652007818, foreground='#12bae6')\nbbox = mtransforms.Bbox.from_bounds(102, 47, 297, 188)\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_path_effects([stroke_effect])\n        bar.set_clip_box(bbox)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_24cf06e6b9a7b9e9/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_24cf06e6b9a7b9e9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_24cf06e6b9a7b9e9/myplot.png"
    },
    {
        "id": "Bar_5db8e20bae1e3fce",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ngenre = ['Rock', 'Pop', 'Country', 'Hip-hop', 'Jazz', 'Electronic', 'Classical', 'Reggae', 'Blues']\npopularity = [45, 65, 30, 55, 25, 35, 20, 50, 40]\n\n# Creating the bar chart\nfig, ax = plt.subplots()\nbars = ax.bar(genre, popularity, color='skyblue', edgecolor='black')\n\n# Setting the title and labels\nax.set_title('Popularity of Music Genres')\nax.set_xlabel('Genre')\nax.set_ylabel('Popularity')\n\n# Annotating the data value on the chart\nax.bar_label(bars)\n\n# Adding a grid on the background\nax.grid(True)\n\n# Changing the background color of the chart\nax.set_facecolor('gray')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label of the bars that contain the center point of the bounding box to 'A new Label', and set their line width to 4.75.",
        "Input_image": "./test_dataset/Bar/Bar_5db8e20bae1e3fce/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ngenre = ['Rock', 'Pop', 'Country', 'Hip-hop', 'Jazz', 'Electronic', 'Classical', 'Reggae', 'Blues']\npopularity = [45, 65, 30, 55, 25, 35, 20, 50, 40]\n\n# Creating the bar chart\nfig, ax = plt.subplots()\nbars = ax.bar(genre, popularity, color='skyblue', edgecolor='black')\n\n# Setting the title and labels\nax.set_title('Popularity of Music Genres')\nax.set_xlabel('Genre')\nax.set_ylabel('Popularity')\n\n# Annotating the data value on the chart\nax.bar_label(bars)\n\n# Adding a grid on the background\nax.grid(True)\n\n# Changing the background color of the chart\nax.set_facecolor('gray')\n\n# Modifying the label and linewidth of the target object\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_label('A new Label')\n        bar.set_linewidth(4.75)\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_5db8e20bae1e3fce/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_5db8e20bae1e3fce/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_5db8e20bae1e3fce/myplot.png"
    },
    {
        "id": "Bar_a56807dfaab483b6",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    'Year': [1990, 2000, 2010, 2020],\n    'Liberalism': [200, 210, 220, 250],\n    'Conservatism': [250, 230, 220, 300],\n    'Socialism': [300, 280, 260, 240],\n    'Libertarianism': [350, 370, 400, 360]\n}\n\n# Prepare x-axis labels\nyears = data.pop('Year')\n\n# Prepare y-values and labels\nvalues = list(data.values())\nlabels = list(data.keys())\n\n# Create figure and axis\nfig, ax = plt.subplots()\n\n# Set the bar width and position\nwidth = 0.2\nx = np.arange(len(years))\n\n# Plot bars\nfor i in range(len(labels)):\n    bars = ax.bar(x - width/2 + i*width, values[i], width, label=labels[i])\n    ax.bar_label(bars, label_type='center')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Supporters')\nax.set_title('Political Ideology Supporters over Years')\n\n# Set x-ticks\nax.set_xticks(x)\nax.set_xticklabels(years)\n\n# Set legend\nax.legend(loc='upper right', ncol=1)\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the facecolor of the bar that contains the center point of the bounding box to #f389e0, and also ensure that the picker state for that bar is set to True.",
        "Input_image": "./test_dataset/Bar/Bar_a56807dfaab483b6/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    'Year': [1990, 2000, 2010, 2020],\n    'Liberalism': [200, 210, 220, 250],\n    'Conservatism': [250, 230, 220, 300],\n    'Socialism': [300, 280, 260, 240],\n    'Libertarianism': [350, 370, 400, 360]\n}\n\n# Prepare x-axis labels\nyears = data.pop('Year')\n\n# Prepare y-values and labels\nvalues = list(data.values())\nlabels = list(data.keys())\n\n# Create figure and axis\nfig, ax = plt.subplots()\n\n# Set the bar width and position\nwidth = 0.2\nx = np.arange(len(years))\n\n# Plot bars\nfor i in range(len(labels)):\n    if i in [0,2]:\n        bars = ax.bar(x - width/2 + i*width, values[i], width, label=labels[i],facecolor='#f389e0',picker=True)\n    else:\n        bars = ax.bar(x - width/2 + i*width, values[i], width, label=labels[i])\n    ax.bar_label(bars, label_type='center')\n\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Supporters')\nax.set_title('Political Ideology Supporters over Years')\n\n# Set x-ticks\nax.set_xticks(x)\nax.set_xticklabels(years)\n\n# Set legend\nax.legend(loc='upper right', ncol=1)\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Modify the facecolor and picker state of the target objects\n\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0,2",
        "Test_image": "./test_dataset/Bar/Bar_a56807dfaab483b6/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_a56807dfaab483b6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_a56807dfaab483b6/myplot.png"
    },
    {
        "id": "Bar_4514254ea4975c0c",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = StringIO(\"\"\"\nDisease,2000,2010,2020\nHeart Disease,24.5,22.8,32.1\nCancer,12.8,32.3,14.1\nDiabetes,7.2,8.2,7.9\n\"\"\")\n\ndf = pd.read_csv(data)\n\ndiseases = df[\"Disease\"].values\nyears = df.columns[1:].values\nvalues = df[years].values.T\n\nwidth = 0.2\n\nfig, ax = plt.subplots()\n\ncolors = ['red', 'blue', 'green']  # Define colors for each disease.\n\nfor i, disease in enumerate(diseases):\n    bars = ax.bar(np.arange(len(years)) + i * width, values[:, i], width, label=disease, color=colors[i], edgecolor='black')\n    ax.bar_label(bars)\n\nax.set_title(\"Disease Percentages Over the Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Percentage\")\nax.set_xticks(np.arange(len(years)) + width)\nax.set_xticklabels(years)\nax.legend(loc=\"upper left\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the snap state of the bars that share the same legend with the bar that contains the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Bar/Bar_4514254ea4975c0c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = StringIO(\"\"\"\nDisease,2000,2010,2020\nHeart Disease,24.5,22.8,32.1\nCancer,12.8,32.3,14.1\nDiabetes,7.2,8.2,7.9\n\"\"\")\n\ndf = pd.read_csv(data)\n\ndiseases = df[\"Disease\"].values\nyears = df.columns[1:].values\nvalues = df[years].values.T\n\nwidth = 0.2\n\nfig, ax = plt.subplots()\n\ncolors = ['red', 'blue', 'green']  # Define colors for each disease.\n\nfor i, disease in enumerate(diseases):\n    if i==0:\n        bars = ax.bar(np.arange(len(years)) + i * width, values[:, i], width, label=disease, color=colors[i], edgecolor='black')\n    else:\n        ax.bar(np.arange(len(years)) + i * width, values[:, i], width, label=disease, color=colors[i], edgecolor='black')\n    ax.bar_label(bars)\n\nfor bar in bars:\n    bar.set_snap(True)\n\nax.set_title(\"Disease Percentages Over the Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Percentage\")\nax.set_xticks(np.arange(len(years)) + width)\nax.set_xticklabels(years)\nax.legend(loc=\"upper left\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_4514254ea4975c0c/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_4514254ea4975c0c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_4514254ea4975c0c/myplot.png"
    },
    {
        "id": "Bar_c6e1e1109aa9544b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"Profession,2018,2019,2020\nTeachers,50,55,60\nNurses,70,90,40\nEngineers,40,80,70\nDoctors,90,95,55\nLawyers,85,70,65\nBankers,35,45,50\nPolice Officers,60,120,100\nActors,100,50,75\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\n\nprofessions = df['Profession'].values\nyears = df.columns[1:].values\n\ndf.set_index('Profession', inplace=True)\n\nfig, ax = plt.subplots()\nbottom = np.zeros(len(professions))\nwidth = 0.5\n\nfor year in years:\n    bars = ax.bar(professions, df[year].values, width, label=year, bottom=bottom, color=np.random.rand(3,))\n    bottom += df[year].values\n    ax.bar_label(bars)\n\nax.set_title('Number of Professionals from 2018 to 2020')\nax.set_xlabel('Professions')\nax.set_ylabel('Counts')\nax.legend(loc=\"upper right\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow to the bars that are associated with the same legend as those containing the center point of the bounding box, with a shadow offset of (5, 1) units.",
        "Input_image": "./test_dataset/Bar/Bar_c6e1e1109aa9544b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom matplotlib.patheffects import withSimplePatchShadow\n\ndata = StringIO(\"\"\"Profession,2018,2019,2020\nTeachers,50,55,60\nNurses,70,90,40\nEngineers,40,80,70\nDoctors,90,95,55\nLawyers,85,70,65\nBankers,35,45,50\nPolice Officers,60,120,100\nActors,100,50,75\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\n\nprofessions = df['Profession'].values\nyears = df.columns[1:].values\n\ndf.set_index('Profession', inplace=True)\n\nfig, ax = plt.subplots()\nbottom = np.zeros(len(professions))\nwidth = 0.5\n\nfor year in years:\n    bars = ax.bar(professions, df[year].values, width, label=year, bottom=bottom, color=np.random.rand(3,))\n    bottom += df[year].values\n    ax.bar_label(bars)\n\n# Add shadow to the bars corresponding to the first year\nfor bar in plt.gca().containers[0]:\n    bar.set_path_effects([withSimplePatchShadow(offset=(5, 1))])\n\nax.set_title('Number of Professionals from 2018 to 2020')\nax.set_xlabel('Professions')\nax.set_ylabel('Counts')\nax.legend(loc=\"upper right\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_c6e1e1109aa9544b/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_c6e1e1109aa9544b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_c6e1e1109aa9544b/figure.png"
    },
    {
        "id": "Bar_8785acf387eab25b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    'Year': [2015, 2016, 2017, 2018, 2019],\n    'Smartphones': [100, 90, 85, 120, 110],\n    'E-Waste Recycling': [200, 210, 220, 230, 240],\n    'Computers': [300, 280, 275, 250, 260],\n    'Household Appliances': [400, 390, 385, 380, 370],\n}\n\nx = np.arange(len(data['Year']))  # the label locations\nwidth = 0.2  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor attribute in data.keys():\n    if attribute != 'Year':\n        offset = width * multiplier\n        bars = ax.bar(x + offset, data[attribute], width, label=attribute, edgecolor='black')\n        ax.bar_label(bars, padding=3)\n        multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Amount')\nax.set_title('Annual Data on Tech Waste')\nax.set_xticks(x + width/2)\nax.set_xticklabels(data['Year'])\nax.legend(loc='upper left', frameon=True)\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the picker state of the bars that share the same legend with the bar that contains the center point of the bounding box to True. For the same points, also set the snap state of the bars associated with the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Bar/Bar_8785acf387eab25b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    'Year': [2015, 2016, 2017, 2018, 2019],\n    'Smartphones': [100, 90, 85, 120, 110],\n    'E-Waste Recycling': [200, 210, 220, 230, 240],\n    'Computers': [300, 280, 275, 250, 260],\n    'Household Appliances': [400, 390, 385, 380, 370],\n}\n\nx = np.arange(len(data['Year']))  # the label locations\nwidth = 0.2  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor attribute in data.keys():\n    if attribute != 'Year':\n        offset = width * multiplier\n        bars = ax.bar(x + offset, data[attribute], width, label=attribute, edgecolor='black')\n        ax.bar_label(bars, padding=3)\n        multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Amount')\nax.set_title('Annual Data on Tech Waste')\nax.set_xticks(x + width/2)\nax.set_xticklabels(data['Year'])\nax.legend(loc='upper left', frameon=True)\nax.grid(True)\nax.set_facecolor('gray')\n\nbars = plt.gca().containers\nfor bar in bars[1]:\n    bar.set_picker(True)\n    bar.set_snap(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_8785acf387eab25b/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_8785acf387eab25b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_8785acf387eab25b/myplot.png"
    },
    {
        "id": "Bar_05f7ffa840433346",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nNatural Disasters,Local Economy 1,Local Economy 2,Local Economy 3\nEarthquake,120,90,80\nFlood,140,65,100\nHurricane,200,75,130\nTsunami,160,60,90\nWildfire,130,80,85\nVolcano,180,95,115\nDrought,110,70,80\nTornado,150,90,120\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\n\nnatural_disasters = df[\"Natural Disasters\"].values\nlocal_economy = {\n    \"Local Economy 1\": df[\"Local Economy 1\"].values,\n    \"Local Economy 2\": df[\"Local Economy 2\"].values,\n    \"Local Economy 3\": df[\"Local Economy 3\"].values\n}\n\nwidth = 0.2\n\nfig, ax = plt.subplots()\n\n# Create an array with the position of each bar along the x-axis\nx = np.arange(len(natural_disasters))\n\nfor i, (economy, values) in enumerate(local_economy.items()):\n    ax.bar(x - width/2 + i*width, values, width, label=economy, edgecolor='black')\n\n# Add title, labels and legend\nax.set_title(\"Impact of Natural Disasters on Local Economy\")\nax.set_xlabel(\"Natural Disasters\")\nax.set_ylabel(\"Economic Impact\")\nax.set_xticks(x)\nax.set_xticklabels(natural_disasters)\nax.legend(loc=\"upper right\")\n\n# Add grids on the background\nax.grid(True)\n\n# Set the face color to a light color\nax.set_facecolor('lightgray')\n\n# Save chart as a png file\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Hide the bars that share the same legend with the bar that contains the center point of the bounding box so they are not visible.",
        "Input_image": "./test_dataset/Bar/Bar_05f7ffa840433346/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nNatural Disasters,Local Economy 1,Local Economy 2,Local Economy 3\nEarthquake,120,90,80\nFlood,140,65,100\nHurricane,200,75,130\nTsunami,160,60,90\nWildfire,130,80,85\nVolcano,180,95,115\nDrought,110,70,80\nTornado,150,90,120\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\n\nnatural_disasters = df[\"Natural Disasters\"].values\nlocal_economy = {\n    \"Local Economy 1\": df[\"Local Economy 1\"].values,\n    \"Local Economy 2\": df[\"Local Economy 2\"].values,\n    \"Local Economy 3\": df[\"Local Economy 3\"].values\n}\n\nwidth = 0.2\n\nfig, ax = plt.subplots()\n\n# Create an array with the position of each bar along the x-axis\nx = np.arange(len(natural_disasters))\n\nfor i, (economy, values) in enumerate(local_economy.items()):\n    bars = ax.bar(x - width/2 + i*width, values, width, label=economy, edgecolor='black')\n    if i == 1:  # Assuming 'Local Economy 2' is the target\n        for bar in bars:\n            bar.set_visible(False)\n\n# Add title, labels and legend\nax.set_title(\"Impact of Natural Disasters on Local Economy\")\nax.set_xlabel(\"Natural Disasters\")\nax.set_ylabel(\"Economic Impact\")\nax.set_xticks(x)\nax.set_xticklabels(natural_disasters)\nax.legend(loc=\"upper right\")\n\n# Add grids on the background\nax.grid(True)\n\n# Set the face color to a light color\nax.set_facecolor('lightgray')\n\n# Save chart as a png file\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_05f7ffa840433346/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_05f7ffa840433346/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_05f7ffa840433346/myplot.png"
    },
    {
        "id": "Bar_768797c95cb933e9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The given data\ndata = [\n    (\"2000\", 2000, 1550),\n    (\"2001\", 2100, 1600),\n    (\"2002\", 2200, 1650),\n    (\"2003\", 2300, 1700),\n    (\"2004\", 2100, 1750),\n    (\"2005\", 2600, 1800),\n    (\"2006\", 2400, 1850),\n    (\"2007\", 2500, 2100),\n    (\"2008\", 2200, 2500),\n]\n\nyears, industrial_emissions, transportation_emissions = zip(*data)\n\ny = np.arange(len(years))  # the label locations\nheight = 0.3  # the height of the bars\n\nfig, ax = plt.subplots()\n\nrects1 = ax.barh(y + height/2, industrial_emissions, height, label='Industrial Emissions', color='skyblue', edgecolor='blue')\nrects2 = ax.barh(y - height/2, transportation_emissions, height, label='Transportation Emissions', color='lightgreen', edgecolor='green')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Emissions (kt)')\nax.set_title('Industrial and Transportation Emissions (2000-2008)')\nax.set_yticks(y)\nax.set_yticklabels(years)\nax.legend(loc='upper right', ncol=1)\nax.grid(visible=True)\nax.set_facecolor('lightgray')\n\n# Annotate the bar chart with data values.\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\n# Invert the y-axis so the years read top-to-bottom\nax.invert_yaxis()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow effect to the bars that share the same legend with the bar that contains the center point of the bounding box, using a gray color and an offset of (3.77, 3.97). Also, make sure that these bars are rasterized by setting their rasterized state to True.",
        "Input_image": "./test_dataset/Bar/Bar_768797c95cb933e9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# The given data\ndata = [\n    (\"2000\", 2000, 1550),\n    (\"2001\", 2100, 1600),\n    (\"2002\", 2200, 1650),\n    (\"2003\", 2300, 1700),\n    (\"2004\", 2100, 1750),\n    (\"2005\", 2600, 1800),\n    (\"2006\", 2400, 1850),\n    (\"2007\", 2500, 2100),\n    (\"2008\", 2200, 2500),\n]\n\nyears, industrial_emissions, transportation_emissions = zip(*data)\n\ny = np.arange(len(years))  # the label locations\nheight = 0.3  # the height of the bars\n\nfig, ax = plt.subplots()\n\nrects1 = ax.barh(y + height/2, industrial_emissions, height, label='Industrial Emissions', color='skyblue', edgecolor='blue')\nrects2 = ax.barh(y - height/2, transportation_emissions, height, label='Transportation Emissions', color='lightgreen', edgecolor='green')\nfor idx, bar in enumerate(rects2):\n        bar.set_path_effects([SimplePatchShadow(offset=(3.77,3.97), shadow_rgbFace='gray'), Normal()])\n        bar.set_rasterized(True)\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Emissions (kt)')\nax.set_title('Industrial and Transportation Emissions (2000-2008)')\nax.set_yticks(y)\nax.set_yticklabels(years)\nax.legend(loc='upper right', ncol=1)\nax.grid(visible=True)\nax.set_facecolor('lightgray')\n\n# Annotate the bar chart with data values.\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\n# Invert the y-axis so the years read top-to-bottom\nax.invert_yaxis()\n\n# Set shadow effect and rasterized state for selected bars\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_768797c95cb933e9/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_768797c95cb933e9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_768797c95cb933e9/myplot.png"
    },
    {
        "id": "Bar_209ef9a599628bb8",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = np.array([2000, 2001, 2002, 2003, 2004, 2005, 2006])\nwealth = np.array([1000, 1500, 2000, 2500, 3000, 1500, 4000])\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Create the bar chart\nbars = ax.bar(years, wealth, color='skyblue', edgecolor='black', tick_label=years)\n\n# Add labels to the bars\nax.bar_label(bars, label_type='center')\n\n# Set the labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Wealth')\nax.set_title('Wealth by Year')\n\n# Add a grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the bars that contain the center point of the bounding box to False. Also, ensure that the visibility of these bars is set to False.",
        "Input_image": "./test_dataset/Bar/Bar_209ef9a599628bb8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = np.array([2000, 2001, 2002, 2003, 2004, 2005, 2006])\nwealth = np.array([1000, 1500, 2000, 2500, 3000, 1500, 4000])\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Create the bar chart\nbars = ax.bar(years, wealth, color='skyblue', edgecolor='black', tick_label=years)\n\n# Add labels to the bars\nax.bar_label(bars, label_type='center')\n\n# Set the labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Wealth')\nax.set_title('Wealth by Year')\n\n# Add a grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Modify the animated state and visibility of the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_animated(False)\n        bar.set_visible(False)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_209ef9a599628bb8/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_209ef9a599628bb8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_209ef9a599628bb8/myplot.png"
    },
    {
        "id": "Bar_28fc99e1edfc61cf",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata_str = '''\"Injury Type\",\"2010\",\"2015\",\"2020\"\n\"Burns\",120,200,180\n\"Fractures\",300,380,250\n\"Sprains\",70,300,310'''\n\n# Read the data using pandas\ndata = pd.read_csv(StringIO(data_str), quotechar='\"')\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(data['Injury Type'], data['2010'], color='skyblue', edgecolor='black', label='2010')\nax.bar(data['Injury Type'], data['2015'], bottom=data['2010'], color='lightcoral', edgecolor='black', label='2015')\nax.bar(data['Injury Type'], data['2020'], bottom=data['2010']+data['2015'], color='lightgreen', edgecolor='black', label='2020')\n\n# Annotate the data value on the chart with increased font size\nfor bar in bars:\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), str(bar.get_height()), \n             fontsize=12, color='black', ha='center', va='bottom')  # Font size increased from 10 to 12\n\n# Set title, x-label and y-label\nax.set_title('Injury Cases Over Years')\nax.set_xlabel('Injury Type')\nax.set_ylabel('Number of Cases')\n\n# Add grid\nax.grid(True)\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the facecolor of the bars that share the same legend with the bar that contains the center point of the bounding box to #08ee1f.",
        "Input_image": "./test_dataset/Bar/Bar_28fc99e1edfc61cf/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata_str = '''\"Injury Type\",\"2010\",\"2015\",\"2020\"\n\"Burns\",120,200,180\n\"Fractures\",300,380,250\n\"Sprains\",70,300,310'''\n\n# Read the data using pandas\ndata = pd.read_csv(StringIO(data_str), quotechar='\"')\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(data['Injury Type'], data['2010'], color='skyblue', edgecolor='black', label='2010')\nax.bar(data['Injury Type'], data['2015'], bottom=data['2010'], color='lightcoral', edgecolor='black', label='2015')\nax.bar(data['Injury Type'], data['2020'], bottom=data['2010']+data['2015'], color='lightgreen', edgecolor='black', label='2020')\n\n# Annotate the data value on the chart with increased font size\nfor bar in bars:\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), str(bar.get_height()), \n             fontsize=12, color='black', ha='center', va='bottom')  # Font size increased from 10 to 12\nfor idx, bar in enumerate(bars):\n    bar.set_facecolor('#08ee1f')\n# Set title, x-label and y-label\nax.set_title('Injury Cases Over Years')\nax.set_xlabel('Injury Type')\nax.set_ylabel('Number of Cases')\n\n# Add grid\nax.grid(True)\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend(loc='upper right')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Modify the facecolor of the bars corresponding to the Target_object\n\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_28fc99e1edfc61cf/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_28fc99e1edfc61cf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_28fc99e1edfc61cf/myplot.png"
    },
    {
        "id": "Bar_46f222a54e60e869",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# define the data\ndata = StringIO(\"\"\"\nYear,Asia,Europe,Americas\n2000,2300,2900,2700\n2005,2400,2500,2600\n2010,2500,2100,2300\n2015,3000,2200,2400\n2020,2800,2000,2200\n\"\"\")\ndf = pd.read_csv(data, sep=\",\")\n\n# setup the plot\nfig, ax = plt.subplots()\n\n# define the width of the bars\nwidth = 0.2\n\n# create the bars with gradient color scheme\nbars1 = ax.bar(df['Year'], df['Asia'], width, color='yellow', edgecolor='black')\nbars2 = ax.bar(df['Year'] + width, df['Europe'], width, color='purple', edgecolor='black')\nbars3 = ax.bar(df['Year'] + width*2, df['Americas'], width, color='cyan', edgecolor='black')\n\n# add labels to the bars\nax.bar_label(bars1, label_type='center')\nax.bar_label(bars2, label_type='center')\nax.bar_label(bars3, label_type='center')\n\n# set the title and labels\nax.set_title('Population by Year and Continent')\nax.set_xlabel('Year')\nax.set_ylabel('Population (in millions)')\n\n# add a legend\nax.legend(['Asia', 'Europe', 'Americas'], loc='upper left')\n\n# set the grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# layout settings and save the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the bars that share the same legend as those containing the center point of the bounding box to 0.5014.",
        "Input_image": "./test_dataset/Bar/Bar_46f222a54e60e869/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# define the data\ndata = StringIO(\"\"\"\nYear,Asia,Europe,Americas\n2000,2300,2900,2700\n2005,2400,2500,2600\n2010,2500,2100,2300\n2015,3000,2200,2400\n2020,2800,2000,2200\n\"\"\")\ndf = pd.read_csv(data, sep=\",\")\n\n# setup the plot\nfig, ax = plt.subplots()\n\n# define the width of the bars\nwidth = 0.2\n\n# create the bars with gradient color scheme\nbars1 = ax.bar(df['Year'], df['Asia'], width, color='yellow', edgecolor='black')\nbars2 = ax.bar(df['Year'] + width, df['Europe'], width, color='purple', edgecolor='black')\nbars3 = ax.bar(df['Year'] + width*2, df['Americas'], width, color='cyan', edgecolor='black')\n\n# add labels to the bars\nax.bar_label(bars1, label_type='center')\nax.bar_label(bars2, label_type='center')\nax.bar_label(bars3, label_type='center')\n\n# set the title and labels\nax.set_title('Population by Year and Continent')\nax.set_xlabel('Year')\nax.set_ylabel('Population (in millions)')\n\n# add a legend\nax.legend(['Asia', 'Europe', 'Americas'], loc='upper left')\n\n# set the grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Set the transparency of the bars that are corresponding to the Target_object to 0.5014289773465294\nfor bar in plt.gca().containers[1]:\n    bar.set_alpha(0.5014289773465294)\n\n# layout settings and save the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_46f222a54e60e869/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_46f222a54e60e869/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_46f222a54e60e869/figure.png"
    },
    {
        "id": "Bar_a466c6461c3ea210",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The csv data\ncsv_data = \"Age_Group,Online_Shop_Habits\\n18-24,320\\n25-34,520\\n35-44,430\\n45-54,700\\n55-64,750\\n65-74,800\\n75-84,1000\\n85+,1100\\n<unknown>,500\"\ndf = pd.read_csv(StringIO(csv_data))\n\n# Set the figure size and create bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(df['Age_Group'], df['Online_Shop_Habits'], color='skyblue', edgecolor='black')\n\n# Set the title, x-label, and y-label\nax.set_title('Online Shopping Habits by Age Group')\nax.set_xlabel('Age Group')\nax.set_ylabel('Online Shop Habits')\n\n# Add the data value on top of each bar\nax.bar_label(bars, label_type='center')\n\n# Remove grid and set the background color to white\nax.grid(False) # This line removes the grid\nax.set_facecolor('white') # This line changes the background color to white\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill pattern of the bars that contain the center point of the bounding box to '.', and set their edge color to '#339c1c'.",
        "Input_image": "./test_dataset/Bar/Bar_a466c6461c3ea210/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The csv data\ncsv_data = \"Age_Group,Online_Shop_Habits\\n18-24,320\\n25-34,520\\n35-44,430\\n45-54,700\\n55-64,750\\n65-74,800\\n75-84,1000\\n85+,1100\\n<unknown>,500\"\ndf = pd.read_csv(StringIO(csv_data))\n\n# Set the figure size and create bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(df['Age_Group'], df['Online_Shop_Habits'], color='skyblue', edgecolor='black')\n\n# Set the title, x-label, and y-label\nax.set_title('Online Shopping Habits by Age Group')\nax.set_xlabel('Age Group')\nax.set_ylabel('Online Shop Habits')\n\n# Add the data value on top of each bar\nax.bar_label(bars, label_type='center')\n\n# Remove grid and set the background color to white\nax.grid(False) # This line removes the grid\nax.set_facecolor('white') # This line changes the background color to white\n\n# Use 'bar.set_hatch' to set the fill pattern of the bars corresponding to the Target_object to '.', and the edge color to '#339c1c'\ntarget_indices = {1, 3, 5}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_hatch('.')\n        bar.set_edgecolor('#339c1c')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_data_points": "1,3,5",
        "Test_image": "./test_dataset/Bar/Bar_a466c6461c3ea210/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_a466c6461c3ea210/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_a466c6461c3ea210/figure.png"
    },
    {
        "id": "Bar_de46cafa36bf7e79",
        "Input_code": "from io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = \"\"\"Year,EV Sales,EV Charging Stations\n2011,5000,1000\n2012,4500,950\n2013,4000,900\n2014,3500,2300\n2015,7000,2100\n2016,10000,2000\n2017,9500,1800\n2018,9000,2500\n2019,8500,2400\"\"\"\n\n# Read the data into a pandas DataFrame\ndf = pd.read_csv(StringIO(data))\n\nfig, ax = plt.subplots()\n\n# Draw the bars for EV Sales and EV Charging Stations\nbars1 = ax.bar(df['Year'] - 0.2, df['EV Sales'], width=0.4, color='b', align='center', label='EV Sales', edgecolor='black')\nbars2 = ax.bar(df['Year'] + 0.2, df['EV Charging Stations'], width=0.4, color='r', align='center', label='EV Charging Stations', edgecolor='black')\n\n# Annotate the data values on the bars\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\n# Set the x-ticks and labels\nax.set_xticks(df['Year'])\nax.set_xticklabels(df['Year'])\n\n# Set the labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of EV Sales/Charging Stations')\nax.set_title('EV Sales and Charging Stations Over the Years')\n\n# Add the legend\nax.legend()\n\n# Remove the grid and set the background color to white\nax.grid(False)\nax.set_facecolor('white')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow to the bars that share the same legend as those containing the center point of the bounding box, with a shadow offset of (4, 5) units.",
        "Input_image": "./test_dataset/Bar/Bar_de46cafa36bf7e79/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import withSimplePatchShadow\n\n# Given data\ndata = \"\"\"Year,EV Sales,EV Charging Stations\n2011,5000,1000\n2012,4500,950\n2013,4000,900\n2014,3500,2300\n2015,7000,2100\n2016,10000,2000\n2017,9500,1800\n2018,9000,2500\n2019,8500,2400\"\"\"\n\n# Read the data into a pandas DataFrame\ndf = pd.read_csv(StringIO(data))\n\nfig, ax = plt.subplots()\n\n# Draw the bars for EV Sales and EV Charging Stations\nbars1 = ax.bar(df['Year'] - 0.2, df['EV Sales'], width=0.4, color='b', align='center', label='EV Sales', edgecolor='black')\nbars2 = ax.bar(df['Year'] + 0.2, df['EV Charging Stations'], width=0.4, color='r', align='center', label='EV Charging Stations', edgecolor='black')\n\n# Annotate the data values on the bars\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\n# Set the x-ticks and labels\nax.set_xticks(df['Year'])\nax.set_xticklabels(df['Year'])\n\n# Set the labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of EV Sales/Charging Stations')\nax.set_title('EV Sales and Charging Stations Over the Years')\n\n# Add shadow to the bars corresponding to the Target_object\n[bar.set_path_effects([withSimplePatchShadow(offset=(4, 5))]) for bar in plt.gca().containers[0]]\n\n# Add the legend\nax.legend()\n\n# Remove the grid and set the background color to white\nax.grid(False)\nax.set_facecolor('white')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_de46cafa36bf7e79/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_de46cafa36bf7e79/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_de46cafa36bf7e79/figure.png"
    },
    {
        "id": "Bar_9b5ae7b5e3edc75b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    'Malaria': (10000, 12000, 5000),\n    'HIV/AIDS': (20000, 5000, 15000),\n    'Diabetes': (15000, 18000, 8000),\n    'Heart Disease': (12000, 25000, 10000),\n    'Tuberculosis': (5000, 3000, 10000)\n}\n\nyears = [\"2001\", \"2006\", \"2011\"]\ny = np.arange(len(years)) \nheight = 0.15 \nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor disease, values in data.items():\n    offset = height * multiplier\n    bars = ax.barh(y + offset, values, height, label=disease, edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\nax.set_xlabel('Number of Cases')\nax.set_title('Disease cases by year')\nax.set_yticks(y + height * 2)\nax.set_yticklabels(years)\nax.legend(loc='upper right', ncol=1)\nax.invert_yaxis() \nax.grid(False)  # Disable gridlines\nax.set_facecolor('white')  # Change background to white\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the bars that share the same legend as those containing the center point of the bounding box to #9524c0.",
        "Input_image": "./test_dataset/Bar/Bar_9b5ae7b5e3edc75b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    'Malaria': (10000, 12000, 5000),\n    'HIV/AIDS': (20000, 5000, 15000),\n    'Diabetes': (15000, 18000, 8000),\n    'Heart Disease': (12000, 25000, 10000),\n    'Tuberculosis': (5000, 3000, 10000)\n}\n\nyears = [\"2001\", \"2006\", \"2011\"]\ny = np.arange(len(years)) \nheight = 0.15 \nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor disease, values in data.items():\n    offset = height * multiplier\n    bars = ax.barh(y + offset, values, height, label=disease, edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Change the color of the bars that are corresponding to the Target_object to #9524c0\nfor bar in plt.gca().containers[1]:\n    bar.set_color('#9524c0')\n\nax.set_xlabel('Number of Cases')\nax.set_title('Disease cases by year')\nax.set_yticks(y + height * 2)\nax.set_yticklabels(years)\nax.legend(loc='upper right', ncol=1)\nax.invert_yaxis() \nax.grid(False)  # Disable gridlines\nax.set_facecolor('white')  # Change background to white\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_9b5ae7b5e3edc75b/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_9b5ae7b5e3edc75b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_9b5ae7b5e3edc75b/myplot.png"
    },
    {
        "id": "Bar_83e910af55a4c270",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = '''Age_Group,Hours_Weekdays,Hours_Weekends,Hours_Holidays\nUnder_20,30,15,45\n20_to_30,35,20,60\n30_to_40,40,25,55\nAbove_40,20,10,30'''\n\n# Create a pandas DataFrame from the csv data\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars_weekdays = ax.bar(df['Age_Group'], df['Hours_Weekdays'], color='skyblue', edgecolor='black')\nbars_weekends = ax.bar(df['Age_Group'], df['Hours_Weekends'], color='green', edgecolor='black', bottom=df['Hours_Weekdays'])\nbars_holidays = ax.bar(df['Age_Group'], df['Hours_Holidays'], color='red', edgecolor='black', bottom=df['Hours_Weekdays'] + df['Hours_Weekends'])\n\n# Set title, x-label and y-label\nax.set_title('Hours spent by Age Group')\nax.set_xlabel('Age Group')\nax.set_ylabel('Hours')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend([\"Weekdays\", \"Weekends\", \"Holidays\"], loc='upper right')\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars_weekdays, label_type='center')\nax.bar_label(bars_weekends, label_type='center')\nax.bar_label(bars_holidays, label_type='center')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the bars that share the same legend with the bar that contains the center point of the bounding box to 0.43, and change their line color to #dece3a.",
        "Input_image": "./test_dataset/Bar/Bar_83e910af55a4c270/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = '''Age_Group,Hours_Weekdays,Hours_Weekends,Hours_Holidays\nUnder_20,30,15,45\n20_to_30,35,20,60\n30_to_40,40,25,55\nAbove_40,20,10,30'''\n\n# Create a pandas DataFrame from the csv data\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars_weekdays = ax.bar(df['Age_Group'], df['Hours_Weekdays'], color='skyblue', edgecolor='black')\nbars_weekends = ax.bar(df['Age_Group'], df['Hours_Weekends'], color='green', edgecolor='black', bottom=df['Hours_Weekdays'])\nbars_holidays = ax.bar(df['Age_Group'], df['Hours_Holidays'], color='red', edgecolor='black', bottom=df['Hours_Weekdays'] + df['Hours_Weekends'])\n\n# Set title, x-label and y-label\nax.set_title('Hours spent by Age Group')\nax.set_xlabel('Age Group')\nax.set_ylabel('Hours')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n# Modify the transparency and linecolor of the selected bars\nfor bar in bars_weekdays:\n    bar.set_alpha(0.43)\n    bar.set_edgecolor('#dece3a')\n# Add legend\nax.legend([\"Weekdays\", \"Weekends\", \"Holidays\"], loc='upper right')\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars_weekdays, label_type='center')\nax.bar_label(bars_weekends, label_type='center')\nax.bar_label(bars_holidays, label_type='center')\n\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_83e910af55a4c270/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_83e910af55a4c270/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_83e910af55a4c270/myplot.png"
    },
    {
        "id": "Bar_0215914603c27c0a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    \"Year\": np.array([1963, 1969, 1972, 1975, 1979, 1981, 1986, 1990, 1995]),\n    \"Space Technology\": np.array([20, 100, 80, 85, 40, 50, 25, 30, 60]),\n    \"Space Exploration\": np.array([20, 100, 80, 85, 40, 50, 25, 30, 60]),\n}\n\nfig, ax = plt.subplots()\nwidth = 0.35\n\nbars1 = ax.bar(data[\"Year\"] - width/2, data[\"Space Technology\"], width, label='Space Technology', color='b', edgecolor='black')\nbars2 = ax.bar(data[\"Year\"] + width/2, data[\"Space Exploration\"], width, label='Space Exploration', color='g', edgecolor='black')\n\nax.set_title(\"Space Tech and Exploration Over the Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Value\")\nax.legend(loc=\"upper left\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the linestyle of the bars that share the same legend with the bar that contains the center point of the bounding box to 'dashdot'.",
        "Input_image": "./test_dataset/Bar/Bar_0215914603c27c0a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    \"Year\": np.array([1963, 1969, 1972, 1975, 1979, 1981, 1986, 1990, 1995]),\n    \"Space Technology\": np.array([20, 100, 80, 85, 40, 50, 25, 30, 60]),\n    \"Space Exploration\": np.array([20, 100, 80, 85, 40, 50, 25, 30, 60]),\n}\n\nfig, ax = plt.subplots()\nwidth = 0.35\n\nbars1 = ax.bar(data[\"Year\"] - width/2, data[\"Space Technology\"], width, label='Space Technology', color='b', edgecolor='black', linestyle='dashdot')\nbars2 = ax.bar(data[\"Year\"] + width/2, data[\"Space Exploration\"], width, label='Space Exploration', color='g', edgecolor='black')\n\nax.set_title(\"Space Tech and Exploration Over the Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Value\")\nax.legend(loc=\"upper left\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_0215914603c27c0a/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_0215914603c27c0a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_0215914603c27c0a/myplot.png"
    },
    {
        "id": "Bar_5d97f927522575ab",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    'Year': [2016, 2017, 2018, 2019, 2020, 2021],\n    'PC Game Market': [101.63, 99.69, 95.18, 93.12, 98.44, 93.23],\n    'Mobile Game Market': [40.58, 56.07, 70.31, 86.22, 77.24, 92.12],\n    'Console Game Market': [35.51, 33.46, 34.27, 40.28, 51.53, 55.67]\n}\n\nx = np.arange(len(data['Year']))  # the label locations\nwidth = 0.25  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots(layout='constrained')\n\n# Loop over the data dict, skipping the 'Year' key\nfor market, values in {k: v for k, v in data.items() if k != 'Year'}.items():\n    offset = width * multiplier\n    bars = ax.bar(x + offset, values, width, label=market, edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Market Size (in billion $)')\nax.set_title('Game Market Size by Platform and Year')\nax.set_xticks(x + width)\nax.set_xticklabels(data['Year'])\nax.legend(loc='upper left', ncol=3)\nax.set_ylim(0, max(max(data['PC Game Market']), max(data['Mobile Game Market']), max(data['Console Game Market'])) + 10)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the bars that share the same legend with the bar that contains the center point of the bounding box to 0.29.",
        "Input_image": "./test_dataset/Bar/Bar_5d97f927522575ab/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    'Year': [2016, 2017, 2018, 2019, 2020, 2021],\n    'PC Game Market': [101.63, 99.69, 95.18, 93.12, 98.44, 93.23],\n    'Mobile Game Market': [40.58, 56.07, 70.31, 86.22, 77.24, 92.12],\n    'Console Game Market': [35.51, 33.46, 34.27, 40.28, 51.53, 55.67]\n}\n\nx = np.arange(len(data['Year']))  # the label locations\nwidth = 0.25  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots(layout='constrained')\n\n# Loop over the data dict, skipping the 'Year' key\nfor market, values in {k: v for k, v in data.items() if k != 'Year'}.items():\n    offset = width * multiplier\n    bars = ax.bar(x + offset, values, width, label=market, edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\nbars = plt.gca().containers\nfor bar in bars[1]:\n    bar.set_alpha(0.29)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Market Size (in billion $)')\nax.set_title('Game Market Size by Platform and Year')\nax.set_xticks(x + width)\nax.set_xticklabels(data['Year'])\nax.legend(loc='upper left', ncol=3)\nax.set_ylim(0, max(max(data['PC Game Market']), max(data['Mobile Game Market']), max(data['Console Game Market'])) + 10)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_5d97f927522575ab/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_5d97f927522575ab/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_5d97f927522575ab/myplot.png"
    },
    {
        "id": "Bar_e9a410bf4fca1114",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = '''Year,Crime Rate\n2000,5000\n2001,4500\n2002,8000\n2003,3000\n2004,7000\n2005,6000\n2006,2000\n2007,5000'''\n\n# Convert to pandas dataframe\ndf = pd.read_csv(StringIO(data))\nyears = df['Year'].values\ncrime_rate = df['Crime Rate'].values\n\nfig, ax = plt.subplots()\n\n# Plotting bar chart with updated colors\nbars = ax.bar(years, crime_rate, align='center', color='green', edgecolor='red')  # Changed colors here\n\n# Adding bar labels\nax.bar_label(bars)\n\n# Setting yticks\nax.set_yticks(np.arange(min(crime_rate), max(crime_rate), step=1000))\n\n# Setting title and labels\nax.set_title('Yearly Crime Rate')\nax.set_xlabel('Year')\nax.set_ylabel('Crime Rate')\n\n# Setting grid and facecolor\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the bars that contain the center point of the bounding box to #841e12.",
        "Input_image": "./test_dataset/Bar/Bar_e9a410bf4fca1114/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = '''Year,Crime Rate\n2000,5000\n2001,4500\n2002,8000\n2003,3000\n2004,7000\n2005,6000\n2006,2000\n2007,5000'''\n\n# Convert to pandas dataframe\ndf = pd.read_csv(StringIO(data))\nyears = df['Year'].values\ncrime_rate = df['Crime Rate'].values\n\nfig, ax = plt.subplots()\n\n# Plotting bar chart with updated colors\nbars = ax.bar(years, crime_rate, align='center', color='green', edgecolor='red')  # Changed colors here\n\n# Adding bar labels\nax.bar_label(bars)\n\n# Setting yticks\nax.set_yticks(np.arange(min(crime_rate), max(crime_rate), step=1000))\n\n# Setting title and labels\nax.set_title('Yearly Crime Rate')\nax.set_xlabel('Year')\nax.set_ylabel('Crime Rate')\n\n# Setting grid and facecolor\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Change the color of the bars that are corresponding to the Target_object to #841e12\ntarget_indices = {0, 2, 4, 6}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_color('#841e12')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_data_points": "0,2,4,6",
        "Test_image": "./test_dataset/Bar/Bar_e9a410bf4fca1114/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_e9a410bf4fca1114/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_e9a410bf4fca1114/figure.png"
    },
    {
        "id": "Bar_175d509556894947",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata = \"\"\"\nDiet,2000,2010,2020\nVegetarian,20,50,40\nVegan,5,30,60\nKeto,0,20,50\nPaleo,10,60,30\nMediterranean,30,40,70\nLow Carb,60,30,45\nHigh Protein,40,30,60\nIntermittent Fasting,0,5,40\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\ndiets = df['Diet'].values\ndata_2000 = df['2000'].values\ndata_2010 = df['2010'].values\ndata_2020 = df['2020'].values\n\nwidth = 0.2\n\nfig, ax = plt.subplots()\nbars1 = ax.bar(np.arange(len(diets)) - width, data_2000, width, label='2000', color=np.random.rand(3,), edgecolor='black')\nbars2 = ax.bar(np.arange(len(diets)), data_2010, width, label='2010', color=np.random.rand(3,), edgecolor='black')\nbars3 = ax.bar(np.arange(len(diets)) + width, data_2020, width, label='2020', color=np.random.rand(3,), edgecolor='black')\n\nax.set_title('Popular Diets Over The Years')\nax.set_xlabel('Diets')\nax.set_ylabel('Percentage (%)')\nax.set_xticks(np.arange(len(diets)))\nax.set_xticklabels(diets)\nax.legend(loc=\"upper right\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nax.bar_label(bars1, label_type='center')\nax.bar_label(bars2, label_type='center')\nax.bar_label(bars3, label_type='center')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow to the bars that share the same legend as those containing the center point of the bounding box, applying a shadow offset of (1, 1) units.",
        "Input_image": "./test_dataset/Bar/Bar_175d509556894947/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom matplotlib.patheffects import withSimplePatchShadow\n\ndata = \"\"\"\nDiet,2000,2010,2020\nVegetarian,20,50,40\nVegan,5,30,60\nKeto,0,20,50\nPaleo,10,60,30\nMediterranean,30,40,70\nLow Carb,60,30,45\nHigh Protein,40,30,60\nIntermittent Fasting,0,5,40\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\ndiets = df['Diet'].values\ndata_2000 = df['2000'].values\ndata_2010 = df['2010'].values\ndata_2020 = df['2020'].values\n\nwidth = 0.2\n\nfig, ax = plt.subplots()\nbars1 = ax.bar(np.arange(len(diets)) - width, data_2000, width, label='2000', color=np.random.rand(3,), edgecolor='black')\nbars2 = ax.bar(np.arange(len(diets)), data_2010, width, label='2010', color=np.random.rand(3,), edgecolor='black')\nbars3 = ax.bar(np.arange(len(diets)) + width, data_2020, width, label='2020', color=np.random.rand(3,), edgecolor='black')\n\nax.set_title('Popular Diets Over The Years')\nax.set_xlabel('Diets')\nax.set_ylabel('Percentage (%)')\nax.set_xticks(np.arange(len(diets)))\nax.set_xticklabels(diets)\nfor bar in plt.gca().containers[1]:\n    bar.set_path_effects([withSimplePatchShadow(offset=(1, 1))]) \nax.legend(loc=\"upper right\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nax.bar_label(bars1, label_type='center')\nax.bar_label(bars2, label_type='center')\nax.bar_label(bars3, label_type='center')\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_175d509556894947/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_175d509556894947/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_175d509556894947/myplot.png"
    },
    {
        "id": "Bar_16728fa2cd0cb965",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for breed categories and frequencies\nbreeds = [\"Siamese\", \"Persian\", \"Maine Coon\", \"Bengal\", \"Sphynx\"]\nweight_categories = [\"2\", \"4\", \"6\", \"8\", \"10\"]\nfrequencies = np.array([\n    [10, 15, 8, 5, 2],\n    [5, 20, 12, 10, 3],\n    [2, 8, 10, 15, 6],\n    [9, 12, 10, 7, 4],\n    [4, 6, 7, 10, 12]\n])\n\nx = np.arange(len(weight_categories))\nwidth = 0.15\n\nfig, ax = plt.subplots()\nfor i in range(len(breeds)):\n    rects = ax.bar(x - 2*width + i*width, frequencies[i], width, label=breeds[i])\n\nax.set_ylabel('Number of Cats')\nax.set_xlabel('Weight (pounds)')\nax.set_title('Weight Distribution of Cats by Breed')\nax.set_xticks(x)\nax.set_xticklabels(weight_categories)\nax.legend()\n\nfig.tight_layout()\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow below the bars that share the same legend as the one containing the center point of the bounding box, with a shadow offset of (4, 5) units. Also, apply a gradient edge color to these bars, starting with #4edbfd and transitioning to #fa31c3.",
        "Input_image": "./test_dataset/Bar/Bar_16728fa2cd0cb965/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import withSimplePatchShadow\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Data points for breed categories and frequencies\nbreeds = [\"Siamese\", \"Persian\", \"Maine Coon\", \"Bengal\", \"Sphynx\"]\nweight_categories = [\"2\", \"4\", \"6\", \"8\", \"10\"]\nfrequencies = np.array([\n    [10, 15, 8, 5, 2],\n    [5, 20, 12, 10, 3],\n    [2, 8, 10, 15, 6],\n    [9, 12, 10, 7, 4],\n    [4, 6, 7, 10, 12]\n])\n\nx = np.arange(len(weight_categories))\nwidth = 0.15\n\nfig, ax = plt.subplots()\nfor i in range(len(breeds)):\n    ax.bar(x - 2*width + i*width, frequencies[i], width, label=breeds[i])\n\n# Adding shadow and setting edge color for target objects\n\ngradient = LinearSegmentedColormap.from_list(\"gradient\", [\"#4edbfd\", \"#fa31c3\"])\nrects=plt.gca().containers[0]\nfor idx, rect in enumerate(rects):\n    rect.set_path_effects([withSimplePatchShadow(offset=(4, 5))])\n    rect.set_edgecolor(gradient(idx / len(rects)))\n\nax.set_ylabel('Number of Cats')\nax.set_xlabel('Weight (pounds)')\nax.set_title('Weight Distribution of Cats by Breed')\nax.set_xticks(x)\nax.set_xticklabels(weight_categories)\nax.legend()\n\nfig.tight_layout()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_16728fa2cd0cb965/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_16728fa2cd0cb965/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_16728fa2cd0cb965/figure.png"
    },
    {
        "id": "Bar_759e8e123ab832ca",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"\nYear,Arctic Ice Cap,Antarctic Ice Cap\n2000,13.2,28.8\n2001,13.5,29.1\n2002,13.8,29.5\n2003,14.1,30.0\n2004,14.4,30.6\n2005,14.6,31.3\n2006,12.0,32.1\n2007,12.2,33.0\n2008,12.5,33.9\n2009,12.8,34.9\n2010,13.0,35.9\n2011,15.0,36.0\n2012,14.8,35.8\n2013,14.6,35.6\n2014,14.4,35.5\n2015,14.2,35.4\n2016,12.0,35.3\n2017,11.8,35.2\n2018,11.6,35.1\n2019,11.4,35.0\n2020,10.0,40.0\n\"\"\")\n\ndf = pd.read_csv(data)\nx = np.arange(len(df['Year']))  # the label locations\nwidth = 0.3  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(10, 8))\n\nrects1 = ax.bar(x - width/2, df['Arctic Ice Cap'], width, color='blue', edgecolor='black', label='Arctic Ice Cap')\nrects2 = ax.bar(x + width/2, df['Antarctic Ice Cap'], width, color='orange', edgecolor='black', label='Antarctic Ice Cap')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Ice Cap Size (Million Square km)')\nax.set_title('Ice Cap Sizes from 2000 to 2020')\nax.set_xticks(x)\nax.set_xticklabels(df['Year'], rotation=45)\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\n# Setting background color and grid\nax.set_facecolor('gray')\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow to the bars that share the same legend as the ones containing the center point of the bounding box, with an offset of (5, 3) units.",
        "Input_image": "./test_dataset/Bar/Bar_759e8e123ab832ca/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom matplotlib.patheffects import withSimplePatchShadow\n\ndata = StringIO(\"\"\"\nYear,Arctic Ice Cap,Antarctic Ice Cap\n2000,13.2,28.8\n2001,13.5,29.1\n2002,13.8,29.5\n2003,14.1,30.0\n2004,14.4,30.6\n2005,14.6,31.3\n2006,12.0,32.1\n2007,12.2,33.0\n2008,12.5,33.9\n2009,12.8,34.9\n2010,13.0,35.9\n2011,15.0,36.0\n2012,14.8,35.8\n2013,14.6,35.6\n2014,14.4,35.5\n2015,14.2,35.4\n2016,12.0,35.3\n2017,11.8,35.2\n2018,11.6,35.1\n2019,11.4,35.0\n2020,10.0,40.0\n\"\"\")\n\ndf = pd.read_csv(data)\nx = np.arange(len(df['Year']))  # the label locations\nwidth = 0.3  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(10, 8))\n\nrects1 = ax.bar(x - width/2, df['Arctic Ice Cap'], width, color='blue', edgecolor='black', label='Arctic Ice Cap')\nrects2 = ax.bar(x + width/2, df['Antarctic Ice Cap'], width, color='orange', edgecolor='black', label='Antarctic Ice Cap')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Ice Cap Size (Million Square km)')\nax.set_title('Ice Cap Sizes from 2000 to 2020')\nax.set_xticks(x)\nax.set_xticklabels(df['Year'], rotation=45)\n\n# Add shadow to the bars that are corresponding to the Target_object with offset of (5, 3)\nfor bar in plt.gca().containers[1]:\n    bar.set_path_effects([withSimplePatchShadow(offset=(5, 3))])\n\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\n# Setting background color and grid\nax.set_facecolor('gray')\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_759e8e123ab832ca/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_759e8e123ab832ca/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_759e8e123ab832ca/figure.png"
    },
    {
        "id": "Bar_50f21cb3aefc1e21",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"Genre,2000,2010,2020\nRock,100,85,70\nPop,80,90,60\nJazz,50,75,80\nCountry,70,65,90\nClassical,60,45,65\"\"\")\n\n# Load the data into a DataFrame\ndf = pd.read_csv(data)\n\n# Define the genres and the years\ngenres = df['Genre']\nyears = df.columns[1:]\n\n# Define the Figure and Axes objects\nfig, ax = plt.subplots()\n\n# Define the bottom for the stacked bar chart\nbottom = np.zeros(len(genres))\n\n# Plot each year's data\nfor year in years:\n    values = df[year]\n    bars = ax.bar(genres, values, label=year, bottom=bottom, color=np.random.rand(3,), edgecolor='black')\n    ax.bar_label(bars, label_type='center')\n    bottom += values\n\n# Add the title and labels\nax.set_title('Music Genre Popularity Over Time')\nax.set_xlabel('Genre')\nax.set_ylabel('Popularity')\n\n# Add a legend\nax.legend(loc=\"upper right\")\n\n# Add a grid\nax.grid(True)\n\n# Set the background color to white\nax.set_facecolor('white')  # This line was modified\n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the linewidth of the bars that share the same legend with the bar that contains the center point of the bounding box to 3.65. Also, enable the picker state for these bars to True.",
        "Input_image": "./test_dataset/Bar/Bar_50f21cb3aefc1e21/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"Genre,2000,2010,2020\nRock,100,85,70\nPop,80,90,60\nJazz,50,75,80\nCountry,70,65,90\nClassical,60,45,65\"\"\")\n\n# Load the data into a DataFrame\ndf = pd.read_csv(data)\n\n# Define the genres and the years\ngenres = df['Genre']\nyears = df.columns[1:]\n\n# Define the Figure and Axes objects\nfig, ax = plt.subplots()\n\n# Define the bottom for the stacked bar chart\nbottom = np.zeros(len(genres))\n\n# Plot each year's data\nfor year in years:\n    values = df[year]\n    bars = ax.bar(genres, values, label=year, bottom=bottom, color=np.random.rand(3,), edgecolor='black')\n    ax.bar_label(bars, label_type='center')\n    bottom += values\n\n# Modify the linewidth and picker state for the selected bars\nfor bar in bars:\n    bar.set_linewidth(3.65)\n    bar.set_picker(True)\n\n# Add the title and labels\nax.set_title('Music Genre Popularity Over Time')\nax.set_xlabel('Genre')\nax.set_ylabel('Popularity')\n\n# Add a legend\nax.legend(loc=\"upper right\")\n\n# Add a grid\nax.grid(True)\n\n# Set the background color to white\nax.set_facecolor('white')\n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "2",
        "Test_image": "./test_dataset/Bar/Bar_50f21cb3aefc1e21/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_50f21cb3aefc1e21/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_50f21cb3aefc1e21/myplot.png"
    },
    {
        "id": "Bar_22194410a8b2f24b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Year': [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],\n        'Organic Crops': [1000, 1150, 1300, 1450, 1600, 1800, 2000, 2200],\n        'Organic Livestock': [300, 500, 700, 400, 1100, 1500, 1600, 1400],\n        'Organic Aquaculture': [100, 80, 60, 140, 160, 120, 100, 130]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plotting the data\nbars1 = ax.bar(df['Year'] - 0.2, df['Organic Crops'], width=0.2, color='b', align='center', label='Organic Crops')\nbars2 = ax.bar(df['Year'], df['Organic Livestock'], width=0.2, color='r', align='center', label='Organic Livestock')\nbars3 = ax.bar(df['Year'] + 0.2, df['Organic Aquaculture'], width=0.2, color='g', align='center', label='Organic Aquaculture')\n\n# Annotating the data value on the bar\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\n# Adding labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Production')\nax.set_title('Organic Production Over Years')\n\n# Adding legend\nax.legend()\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the fill pattern of the bars that share the same legend as those containing the center point of the bounding box to '-', and change their edge color to '#2c87ad'.",
        "Input_image": "./test_dataset/Bar/Bar_22194410a8b2f24b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Year': [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],\n        'Organic Crops': [1000, 1150, 1300, 1450, 1600, 1800, 2000, 2200],\n        'Organic Livestock': [300, 500, 700, 400, 1100, 1500, 1600, 1400],\n        'Organic Aquaculture': [100, 80, 60, 140, 160, 120, 100, 130]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plotting the data\nbars1 = ax.bar(df['Year'] - 0.2, df['Organic Crops'], width=0.2, color='b', align='center', label='Organic Crops')\nbars2 = ax.bar(df['Year'], df['Organic Livestock'], width=0.2, color='r', align='center', label='Organic Livestock')\nbars3 = ax.bar(df['Year'] + 0.2, df['Organic Aquaculture'], width=0.2, color='g', align='center', label='Organic Aquaculture')\n\n# Annotating the data value on the bar\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n# Use 'bar.set_hatch' to set the fill pattern of the bars corresponding to the Target_object to '-', and the edge color to '#2c87ad'\nfor bar in plt.gca().containers[1]:\n    bar.set_hatch('-')\n    bar.set_edgecolor('#2c87ad')\n# Adding labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Production')\nax.set_title('Organic Production Over Years')\n\n# Adding legend\nax.legend()\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_22194410a8b2f24b/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_22194410a8b2f24b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_22194410a8b2f24b/myplot.png"
    },
    {
        "id": "Bar_5567faa98d9b324c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# given csv data\ndata = StringIO(\"\"\"\nHousehold Type,Food Waste (2019),Food Waste (2020)\nSingle Person Household,450,550\nTwo-Person Household,1000,1100\nThree-Person Household,700,800\nFour-Person Household,800,600\nFive-Person Household,500,700\nSix or More Person Household,1100,1300\nAverage Household,720,790\n\"\"\")\n\n# convert csv data to pandas dataframe\ndf = pd.read_csv(data)\n\n# Set the household types as the x-axis labels\nhouseholds = df[\"Household Type\"].values\n\n# Set the food waste data for each year\nfood_waste_2019 = df[\"Food Waste (2019)\"].values\nfood_waste_2020 = df[\"Food Waste (2020)\"].values\n\n# width of the bars\nwidth = 0.35\n\n# plot the bar chart\nfig, ax = plt.subplots()\n\n# create bars for 2019 and 2020 data\nbars1 = ax.bar(np.arange(len(households)) - width/2, food_waste_2019, width, label='2019', color='skyblue', edgecolor='black')\nbars2 = ax.bar(np.arange(len(households)) + width/2, food_waste_2020, width, label='2020', color='lightgreen', edgecolor='black')\n\n# Add title, labels and legend\nax.set_title(\"Food Waste by Household Type in 2019 and 2020\")\nax.set_xlabel(\"Household Type\")\nax.set_ylabel(\"Food Waste (kg)\")\nax.set_xticks(np.arange(len(households)))\nax.set_xticklabels(households)\nax.legend(loc=\"upper right\")\n\n# Annotate the data value on the chart figure\nax.bar_label(bars1)\nax.bar_label(bars2)\n\n# Add grids on the background\nax.grid(True)\n\n# Set the face color to a light color\nax.set_facecolor('lightgray')\n\n# Save chart as a png file\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the bars that share the same legend as those containing the center point of the bounding box to 0.441.",
        "Input_image": "./test_dataset/Bar/Bar_5567faa98d9b324c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# given csv data\ndata = StringIO(\"\"\"\nHousehold Type,Food Waste (2019),Food Waste (2020)\nSingle Person Household,450,550\nTwo-Person Household,1000,1100\nThree-Person Household,700,800\nFour-Person Household,800,600\nFive-Person Household,500,700\nSix or More Person Household,1100,1300\nAverage Household,720,790\n\"\"\")\n\n# convert csv data to pandas dataframe\ndf = pd.read_csv(data)\n\n# Set the household types as the x-axis labels\nhouseholds = df[\"Household Type\"].values\n\n# Set the food waste data for each year\nfood_waste_2019 = df[\"Food Waste (2019)\"].values\nfood_waste_2020 = df[\"Food Waste (2020)\"].values\n\n# width of the bars\nwidth = 0.35\n\n# plot the bar chart\nfig, ax = plt.subplots()\n\n# create bars for 2019 and 2020 data\nbars1 = ax.bar(np.arange(len(households)) - width/2, food_waste_2019, width, label='2019', color='skyblue', edgecolor='black')\nbars2 = ax.bar(np.arange(len(households)) + width/2, food_waste_2020, width, label='2020', color='lightgreen', edgecolor='black')\n\n# Set the transparency of the bars that are corresponding to the Target_object to 0.44119556961547\nfor bar in plt.gca().containers[1]:\n    bar.set_alpha(0.44119556961547)\n\n# Add title, labels and legend\nax.set_title(\"Food Waste by Household Type in 2019 and 2020\")\nax.set_xlabel(\"Household Type\")\nax.set_ylabel(\"Food Waste (kg)\")\nax.set_xticks(np.arange(len(households)))\nax.set_xticklabels(households)\nax.legend(loc=\"upper right\")\n\n# Annotate the data value on the chart figure\nax.bar_label(bars1)\nax.bar_label(bars2)\n\n# Add grids on the background\nax.grid(True)\n\n# Set the face color to a light color\nax.set_facecolor('lightgray')\n\n# Save chart as a png file\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_5567faa98d9b324c/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_5567faa98d9b324c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_5567faa98d9b324c/figure.png"
    },
    {
        "id": "Bar_a498e3ef21833b17",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Create dataframe from given data\ndata = {'Retail Sector': ['Clothing', 'Electronics', 'Groceries', 'Furniture', 'Cosmetics'],\n        'Q1': [100, 150, 200, 120, 90],\n        'Q2': [80, 70, 180, 110, 60],\n        'Q3': [90, 160, 210, 105, 55],\n        'Q4': [70, 140, 220, 130, 80]}\ndf = pd.DataFrame(data)\n\n# Set variables for chart\nquarters = df.columns[1:]\nsectors = df['Retail Sector']\nbar_width = 0.15\nbar_positions = np.arange(len(quarters))\n\n# Create chart\nfig, ax = plt.subplots()\n\nfor i, sector in enumerate(sectors):\n    ax.bar(bar_positions - bar_width/2 + i*bar_width, df.loc[i, quarters], bar_width, label=sector, edgecolor='black')\n\n# Add labels, title, and legend\nax.set_xlabel('Quarters')\nax.set_ylabel('Sales')\nax.set_title('Sales by Retail Sector per Quarter')\nax.set_xticks(bar_positions)\nax.set_xticklabels(quarters)\nax.legend(loc='upper left', ncol=1)\n\n# Remove grid and set background color to white\nax.grid(False) # This line removes the gridlines\nax.set_facecolor('white') # This line changes the background color to white\n\n# Annotate the data value on the chart\nfor rect in ax.containers:\n    ax.bar_label(rect)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply a shadow effect to the bars that share the same legend with the bar that contains the center point of the bounding box, using a shadow offset of (2.38, 2.56) units and a gold color. Also, set the transparency of these bars to 0.46.",
        "Input_image": "./test_dataset/Bar/Bar_a498e3ef21833b17/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Create dataframe from given data\ndata = {'Retail Sector': ['Clothing', 'Electronics', 'Groceries', 'Furniture', 'Cosmetics'],\n        'Q1': [100, 150, 200, 120, 90],\n        'Q2': [80, 70, 180, 110, 60],\n        'Q3': [90, 160, 210, 105, 55],\n        'Q4': [70, 140, 220, 130, 80]}\ndf = pd.DataFrame(data)\n\n# Set variables for chart\nquarters = df.columns[1:]\nsectors = df['Retail Sector']\nbar_width = 0.15\nbar_positions = np.arange(len(quarters))\n\n# Create chart\nfig, ax = plt.subplots()\n\nfor i, sector in enumerate(sectors):\n    bars = ax.bar(bar_positions - bar_width/2 + i*bar_width, df.loc[i, quarters], bar_width, label=sector, edgecolor='black')\n    if i in [0, 2]:\n        for bar in bars:\n            bar.set_alpha(0.46)\n            bar.set_path_effects([SimplePatchShadow(offset=(2.38,2.56), shadow_rgbFace='gold'), Normal()])\n\n# Add labels, title, and legend\nax.set_xlabel('Quarters')\nax.set_ylabel('Sales')\nax.set_title('Sales by Retail Sector per Quarter')\nax.set_xticks(bar_positions)\nax.set_xticklabels(quarters)\nax.legend(loc='upper left', ncol=1)\n\n# Remove grid and set background color to white\nax.grid(False) # This line removes the gridlines\nax.set_facecolor('white') # This line changes the background color to white\n\n# Annotate the data value on the chart\nfor rect in ax.containers:\n    ax.bar_label(rect)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0,2",
        "Test_image": "./test_dataset/Bar/Bar_a498e3ef21833b17/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_a498e3ef21833b17/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_a498e3ef21833b17/myplot.png"
    },
    {
        "id": "Bar_27e12c348ca9549e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndecades = ('1920', '1930', '1940', '1950', '1960', '1970', '1980', '1990', '2000', '2010')\ntrends = {\n    'Flapper Dresses': np.array([10, 5, 3, 4, 3, 6, 8, 4, 12, 16]),\n    'Platform Shoes': np.array([1, 2, 8, 18, 15, 22, 12, 7, 10, 5]),\n    'Leather Jackets': np.array([3, 4, 12, 9, 14, 18, 20, 22, 19, 15]),\n}\nwidth = 0.3  # Width of the bars\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Variables to store the bar positions and the bars\nbar_positions = np.arange(len(decades))\nbars = []\n\n# Loop through the trends and create the bars\nfor i, (trend, counts) in enumerate(trends.items()):\n    # Positions of the bars\n    positions = bar_positions + i * width\n\n    # Create the bars\n    p = ax.bar(positions, counts, width, label=trend, color=['gray', 'blue', 'green'][i])\n\n    # Store the bars\n    bars.append(p)\n\n# Set the title, labels, and legend\nax.set_title('Trends by Decade')\nax.set_xlabel('Decade')\nax.set_ylabel('Count')\nax.legend()\n\n# Add labels to each bar\nfor bar in bars:\n    ax.bar_label(bar, label_type='center')\n\n# Add a grid and change the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Change the x-axis ticks\nax.set_xticks(bar_positions + width)\nax.set_xticklabels(decades)\n\n# Add a tight layout and save the figure\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the line color of the bars that share the same legend with the bar that contains the center point of the bounding box to #412995.",
        "Input_image": "./test_dataset/Bar/Bar_27e12c348ca9549e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndecades = ('1920', '1930', '1940', '1950', '1960', '1970', '1980', '1990', '2000', '2010')\ntrends = {\n    'Flapper Dresses': np.array([10, 5, 3, 4, 3, 6, 8, 4, 12, 16]),\n    'Platform Shoes': np.array([1, 2, 8, 18, 15, 22, 12, 7, 10, 5]),\n    'Leather Jackets': np.array([3, 4, 12, 9, 14, 18, 20, 22, 19, 15]),\n}\nwidth = 0.3  # Width of the bars\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Variables to store the bar positions and the bars\nbar_positions = np.arange(len(decades))\nbars = []\n\n# Loop through the trends and create the bars\nfor i, (trend, counts) in enumerate(trends.items()):\n    # Positions of the bars\n    positions = bar_positions + i * width\n\n    # Create the bars\n    p = ax.bar(positions, counts, width, label=trend, color=['gray', 'blue', 'green'][i])\n\n    # Store the bars\n    bars.append(p)\nfor idx, bar_contanier in enumerate(bars):\n    if idx in [2]:\n        for bar in bar_contanier:\n            bar.set_edgecolor('#412995')\n           \n# Set the title, labels, and legend\nax.set_title('Trends by Decade')\nax.set_xlabel('Decade')\nax.set_ylabel('Count')\nax.legend()\n\n# Add labels to each bar\nfor bar in bars:\n    ax.bar_label(bar, label_type='center')\n\n# Add a grid and change the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Change the x-axis ticks\nax.set_xticks(bar_positions + width)\nax.set_xticklabels(decades)\n\n\n# Add a tight layout and save the figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_legend": "2,5",
        "Test_image": "./test_dataset/Bar/Bar_27e12c348ca9549e/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_27e12c348ca9549e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_27e12c348ca9549e/myplot.png"
    },
    {
        "id": "Bar_314f88a42fbd326c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nservices = [\"Online Shopping\", \"Food Delivery\", \"Video Streaming\", \"Online Gaming\"]\nusage_values = {\n    \"Online Shopping\": np.array([250, 275, 310, 350, 415, 420, 430, 500, 510, 300, 350, 375]),\n    \"Food Delivery\": np.array([100, 120, 150, 140, 130, 120, 110, 90, 80, 70, 60, 50]),\n    \"Video Streaming\": np.array([200, 400, 600, 800, 1000, 1200, 800, 400, 200, 100, 50, 25]),\n    \"Online Gaming\": np.array([50, 100, 150, 200, 250, 300, 350, 100, 50, 0, 0, 0])\n}\nmonths = np.arange(1, 13)\nwidth = 0.2\n\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = []\n\nfor index, (service, usage) in enumerate(usage_values.items()):\n    bar = ax.bar(months + index * width, usage, width, label=service)\n    bars.append(bar)\n\nax.set_xlabel(\"Months\")\nax.set_ylabel(\"Usage\")\nax.set_title(\"Usage of Different Services over Months\")\nax.set_xticks(months + width / 2)\nax.set_xticklabels(months)\nax.legend()\n\nfor bar in bars:\n    ax.bar_label(bar)\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill pattern of the bars that share the same legend as those containing the center point of the bounding box to a dot ('.'), and set their edge color to '#d24394'.",
        "Input_image": "./test_dataset/Bar/Bar_314f88a42fbd326c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nservices = [\"Online Shopping\", \"Food Delivery\", \"Video Streaming\", \"Online Gaming\"]\nusage_values = {\n    \"Online Shopping\": np.array([250, 275, 310, 350, 415, 420, 430, 500, 510, 300, 350, 375]),\n    \"Food Delivery\": np.array([100, 120, 150, 140, 130, 120, 110, 90, 80, 70, 60, 50]),\n    \"Video Streaming\": np.array([200, 400, 600, 800, 1000, 1200, 800, 400, 200, 100, 50, 25]),\n    \"Online Gaming\": np.array([50, 100, 150, 200, 250, 300, 350, 100, 50, 0, 0, 0])\n}\nmonths = np.arange(1, 13)\nwidth = 0.2\n\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = []\n\nfor index, (service, usage) in enumerate(usage_values.items()):\n    bar = ax.bar(months + index * width, usage, width, label=service)\n    bars.append(bar)\n\nax.set_xlabel(\"Months\")\nax.set_ylabel(\"Usage\")\nax.set_title(\"Usage of Different Services over Months\")\nax.set_xticks(months + width / 2)\nax.set_xticklabels(months)\n\nfor bar in plt.gca().containers[1]:\n    bar.set_hatch('.')\n    bar.set_edgecolor('#d24394')\n\nax.legend()\n\nfor bar in bars:\n    ax.bar_label(bar)\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_314f88a42fbd326c/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_314f88a42fbd326c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_314f88a42fbd326c/myplot.png"
    },
    {
        "id": "Bar_c639eddc2c19ab06",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = {\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Mobile Gaming': [35.6, 46.1, 56.7, 68.5, 77.2],\n    'Console Gaming': [29.4, 30.1, 34.7, 35.7, 47.9],\n    'PC Gaming': [36.9, 32.3, 28.1, 25.3, 33.6],\n}\n\ndf = pd.DataFrame(data)\n\nyears = df['Year']\n\n# Define width of the bars\nwidth = 0.25\n\nfig, ax = plt.subplots()\n\n# Plot bars for each gaming type\nrects1 = ax.bar(years - width, df['Mobile Gaming'], width, label='Mobile Gaming',\n                edgecolor='black', color='cyan', tick_label=years)\nrects2 = ax.bar(years, df['Console Gaming'], width, label='Console Gaming',\n                edgecolor='black', color='magenta', tick_label=years)\nrects3 = ax.bar(years + width, df['PC Gaming'], width, label='PC Gaming',\n                edgecolor='black', color='yellow', tick_label=years)\n\n# Adding labels to the bars\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\nax.bar_label(rects3, padding=3)\n\n# Add some text for labels, title\nax.set_xlabel('Year')\nax.set_ylabel('Gaming Type Percentage')\nax.set_title('Gaming Type Percentage by Year')\n\n# Adding legends and grid\nax.legend()\nax.grid(True)\n\n# Set background color to light blue\nax.set_facecolor('#ADD8E6')  # Light blue color\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the bars that share the same legend with the bar that contains the center point of the bounding box to 0.22, and ensure that the snap state for these bars is set to True.",
        "Input_image": "./test_dataset/Bar/Bar_c639eddc2c19ab06/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = {\n    'Year': [2016, 2017, 2018, 2019, 2020],\n    'Mobile Gaming': [35.6, 46.1, 56.7, 68.5, 77.2],\n    'Console Gaming': [29.4, 30.1, 34.7, 35.7, 47.9],\n    'PC Gaming': [36.9, 32.3, 28.1, 25.3, 33.6],\n}\n\ndf = pd.DataFrame(data)\n\nyears = df['Year']\n\n# Define width of the bars\nwidth = 0.25\n\nfig, ax = plt.subplots()\n\n# Plot bars for each gaming type\nrects1 = ax.bar(years - width, df['Mobile Gaming'], width, label='Mobile Gaming',\n                edgecolor='black', color='cyan', tick_label=years)\nrects2 = ax.bar(years, df['Console Gaming'], width, label='Console Gaming',\n                edgecolor='black', color='magenta', tick_label=years)\nrects3 = ax.bar(years + width, df['PC Gaming'], width, label='PC Gaming',\n                edgecolor='black', color='yellow', tick_label=years)\n\n# Adding labels to the bars\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\nax.bar_label(rects3, padding=3)\n\n# Add some text for labels, title\nax.set_xlabel('Year')\nax.set_ylabel('Gaming Type Percentage')\nax.set_title('Gaming Type Percentage by Year')\n\n# Adding legends and grid\nax.legend()\nax.grid(True)\n\n# Set background color to light blue\nax.set_facecolor('#ADD8E6')  # Light blue color\n\nfor rect in rects1:\n    rect.set_alpha(0.22)\n    rect.set_snap(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_c639eddc2c19ab06/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_c639eddc2c19ab06/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_c639eddc2c19ab06/myplot.png"
    },
    {
        "id": "Bar_6f843e032821db2f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame from the given data\ndata = {\n    \"Days\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n    \"Dow Jones\": [25000, 25200, 25400, 24200, 24400, 24500, 24700],\n    \"NASDAQ\": [7000, 7100, 7200, 6800, 6900, 6950, 7000],\n    \"S&P 500\": [2700, 2750, 2800, 2600, 2650, 2675, 2700],\n}\ndf = pd.DataFrame(data)\n\n# Create a bar chart\nfig, ax = plt.subplots()\n\n# Generate bars for each index\ndow_bars = ax.bar(df.index - 0.2, df[\"Dow Jones\"], width=0.2, color='b', align='center', edgecolor='black', label='Dow Jones')\nnasdaq_bars = ax.bar(df.index, df[\"NASDAQ\"], width=0.2, color='r', align='center', edgecolor='black', label='NASDAQ')\nsp500_bars = ax.bar(df.index + 0.2, df[\"S&P 500\"], width=0.2, color='g', align='center', edgecolor='black', label='S&P 500')\n\n# Set labels, title, and legends\nax.set_xlabel('Days', fontsize=14)\nax.set_ylabel('Index Value', fontsize=14)\nax.set_title('Index Values by Day', fontsize=14)\nax.legend(title='Index', fontsize=14)\n\n# Set the x-ticks to be the days of the week\nax.set_xticks(df.index)\nax.set_xticklabels(df[\"Days\"], fontsize=14)\nax.tick_params(axis='y', labelsize=14)\n\n# Add a grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Add labels to the bars\nax.bar_label(dow_bars, padding=3, fontsize=14)\nax.bar_label(nasdaq_bars, padding=3, fontsize=14)\nax.bar_label(sp500_bars, padding=3, fontsize=14)\n\n# Adjust layout to make room for the labels\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow to the bars that share the same legend as those containing the center point of the bounding box, using a shadow offset of (5, 4) units.",
        "Input_image": "./test_dataset/Bar/Bar_6f843e032821db2f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withSimplePatchShadow\n\n# Create a DataFrame from the given data\ndata = {\n    \"Days\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n    \"Dow Jones\": [25000, 25200, 25400, 24200, 24400, 24500, 24700],\n    \"NASDAQ\": [7000, 7100, 7200, 6800, 6900, 6950, 7000],\n    \"S&P 500\": [2700, 2750, 2800, 2600, 2650, 2675, 2700],\n}\ndf = pd.DataFrame(data)\n\n# Create a bar chart\nfig, ax = plt.subplots()\n\n# Generate bars for each index\ndow_bars = ax.bar(df.index - 0.2, df[\"Dow Jones\"], width=0.2, color='b', align='center', edgecolor='black', label='Dow Jones')\nnasdaq_bars = ax.bar(df.index, df[\"NASDAQ\"], width=0.2, color='r', align='center', edgecolor='black', label='NASDAQ')\nsp500_bars = ax.bar(df.index + 0.2, df[\"S&P 500\"], width=0.2, color='g', align='center', edgecolor='black', label='S&P 500')\n\n# Set labels, title, and legends\nax.set_xlabel('Days', fontsize=14)\nax.set_ylabel('Index Value', fontsize=14)\nax.set_title('Index Values by Day', fontsize=14)\nax.legend(title='Index', fontsize=14)\n\n# Set the x-ticks to be the days of the week\nax.set_xticks(df.index)\nax.set_xticklabels(df[\"Days\"], fontsize=14)\nax.tick_params(axis='y', labelsize=14)\n\n# Add a grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Add labels to the bars\nax.bar_label(dow_bars, padding=3, fontsize=14)\nax.bar_label(nasdaq_bars, padding=3, fontsize=14)\nax.bar_label(sp500_bars, padding=3, fontsize=14)\n\n# Use bar.set_path_effects to add shadow to the bars that are corresponding to the Target_object with offset of (5, 4)\nfor bar in plt.gca().containers[1]:\n    bar.set_path_effects([withSimplePatchShadow(offset=(5, 4))])\n\n# Adjust layout to make room for the labels\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_6f843e032821db2f/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_6f843e032821db2f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_6f843e032821db2f/figure.png"
    },
    {
        "id": "Bar_30082c5cfe63df85",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nsocial_media = (\"Facebook\", \"Snapchat\", \"Instagram\", \"Twitter\", \"LinkedIn\")\nimpact_on_teenagers = (85, 75, 90, 65, 45)\n\ny = np.arange(len(social_media))  # the label locations\nheight = 0.25  # the height of the bars\n\nfig, ax = plt.subplots()\n\n# Creating the bar chart\nbars = ax.barh(y, impact_on_teenagers, height, color='skyblue', edgecolor='blue')\n\n# Adding labels to the bars\nax.bar_label(bars, padding=3)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Impact Level')\nax.set_title('Impact of Social Media on Teenagers')\nax.set_yticks(y)\nax.set_yticklabels(social_media)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlim(0, 100)\n\n# Adding grid and changing the face color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Saving the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the fill pattern of the bars that contain the center point of the bounding box to '-', and change their edge color to '#b571b7'.",
        "Input_image": "./test_dataset/Bar/Bar_30082c5cfe63df85/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nsocial_media = (\"Facebook\", \"Snapchat\", \"Instagram\", \"Twitter\", \"LinkedIn\")\nimpact_on_teenagers = (85, 75, 90, 65, 45)\n\ny = np.arange(len(social_media))  # the label locations\nheight = 0.25  # the height of the bars\n\nfig, ax = plt.subplots()\n\n# Creating the bar chart\nbars = ax.barh(y, impact_on_teenagers, height, color='skyblue', edgecolor='blue')\n\n# Adding labels to the bars\nax.bar_label(bars, padding=3)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Impact Level')\nax.set_title('Impact of Social Media on Teenagers')\nax.set_yticks(y)\nax.set_yticklabels(social_media)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlim(0, 100)\n\n# Adding grid and changing the face color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Use 'bar.set_hatch' to set the fill pattern of the bars corresponding to the Target_object to '-', and the edge color to '#b571b7'\ntarget_indices = {0, 2}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_hatch('-')\n        bar.set_edgecolor('#b571b7')\n\n# Saving the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_data_points": "0,2",
        "Test_image": "./test_dataset/Bar/Bar_30082c5cfe63df85/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_30082c5cfe63df85/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_30082c5cfe63df85/figure.png"
    },
    {
        "id": "Bar_83a62e7cb73ef4f6",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nsegments = np.array([\"Residential\", \"Commercial\", \"Industrial\", \"Agricultural\", \"Luxury\", \"Suburban\"])\nprices = np.array([500000, 700000, 300000, 200000, 800000, 400000])\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nbars = ax.bar(segments, prices, color='skyblue', edgecolor='black')\n\n# Set larger font sizes for the labels and title\nax.set_xlabel('Real Estate Segment', fontsize=14)\nax.set_ylabel('Price', fontsize=14)\nax.set_title('Prices of Different Real Estate Segments', fontsize=16)\n\nax.set_facecolor('lightgray')\nax.grid(True)\n\n# Add data labels\nax.bar_label(bars)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border thickness of the bars that contain the center point of the bounding box to 1.604, and update their color to black.",
        "Input_image": "./test_dataset/Bar/Bar_83a62e7cb73ef4f6/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nsegments = np.array([\"Residential\", \"Commercial\", \"Industrial\", \"Agricultural\", \"Luxury\", \"Suburban\"])\nprices = np.array([500000, 700000, 300000, 200000, 800000, 400000])\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nbars = ax.bar(segments, prices, color='skyblue', edgecolor='black')\n\n# Set larger font sizes for the labels and title\nax.set_xlabel('Real Estate Segment', fontsize=14)\nax.set_ylabel('Price', fontsize=14)\nax.set_title('Prices of Different Real Estate Segments', fontsize=16)\n\nax.set_facecolor('lightgray')\nax.grid(True)\n\n# Add data labels\nax.bar_label(bars)\n\n# Set the border thickness of the bars that are corresponding to the Target_object to 1.604353288030362, and wedge_color to black\ntarget_indices = {0, 2, 4}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_linewidth(1.604353288030362)\n        bar.set_edgecolor('black')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_data_points": "0,2,4",
        "Test_image": "./test_dataset/Bar/Bar_83a62e7cb73ef4f6/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_83a62e7cb73ef4f6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_83a62e7cb73ef4f6/myplot.png"
    },
    {
        "id": "Bar_f4f12bfd376e7ade",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nregion = [\"North America\", \"Europe\", \"Africa\"]\ninternet_users = [[250, 260, 270, 275, 280, 290, 295, 300, 305, 200, 205, 210],\n                  [275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330],\n                  [100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155]]\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = []\nfor i, users in enumerate(internet_users):\n    bar = ax.bar(np.arange(len(users)) + i/len(region), users, \n                 color=['skyblue', 'lightgreen', 'orange'][i], \n                 edgecolor='black', \n                 tick_label=range(1, len(users) + 1))\n    bars.append(bar)\n\n# Set title, x-label and y-label\nax.set_title('Internet Users Over Time')\nax.set_xlabel('Time (in years)')\nax.set_ylabel('Internet Users (in millions)')\n\n# Add grid\nax.grid(True, which ='both')\n\n# Set the background color of the plot to white\nax.set_facecolor('white')  # Modified line\n\n# Add legend\nax.legend(region, loc='upper right')\n\n# Add labels to each bar\nfor bar in bars:\n    ax.bar_label(bar)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the linestyle of the bars that share the same legend with the bar that contains the center point of the bounding box to 'dotted', and update their line color to #3f9ef2 as well.",
        "Input_image": "./test_dataset/Bar/Bar_f4f12bfd376e7ade/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nregion = [\"North America\", \"Europe\", \"Africa\"]\ninternet_users = [[250, 260, 270, 275, 280, 290, 295, 300, 305, 200, 205, 210],\n                  [275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330],\n                  [100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155]]\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = []\nfor i, users in enumerate(internet_users):\n    bar = ax.bar(np.arange(len(users)) + i/len(region), users, \n                 color=['skyblue', 'lightgreen', 'orange'][i], \n                 edgecolor='black', \n                 tick_label=range(1, len(users) + 1))\n    bars.append(bar)\n\n# Set title, x-label and y-label\nax.set_title('Internet Users Over Time')\nax.set_xlabel('Time (in years)')\nax.set_ylabel('Internet Users (in millions)')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot to white\nax.set_facecolor('white')  # Modified line\n\n# Add legend\nax.legend(region, loc='upper right')\n\n# Add labels to each bar\nfor bar in bars:\n    ax.bar_label(bar)\n\n# Modify the linestyle and linecolor of the bars corresponding to the Target_object\nfor idx, bar in enumerate(bars[1]):\n    bar.set_linestyle('dotted')\n    bar.set_edgecolor('#3f9ef2')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_f4f12bfd376e7ade/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_f4f12bfd376e7ade/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_f4f12bfd376e7ade/myplot.png"
    },
    {
        "id": "Bar_ae626b63e40c9a41",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# given data\ndata = \"\"\"Demographics,Recycling Habits\nTeenagers,60\nYoung Adults,75\nMiddle-aged Adults,90\nElderly,50\nTeenagers,100\nYoung Adults,45\nMiddle-aged Adults,70\nElderly,30\"\"\"\n\n# convert data to pandas dataframe\ndf = pd.read_csv(StringIO(data))\n\n# calculate average recycling habits for each demographic\ndf = df.groupby(\"Demographics\").mean().reset_index()\n\n# set demographics and recycling habits\ndemographics = df[\"Demographics\"].tolist()\nrecycling_habits = df[\"Recycling Habits\"].tolist()\n\nx = np.arange(len(demographics))  # the label locations\nwidth = 0.5  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nbars = ax.bar(x, recycling_habits, width, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'], edgecolor='black')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Recycling Habits Score')\nax.set_title('Average Recycling Habits by Demographic')\nax.set_xticks(x)\nax.set_xticklabels(demographics)\nax.bar_label(bars, padding=3)\n\n# Setting background color and grid\nax.set_facecolor('gray')\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the picker state of the bars that contain the center point of the bounding box to False. Also, make sure the visibility of the associated bars is set to False for those same points.",
        "Input_image": "./test_dataset/Bar/Bar_ae626b63e40c9a41/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# given data\ndata = \"\"\"Demographics,Recycling Habits\nTeenagers,60\nYoung Adults,75\nMiddle-aged Adults,90\nElderly,50\nTeenagers,100\nYoung Adults,45\nMiddle-aged Adults,70\nElderly,30\"\"\"\n\n# convert data to pandas dataframe\ndf = pd.read_csv(StringIO(data))\n\n# calculate average recycling habits for each demographic\ndf = df.groupby(\"Demographics\").mean().reset_index()\n\n# set demographics and recycling habits\ndemographics = df[\"Demographics\"].tolist()\nrecycling_habits = df[\"Recycling Habits\"].tolist()\n\nx = np.arange(len(demographics))  # the label locations\nwidth = 0.5  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nbars = ax.bar(x, recycling_habits, width, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'], edgecolor='black')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Recycling Habits Score')\nax.set_title('Average Recycling Habits by Demographic')\nax.set_xticks(x)\nax.set_xticklabels(demographics)\nax.bar_label(bars, padding=3)\n\n# Setting background color and grid\nax.set_facecolor('gray')\nax.grid(True)\n\n# Modify the picker state and visibility of the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [0, 2]:  # Selecting Teenagers and Middle-aged Adults bars\n        bar.set_picker(False)\n        bar.set_visible(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Bar/Bar_ae626b63e40c9a41/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_ae626b63e40c9a41/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_ae626b63e40c9a41/myplot.png"
    },
    {
        "id": "Bar_4a63394e7f7f42a5",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO('''Year,Smartphone Usage\n2016,60\n2017,65\n2018,130\n2019,70\n2020,80\n2021,40\n2022,90\n2023,45\n2024,75\n2025,105\n2026,50\n2027,35\n2028,65\n2029,75\n''')\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nbars = ax.bar(df['Year'], df['Smartphone Usage'], color='skyblue', edgecolor='black')\n\n# Setting labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Smartphone Usage')\nax.set_title('Smartphone Usage Over the Years')\n\n# Annotate the data value on the chart \nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom', fontsize=8)\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clip box for the bars that contain the center point of the bounding box to a Matplotlib bounding box starting at the bottom-left corner (11, 255) with a width of 704 and height of 965. Also, update the linewidth of these bars to 1.65.",
        "Input_image": "./test_dataset/Bar/Bar_4a63394e7f7f42a5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\nimport matplotlib.transforms as transforms\n\n# Given data\ndata = StringIO('''Year,Smartphone Usage\n2016,60\n2017,65\n2018,130\n2019,70\n2020,80\n2021,40\n2022,90\n2023,45\n2024,75\n2025,105\n2026,50\n2027,35\n2028,65\n2029,75\n''')\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nbars = ax.bar(df['Year'], df['Smartphone Usage'], color='skyblue', edgecolor='black')\n\n# Setting labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Smartphone Usage')\nax.set_title('Smartphone Usage Over the Years')\n\n# Annotate the data value on the chart \nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom', fontsize=8)\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Set the clip box and linewidth for the target object\nbbox = transforms.Bbox.from_bounds(11, 255, 704, 965)\nfor idx, bar in enumerate(bars):\n    if idx in [2, 5]:\n        bar.set_clip_box(bbox)\n        bar.set_linewidth(1.65)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Bar/Bar_4a63394e7f7f42a5/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_4a63394e7f7f42a5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_4a63394e7f7f42a5/myplot.png"
    },
    {
        "id": "Bar_7a36795ed6e95a29",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Here is the given csv data\ncsv_data = \"\"\"\nYear,City A,City B,City C\n2013,120,200,180\n2014,130,220,170\n2015,140,240,160\n2016,150,260,150\n2017,160,250,140\n2018,170,240,130\n2019,180,230,120\n2020,190,210,110\n\"\"\"\n\n# We will use pandas to read the csv data\ndf = pd.read_csv(StringIO(csv_data))\n\n# Prepare data for plotting\nyears = df['Year'].values\ncities = df.columns[1:]\ndata = df[cities].values.T\n\nfig, ax = plt.subplots()\n\n# Define bar width\nbar_width = 0.2\nbar_positions = np.arange(len(years))\n\n# Plot each city's data\nfor i, city in enumerate(cities):\n    offset = bar_width * i\n    bars = ax.bar(bar_positions + offset, data[i], bar_width, label=city, color=f\"C{i}\", edgecolor='black')\n    ax.bar_label(bars, padding=3)\n\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('Yearly data for each city')\nax.set_xticks(bar_positions + bar_width / 2)\nax.set_xticklabels(years)\nax.legend()\n\n# Remove grid lines and change background color\nax.grid(False) # This line removes the grid lines\nax.set_facecolor('white') # This line changes the background color to white\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clip box of the bars that share the same legend with the bar that contains the center point of the bounding box to a rectangle defined by (x0, y0) = (488, 143), with a width of 836 and a height of 119, using the matplotlib.transforms.Bbox format. Also, change the linestyle of these bars to 'solid'.",
        "Input_image": "./test_dataset/Bar/Bar_7a36795ed6e95a29/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# Here is the given csv data\ncsv_data = \"\"\"\nYear,City A,City B,City C\n2013,120,200,180\n2014,130,220,170\n2015,140,240,160\n2016,150,260,150\n2017,160,250,140\n2018,170,240,130\n2019,180,230,120\n2020,190,210,110\n\"\"\"\n\n# We will use pandas to read the csv data\ndf = pd.read_csv(StringIO(csv_data))\n\n# Prepare data for plotting\nyears = df['Year'].values\ncities = df.columns[1:]\ndata = df[cities].values.T\n\nfig, ax = plt.subplots()\n\n# Define bar width\nbar_width = 0.2\nbar_positions = np.arange(len(years))\n\n# Plot each city's data\nfor i, city in enumerate(cities):\n    offset = bar_width * i\n    bars = ax.bar(bar_positions + offset, data[i], bar_width, label=city, color=f\"C{i}\", edgecolor='black')\n    ax.bar_label(bars, padding=3)\n\n# Set clip box and linestyle for the first city's bars\nfor bar in bars:\n    bar.set_clip_box(Bbox.from_bounds(488, 143, 836, 119))\n    bar.set_linestyle('solid')\n\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('Yearly data for each city')\nax.set_xticks(bar_positions + bar_width / 2)\nax.set_xticklabels(years)\nax.legend()\n\n# Remove grid lines and change background color\nax.grid(False) # This line removes the grid lines\nax.set_facecolor('white') # This line changes the background color to white\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "2",
        "Test_image": "./test_dataset/Bar/Bar_7a36795ed6e95a29/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_7a36795ed6e95a29/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_7a36795ed6e95a29/myplot.png"
    },
    {
        "id": "Bar_ba10f79880ebb4b5",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndemographics = ['Teenagers', 'Adults', 'Elderly', 'Infants']\nsleep_hours = [6.5, 7.3, 5.2, 14.8]\n\n# Setting up the figure and axes\nfig, ax = plt.subplots()\n\n# Creating the bar chart\nbars = ax.bar(demographics, sleep_hours, color='skyblue', edgecolor='black')\n\n# Annotating the data values on the bars\nax.bar_label(bars)\n\n# Adding labels and title\nax.set_xlabel('Demographic')\nax.set_ylabel('Hours of Sleep')\nax.set_title('Average Sleep Duration by Age Group')\n\n# Adding a grid and setting the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Using tight layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clip box for the bars that contain the center point of the bounding box to the coordinates (95, 62) with a width of 238 and a height of 288, following the pattern used in matplotlib.transforms.Bbox.",
        "Input_image": "./test_dataset/Bar/Bar_ba10f79880ebb4b5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.transforms import Bbox\n\n# Given data\ndemographics = ['Teenagers', 'Adults', 'Elderly', 'Infants']\nsleep_hours = [6.5, 7.3, 5.2, 14.8]\n\n# Setting up the figure and axes\nfig, ax = plt.subplots()\n\n# Creating the bar chart\nbars = ax.bar(demographics, sleep_hours, color='skyblue', edgecolor='black')\n\n# Annotating the data values on the bars\nax.bar_label(bars)\n\n# Adding labels and title\nax.set_xlabel('Demographic')\nax.set_ylabel('Hours of Sleep')\nax.set_title('Average Sleep Duration by Age Group')\n\n# Adding a grid and setting the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Setting the clip box for the first bar\nbars[0].set_clip_box(Bbox.from_bounds(95, 62, 238, 288))\n\n# Using tight layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0",
        "Test_image": "./test_dataset/Bar/Bar_ba10f79880ebb4b5/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_ba10f79880ebb4b5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_ba10f79880ebb4b5/myplot.png"
    },
    {
        "id": "Bar_7a230f447b75b082",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    \"Year\": [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    \"Phishing Attacks\": [12000, 11000, 18000, 16000, 20000, 15000, 22000, 19000],\n    \"Malware Attacks\": [25000, 20000, 22000, 18000, 24000, 15000, 30000, 32000],\n    \"Ransomware Attacks\": [3500, 4000, 9000, 8500, 6000, 10000, 12000, 14000]\n}\n\nfig, ax = plt.subplots()\n\n# the label locations\ny = np.arange(len(data[\"Year\"]))\n# the height of the bars\nheight = 0.25\n\nfor i, (attack_type, values) in enumerate(list(data.items())[1:]):\n    offset = height * i\n    bars = ax.barh(y + offset, values, height, label=attack_type, color=['red', 'green', 'blue'][i], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Number of Attacks')\nax.set_ylabel('Year')\nax.set_title('Cyber Attacks by Year')\nax.set_yticks(y + height)\nax.set_yticklabels(data[\"Year\"])\nax.legend(loc='upper right', ncol=1)\nax.grid(True)\nax.set_facecolor('gray')\nax.invert_yaxis()  # labels read top-to-bottom\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the facecolor of the bars that share the same legend with the bar that contains the center point of the bounding box to #ea3128, and update their label to 'A new Label'.",
        "Input_image": "./test_dataset/Bar/Bar_7a230f447b75b082/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    \"Year\": [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    \"Phishing Attacks\": [12000, 11000, 18000, 16000, 20000, 15000, 22000, 19000],\n    \"Malware Attacks\": [25000, 20000, 22000, 18000, 24000, 15000, 30000, 32000],\n    \"Ransomware Attacks\": [3500, 4000, 9000, 8500, 6000, 10000, 12000, 14000]\n}\n\nfig, ax = plt.subplots()\n\n# the label locations\ny = np.arange(len(data[\"Year\"]))\n# the height of the bars\nheight = 0.25\n\nfor i, (attack_type, values) in enumerate(list(data.items())[1:]):\n    offset = height * i\n    bars = ax.barh(y + offset, values, height, label=attack_type if  i !=1 else 'A new Label', color=['red', 'green', 'blue'][i], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n\n# Modify the facecolor and label for the selected bars\nfor bar in ax.containers[1]:\n    bar.set_facecolor('#ea3128')\n\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Number of Attacks')\nax.set_ylabel('Year')\nax.set_title('Cyber Attacks by Year')\nax.set_yticks(y + height)\nax.set_yticklabels(data[\"Year\"])\nax.legend(loc='upper right', ncol=1)\nax.grid(True)\nax.set_facecolor('gray')\nax.invert_yaxis()  # labels read top-to-bottom\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_7a230f447b75b082/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_7a230f447b75b082/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_7a230f447b75b082/myplot.png"
    },
    {
        "id": "Bar_e86718a5c4dda597",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,Popularity\nAction,10\nRomance,50\nComedy,20\nHorror,30\n\"\"\")\n\ndf = pd.read_csv(data)\ndf = df.sort_values('Popularity')\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nbars = ax.barh(df['Genre'], df['Popularity'], color=\"skyblue\", edgecolor='black')\n\n# Add the data value on the bar\nfor bar in bars:\n    width = bar.get_width()\n    ax.annotate(f'{width}',\n                xy=(width, bar.get_y() + bar.get_height() / 2),\n                xytext=(5, 0),  # 5 points horizontal offset\n                textcoords=\"offset points\",\n                ha='left', va='center')\n\nax.set_xlabel('Popularity')\nax.set_ylabel('Genre')\nax.set_title('Popularity of Different Movie Genres')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the fill pattern of the bars that contain the center point of the bounding box to '.', and change their edge color to '#511097'.",
        "Input_image": "./test_dataset/Bar/Bar_e86718a5c4dda597/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,Popularity\nAction,10\nRomance,50\nComedy,20\nHorror,30\n\"\"\")\n\ndf = pd.read_csv(data)\ndf = df.sort_values('Popularity')\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nbars = ax.barh(df['Genre'], df['Popularity'], color=\"skyblue\", edgecolor='black')\n\n# Add the data value on the bar\nfor bar in bars:\n    width = bar.get_width()\n    ax.annotate(f'{width}',\n                xy=(width, bar.get_y() + bar.get_height() / 2),\n                xytext=(5, 0),  # 5 points horizontal offset\n                textcoords=\"offset points\",\n                ha='left', va='center')\n\n# Set hatch and edge color for target bars\ntarget_indices = {1, 3}  # Example indices for Comedy and Horror\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_hatch('.')\n        bar.set_edgecolor('#511097')\n\nax.set_xlabel('Popularity')\nax.set_ylabel('Genre')\nax.set_title('Popularity of Different Movie Genres')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_data_points": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_e86718a5c4dda597/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_e86718a5c4dda597/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_e86718a5c4dda597/figure.png"
    },
    {
        "id": "Bar_92e6b1f1e4a68b03",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\n\"TV Show Type\",\"Popularity Index\"\n\"Drama\",80\n\"Reality\",120\n\"Comedy\",60\n\"Documentary\",140\n\"Action\",90\n\"Horror\",70\n\"Sci-Fi\",130\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\ntv_show_type = df[\"TV Show Type\"].values\npopularity_index = df[\"Popularity Index\"].values\n\nfig, ax = plt.subplots()\n\n# Define the color gradient (from light blue to dark blue)\ncolors = plt.cm.Blues(np.linspace(0.3, 1, len(tv_show_type)))\n\n# Draw the bar chart with the new color gradient and grey edgecolor\nbars = ax.bar(tv_show_type, popularity_index, align='center', color=colors, edgecolor='grey')\n\n# Annotate the data value on the bar\nax.bar_label(bars)\n\nax.set_xlabel('TV Show Type')\nax.set_ylabel('Popularity Index')\nax.set_title('Popularity Index of Different TV Show Types')\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the bars that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Bar/Bar_92e6b1f1e4a68b03/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\n\"TV Show Type\",\"Popularity Index\"\n\"Drama\",80\n\"Reality\",120\n\"Comedy\",60\n\"Documentary\",140\n\"Action\",90\n\"Horror\",70\n\"Sci-Fi\",130\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\ntv_show_type = df[\"TV Show Type\"].values\npopularity_index = df[\"Popularity Index\"].values\n\nfig, ax = plt.subplots()\n\n# Define the color gradient (from light blue to dark blue)\ncolors = plt.cm.Blues(np.linspace(0.3, 1, len(tv_show_type)))\n\n# Draw the bar chart with the new color gradient and grey edgecolor\nbars = ax.bar(tv_show_type, popularity_index, align='center', color=colors, edgecolor='grey')\n\n# Annotate the data value on the bar\nax.bar_label(bars)\n\n# Set the animated state of the object corresponding to the Target_object to False\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_animated(False)\n\nax.set_xlabel('TV Show Type')\nax.set_ylabel('Popularity Index')\nax.set_title('Popularity Index of Different TV Show Types')\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_92e6b1f1e4a68b03/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_92e6b1f1e4a68b03/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_92e6b1f1e4a68b03/myplot.png"
    },
    {
        "id": "Bar_42c469d700d73669",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nclothing_types = (\"Denim\", \"Leather\", \"Cotton\", \"Silk\", \"Wool\")\nsales_data = {\n    'Q1': (125, 200, 80, 60, 130),\n    'Q2': (170, 150, 250, 70, 160),\n    'Q3': (120, 80, 90, 270, 120),\n    'Q4': (300, 230, 100, 80, 110),\n}\n\nx = np.arange(len(clothing_types))  # the label locations\nwidth = 0.15  # the width of the bars\nmultiplier = 0\ncolors = ['b', 'g', 'r', 'c', 'm']\n\nfig, ax = plt.subplots()\n\nfor quarter, sales in sales_data.items():\n    offset = width * multiplier\n    bars = ax.bar(x + offset, sales, width, label=quarter, color=colors[multiplier], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Sales')\nax.set_title('Clothing Sales by Quarter')\nax.set_xticks(x + width / 2)\nax.set_xticklabels(clothing_types)\nax.legend(loc='upper right')\nax.set_facecolor('white')  # Change background to white\nax.grid(False)  # Remove grid lines\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the bars that share the same legend as those containing the center point of the bounding box to #66bd2b.",
        "Input_image": "./test_dataset/Bar/Bar_42c469d700d73669/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nclothing_types = (\"Denim\", \"Leather\", \"Cotton\", \"Silk\", \"Wool\")\nsales_data = {\n    'Q1': (125, 200, 80, 60, 130),\n    'Q2': (170, 150, 250, 70, 160),\n    'Q3': (120, 80, 90, 270, 120),\n    'Q4': (300, 230, 100, 80, 110),\n}\n\nx = np.arange(len(clothing_types))  # the label locations\nwidth = 0.15  # the width of the bars\nmultiplier = 0\ncolors = ['b', 'g', 'r', 'c', 'm']\n\nfig, ax = plt.subplots()\n\nfor quarter, sales in sales_data.items():\n    offset = width * multiplier\n    bars = ax.bar(x + offset, sales, width, label=quarter, color=colors[multiplier], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Change the color of the bars that are corresponding to the Target_object to #66bd2b\nfor bar in plt.gca().containers[1]:\n    bar.set_color('#66bd2b')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Sales')\nax.set_title('Clothing Sales by Quarter')\nax.set_xticks(x + width / 2)\nax.set_xticklabels(clothing_types)\nax.legend(loc='upper right')\nax.set_facecolor('white')  # Change background to white\nax.grid(False)  # Remove grid lines\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_42c469d700d73669/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_42c469d700d73669/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_42c469d700d73669/myplot.png"
    },
    {
        "id": "Bar_6bb8d87b488905a9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nsports = (\"Football\", \"Cricket\", \"Baseball\", \"Basketball\", \"Soccer\", \"Rugby\")\npopularity = np.array([120, 85, 160, 200, 100, 70])\n\nfig, ax = plt.subplots()\n\n# Plotting the data\nbars = ax.barh(sports, popularity, align='center', color='skyblue', edgecolor='black')\n\n# Adding labels to the bars\nax.bar_label(bars, label_type='center')\n\n# Setting labels for x and y axes and the title\nax.set_xlabel('Popularity (in thousands)')\nax.set_ylabel('Sports')\nax.set_title('Popularity of Different Sports')\n\n# Adding a grid and changing the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the bars that contain the center point of the bounding box to #e18563.",
        "Input_image": "./test_dataset/Bar/Bar_6bb8d87b488905a9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nsports = (\"Football\", \"Cricket\", \"Baseball\", \"Basketball\", \"Soccer\", \"Rugby\")\npopularity = np.array([120, 85, 160, 200, 100, 70])\n\nfig, ax = plt.subplots()\n\n# Plotting the data\nbars = ax.barh(sports, popularity, align='center', color='skyblue', edgecolor='black')\n\n# Adding labels to the bars\nax.bar_label(bars, label_type='center')\n\n# Setting labels for x and y axes and the title\nax.set_xlabel('Popularity (in thousands)')\nax.set_ylabel('Sports')\nax.set_title('Popularity of Different Sports')\n\n# Adding a grid and changing the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Change the color of the bars that are corresponding to the Target_object to #e18563\ntarget_indices = {1, 3}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_color('#e18563')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_6bb8d87b488905a9/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_6bb8d87b488905a9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_6bb8d87b488905a9/figure.png"
    },
    {
        "id": "Bar_4be6a0eeef115cb4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nclothing_types = (\"Denim\", \"Leather\", \"Cotton\", \"Silk\", \"Wool\")\nsales_data = {\n    'Q1': (125, 200, 80, 60, 130),\n    'Q2': (170, 150, 250, 70, 160),\n    'Q3': (120, 80, 90, 270, 120),\n    'Q4': (300, 230, 100, 80, 110),\n}\n\nx = np.arange(len(clothing_types))  # the label locations\nwidth = 0.15  # the width of the bars\nmultiplier = 0\ncolors = ['b', 'g', 'r', 'c', 'm']\n\nfig, ax = plt.subplots()\n\nfor quarter, sales in sales_data.items():\n    offset = width * multiplier\n    bars = ax.bar(x + offset, sales, width, label=quarter, color=colors[multiplier], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Sales')\nax.set_title('Clothing Sales by Quarter')\nax.set_xticks(x + width / 2)\nax.set_xticklabels(clothing_types)\nax.legend(loc='upper right')\nax.set_facecolor('white')  # Change background to white\nax.grid(False)  # Remove grid lines\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the line color of the bars that share the same legend with the bar that contains the center point of the bounding box to #e13da9. Also, change the picker state of these bars to False.",
        "Input_image": "./test_dataset/Bar/Bar_4be6a0eeef115cb4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nclothing_types = (\"Denim\", \"Leather\", \"Cotton\", \"Silk\", \"Wool\")\nsales_data = {\n    'Q1': (125, 200, 80, 60, 130),\n    'Q2': (170, 150, 250, 70, 160),\n    'Q3': (120, 80, 90, 270, 120),\n    'Q4': (300, 230, 100, 80, 110),\n}\n\nx = np.arange(len(clothing_types))  # the label locations\nwidth = 0.15  # the width of the bars\nmultiplier = 0\ncolors = ['b', 'g', 'r', 'c', 'm']\n\nfig, ax = plt.subplots()\n\nfor quarter, sales in sales_data.items():\n    offset = width * multiplier\n    bars = ax.bar(x + offset, sales, width, label=quarter, color=colors[multiplier], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\nbars = plt.gca().containers\nfor bar in bars[1]:\n    bar.set_edgecolor('#e13da9')\n    bar.set_picker(False)\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Sales')\nax.set_title('Clothing Sales by Quarter')\nax.set_xticks(x + width / 2)\nax.set_xticklabels(clothing_types)\nax.legend(loc='upper right')\nax.set_facecolor('white')  # Change background to white\nax.grid(False)  # Remove grid lines\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_4be6a0eeef115cb4/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_4be6a0eeef115cb4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_4be6a0eeef115cb4/myplot.png"
    },
    {
        "id": "Bar_917acb8b5b38a2ae",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Data\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\nbus_traffic = [34000, 35500, 36000, 20000, 22000, 40000]\ncar_traffic = [75000, 78000, 80000, 65000, 70000, 95000]\nbike_traffic = [4000, 4100, 2000, 1000, 5000, 6000]\npedestrian_traffic = [15000, 15500, 13000, 7000, 17500, 20000]\n\n# Create plot\nfig, ax = plt.subplots()\n\n# Create bars\nbars1 = ax.bar(days, bus_traffic, color='b', edgecolor='black', label='Bus Traffic')\nbars2 = ax.bar(days, car_traffic, bottom=bus_traffic, color='r', edgecolor='black', label='Car Traffic')\nbars3 = ax.bar(days, bike_traffic, bottom=[i+j for i,j in zip(bus_traffic, car_traffic)], color='g', edgecolor='black', label='Bike Traffic')\nbars4 = ax.bar(days, pedestrian_traffic, bottom=[i+j+k for i,j,k in zip(bus_traffic, car_traffic, bike_traffic)], color='y', edgecolor='black', label='Pedestrian Traffic')\n\n# Add labels and title\nax.set_ylabel('Traffic Count')\nax.set_xlabel('Day of the Week')\nax.set_title('Traffic Count by Vehicle Type and Day of the Week')\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend()\n\n# Annotate data values on bars\nax.bar_label(bars1, label_type='center')\nax.bar_label(bars2, label_type='center')\nax.bar_label(bars3, label_type='center')\nax.bar_label(bars4, label_type='center')\n\n# Layout adjustment and save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the transparency of the bars that share the same legend as those containing the center point of the bounding box to 0.4064.",
        "Input_image": "./test_dataset/Bar/Bar_917acb8b5b38a2ae/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\nbus_traffic = [34000, 35500, 36000, 20000, 22000, 40000]\ncar_traffic = [75000, 78000, 80000, 65000, 70000, 95000]\nbike_traffic = [4000, 4100, 2000, 1000, 5000, 6000]\npedestrian_traffic = [15000, 15500, 13000, 7000, 17500, 20000]\n\n# Create plot\nfig, ax = plt.subplots()\n\n# Create bars\nbars1 = ax.bar(days, bus_traffic, color='b', edgecolor='black', label='Bus Traffic')\nbars2 = ax.bar(days, car_traffic, bottom=bus_traffic, color='r', edgecolor='black', label='Car Traffic')\nbars3 = ax.bar(days, bike_traffic, bottom=[i+j for i,j in zip(bus_traffic, car_traffic)], color='g', edgecolor='black', label='Bike Traffic')\nbars4 = ax.bar(days, pedestrian_traffic, bottom=[i+j+k for i,j,k in zip(bus_traffic, car_traffic, bike_traffic)], color='y', edgecolor='black', label='Pedestrian Traffic')\n\n# Set the transparency of the bars that are corresponding to the Target_object to 0.4063818376526568\nfor bar in plt.gca().containers[1]:\n    bar.set_alpha(0.4063818376526568)\n\n# Add labels and title\nax.set_ylabel('Traffic Count')\nax.set_xlabel('Day of the Week')\nax.set_title('Traffic Count by Vehicle Type and Day of the Week')\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend()\n\n# Annotate data values on bars\nax.bar_label(bars1, label_type='center')\nax.bar_label(bars2, label_type='center')\nax.bar_label(bars3, label_type='center')\nax.bar_label(bars4, label_type='center')\n\n# Layout adjustment and save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_917acb8b5b38a2ae/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_917acb8b5b38a2ae/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_917acb8b5b38a2ae/figure.png"
    },
    {
        "id": "Bar_caf1441d43c5d81c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    \"Blue Whale\": (3000, 3500, 2000),\n    \"Tuna\": (80000, 60000, 30000),\n    \"Cod\": (120000, 50000, 75000),\n    \"Sea Turtles\": (500, 300, 150),\n    \"Salmon\": (100000, 120000, 90000),\n    \"Sharks\": (15000, 7500, 10000)\n}\n\nyears = [\"2000\", \"2010\", \"2020\"]\nspecies = list(data.keys())\nvalues = np.array(list(data.values()))\n\nnum_species = len(species)\nnum_years = len(years)\n\nbar_width = 0.2\nindex = np.arange(num_years)\n\nfig, ax = plt.subplots()\n\nfor i in range(num_species):\n    bars = ax.bar(index + i * bar_width, values[i], bar_width, label=species[i], edgecolor='black')\n    ax.bar_label(bars)\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Marine Species')\nax.set_title('Number of Marine Species per Year')\nax.set_xticks(index + bar_width * (num_species - 1) / 2)\nax.set_xticklabels(years)\nax.legend(loc='upper right', ncol=1)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill pattern of the bars that share the same legend as those containing the center point of the bounding box to '.', and update their edge color to '#79aaa0'.",
        "Input_image": "./test_dataset/Bar/Bar_caf1441d43c5d81c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    \"Blue Whale\": (3000, 3500, 2000),\n    \"Tuna\": (80000, 60000, 30000),\n    \"Cod\": (120000, 50000, 75000),\n    \"Sea Turtles\": (500, 300, 150),\n    \"Salmon\": (100000, 120000, 90000),\n    \"Sharks\": (15000, 7500, 10000)\n}\n\nyears = [\"2000\", \"2010\", \"2020\"]\nspecies = list(data.keys())\nvalues = np.array(list(data.values()))\n\nnum_species = len(species)\nnum_years = len(years)\n\nbar_width = 0.2\nindex = np.arange(num_years)\n\nfig, ax = plt.subplots()\n\nfor i in range(num_species):\n    bars = ax.bar(index + i * bar_width, values[i], bar_width, label=species[i], edgecolor='black')\n    ax.bar_label(bars)\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Marine Species')\nax.set_title('Number of Marine Species per Year')\nax.set_xticks(index + bar_width * (num_species - 1) / 2)\nax.set_xticklabels(years)\n\n# Modify the bars corresponding to the Target_object\nfor bar in plt.gca().containers[1]:\n    bar.set_hatch('.')\n    bar.set_edgecolor('#79aaa0')\n\nax.legend(loc='upper right', ncol=1)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_caf1441d43c5d81c/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_caf1441d43c5d81c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_caf1441d43c5d81c/figure.png"
    },
    {
        "id": "Bar_210ec5438280aca3",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nappliances = [\"Refrigerator\", \"Air Conditioner\", \"Washing Machine\", \"Dishwasher\", \"Microwave\"]\nusage = np.array([[10,12,10,8,9], [3,5,10,2,3], [5,7,7,6,10], [1,1,5,1,1], [2,3,3,5,6]])\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple']\n\nfig, ax = plt.subplots()\n\nbars = ax.bar(appliances, usage.mean(axis=1), color=colors, edgecolor='black')\n\n# Title and labels\nax.set_title('Average Usage of Home Appliances')\nax.set_xlabel('Appliance')\nax.set_ylabel('Usage')\n\n# Grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Bar labels\nax.bar_label(bars)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the rasterized state of the bars that contain the center point of the bounding box to False, and set their snap state to True as well.",
        "Input_image": "./test_dataset/Bar/Bar_210ec5438280aca3/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nappliances = [\"Refrigerator\", \"Air Conditioner\", \"Washing Machine\", \"Dishwasher\", \"Microwave\"]\nusage = np.array([[10,12,10,8,9], [3,5,10,2,3], [5,7,7,6,10], [1,1,5,1,1], [2,3,3,5,6]])\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple']\n\nfig, ax = plt.subplots()\n\nbars = ax.bar(appliances, usage.mean(axis=1), color=colors, edgecolor='black')\n\n# Title and labels\nax.set_title('Average Usage of Home Appliances')\nax.set_xlabel('Appliance')\nax.set_ylabel('Usage')\n\n# Grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Bar labels\nax.bar_label(bars)\n\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_rasterized(False)\n        bar.set_snap(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_210ec5438280aca3/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_210ec5438280aca3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_210ec5438280aca3/myplot.png"
    },
    {
        "id": "Bar_c27c5373a517c65e",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom io import StringIO\nimport pandas as pd\n\ndata = StringIO(\"\"\"\nProfession,Rate\nDoctors,40\nLawyers,45\nTeachers,60\nEngineers,35\nNurses,70\n\"\"\")\n\ndf = pd.read_csv(data)\nprofessions = df['Profession'].values\nrates = df['Rate'].values\n\ny = np.arange(len(professions))  # the label locations\n\nfig, ax = plt.subplots()\n\nbars = ax.barh(y, rates, color='skyblue', edgecolor='blue')\n\n# Add bar labels\nax.bar_label(bars, padding=3)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Rate')\nax.set_ylabel('Profession')\nax.set_title('Rate of different professions')\nax.set_yticks(y)\nax.set_yticklabels(professions)\nax.grid(visible=True)\nax.set_facecolor('lightgray')\n\n# Invert the y-axis so the professions read top-to-bottom\nax.invert_yaxis()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the transparency of the bars that contain the center point of the bounding box to 0.94, and enable the picker state for those bars by setting it to True.",
        "Input_image": "./test_dataset/Bar/Bar_c27c5373a517c65e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom io import StringIO\nimport pandas as pd\n\ndata = StringIO(\"\"\"\nProfession,Rate\nDoctors,40\nLawyers,45\nTeachers,60\nEngineers,35\nNurses,70\n\"\"\")\n\ndf = pd.read_csv(data)\nprofessions = df['Profession'].values\nrates = df['Rate'].values\n\ny = np.arange(len(professions))  # the label locations\n\nfig, ax = plt.subplots()\n\nbars = ax.barh(y, rates, color='skyblue', edgecolor='blue')\n\n# Add bar labels\nax.bar_label(bars, padding=3)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Rate')\nax.set_ylabel('Profession')\nax.set_title('Rate of different professions')\nax.set_yticks(y)\nax.set_yticklabels(professions)\nax.grid(visible=True)\nax.set_facecolor('lightgray')\n\n# Invert the y-axis so the professions read top-to-bottom\nax.invert_yaxis()\n\n# Set transparency and picker state for the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_alpha(0.94)\n        bar.set_picker(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_c27c5373a517c65e/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_c27c5373a517c65e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_c27c5373a517c65e/myplot.png"
    },
    {
        "id": "Bar_49a31573f8f7ea3f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = StringIO(\"\"\"\n\"Diet Type\",\"2010\",\"2015\",\"2020\"\n\"Vegetarian\",10,15,9\n\"Vegan\",5,10,8\n\"Paleo\",20,35,20\n\"Keto\",5,15,5\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\ndiet_types = df[\"Diet Type\"].values\nvalues_2010 = df[\"2010\"].values\nvalues_2015 = df[\"2015\"].values\nvalues_2020 = df[\"2020\"].values\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10,7))\n\n# Plot the data\nbars1 = ax.bar(diet_types, values_2010, color='skyblue', edgecolor='black')\nbars2 = ax.bar(diet_types, values_2015, bottom=values_2010, color='lightgreen', edgecolor='black')\nbars3 = ax.bar(diet_types, values_2020, bottom=values_2010+values_2015, color='orange', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Popularity of Different Diet Types Over the Years')\nax.set_xlabel('Diet Types')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend([\"2010\", \"2015\", \"2020\"], loc='upper right')\n\n# Annotate the data value on the chart figure\nfor bars in [bars1, bars2, bars3]:\n    for bar in bars:\n        ax.text(bar.get_x() + bar.get_width() / 2, bar.get_y() + bar.get_height() / 2,\n                str(int(bar.get_height())), ha='center', va='center',\n                color='black')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow to the bars that share the same legend as the ones containing the center point of the bounding box, using a shadow offset of (4, 4) units.",
        "Input_image": "./test_dataset/Bar/Bar_49a31573f8f7ea3f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withSimplePatchShadow\n\n# Define the data\ndata = StringIO(\"\"\"\n\"Diet Type\",\"2010\",\"2015\",\"2020\"\n\"Vegetarian\",10,15,9\n\"Vegan\",5,10,8\n\"Paleo\",20,35,20\n\"Keto\",5,15,5\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\ndiet_types = df[\"Diet Type\"].values\nvalues_2010 = df[\"2010\"].values\nvalues_2015 = df[\"2015\"].values\nvalues_2020 = df[\"2020\"].values\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10,7))\n\n# Plot the data\nbars1 = ax.bar(diet_types, values_2010, color='skyblue', edgecolor='black')\nbars2 = ax.bar(diet_types, values_2015, bottom=values_2010, color='lightgreen', edgecolor='black')\nbars3 = ax.bar(diet_types, values_2020, bottom=values_2010+values_2015, color='orange', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Popularity of Different Diet Types Over the Years')\nax.set_xlabel('Diet Types')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add shadow to the bars corresponding to the Target_object\nfor bar in plt.gca().containers[1]:\n    bar.set_path_effects([withSimplePatchShadow(offset=(4, 4))])\n\n# Add legend\nax.legend([\"2010\", \"2015\", \"2020\"], loc='upper right')\n\n# Annotate the data value on the chart figure\nfor bars in [bars1, bars2, bars3]:\n    for bar in bars:\n        ax.text(bar.get_x() + bar.get_width() / 2, bar.get_y() + bar.get_height() / 2,\n                str(int(bar.get_height())), ha='center', va='center',\n                color='black')\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_49a31573f8f7ea3f/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_49a31573f8f7ea3f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_49a31573f8f7ea3f/myplot.png"
    },
    {
        "id": "Bar_000ab8cfbd281c5b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given CSV data\ncsv_data = '''Year,AI Technology,Robotics,IoT Technology\n2010,500,200,150\n2011,510,210,160\n2012,550,220,170\n2013,520,230,180\n2014,600,240,190\n2015,610,250,200\n2016,620,260,210\n2017,650,500,220\n2018,660,510,230\n2019,670,520,240\n2020,680,250,250\n2021,690,260,500'''\n\n# Create DataFrame from CSV data\ndata = pd.read_csv(StringIO(csv_data))\n\n# Prepare figure and axis\nfig, ax = plt.subplots()\n\n# Bar configurations\nwidth = 0.2\nx = np.arange(len(data))\n\n# Draw bars\nbars1 = ax.bar(x - width, data['AI Technology'], width, label='AI Technology', edgecolor='black', color='blue')\nbars2 = ax.bar(x, data['Robotics'], width, label='Robotics', edgecolor='black', color='red')\nbars3 = ax.bar(x + width, data['IoT Technology'], width, label='IoT Technology', edgecolor='black', color='green')\n\n# Add bar labels\nax.bar_label(bars1)\nax.bar_label(bars2)\nax.bar_label(bars3)\n\n# Set x-axis tick labels\nax.set_xticks(x)\nax.set_xticklabels(data['Year'])\n\n# Set labels, title, legend\nax.set_xlabel('Year')\nax.set_ylabel('Investment in Technology (in millions)')\nax.set_title('Investment in AI, Robotics and IoT Technologies Over the Years')\nax.legend()\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Stroke the bars that shares the same legend with the bar that contains the center point of the bounding box with a line width of 2.68 and a foreground color of #776bc7.",
        "Input_image": "./test_dataset/Bar/Bar_000ab8cfbd281c5b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport matplotlib.patheffects as path_effects\n\n# Given CSV data\ncsv_data = '''Year,AI Technology,Robotics,IoT Technology\n2010,500,200,150\n2011,510,210,160\n2012,550,220,170\n2013,520,230,180\n2014,600,240,190\n2015,610,250,200\n2016,620,260,210\n2017,650,500,220\n2018,660,510,230\n2019,670,520,240\n2020,680,250,250\n2021,690,260,500'''\n\n# Create DataFrame from CSV data\ndata = pd.read_csv(StringIO(csv_data))\n\n# Prepare figure and axis\nfig, ax = plt.subplots()\n\n# Bar configurations\nwidth = 0.2\nx = np.arange(len(data))\n\n# Draw bars\nbars1 = ax.bar(x - width, data['AI Technology'], width, label='AI Technology', edgecolor='black', color='blue')\nbars2 = ax.bar(x, data['Robotics'], width, label='Robotics', edgecolor='black', color='red')\nbars3 = ax.bar(x + width, data['IoT Technology'], width, label='IoT Technology', edgecolor='black', color='green')\n\n# Add bar labels\nax.bar_label(bars1)\nax.bar_label(bars2)\nax.bar_label(bars3)\n\n# Set x-axis tick labels\nax.set_xticks(x)\nax.set_xticklabels(data['Year'])\n# Apply stroke effect to selected bars\nstroke_effect = path_effects.withStroke(linewidth=2.675530166645913, foreground='#776bc7')\nfor bar in bars1:\n    bar.set_path_effects([stroke_effect])\n# Set labels, title, legend\nax.set_xlabel('Year')\nax.set_ylabel('Investment in Technology (in millions)')\nax.set_title('Investment in AI, Robotics and IoT Technologies Over the Years')\nax.legend()\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_000ab8cfbd281c5b/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_000ab8cfbd281c5b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_000ab8cfbd281c5b/myplot.png"
    },
    {
        "id": "Bar_27d8d58b7b164064",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create data\ndata = {\n    \"Sport\": [\"Football\", \"Baseball\", \"Basketball\", \"Soccer\"],\n    \"Popularity\": [100, 80, 95, 90]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Create bars\nbars = ax.bar(df['Sport'], df['Popularity'], color='skyblue', edgecolor='blue')\n\n# Set title, x-label, y-label\nax.set_title('Sports Popularity')\nax.set_xlabel('Sport')\nax.set_ylabel('Popularity')\n\n# Add grid and set facecolor\nax.grid(True)\nax.set_facecolor('gray')\n\n# Add labels to each bar\nax.bar_label(bars)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the line color of the bars that contain the center point of the bounding box to #69f39e.",
        "Input_image": "./test_dataset/Bar/Bar_27d8d58b7b164064/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create data\ndata = {\n    \"Sport\": [\"Football\", \"Baseball\", \"Basketball\", \"Soccer\"],\n    \"Popularity\": [100, 80, 95, 90]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Create bars\nbars = ax.bar(df['Sport'], df['Popularity'], color='skyblue', edgecolor='blue')\n\n# Set title, x-label, y-label\nax.set_title('Sports Popularity')\nax.set_xlabel('Sport')\nax.set_ylabel('Popularity')\n\n# Add grid and set facecolor\nax.grid(True)\nax.set_facecolor('gray')\n\n# Add labels to each bar\nax.bar_label(bars)\n\n# Modify the label and linecolor of the target object\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_edgecolor('#69f39e')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_27d8d58b7b164064/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_27d8d58b7b164064/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_27d8d58b7b164064/myplot.png"
    },
    {
        "id": "Bar_2fbd59078dcdf0cf",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = StringIO(\"\"\"Genre,2018,2019,2020\nAction,15200000,12300000,18700000\nComedy,8000000,7450000,12500000\nDrama,9100000,8600000,6700000\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nwidth = 0.2\nyears = ['2018', '2019', '2020']\nx = df.index\nfor i, year in enumerate(years):\n    ax.bar(x + i*width, df[year], width, label=year, edgecolor='black')\n\nax.set_title(\"Genre Popularity Over the Years\")\nax.set_xlabel(\"Genre\")\nax.set_ylabel(\"Count\")\nax.legend(loc=\"upper right\")\nax.grid(False)  # Disable grid lines\nax.set_facecolor('white')  # Change background to white\nax.set_xticks(x + width / 2)\nax.set_xticklabels(df['Genre'])\n\nfor rect in ax.patches:\n    ax.text(rect.get_x() + rect.get_width() / 2., rect.get_height(),\n            '%d' % int(rect.get_height()), ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterized state of the bars that share the same legend with the bar that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Bar/Bar_2fbd59078dcdf0cf/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = StringIO(\"\"\"Genre,2018,2019,2020\nAction,15200000,12300000,18700000\nComedy,8000000,7450000,12500000\nDrama,9100000,8600000,6700000\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nwidth = 0.2\nyears = ['2018', '2019', '2020']\nx = df.index\nfor i, year in enumerate(years):\n    bars = ax.bar(x + i*width, df[year], width, label=year, edgecolor='black')\n    if i == 1:  # Targeting the 2019 bars\n        for bar in bars:\n            bar.set_rasterized(False)\n\nax.set_title(\"Genre Popularity Over the Years\")\nax.set_xlabel(\"Genre\")\nax.set_ylabel(\"Count\")\nax.legend(loc=\"upper right\")\nax.grid(False)  # Disable grid lines\nax.set_facecolor('white')  # Change background to white\nax.set_xticks(x + width / 2)\nax.set_xticklabels(df['Genre'])\n\nfor rect in ax.patches:\n    ax.text(rect.get_x() + rect.get_width() / 2., rect.get_height(),\n            '%d' % int(rect.get_height()), ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_2fbd59078dcdf0cf/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_2fbd59078dcdf0cf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_2fbd59078dcdf0cf/myplot.png"
    },
    {
        "id": "Bar_c7b89e80db767f4f",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    'Year': [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    'Community Service': [15, 14, 16, 15, 14, 15, 16, 17, 18, 20, 22],\n    'Disaster Relief': [18, 20, 24, 22, 18, 20, 22, 21, 25, 24, 30],\n    'Environmental Protection': [22, 21, 19, 18, 17, 18, 19, 20, 22, 20, 18]\n}\n\nx = np.arange(len(data['Year']))  # the label locations\nwidth = 0.25  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots(layout='constrained')\n\nfor attribute, measurement in dict(list(data.items())[1:]).items():\n    offset = width * multiplier\n    bars = ax.bar(x + offset, measurement, width, label=attribute, color=['silver', 'gray', 'lightgray'][multiplier], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Number of activities')\nax.set_title('Activities by year')\nax.set_xticks(x + width, data['Year'])\nax.legend(loc='upper left')\nax.set_ylim(0, 35)\nax.grid(True)\nax.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping box for the bars that share the same legend with the bar that contains the center point of the bounding box using matplotlib.transforms.Bbox. Place the bottom-left corner at (57, 270) with a width of 219 and a height of 427. Also, make sure the rasterized state for those bars is set to False.",
        "Input_image": "./test_dataset/Bar/Bar_c7b89e80db767f4f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.transforms import Bbox\n\ndata = {\n    'Year': [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    'Community Service': [15, 14, 16, 15, 14, 15, 16, 17, 18, 20, 22],\n    'Disaster Relief': [18, 20, 24, 22, 18, 20, 22, 21, 25, 24, 30],\n    'Environmental Protection': [22, 21, 19, 18, 17, 18, 19, 20, 22, 20, 18]\n}\n\nx = np.arange(len(data['Year']))  # the label locations\nwidth = 0.25  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots(layout='constrained')\n\nfor attribute, measurement in dict(list(data.items())[1:]).items():\n    offset = width * multiplier\n    bars = ax.bar(x + offset, measurement, width, label=attribute, color=['silver', 'gray', 'lightgray'][multiplier], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Number of activities')\nax.set_title('Activities by year')\nax.set_xticks(x + width, data['Year'])\nax.legend(loc='upper left')\nax.set_ylim(0, 35)\nax.grid(True)\nax.set_facecolor('white')\n\nbars = plt.gca().containers\nfor bar in bars[1]:\n    bar.set_clip_box(Bbox.from_bounds(57, 270, 219, 427))\n    bar.set_rasterized(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_c7b89e80db767f4f/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_c7b89e80db767f4f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_c7b89e80db767f4f/myplot.png"
    },
    {
        "id": "Bar_fb30b32a3d4e0482",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Provided data\ndisasters = (\"Hurricane\", \"Earthquake\", \"Tsunami\", \"Flood\", \"Drought\")\neconomic_impact = np.array([10000, 7000, 5000, 4000, 2000])\n\nfig, ax = plt.subplots()\n\nbars = ax.barh(disasters, economic_impact, align='center', color='skyblue', edgecolor='black')\n\n# Adding the labels\nax.bar_label(bars)\n\nax.set_yticks(np.arange(len(disasters)))\nax.set_yticklabels(disasters)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Economic Impact (in $)')\nax.set_title('Economic Impact of Different Disasters')\nax.grid(True)\nax.set_facecolor('white')  # Change the background color to white\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the linewidth of the bars that contain the center point of the bounding box to 1.60. Also, set the snap state of these bars to False.",
        "Input_image": "./test_dataset/Bar/Bar_fb30b32a3d4e0482/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Provided data\ndisasters = (\"Hurricane\", \"Earthquake\", \"Tsunami\", \"Flood\", \"Drought\")\neconomic_impact = np.array([10000, 7000, 5000, 4000, 2000])\n\nfig, ax = plt.subplots()\n\nbars = ax.barh(disasters, economic_impact, align='center', color='skyblue', edgecolor='black')\n\n# Adding the labels\nax.bar_label(bars)\n\nax.set_yticks(np.arange(len(disasters)))\nax.set_yticklabels(disasters)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Economic Impact (in $)')\nax.set_title('Economic Impact of Different Disasters')\nax.grid(True)\nax.set_facecolor('white')  # Change the background color to white\n\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_linewidth(1.60)\n        bar.set_snap(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_fb30b32a3d4e0482/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_fb30b32a3d4e0482/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_fb30b32a3d4e0482/myplot.png"
    },
    {
        "id": "Bar_36b4d285b04ef4f1",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.cm import get_cmap\n\n# Define csv data\ndata = StringIO(\"\"\"\nGenre,2005,2010,2015\nAction,50,70,30\nAdventure,60,75,90\nComedy,80,110,60\nDrama,100,60,100\nHorror,30,40,45\nRomance,60,30,70\n\"\"\")\n\n# Read csv data into a pandas DataFrame\ndf = pd.read_csv(data, sep=\",\")\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Generate a color map of blue colors\ncmap = get_cmap('Blues')\ncolors = cmap(np.linspace(0.2, 1.0, df['Genre'].nunique()))\n\n# Create a bar chart with a gradient of blue colors\nbars = ax.bar(df['Genre'], df['2005'], color=colors, edgecolor='black', tick_label=df['Genre'])\n\n# Set labels and title\nax.set_xlabel('Genre')\nax.set_ylabel('Sales')\nax.set_title('Sales by Genre in 2005')\n\n# Add legend with gradient colors\nax.legend(bars, df['Genre'], title='Genre')\n\n# Add data values on each bar\nax.bar_label(bars, label_type='center')\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot_gradient.png\")",
        "Instruction": "Set the fill pattern of the bars that contain the center point of the bounding box to 'x', color to '#a338fb' and change bars' edge color to '#a338fb'.",
        "Input_image": "./test_dataset/Bar/Bar_36b4d285b04ef4f1/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.cm import get_cmap\n\n# Define csv data\ndata = StringIO(\"\"\"\nGenre,2005,2010,2015\nAction,50,70,30\nAdventure,60,75,90\nComedy,80,110,60\nDrama,100,60,100\nHorror,30,40,45\nRomance,60,30,70\n\"\"\")\n\n# Read csv data into a pandas DataFrame\ndf = pd.read_csv(data, sep=\",\")\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Generate a color map of blue colors\ncmap = get_cmap('Blues')\ncolors = cmap(np.linspace(0.2, 1.0, df['Genre'].nunique()))\n\n# Create a bar chart with a gradient of blue colors\nbars = ax.bar(df['Genre'], df['2005'], color=colors, edgecolor='black', tick_label=df['Genre'])\n\n# Set labels and title\nax.set_xlabel('Genre')\nax.set_ylabel('Sales')\nax.set_title('Sales by Genre in 2005')\n\n# Add legend with gradient colors\nax.legend(bars, df['Genre'], title='Genre')\n\n# Add data values on each bar\nax.bar_label(bars, label_type='center')\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Use 'bar.set_hatch' to set the fill pattern of the bars corresponding to the Target_object to 'x', and the edge color to '#a338fb'\ntarget_indices = {0, 2, 4}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_hatch('x')\n        bar.set_edgecolor('#a338fb')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_data_points": "0,2,4",
        "Test_image": "./test_dataset/Bar/Bar_36b4d285b04ef4f1/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_36b4d285b04ef4f1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_36b4d285b04ef4f1/Visual_figure.png"
    },
    {
        "id": "Bar_844074741513ff31",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = StringIO(\"\"\"\nYear,Arctic Sea Ice,Antarctic Sea Ice,Global Sea Level\n2000,12.4,10.8,0\n2005,11.7,11.2,2.1\n2010,11.2,12.1,3.4\n2015,10.8,12.2,4.6\n2020,9.3,11.6,5.8\n2025,8.7,11.3,6.5\n\"\"\")\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars1 = ax.bar(df['Year'] - 1, df['Arctic Sea Ice'], color='skyblue', edgecolor='black', width=1, label='Arctic Sea Ice')\nbars2 = ax.bar(df['Year'], df['Antarctic Sea Ice'], color='lightgreen', edgecolor='black', width=1, label='Antarctic Sea Ice')\nbars3 = ax.bar(df['Year'] + 1, df['Global Sea Level'], color='lightcoral', edgecolor='black', width=1, label='Global Sea Level')\n\n# Set title, x-label and y-label\nax.set_title('Sea Ice and Sea Level Changes')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the bars that share the same legend as those containing the center point of the bounding box to 0.528.",
        "Input_image": "./test_dataset/Bar/Bar_844074741513ff31/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = StringIO(\"\"\"\nYear,Arctic Sea Ice,Antarctic Sea Ice,Global Sea Level\n2000,12.4,10.8,0\n2005,11.7,11.2,2.1\n2010,11.2,12.1,3.4\n2015,10.8,12.2,4.6\n2020,9.3,11.6,5.8\n2025,8.7,11.3,6.5\n\"\"\")\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars1 = ax.bar(df['Year'] - 1, df['Arctic Sea Ice'], color='skyblue', edgecolor='black', width=1, label='Arctic Sea Ice')\nbars2 = ax.bar(df['Year'], df['Antarctic Sea Ice'], color='lightgreen', edgecolor='black', width=1, label='Antarctic Sea Ice')\nbars3 = ax.bar(df['Year'] + 1, df['Global Sea Level'], color='lightcoral', edgecolor='black', width=1, label='Global Sea Level')\n\n# Set title, x-label and y-label\nax.set_title('Sea Ice and Sea Level Changes')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Set the transparency of the bars that are corresponding to the Target_object to 0.528255680564189\nfor bar in plt.gca().containers[1]:\n    bar.set_alpha(0.528255680564189)\n    bar.set_facecolor('red')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_844074741513ff31/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_844074741513ff31/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_844074741513ff31/figure.png"
    },
    {
        "id": "Bar_e19c68f816c9f22b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nAge_Group,TV_Hours_2010,TV_Hours_2020\nUnder_18,1.2,0.8\n18-24,2.5,1.3\n25-34,3.0,2.8\n35-44,3.5,2.9\n45-54,4.0,3.8\n55-64,4.5,3.5\n65_and_above,5.0,4.5\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Plotting the data with new colors\nbars1 = ax.bar(df['Age_Group'], df['TV_Hours_2010'], color='purple', edgecolor='black', width=0.4, label='TV_Hours_2010')\nbars2 = ax.bar(df['Age_Group'], df['TV_Hours_2020'], color='orange', edgecolor='black', width=0.4, label='TV_Hours_2020', bottom=df['TV_Hours_2010'])\n\n# Adding labels\nax.set_title(\"TV Watching Hours in 2010 and 2020 by Age Group\")\nax.set_xlabel(\"Age Group\")\nax.set_ylabel(\"TV Watching Hours\")\nax.legend(loc=\"upper right\")\n\n# Adding data labels\nax.bar_label(bars1, label_type='center')\nax.bar_label(bars2, label_type='center')\n\n# Adding grid\nax.grid(True)\n\n# Changing the face color to white\nax.set_facecolor('white')\n\n# Save chart as a png file\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the visibility of the bars that share the same legend with the bar that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Bar/Bar_e19c68f816c9f22b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# Given data\ndata = StringIO(\"\"\"\nAge_Group,TV_Hours_2010,TV_Hours_2020\nUnder_18,1.2,0.8\n18-24,2.5,1.3\n25-34,3.0,2.8\n35-44,3.5,2.9\n45-54,4.0,3.8\n55-64,4.5,3.5\n65_and_above,5.0,4.5\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Plotting the data with new colors\nbars1 = ax.bar(df['Age_Group'], df['TV_Hours_2010'], color='purple', edgecolor='black', width=0.4, label='TV_Hours_2010')\nbars2 = ax.bar(df['Age_Group'], df['TV_Hours_2020'], color='orange', edgecolor='black', width=0.4, label='TV_Hours_2020', bottom=df['TV_Hours_2010'])\n\n# Adding labels\nax.set_title(\"TV Watching Hours in 2010 and 2020 by Age Group\")\nax.set_xlabel(\"Age Group\")\nax.set_ylabel(\"TV Watching Hours\")\nax.legend(loc=\"upper right\")\n\n# Adding data labels\nax.bar_label(bars1, label_type='center')\nax.bar_label(bars2, label_type='center')\n\n# Adding grid\nax.grid(True)\n\n# Changing the face color to white\nax.set_facecolor('white')\n\n\nfor bar in bars1:\n    bar.set_visible(False)\n\n# Save chart as a png file\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_e19c68f816c9f22b/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_e19c68f816c9f22b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_e19c68f816c9f22b/myplot.png"
    },
    {
        "id": "Bar_a5a88702d5fd36d8",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nRegion,Water_Pollution_Index\nNorth America,50\nAsia,80\nAfrica,70\nEurope,40\n\"\"\")\ndf = pd.read_csv(data, sep =\",\")\n\nregions = df[\"Region\"].tolist()\npollution_index = df[\"Water_Pollution_Index\"].tolist()\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(regions, pollution_index, color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Water Pollution Index by Region')\nax.set_xlabel('Region')\nax.set_ylabel('Water Pollution Index')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend([\"Water Pollution Index\"], loc='upper right')\n\n# Annotate data values on the bars\nax.bar_label(bars)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the linestyle of the bars that share the same legend with the bar that contains the center point of the bounding box to 'solid'. For the same bars, also set their visibility to False.",
        "Input_image": "./test_dataset/Bar/Bar_a5a88702d5fd36d8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nRegion,Water_Pollution_Index\nNorth America,50\nAsia,80\nAfrica,70\nEurope,40\n\"\"\")\ndf = pd.read_csv(data, sep =\",\")\n\nregions = df[\"Region\"].tolist()\npollution_index = df[\"Water_Pollution_Index\"].tolist()\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(regions, pollution_index, color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Water Pollution Index by Region')\nax.set_xlabel('Region')\nax.set_ylabel('Water Pollution Index')\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend([\"Water Pollution Index\"], loc='upper right')\n\n# Annotate data values on the bars\nax.bar_label(bars)\n\n# Modify the linestyle and visibility of the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_linestyle('solid')\n        bar.set_visible(False)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_a5a88702d5fd36d8/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_a5a88702d5fd36d8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_a5a88702d5fd36d8/myplot.png"
    },
    {
        "id": "Bar_d7d5f45c24809451",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain', 'Canada', 'Australia']\nconsumption = [10000, 9000, 7500, 8000, 8200, 8500, 7000, 9500]\n\nbars = ax.bar(countries, consumption, color='tab:blue', edgecolor='black')\n\nax.set_ylabel('Food Consumption (in tons)')\nax.set_title('Food Consumption by Country')\nax.set_facecolor('lightgrey')\nax.grid(True)\n\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 100, yval, ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the linestyle of the bars that contain the center point of the bounding box to '--'. Additionally, enable rasterization for those bars by setting their rasterized state to True.",
        "Input_image": "./test_dataset/Bar/Bar_d7d5f45c24809451/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain', 'Canada', 'Australia']\nconsumption = [10000, 9000, 7500, 8000, 8200, 8500, 7000, 9500]\n\nbars = ax.bar(countries, consumption, color='tab:blue', edgecolor='black')\n\nax.set_ylabel('Food Consumption (in tons)')\nax.set_title('Food Consumption by Country')\nax.set_facecolor('lightgrey')\nax.grid(True)\n\nfor idx, bar in enumerate(bars):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 100, yval, ha='center', va='bottom')\n    if idx in [1, 3]:\n        bar.set_linestyle('--')\n        bar.set_rasterized(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_d7d5f45c24809451/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_d7d5f45c24809451/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_d7d5f45c24809451/myplot.png"
    },
    {
        "id": "Bar_cf0ffc8e0d7aa436",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\ndata = {\n    \"Year\": [2000, 2001, 2002, 2003, 2004, 2005, 2006],\n    \"Arctic Ice Cap\": [13.2, 13.5, 13.7, 10.2, 10.5, 10.9, 10.7],\n    \"Antarctic Ice Cap\": [13.6, 13.9, 13.5, 13.0, 13.5, 14.0, 13.6],\n    \"Greenland Ice Cap\": [2.9, 3.2, 3.0, 2.7, 3.0, 3.3, 3.1],\n}\n\n# parameters\ny = np.arange(len(data[\"Year\"]))  # the label locations\nheight = 0.25  # the height of the bars\n\nfig, ax = plt.subplots()\n\n# plotting\nmultiplier = 0\nfor ice_cap in [\"Arctic Ice Cap\", \"Antarctic Ice Cap\", \"Greenland Ice Cap\"]:\n    offset = height * multiplier\n    bars = ax.barh(y + offset, data[ice_cap], height, label=ice_cap, edgecolor=\"black\")\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\nax.set_xlabel('Ice Cap Extent (million square km)')\nax.set_title('Ice Cap Extent by Year')\nax.set_yticks(y + height)\nax.set_yticklabels(data[\"Year\"])\nax.legend(loc='upper right', ncol=1)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlim(0, 20)\n\n# Remove grid and change background color to white\nax.grid(False)\nax.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the fill pattern of the bars that share the same legend as those containing the center point of the bounding box to 'o', and change their edge color to '#db18e2'.",
        "Input_image": "./test_dataset/Bar/Bar_cf0ffc8e0d7aa436/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\ndata = {\n    \"Year\": [2000, 2001, 2002, 2003, 2004, 2005, 2006],\n    \"Arctic Ice Cap\": [13.2, 13.5, 13.7, 10.2, 10.5, 10.9, 10.7],\n    \"Antarctic Ice Cap\": [13.6, 13.9, 13.5, 13.0, 13.5, 14.0, 13.6],\n    \"Greenland Ice Cap\": [2.9, 3.2, 3.0, 2.7, 3.0, 3.3, 3.1],\n}\n\n# parameters\ny = np.arange(len(data[\"Year\"]))  # the label locations\nheight = 0.25  # the height of the bars\n\nfig, ax = plt.subplots()\n\n# plotting\nmultiplier = 0\nfor ice_cap in [\"Arctic Ice Cap\", \"Antarctic Ice Cap\", \"Greenland Ice Cap\"]:\n    offset = height * multiplier\n    bars = ax.barh(y + offset, data[ice_cap], height, label=ice_cap, edgecolor=\"black\")\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Set hatch and edge color for the bars corresponding to the Target_object\nfor bar in plt.gca().containers[1]:\n    bar.set_hatch('o')\n    bar.set_edgecolor('#db18e2')\n\nax.set_xlabel('Ice Cap Extent (million square km)')\nax.set_title('Ice Cap Extent by Year')\nax.set_yticks(y + height)\nax.set_yticklabels(data[\"Year\"])\nax.legend(loc='upper right', ncol=1)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlim(0, 20)\n\n# Remove grid and change background color to white\nax.grid(False)\nax.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_cf0ffc8e0d7aa436/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_cf0ffc8e0d7aa436/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_cf0ffc8e0d7aa436/figure.png"
    },
    {
        "id": "Bar_81bed184b9dbf86d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Region': ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia'],\n    '2018': [5000, 4500, 3000, 6000, 3500, 4000],\n    '2019': [6000, 3500, 5000, 4000, 2000, 3000],\n    '2020': [5000, 6000, 4000, 6000, 3500, 5000]\n}\n\ndf = pd.DataFrame(data)\n\n# Plot the data\nfig, ax = plt.subplots()\n\n# Define the bar labels and colors\nbar_labels = ['2018', '2019', '2020']\nbar_colors = ['tab:blue', 'tab:orange', 'tab:green']\n\n# Draw the bars\nbars = ax.bar(df['Region'], df['2018'], color=bar_colors[0], edgecolor='black', tick_label=df['Region'])\nbars2 = ax.bar(df['Region'], df['2019'], bottom=df['2018'], color=bar_colors[1], edgecolor='black')\nbars3 = ax.bar(df['Region'], df['2020'], bottom=df['2018']+df['2019'], color=bar_colors[2], edgecolor='black')\n\n# Set the chart title and labels\nax.set_ylabel('Sales')\nax.set_xlabel('Region')\nax.set_title('Sales by Region and Year')\n\n# Add a legend\nax.legend([bars, bars2, bars3], bar_labels, title='Year')\n\n# Annotate the bar values\nax.bar_label(bars, label_type='edge')\nax.bar_label(bars2, label_type='edge')\nax.bar_label(bars3, label_type='edge')\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('gray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the picker state of the bar that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Bar/Bar_81bed184b9dbf86d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Region': ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia'],\n    '2018': [5000, 4500, 3000, 6000, 3500, 4000],\n    '2019': [6000, 3500, 5000, 4000, 2000, 3000],\n    '2020': [5000, 6000, 4000, 6000, 3500, 5000]\n}\n\ndf = pd.DataFrame(data)\n\n# Plot the data\nfig, ax = plt.subplots()\n\n# Define the bar labels and colors\nbar_labels = ['2018', '2019', '2020']\nbar_colors = ['tab:blue', 'tab:orange', 'tab:green']\n\n# Draw the bars\nbars = ax.bar(df['Region'], df['2018'], color=bar_colors[0], edgecolor='black', tick_label=df['Region'])\nbars2 = ax.bar(df['Region'], df['2019'], bottom=df['2018'], color=bar_colors[1], edgecolor='black')\nbars3 = ax.bar(df['Region'], df['2020'], bottom=df['2018']+df['2019'], color=bar_colors[2], edgecolor='black')\n\n# Set the picker state of the object corresponding to the Target_object to False\nfor bar in bars:\n    bar.set_picker(False)\n\n# Set the chart title and labels\nax.set_ylabel('Sales')\nax.set_xlabel('Region')\nax.set_title('Sales by Region and Year')\n\n# Add a legend\nax.legend([bars, bars2, bars3], bar_labels, title='Year')\n\n# Annotate the bar values\nax.bar_label(bars, label_type='edge')\nax.bar_label(bars2, label_type='edge')\nax.bar_label(bars3, label_type='edge')\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('gray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_81bed184b9dbf86d/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_81bed184b9dbf86d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_81bed184b9dbf86d/myplot.png"
    },
    {
        "id": "Bar_2f73f8d47b5493cb",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = StringIO(\"\"\"\nProfession,Hours_per_week,Type_of_exercise\nDoctor,15,Yoga\nEngineer,8,Weightlifting\nTeacher,20,Running\n\"\"\")\n\n# Read the data into a pandas DataFrame\ndf = pd.read_csv(data)\n\n# Sort the data by Hours_per_week\ndf = df.sort_values(\"Hours_per_week\")\n\ny = np.arange(len(df.Profession))  # the label locations\nheight = 0.6  # the height of the bars\n\nfig, ax = plt.subplots()\n\n# Create the bar chart\nbars = ax.barh(y, df.Hours_per_week, height, color='skyblue', edgecolor='blue')\n\n# Add some text for labels, title and custom y-axis tick labels, etc.\nax.set_xlabel('Hours per Week')\nax.set_title('Exercise Habits by Profession')\nax.set_yticks(y)\nax.set_yticklabels(df.Profession)\nax.grid(visible=True)\nax.set_facecolor('lightgray')\n\n# Add bar labels\nfor bar in bars:\n    width = bar.get_width()\n    ax.annotate(f'{width}',\n                xy=(width, bar.get_y() + bar.get_height() / 2),\n                xytext=(5, 0),  # 5 points horizontal offset\n                textcoords=\"offset points\",\n                ha='left', va='center')\n\n# Invert the y-axis so the professions read top-to-bottom\nax.invert_yaxis()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, using a shadow offset of (3.02, 3.31) and a shadow color of gold. Also, adjust the clip box for these bars to fit within a bounding box defined by the lower left corner at (135, 24), with a width of 807 and a height of 574, in accordance with the matplotlib.transforms.Bbox format.",
        "Input_image": "./test_dataset/Bar/Bar_2f73f8d47b5493cb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\nfrom matplotlib.transforms import Bbox\n\ndata = StringIO(\"\"\"\nProfession,Hours_per_week,Type_of_exercise\nDoctor,15,Yoga\nEngineer,8,Weightlifting\nTeacher,20,Running\n\"\"\")\n\n# Read the data into a pandas DataFrame\ndf = pd.read_csv(data)\n\n# Sort the data by Hours_per_week\ndf = df.sort_values(\"Hours_per_week\")\n\ny = np.arange(len(df.Profession))  # the label locations\nheight = 0.6  # the height of the bars\n\nfig, ax = plt.subplots()\n\n# Create the bar chart\nbars = ax.barh(y, df.Hours_per_week, height, color='skyblue', edgecolor='blue')\n\n# Add some text for labels, title and custom y-axis tick labels, etc.\nax.set_xlabel('Hours per Week')\nax.set_title('Exercise Habits by Profession')\nax.set_yticks(y)\nax.set_yticklabels(df.Profession)\nax.grid(visible=True)\nax.set_facecolor('lightgray')\n\n# Add bar labels\nfor bar in bars:\n    width = bar.get_width()\n    ax.annotate(f'{width}',\n                xy=(width, bar.get_y() + bar.get_height() / 2),\n                xytext=(5, 0),  # 5 points horizontal offset\n                textcoords=\"offset points\",\n                ha='left', va='center')\n\n# Invert the y-axis so the professions read top-to-bottom\nax.invert_yaxis()\n\n# Set shadow effect and clip box for the target object\nfor idx, bar in enumerate(bars):\n    if idx in [1]:\n        bar.set_path_effects([SimplePatchShadow(offset=(3.02,3.31), shadow_rgbFace='gold'), Normal()])\n        clip_box = Bbox.from_bounds(135, 24, 807, 574)\n        bar.set_clip_box(clip_box)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Bar/Bar_2f73f8d47b5493cb/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_2f73f8d47b5493cb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_2f73f8d47b5493cb/myplot.png"
    },
    {
        "id": "Bar_fdf2fef8081b5634",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The given CSV data\ndata = {\n    'Country': ['USA', 'Canada', 'UK', 'Germany', 'China', 'Japan', 'Australia', 'Brazil'],\n    '2018': [100, 120, 80, 120, 100, 90, 110, 90],\n    '2019': [120, 180, 85, 125, 200, 150, 220, 180],\n    '2020': [80, 150, 105, 90, 300, 90, 110, 90]\n}\n\n# The label locations, the height of the bars, and the multiplier\ny = np.arange(len(data['Country']))\nheight = 0.25\nmultiplier = 0\n\n# Creating the bar chart\nfig, ax = plt.subplots()\n\nfor year in ['2018', '2019', '2020']:\n    offset = height * multiplier\n    bars = ax.barh(y + offset, data[year], height, label=year, color=['red', 'blue', 'green'][multiplier], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Adding labels, title, tick labels, and legend\nax.set_xlabel('Score')\nax.set_title('Score by Country and Year')\nax.set_yticks(y + height)\nax.set_yticklabels(data['Country'])\nax.legend(loc='upper right', ncol=1)\n\n# Inverting y-axis and setting x-axis limit\nax.invert_yaxis()\nax.set_xlim(0, 350)\n\n# Adding grid and changing background color\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the line color of the bars that share the same legend with the bar that contains the center point of the bounding box to #4a3c72. Additionally, set the snap state of the bars related to this area to False.",
        "Input_image": "./test_dataset/Bar/Bar_fdf2fef8081b5634/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The given CSV data\ndata = {\n    'Country': ['USA', 'Canada', 'UK', 'Germany', 'China', 'Japan', 'Australia', 'Brazil'],\n    '2018': [100, 120, 80, 120, 100, 90, 110, 90],\n    '2019': [120, 180, 85, 125, 200, 150, 220, 180],\n    '2020': [80, 150, 105, 90, 300, 90, 110, 90]\n}\n\n# The label locations, the height of the bars, and the multiplier\ny = np.arange(len(data['Country']))\nheight = 0.25\nmultiplier = 0\n\n# Creating the bar chart\nfig, ax = plt.subplots()\n\nfor year in ['2018', '2019', '2020']:\n    offset = height * multiplier\n    bars = ax.barh(y + offset, data[year], height, label=year, color=['red', 'blue', 'green'][multiplier], edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\nfor bar in ax.containers[1]:\n    bar.set_edgecolor('#4a3c72')\n    bar.set_snap(False)\n# Adding labels, title, tick labels, and legend\nax.set_xlabel('Score')\nax.set_title('Score by Country and Year')\nax.set_yticks(y + height)\nax.set_yticklabels(data['Country'])\nax.legend(loc='upper right', ncol=1)\n\n# Inverting y-axis and setting x-axis limit\nax.invert_yaxis()\nax.set_xlim(0, 350)\n\n# Adding grid and changing background color\nax.grid(True)\nax.set_facecolor('gray')\n\n# Modify the linecolor and snap state for the target objects\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_fdf2fef8081b5634/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_fdf2fef8081b5634/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_fdf2fef8081b5634/myplot.png"
    },
    {
        "id": "Bar_66738a68d5304725",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport io\n\n# Given csv data\ncsv_data = \"\"\"\nYear, North America, Europe, Asia\n2013, 12.7, 15.6, 18.9\n2014, 13.5, 16.2, 22.3\n2015, 14.2, 17.1, 20.8\n2016, 15.0, 18.0, 23.5\n2017, 16.1, 20.0, 18.0\n2018, 14.8, 19.8, 25.5\n2019, 15.5, 22.0, 24.0\n\"\"\"\ndf = pd.read_csv(io.StringIO(csv_data), skipinitialspace=True)\n\n# Extract columns\nyears = df['Year']\nregions = df.columns[1:]\n\nx = np.arange(len(years)) # the label locations\nwidth = 0.25  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor region in regions:\n    offset = width * multiplier\n    bars = ax.bar(x + offset, df[region], width, label=region, edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels\nax.set_ylabel('Population (in billions)')\nax.set_title('Population by Year and Region')\nax.set_xticks(x + width)\nax.set_xticklabels(years)\nax.legend()\n\nax.grid(True)\nax.set_facecolor('lightgray')\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the bars that share the same legend with the bar that contains the center point of the bounding box to False. Additionally, change the linewidth of those bars to 3.38.",
        "Input_image": "./test_dataset/Bar/Bar_66738a68d5304725/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport io\n\n# Given csv data\ncsv_data = \"\"\"\nYear, North America, Europe, Asia\n2013, 12.7, 15.6, 18.9\n2014, 13.5, 16.2, 22.3\n2015, 14.2, 17.1, 20.8\n2016, 15.0, 18.0, 23.5\n2017, 16.1, 20.0, 18.0\n2018, 14.8, 19.8, 25.5\n2019, 15.5, 22.0, 24.0\n\"\"\"\ndf = pd.read_csv(io.StringIO(csv_data), skipinitialspace=True)\n\n# Extract columns\nyears = df['Year']\nregions = df.columns[1:]\n\nx = np.arange(len(years)) # the label locations\nwidth = 0.25  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor region in regions:\n    offset = width * multiplier\n    bars = ax.bar(x + offset, df[region], width, label=region, edgecolor='black')\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\nfor idx, bars in enumerate(plt.gca().containers):\n    if idx == 2:\n        for bar in bars:\n            bar.set_clip_on(False)\n            bar.set_linewidth(3.38)\n# Add some text for labels, title and custom x-axis tick labels\nax.set_ylabel('Population (in billions)')\nax.set_title('Population by Year and Region')\nax.set_xticks(x + width)\nax.set_xticklabels(years)\nax.legend()\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Modify the clipping state and linewidth of the bars corresponding to the Target_object\n\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "2",
        "Test_image": "./test_dataset/Bar/Bar_66738a68d5304725/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_66738a68d5304725/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_66738a68d5304725/myplot.png"
    },
    {
        "id": "Bar_082574386b1e444a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata = \"\"\"Year,Book Sales\n2005,2000\n2006,4000\n2007,10000\n2008,2500\n2009,9000\"\"\"\n\n# Convert the string to a DataFrame\ndf = pd.read_csv(StringIO(data))\n\nyears = df['Year'].to_list()\nbook_sales = df['Book Sales'].to_list()\n\nx = np.arange(len(years))  # the label locations\nwidth = 0.5  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nbars = ax.bar(x, book_sales, width, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'], edgecolor='black')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Book Sales')\nax.set_title('Book Sales by Year')\nax.set_xticks(x)\nax.set_xticklabels(years)\nax.bar_label(bars, padding=3)\n\n# Setting background color and grid\nax.set_facecolor('gray')\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the transparency of the bars that contain the center point of the bounding box to 0.631.",
        "Input_image": "./test_dataset/Bar/Bar_082574386b1e444a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndata = \"\"\"Year,Book Sales\n2005,2000\n2006,4000\n2007,10000\n2008,2500\n2009,9000\"\"\"\n\n# Convert the string to a DataFrame\ndf = pd.read_csv(StringIO(data))\n\nyears = df['Year'].to_list()\nbook_sales = df['Book Sales'].to_list()\n\nx = np.arange(len(years))  # the label locations\nwidth = 0.5  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nbars = ax.bar(x, book_sales, width, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'], edgecolor='black')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Book Sales')\nax.set_title('Book Sales by Year')\nax.set_xticks(x)\nax.set_xticklabels(years)\nax.bar_label(bars, padding=3)\n\n# Setting background color and grid\nax.set_facecolor('gray')\nax.grid(True)\n\n# Set the transparency of the bars that are corresponding to the Target_object to 0.6310610262809844\ntarget_indices = {1, 3}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_alpha(0.6310610262809844)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_data_points": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_082574386b1e444a/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_082574386b1e444a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_082574386b1e444a/myplot.png"
    },
    {
        "id": "Bar_cd6abf099a5648a7",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nhouseholds = [\"Johnson Family\", \"Smith Family\", \"Brown Family\", \"Taylor Family\", \"Miller Family\", \"Davis Family\", \"Wilson Family\"]\njanuary = [120, 150, 180, 100, 160, 200, 90]\nfebruary = [135, 220, 190, 130, 170, 240, 110]\nmarch = [110, 120, 150, 70, 200, 210, 80]\n\nfig, ax = plt.subplots()\n\n# Create a bar chart\ny_pos = np.arange(len(households))\nwidth = 0.2\n\n# Define gradients for each month\ngradient_blue = ['#08306b', '#08519c', '#2171b5', '#4292c6', '#6baed6', '#9ecae1', '#c6dbef']\ngradient_orange = ['#a63603', '#e6550d', '#fd8d3c', '#fdae6b', '#fdd0a2', '#feedde', '#fff5eb']\ngradient_green = ['#00441b', '#006d2c', '#238b45', '#41ab5d', '#74c476', '#a1d99b', '#c7e9c0']\n\nbars1 = ax.barh(y_pos - width, january, width, color=gradient_blue, edgecolor='black', label='January')\nbars2 = ax.barh(y_pos, february, width, color=gradient_orange, edgecolor='black', label='February')\nbars3 = ax.barh(y_pos + width, march, width, color=gradient_green, edgecolor='black', label='March')\n\nax.set_yticks(y_pos)\nax.set_yticklabels(households)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Expenses')\nax.set_title('Household Expenses Over Time')\nax.legend()\n\n# Annotate the data value on the chart figure\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\n# Add grids and set background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot_modified.png\")",
        "Instruction": "Set the animated state of the bars that share the same legend with the bar that contains the center point of the bounding box to True. For those same bars, also update the linewidth to 3.45.",
        "Input_image": "./test_dataset/Bar/Bar_cd6abf099a5648a7/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nhouseholds = [\"Johnson Family\", \"Smith Family\", \"Brown Family\", \"Taylor Family\", \"Miller Family\", \"Davis Family\", \"Wilson Family\"]\njanuary = [120, 150, 180, 100, 160, 200, 90]\nfebruary = [135, 220, 190, 130, 170, 240, 110]\nmarch = [110, 120, 150, 70, 200, 210, 80]\n\nfig, ax = plt.subplots()\n\n# Create a bar chart\ny_pos = np.arange(len(households))\nwidth = 0.2\n\n# Define gradients for each month\ngradient_blue = ['#08306b', '#08519c', '#2171b5', '#4292c6', '#6baed6', '#9ecae1', '#c6dbef']\ngradient_orange = ['#a63603', '#e6550d', '#fd8d3c', '#fdae6b', '#fdd0a2', '#feedde', '#fff5eb']\ngradient_green = ['#00441b', '#006d2c', '#238b45', '#41ab5d', '#74c476', '#a1d99b', '#c7e9c0']\n\nbars1 = ax.barh(y_pos - width, january, width, color=gradient_blue, edgecolor='black', label='January')\nbars2 = ax.barh(y_pos, february, width, color=gradient_orange, edgecolor='black', label='February')\nbars3 = ax.barh(y_pos + width, march, width, color=gradient_green, edgecolor='black', label='March')\n\nax.set_yticks(y_pos)\nax.set_yticklabels(households)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Expenses')\nax.set_title('Household Expenses Over Time')\nax.legend()\n\n# Annotate the data value on the chart figure\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\n# Add grids and set background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Set the animated state and linewidth of the object corresponding to the Target_object\nfor bar in bars1:\n    bar.set_animated(True)\n    bar.set_linewidth(3.45)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_cd6abf099a5648a7/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_cd6abf099a5648a7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_cd6abf099a5648a7/myplot_modified.png"
    },
    {
        "id": "Bar_e8dddf279e6c8006",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nCountry,2000,2010,2020\nUSA,30.5,35.7,42.4\nUK,23.0,26.9,28.0\nAustralia,21.7,24.6,31.3\nChina,5.5,12.2,14.3\nIndia,3.8,5.2,9.5\nBrazil,11.4,15.8,22.1\n\"\"\")\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(df['Country'], df['2020'], color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label with increased font size\nax.set_title('Country Population in 2020', fontsize=16) # Changed font size here\nax.set_xlabel('Country', fontsize=14) # Changed font size here\nax.set_ylabel('Population', fontsize=14) # Changed font size here\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend with increased font size\nax.legend([\"Population\"], loc='upper right', fontsize=12) # Changed font size here\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterization of the bars that share the same legend with the bar that contains the center point of the bounding box to True. Also, make the visibility of these bars False for the same bars.",
        "Input_image": "./test_dataset/Bar/Bar_e8dddf279e6c8006/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nCountry,2000,2010,2020\nUSA,30.5,35.7,42.4\nUK,23.0,26.9,28.0\nAustralia,21.7,24.6,31.3\nChina,5.5,12.2,14.3\nIndia,3.8,5.2,9.5\nBrazil,11.4,15.8,22.1\n\"\"\")\ndf = pd.read_csv(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(df['Country'], df['2020'], color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label with increased font size\nax.set_title('Country Population in 2020', fontsize=16) # Changed font size here\nax.set_xlabel('Country', fontsize=14) # Changed font size here\nax.set_ylabel('Population', fontsize=14) # Changed font size here\n\n# Add grid\nax.grid(True, which='both')\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Add legend with increased font size\nax.legend([\"Population\"], loc='upper right', fontsize=12) # Changed font size here\n\n# Add the corresponding value at the end of each bar\nax.bar_label(bars)\n\n# Modify the rasterized state and visibility of the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_rasterized(True)\n        bar.set_visible(False)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_e8dddf279e6c8006/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_e8dddf279e6c8006/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_e8dddf279e6c8006/myplot.png"
    },
    {
        "id": "Bar_a3b12df4715813b5",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = StringIO(\"\"\"\n\"Meat Type\",\"Consumption (in million tonnes)\"\n\"Beef\",120\n\"Pork\",150\n\"Poultry\",200\n\"Lamb\",80\n\"Fish\",90\n\"Seafood\",70\n\"Venison\",50\n\"Goat\",40\n\"Buffalo\",30\n\"\"\")\ndf = pd.read_csv(data, sep=\",\")\nmeat_types = df['Meat Type'].tolist()\nconsumption = df['Consumption (in million tonnes)'].tolist()\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(meat_types, consumption, color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Meat Consumption')\nax.set_xlabel('Meat Type')\nax.set_ylabel('Consumption (in million tonnes)')\n\n# Add grid\nax.grid(True)\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n\n\n# Adding bar labels\nax.bar_label(bars)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the bars that contain the center point of the bounding box to #5524c0.",
        "Input_image": "./test_dataset/Bar/Bar_a3b12df4715813b5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = StringIO(\"\"\"\n\"Meat Type\",\"Consumption (in million tonnes)\"\n\"Beef\",120\n\"Pork\",150\n\"Poultry\",200\n\"Lamb\",80\n\"Fish\",90\n\"Seafood\",70\n\"Venison\",50\n\"Goat\",40\n\"Buffalo\",30\n\"\"\")\ndf = pd.read_csv(data, sep=\",\")\nmeat_types = df['Meat Type'].tolist()\nconsumption = df['Consumption (in million tonnes)'].tolist()\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nbars = ax.bar(meat_types, consumption, color='skyblue', edgecolor='black')\n\n# Set title, x-label and y-label\nax.set_title('Meat Consumption')\nax.set_xlabel('Meat Type')\nax.set_ylabel('Consumption (in million tonnes)')\n\n# Add grid\nax.grid(True)\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Change the color of the bars that are corresponding to the Target_object to #5524c0\ntarget_indices = {1, 3, 5}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_color('#5524c0')\n\n\n# Adding bar labels\nax.bar_label(bars)\n\n# Ensure the plot is displayed correctly with multiple plots in a single Notebook cell\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_data_points": "1,3,5",
        "Test_image": "./test_dataset/Bar/Bar_a3b12df4715813b5/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_a3b12df4715813b5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_a3b12df4715813b5/figure.png"
    },
    {
        "id": "Bar_032ad9d5db3ad80d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    \"Year\": [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008],\n    \"Burglary Rate\": [1200, 1400, 1700, 2000, 1800, 2200, 2000, 1500, 1000],\n    \"Robbery Rate\": [800, 1000, 1200, 1500, 1400, 1800, 1600, 1200, 800]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\nwidth = 0.35\n\nbars1 = ax.bar(df[\"Year\"] - width/2, df[\"Burglary Rate\"], width, label=\"Burglary Rate\", color=\"blue\", edgecolor=\"black\")\nbars2 = ax.bar(df[\"Year\"] + width/2, df[\"Robbery Rate\"], width, label=\"Robbery Rate\", color=\"red\", edgecolor=\"black\")\n\nax.set_title(\"Comparison of Burglary and Robbery Rates from 2000 to 2008\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Rate\")\nax.legend()\n\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\nax.grid(True)\nax.set_facecolor(\"lightgray\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the bars that share the same legend as those containing the center point of the bounding box to #8bfc08.",
        "Input_image": "./test_dataset/Bar/Bar_032ad9d5db3ad80d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    \"Year\": [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008],\n    \"Burglary Rate\": [1200, 1400, 1700, 2000, 1800, 2200, 2000, 1500, 1000],\n    \"Robbery Rate\": [800, 1000, 1200, 1500, 1400, 1800, 1600, 1200, 800]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\nwidth = 0.35\n\nbars1 = ax.bar(df[\"Year\"] - width/2, df[\"Burglary Rate\"], width, label=\"Burglary Rate\", color=\"blue\", edgecolor=\"black\")\nbars2 = ax.bar(df[\"Year\"] + width/2, df[\"Robbery Rate\"], width, label=\"Robbery Rate\", color=\"red\", edgecolor=\"black\")\n# Change the color of the bars that are corresponding to the Target_object to #8bfc08\nfor bar in plt.gca().containers[1]:\n    bar.set_color('#8bfc08')\n\nax.set_title(\"Comparison of Burglary and Robbery Rates from 2000 to 2008\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Rate\")\nax.legend()\n\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\nax.grid(True)\nax.set_facecolor(\"lightgray\")\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_032ad9d5db3ad80d/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_032ad9d5db3ad80d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_032ad9d5db3ad80d/figure.png"
    },
    {
        "id": "Bar_3836d0a176a944aa",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndiets = (\"Keto\", \"Paleo\", \"Vegan\")\nmonths = np.array(range(1, 13))  # 12 months in a year\ndata = np.array([[15, 30, 50, 25, 60, 70, 40, 30, 20, 10, 30, 60],\n                 [70, 60, 40, 20, 10, 5, 7, 75, 80, 85, 70, 60],\n                 [30, 40, 45, 50, 55, 45, 35, 25, 15, 45, 70, 30]])\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nfor i, diet in enumerate(diets):\n    bars = ax.bar(months + i*0.25, data[i], width=0.25, align='center', label=diet, edgecolor='black')\n    ax.bar_label(bars)\n\nax.set_xticks(months + 0.25)\nax.set_xticklabels(months)\n\nax.set_xlabel('Month')\nax.set_ylabel('Popularity Score')\nax.set_title('Popularity of Diets Over Months')\nax.legend()\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the bars that share the same legend with the bar that contains the center point of the bounding box to True. Also, enable the picker state for the bars related to the Target_object at those same points.",
        "Input_image": "./test_dataset/Bar/Bar_3836d0a176a944aa/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndiets = (\"Keto\", \"Paleo\", \"Vegan\")\nmonths = np.array(range(1, 13))  # 12 months in a year\ndata = np.array([[15, 30, 50, 25, 60, 70, 40, 30, 20, 10, 30, 60],\n                 [70, 60, 40, 20, 10, 5, 7, 75, 80, 85, 70, 60],\n                 [30, 40, 45, 50, 55, 45, 35, 25, 15, 45, 70, 30]])\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nfor i, diet in enumerate(diets):\n    bars = ax.bar(months + i*0.25, data[i], width=0.25, align='center', label=diet, edgecolor='black')\n    ax.bar_label(bars)\n\nax.set_xticks(months + 0.25)\nax.set_xticklabels(months)\n\nax.set_xlabel('Month')\nax.set_ylabel('Popularity Score')\nax.set_title('Popularity of Diets Over Months')\nax.legend()\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Set the clipping state and picker state for the target object\nfor bar in ax.containers[1]:\n    bar.set_clip_on(True)\n    bar.set_picker(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_3836d0a176a944aa/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_3836d0a176a944aa/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_3836d0a176a944aa/myplot.png"
    },
    {
        "id": "Bar_4fff40685bdb31a1",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO('''Year,Smartphone Usage\n2016,60\n2017,65\n2018,130\n2019,70\n2020,80\n2021,40\n2022,90\n2023,45\n2024,75\n2025,105\n2026,50\n2027,35\n2028,65\n2029,75\n''')\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nbars = ax.bar(df['Year'], df['Smartphone Usage'], color='skyblue', edgecolor='black')\n\n# Setting labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Smartphone Usage')\nax.set_title('Smartphone Usage Over the Years')\n\n# Annotate the data value on the chart \nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom', fontsize=8)\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill pattern of the bars that contain the center point of the bounding box to '|', and update their edge color to '#0aa992'.",
        "Input_image": "./test_dataset/Bar/Bar_4fff40685bdb31a1/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO('''Year,Smartphone Usage\n2016,60\n2017,65\n2018,130\n2019,70\n2020,80\n2021,40\n2022,90\n2023,45\n2024,75\n2025,105\n2026,50\n2027,35\n2028,65\n2029,75\n''')\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Draw the bar chart\nbars = ax.bar(df['Year'], df['Smartphone Usage'], color='skyblue', edgecolor='black')\n\n# Setting labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Smartphone Usage')\nax.set_title('Smartphone Usage Over the Years')\n\n# Annotate the data value on the chart \nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), va='bottom', fontsize=8)\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Use 'bar.set_hatch' to set the fill pattern of the bars corresponding to the Target_object to '|', and the edge color to '#0aa992'\ntarget_indices = {2, 4, 6}\nfor i, bar in enumerate(ax.patches):\n    if i in target_indices:\n        bar.set_hatch('|')\n        bar.set_edgecolor('#0aa992')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_data_points": "2,4,6",
        "Test_image": "./test_dataset/Bar/Bar_4fff40685bdb31a1/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_4fff40685bdb31a1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_4fff40685bdb31a1/figure.png"
    },
    {
        "id": "Bar_e2c48bffc8ecea18",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data\ndata = {\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\", \"Philadelphia\"],\n    \"Recycling Rate\": [60, 50, 65, 74, 58, 70]\n}\n\ndf = pd.DataFrame(data)\n\n# Set colors\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"]\n\nfig, ax = plt.subplots()\nbars = ax.bar(df[\"City\"], df[\"Recycling Rate\"], color=colors, edgecolor='black')\n\n# Set title, x and y axis labels with modified font sizes\nax.set_title(\"Recycling Rate in Different Cities\", fontsize=20)\nax.set_xlabel(\"City\", fontsize=15)\nax.set_ylabel(\"Recycling Rate (%)\", fontsize=15)\n\n# Set tick labels font size\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate the data value on the chart\nax.bar_label(bars)\n\n# Save the figure with adjusted layout\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, with a shadow offset of (2.42, 3.45) and using gold for the shadow color.",
        "Input_image": "./test_dataset/Bar/Bar_e2c48bffc8ecea18/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n# Data\ndata = {\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\", \"Philadelphia\"],\n    \"Recycling Rate\": [60, 50, 65, 74, 58, 70]\n}\n\ndf = pd.DataFrame(data)\n\n# Set colors\ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\"]\n\nfig, ax = plt.subplots()\nbars = ax.bar(df[\"City\"], df[\"Recycling Rate\"], color=colors, edgecolor='black')\n\n# Set title, x and y axis labels with modified font sizes\nax.set_title(\"Recycling Rate in Different Cities\", fontsize=20)\nax.set_xlabel(\"City\", fontsize=15)\nax.set_ylabel(\"Recycling Rate (%)\", fontsize=15)\n\n# Set tick labels font size\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate the data value on the chart\nax.bar_label(bars)\n\n# Set shadow effect for the first bar\nfor idx,bar in enumerate(bars):\n    if idx in [0,2]:\n        bar.set_path_effects([SimplePatchShadow(offset=(2.42,3.45), shadow_rgbFace='gold'), Normal()])\n\n\n# Save the figure with adjusted layout\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Bar/Bar_e2c48bffc8ecea18/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_e2c48bffc8ecea18/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_e2c48bffc8ecea18/myplot.png"
    },
    {
        "id": "Bar_f0c2e38383e1d797",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nai_technologies = (\"Neural Networks\", \"Deep Learning\", \"Machine Learning\", \"Natural Language Processing\", \"Robotics\", \"Computer Vision\", \"Reinforcement Learning\", \"Predictive Analytics\")\nadoption_rates = (85, 70, 100, 60, 45, 90, 110, 65)\n\n# Bar Plot\nfig, ax = plt.subplots(facecolor='lightgrey')\ny_pos = np.arange(len(ai_technologies)) \nbars = ax.barh(y_pos, adoption_rates, color='blue', edgecolor='black')\n\n# Adding Labels\nax.set_xlabel('Adoption Rate (%)')\nax.set_ylabel('AI Technology')\nax.set_title('Adoption Rate of Various AI Technologies')\nax.set_yticks(y_pos)\nax.set_yticklabels(ai_technologies)\nax.invert_yaxis()  # labels read top-to-bottom\nax.grid(True)\nax.bar_label(bars, padding=3)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the clipping state of the bars that contain the center point of the bounding box to False. Additionally, set the snap state of those bars to False as well.",
        "Input_image": "./test_dataset/Bar/Bar_f0c2e38383e1d797/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nai_technologies = (\"Neural Networks\", \"Deep Learning\", \"Machine Learning\", \"Natural Language Processing\", \"Robotics\", \"Computer Vision\", \"Reinforcement Learning\", \"Predictive Analytics\")\nadoption_rates = (85, 70, 100, 60, 45, 90, 110, 65)\n\n# Bar Plot\nfig, ax = plt.subplots(facecolor='lightgrey')\ny_pos = np.arange(len(ai_technologies)) \nbars = ax.barh(y_pos, adoption_rates, color='blue', edgecolor='black')\n\n# Adding Labels\nax.set_xlabel('Adoption Rate (%)')\nax.set_ylabel('AI Technology')\nax.set_title('Adoption Rate of Various AI Technologies')\nax.set_yticks(y_pos)\nax.set_yticklabels(ai_technologies)\nax.invert_yaxis()  # labels read top-to-bottom\nax.grid(True)\nax.bar_label(bars, padding=3)\n\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_clip_on(False)\n        bar.set_snap(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_f0c2e38383e1d797/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_f0c2e38383e1d797/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_f0c2e38383e1d797/myplot.png"
    },
    {
        "id": "Bar_dde4a45512f772ea",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [\"1960\", \"1970\", \"1980\", \"1990\", \"2000\", \"2005\", \"2006\", \"2007\", \"2008\", \"2010\", \"2020\"]\ndata = {\n    'Satellites': [100, 500, 1000, 1500, 2000, 1000, 1500, 3000, 2500, 3000, 3500],\n    'Rocket Debris': [0, 0, 200, 400, 600, 500, 600, 1200, 900, 1100, 1500],\n    'Other Debris': [0, 50, 100, 300, 500, 400, 500, 1000, 800, 900, 1300],\n}\n\nx = np.arange(len(years))  # the label locations\nwidth = 0.25  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor attribute, values in data.items():\n    offset = width * multiplier\n    bars = ax.bar(x + offset, values, width, label=attribute)\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Number of Objects', fontsize=14)  # Changed font size here\nax.set_title('Space Debris by Year', fontsize=20)  # Changed font size here\nax.set_xticks(x)\nax.set_xticklabels(years, fontsize=14)  # Changed font size here\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label of the bars that share the same legend with the bar that contains the center point of the bounding box to 'A new Label'. Additionally, set the picker state of those bars to False.",
        "Input_image": "./test_dataset/Bar/Bar_dde4a45512f772ea/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [\"1960\", \"1970\", \"1980\", \"1990\", \"2000\", \"2005\", \"2006\", \"2007\", \"2008\", \"2010\", \"2020\"]\ndata = {\n    'Satellites': [100, 500, 1000, 1500, 2000, 1000, 1500, 3000, 2500, 3000, 3500],\n    'Rocket Debris': [0, 0, 200, 400, 600, 500, 600, 1200, 900, 1100, 1500],\n    'Other Debris': [0, 50, 100, 300, 500, 400, 500, 1000, 800, 900, 1300],\n}\n\nx = np.arange(len(years))  # the label locations\nwidth = 0.25  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots()\n\nfor idx,(attribute, values) in enumerate(data.items()):\n    offset = width * multiplier\n    bars = ax.bar(x + offset, values, width, label='A new Label'if idx ==0 else attribute)\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\nbars = plt.gca().containers\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Number of Objects', fontsize=14)  # Changed font size here\nax.set_title('Space Debris by Year', fontsize=20)  # Changed font size here\nax.set_xticks(x)\nax.set_xticklabels(years, fontsize=14)  # Changed font size here\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\n\n# Modify the label and picker state of the first bar in 'Satellites'\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_dde4a45512f772ea/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_dde4a45512f772ea/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_dde4a45512f772ea/myplot.png"
    },
    {
        "id": "Bar_84557ee08e91574e",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"\nProfession,Hours Worked (2019),Hours Worked (2020)\nDoctors,65,70\nSoftware Developers,45,42\nTeachers,50,38\nTruck Drivers,55,60\nLawyers,60,58\nChefs,55,50\n\"\"\")\n\ndf = pd.read_csv(data)\n\nprofessions = df['Profession'].tolist()\nhours_2019 = df['Hours Worked (2019)'].tolist()\nhours_2020 = df['Hours Worked (2020)'].tolist()\n\nx = np.arange(len(professions))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\nrects1 = ax.bar(x - width/2, hours_2019, width, label='2019', color='#1f77b4', edgecolor='black')\nrects2 = ax.bar(x + width/2, hours_2020, width, label='2020', color='#ff7f0e', edgecolor='black')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Hours Worked')\nax.set_title('Average Hours Worked by Profession')\nax.set_xticks(x)\nax.set_xticklabels(professions)\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\n# Setting background color to white and removing grid lines\nax.set_facecolor('white')  # Change to white background\nax.grid(False)  # Remove grid lines\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the clipping state of the bars that share the same legend with the bar that contains the center point of the bounding box to False. For the same bars, set the linestyle to 'dashed'.",
        "Input_image": "./test_dataset/Bar/Bar_84557ee08e91574e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"\nProfession,Hours Worked (2019),Hours Worked (2020)\nDoctors,65,70\nSoftware Developers,45,42\nTeachers,50,38\nTruck Drivers,55,60\nLawyers,60,58\nChefs,55,50\n\"\"\")\n\ndf = pd.read_csv(data)\n\nprofessions = df['Profession'].tolist()\nhours_2019 = df['Hours Worked (2019)'].tolist()\nhours_2020 = df['Hours Worked (2020)'].tolist()\n\nx = np.arange(len(professions))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\nrects1 = ax.bar(x - width/2, hours_2019, width, label='2019', color='#1f77b4', edgecolor='black')\nrects2 = ax.bar(x + width/2, hours_2020, width, label='2020', color='#ff7f0e', edgecolor='black')\nfor rect in rects1:\n    rect.set_clip_on(False)\n    rect.set_linestyle('dashed')\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Hours Worked')\nax.set_title('Average Hours Worked by Profession')\nax.set_xticks(x)\nax.set_xticklabels(professions)\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\n# Setting background color to white and removing grid lines\nax.set_facecolor('white')  # Change to white background\nax.grid(False)  # Remove grid lines\n\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_84557ee08e91574e/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_84557ee08e91574e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_84557ee08e91574e/myplot.png"
    },
    {
        "id": "Bar_096f5c87b305da12",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    \"Year\": [2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015],\n    \"Brent Crude\": [72.44, 96.94, 61.74, 79.61, 111.26, 111.63, 108.56, 98.97, 52.32],\n    \"West Texas Intermediate\": [72.34, 99.67, 59.65, 79.48, 94.88, 94.05, 97.98, 93.17, 48.66]\n}\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Set the bar width\nbar_width = 0.35\n\n# Set the positions of the bars on the x axis\nr1 = np.arange(len(data[\"Year\"]))  # the label locations\nr2 = [x + bar_width for x in r1]\n\n# Create the bars\nbars1 = ax.bar(r1, data[\"Brent Crude\"], width=bar_width, color='b', edgecolor='grey', label='Brent Crude')\nbars2 = ax.bar(r2, data[\"West Texas Intermediate\"], width=bar_width, color='r', edgecolor='grey', label='West Texas Intermediate')\n\n# Add the data value on the top of each bar\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\n# Custom the subplot layout\nax.set_xlabel('Year')\nax.set_ylabel('Average Oil Price ($)')\nax.set_title('Average Oil Price of Brent Crude and WTI from 2007 to 2015')\nax.set_xticks([r + bar_width / 2 for r in range(len(data[\"Year\"]))])\nax.set_xticklabels(data[\"Year\"])\nax.legend()\n\n# Set the background color\nax.set_facecolor('lightgray')\nax.grid(True)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill pattern of the bars that share the same legend as those containing the center point of the bounding box to 'o', and update their edge color to '#197b26'.",
        "Input_image": "./test_dataset/Bar/Bar_096f5c87b305da12/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    \"Year\": [2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015],\n    \"Brent Crude\": [72.44, 96.94, 61.74, 79.61, 111.26, 111.63, 108.56, 98.97, 52.32],\n    \"West Texas Intermediate\": [72.34, 99.67, 59.65, 79.48, 94.88, 94.05, 97.98, 93.17, 48.66]\n}\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Set the bar width\nbar_width = 0.35\n\n# Set the positions of the bars on the x axis\nr1 = np.arange(len(data[\"Year\"]))  # the label locations\nr2 = [x + bar_width for x in r1]\n\n# Create the bars\nbars1 = ax.bar(r1, data[\"Brent Crude\"], width=bar_width, color='b', edgecolor='grey', label='Brent Crude')\nbars2 = ax.bar(r2, data[\"West Texas Intermediate\"], width=bar_width, color='r', edgecolor='grey', label='West Texas Intermediate')\n\n# Add the data value on the top of each bar\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\n\n# Custom the subplot layout\nax.set_xlabel('Year')\nax.set_ylabel('Average Oil Price ($)')\nax.set_title('Average Oil Price of Brent Crude and WTI from 2007 to 2015')\nax.set_xticks([r + bar_width / 2 for r in range(len(data[\"Year\"]))])\nax.set_xticklabels(data[\"Year\"])\n\n# Use bar.set_hatch to set the fill pattern of the bars corresponding to the Target_object to 'o', and the edge color to '#197b26'\nfor bar in plt.gca().containers[1]:\n    bar.set_hatch('o')\n    bar.set_edgecolor('#197b26')\n\nax.legend()\n\n# Set the background color\nax.set_facecolor('lightgray')\nax.grid(True)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_096f5c87b305da12/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_096f5c87b305da12/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_096f5c87b305da12/figure.png"
    },
    {
        "id": "Bar_25f12fcf0a608e72",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# The data given in csv format\ndata = StringIO(\"\"\"\nYear,Smartphones,IoT Devices,AI Technology\n2015,500,100,50\n2016,550,200,60\n2017,700,300,70\n2018,2000,400,100\n2019,2100,600,130\n\"\"\")\n\n# Read the data into a pandas DataFrame\ndf = pd.read_csv(data)\n\n# Create a new figure and a set of subplots\nfig, ax = plt.subplots()\n\n# The x-axis labels\nyears = df['Year'].values\n\n# The bar heights\nsmartphones = df['Smartphones'].values\niot_devices = df['IoT Devices'].values\nai_technology = df['AI Technology'].values\n\n# The labels for the bars\nbar_labels = ['Smartphones', 'IoT Devices', 'AI Technology']\n\n# The colors for the bars\nbar_colors = ['tab:blue', 'tab:orange', 'tab:green']\n\n# Plot the data\nbars1 = ax.bar(years-0.2, smartphones, width=0.2, color=bar_colors[0], align='center', label=bar_labels[0])\nbars2 = ax.bar(years, iot_devices, width=0.2, color=bar_colors[1], align='center', label=bar_labels[1])\nbars3 = ax.bar(years+0.2, ai_technology, width=0.2, color=bar_colors[2], align='center', label=bar_labels[2])\n\n# Add the labels to the bars\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Year')\nax.set_ylabel('Number of Devices')\n\n# Set the title for the plot\nax.set_title('Number of Devices by Year and Type')\n\n# Add a legend\nax.legend(title='Device Type')\n\n# Add grid\nax.grid(True)\n\n# Set the background color for the plot\nax.set_facecolor('lightgray')\n\n# Ensure everything fits\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply a stroke to the bars that share the same legend with the bar that contains the center point of the bounding box, using a linewidth of 2.23 and a foreground color of #196243. Additionally, set the transparency of these bars to 0.47.",
        "Input_image": "./test_dataset/Bar/Bar_25f12fcf0a608e72/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\nimport matplotlib.patheffects as path_effects\n\n# The data given in csv format\ndata = StringIO(\"\"\"\nYear,Smartphones,IoT Devices,AI Technology\n2015,500,100,50\n2016,550,200,60\n2017,700,300,70\n2018,2000,400,100\n2019,2100,600,130\n\"\"\")\n\n# Read the data into a pandas DataFrame\ndf = pd.read_csv(data)\n\n# Create a new figure and a set of subplots\nfig, ax = plt.subplots()\n\n# The x-axis labels\nyears = df['Year'].values\n\n# The bar heights\nsmartphones = df['Smartphones'].values\niot_devices = df['IoT Devices'].values\nai_technology = df['AI Technology'].values\n\n# The labels for the bars\nbar_labels = ['Smartphones', 'IoT Devices', 'AI Technology']\n\n# The colors for the bars\nbar_colors = ['tab:blue', 'tab:orange', 'tab:green']\n\n# Plot the data\nbars1 = ax.bar(years-0.2, smartphones, width=0.2, color=bar_colors[0], align='center', label=bar_labels[0])\nbars2 = ax.bar(years, iot_devices, width=0.2, color=bar_colors[1], align='center', label=bar_labels[1])\nbars3 = ax.bar(years+0.2, ai_technology, width=0.2, color=bar_colors[2], align='center', label=bar_labels[2])\n\n# Add the labels to the bars\nax.bar_label(bars1, padding=3)\nax.bar_label(bars2, padding=3)\nax.bar_label(bars3, padding=3)\nstroke_effect = path_effects.withStroke(linewidth=2.2280705134375243, foreground='#196243')\n\n\nfor bar in bars1:\n    bar.set_path_effects([stroke_effect])\n    bar.set_alpha(0.47)\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Year')\nax.set_ylabel('Number of Devices')\n\n# Set the title for the plot\nax.set_title('Number of Devices by Year and Type')\n\n# Add a legend\nax.legend(title='Device Type')\n\n# Add grid\nax.grid(True)\n\n# Set the background color for the plot\nax.set_facecolor('lightgray')\n\n# Ensure everything fits\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "0",
        "Test_image": "./test_dataset/Bar/Bar_25f12fcf0a608e72/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_25f12fcf0a608e72/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_25f12fcf0a608e72/myplot.png"
    },
    {
        "id": "Bar_67bddbbd791aaa16",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    \"Type of Alcohol\": [\"Beer\", \"Wine\", \"Spirits\", \"Beer\", \"Wine\", \"Spirits\", \"Beer\"],\n    \"Consumption\": [100, 120, 80, 70, 150, 50, 90]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\nax.set_facecolor('lightgray')\nax.grid(True)\n\ntypes = df['Type of Alcohol'].unique()\ncolors = ['green', 'blue', 'red']\nedgecolors = ['darkgreen', 'darkblue', 'darkred']\nbars = []\n\nfor i, alcohol_type in enumerate(types):\n    consumption = df[df['Type of Alcohol'] == alcohol_type]['Consumption']\n    bar = ax.bar(alcohol_type, consumption.sum(), color=colors[i], edgecolor=edgecolors[i])\n    bars.append(bar)\n\nax.set_title('Total Consumption of Different Types of Alcohol')\nax.set_xlabel('Type of Alcohol')\nax.set_ylabel('Total Consumption')\n\nax.legend(bars, types, loc=\"upper right\")\n\nfor bar in bars:\n    ax.bar_label(bar)\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the color of the bars that share the same legend as those containing the center point of the bounding box to #13b187.",
        "Input_image": "./test_dataset/Bar/Bar_67bddbbd791aaa16/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    \"Type of Alcohol\": [\"Beer\", \"Wine\", \"Spirits\", \"Beer\", \"Wine\", \"Spirits\", \"Beer\"],\n    \"Consumption\": [100, 120, 80, 70, 150, 50, 90]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\nax.set_facecolor('lightgray')\nax.grid(True)\n\ntypes = df['Type of Alcohol'].unique()\ncolors = ['green', 'blue', 'red']\nedgecolors = ['darkgreen', 'darkblue', 'darkred']\nbars = []\n\nfor i, alcohol_type in enumerate(types):\n    consumption = df[df['Type of Alcohol'] == alcohol_type]['Consumption']\n    bar = ax.bar(alcohol_type, consumption.sum(), color=colors[i], edgecolor=edgecolors[i])\n    bars.append(bar)\n\n# Change the color of the bars that are corresponding to the Target_object to #13b187\nfor bar in bars[1]:\n    bar.set_color('#13b187')\n\nax.set_title('Total Consumption of Different Types of Alcohol')\nax.set_xlabel('Type of Alcohol')\nax.set_ylabel('Total Consumption')\n\nax.legend(bars, types, loc=\"upper right\")\n\nfor bar in bars:\n    ax.bar_label(bar)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_67bddbbd791aaa16/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_67bddbbd791aaa16/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_67bddbbd791aaa16/myplot.png"
    },
    {
        "id": "Bar_eed87e957e30a3a4",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ncsv_data = StringIO(\"\"\"\nEntertainment Form,Popularity Index\nCinema,55\nOnline Gaming,80\nMusic Concerts,35\nSporting Events,75\nTV Series,90\nBook Reading,25\n\"\"\")\n\ndata = pd.read_csv(csv_data)\n\nfig, ax = plt.subplots()\n\nbars = ax.bar(data['Entertainment Form'], data['Popularity Index'], color='skyblue', edgecolor='black')\n\nax.set_title('Popularity Index of Different Entertainment Forms')\nax.set_xlabel('Entertainment Form')\nax.set_ylabel('Popularity Index')\nax.grid(False)  # Remove grid lines by setting to False.\nax.set_facecolor('white')  # Change the background color to white.\n\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2.0, yval, int(yval), va='bottom') # va: vertical alignment\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, using a shadow offset of (3.64, 2.23) and gray as the shadow color.",
        "Input_image": "./test_dataset/Bar/Bar_eed87e957e30a3a4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\ncsv_data = StringIO(\"\"\"\nEntertainment Form,Popularity Index\nCinema,55\nOnline Gaming,80\nMusic Concerts,35\nSporting Events,75\nTV Series,90\nBook Reading,25\n\"\"\")\n\ndata = pd.read_csv(csv_data)\n\nfig, ax = plt.subplots()\n\nbars = ax.bar(data['Entertainment Form'], data['Popularity Index'], color='skyblue', edgecolor='black')\n\nax.set_title('Popularity Index of Different Entertainment Forms')\nax.set_xlabel('Entertainment Form')\nax.set_ylabel('Popularity Index')\nax.grid(False)  # Remove grid lines by setting to False.\nax.set_facecolor('white')  # Change the background color to white.\n\nfor idx, bar in enumerate(bars):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2.0, yval, int(yval), va='bottom') # va: vertical alignment\n    if idx in [1, 3]:\n        bar.set_path_effects([SimplePatchShadow(offset=(3.64,2.23), shadow_rgbFace='gray'), Normal()])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Bar/Bar_eed87e957e30a3a4/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_eed87e957e30a3a4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_eed87e957e30a3a4/myplot.png"
    },
    {
        "id": "Bar_3709f6a827d70c66",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {\n    'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    'Earthquakes': [98, 90, 85, 78, 100, 75, 70, 68, 65, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42],\n    'Hurricanes': [15, 20, 25, 30, 35, 40, 100, 95, 90, 80, 70, 60, 55, 50, 45, 40, 35, 30, 25, 20],\n    'Floods': [50, 52, 55, 57, 60, 45, 42, 40, 38, 35, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55],\n    'Wildfires': [20, 25, 30, 35, 40, 100, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25],\n    'Tornados': [80, 70, 60, 50, 45, 35, 30, 28, 26, 25, 24, 23, 22, 21, 20, 19, 18, 100, 95, 90]\n}\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(data['Year']))  # the label locations\nheight = 0.15  # the height of the bars\nmultiplier = 0\ncolors = ['red', 'blue', 'green', 'purple', 'orange']\ndisasters = ['Earthquakes', 'Hurricanes', 'Floods', 'Wildfires', 'Tornados']\n\nfor i, disaster in enumerate(disasters):\n    offset = height * multiplier\n    bars = ax.bar(x + offset, data[disaster], height, color=colors[i], edgecolor='black', label=disaster)\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Number of Disasters')\nax.set_title('Number of Disasters per Year')\nax.set_xticks(x + height * 2)\nax.set_xticklabels(data['Year'], rotation=90)\nax.legend(loc='upper left', ncol=1)\n\n# Remove grid and change background color to white\nax.grid(False)\nax.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow to the bars that share the same legend as the ones containing the center point of the bounding box, using a shadow offset of (4, 1) units.",
        "Input_image": "./test_dataset/Bar/Bar_3709f6a827d70c66/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import withSimplePatchShadow\n\n# Given data\ndata = {\n    'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    'Earthquakes': [98, 90, 85, 78, 100, 75, 70, 68, 65, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42],\n    'Hurricanes': [15, 20, 25, 30, 35, 40, 100, 95, 90, 80, 70, 60, 55, 50, 45, 40, 35, 30, 25, 20],\n    'Floods': [50, 52, 55, 57, 60, 45, 42, 40, 38, 35, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55],\n    'Wildfires': [20, 25, 30, 35, 40, 100, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25],\n    'Tornados': [80, 70, 60, 50, 45, 35, 30, 28, 26, 25, 24, 23, 22, 21, 20, 19, 18, 100, 95, 90]\n}\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(data['Year']))  # the label locations\nheight = 0.15  # the height of the bars\nmultiplier = 0\ncolors = ['red', 'blue', 'green', 'purple', 'orange']\ndisasters = ['Earthquakes', 'Hurricanes', 'Floods', 'Wildfires', 'Tornados']\n\nfor i, disaster in enumerate(disasters):\n    offset = height * multiplier\n    bars = ax.bar(x + offset, data[disaster], height, color=colors[i], edgecolor='black', label=disaster)\n    ax.bar_label(bars, padding=3)\n    multiplier += 1\n\n# Add shadow to the bars corresponding to the Target_object\nfor bar in plt.gca().containers[2]:\n    bar.set_path_effects([withSimplePatchShadow(offset=(4, 1))])\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Year')\nax.set_ylabel('Number of Disasters')\nax.set_title('Number of Disasters per Year')\nax.set_xticks(x + height * 2)\nax.set_xticklabels(data['Year'], rotation=90)\nax.legend(loc='upper left', ncol=1)\n\n# Remove grid and change background color to white\nax.grid(False)\nax.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "2",
        "Test_image": "./test_dataset/Bar/Bar_3709f6a827d70c66/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_3709f6a827d70c66/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_3709f6a827d70c66/figure.png"
    },
    {
        "id": "Bar_5cebd43707fc8cd9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nyears = ('2000', '2005', '2010', '2015', '2020', '2025')\nco2_emissions = (15, 30, 60, 50, 45, 80)\nair_quality_index = (80, 85, 70, 90, 70, 60)\npopulation_density = (150, 200, 400, 500, 600, 700)\ny_pos = np.arange(len(years))\n\n# Create subplots\nfig, ax = plt.subplots()\n\n# Plotting data with new color scheme\nco2_bars = ax.bar(y_pos - 0.2, co2_emissions, 0.2, color='darkred', align='center', edgecolor='black', tick_label=years)\naqi_bars = ax.bar(y_pos, air_quality_index, 0.2, color='deepskyblue', align='center', edgecolor='black')\npd_bars = ax.bar(y_pos + 0.2, population_density, 0.2, color='limegreen', align='center', edgecolor='black')\n\n# Adding labels\nax.bar_label(co2_bars)\nax.bar_label(aqi_bars)\nax.bar_label(pd_bars)\n\n# Setting title, labels and legends\nax.set_title('Yearly Environmental Data')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.legend(['CO2 Emissions', 'Air Quality Index', 'Population Density'])\n\n# Inverting y-axis and setting background color\nax.invert_yaxis()\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill pattern of the bars that share the same legend as those containing the center point of the bounding box to '.' and set their edge color to '#b6d37d'.",
        "Input_image": "./test_dataset/Bar/Bar_5cebd43707fc8cd9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nyears = ('2000', '2005', '2010', '2015', '2020', '2025')\nco2_emissions = (15, 30, 60, 50, 45, 80)\nair_quality_index = (80, 85, 70, 90, 70, 60)\npopulation_density = (150, 200, 400, 500, 600, 700)\ny_pos = np.arange(len(years))\n\n# Create subplots\nfig, ax = plt.subplots()\n\n# Plotting data with new color scheme\nco2_bars = ax.bar(y_pos - 0.2, co2_emissions, 0.2, color='darkred', align='center', edgecolor='black', tick_label=years)\naqi_bars = ax.bar(y_pos, air_quality_index, 0.2, color='deepskyblue', align='center', edgecolor='black')\npd_bars = ax.bar(y_pos + 0.2, population_density, 0.2, color='limegreen', align='center', edgecolor='black')\n\n# Adding labels\nax.bar_label(co2_bars)\nax.bar_label(aqi_bars)\nax.bar_label(pd_bars)\n\n# Setting title, labels and legends\nax.set_title('Yearly Environmental Data')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Use bar.set_hatch to set the fill pattern of the bars corresponding to the Target_object to '.', and the edge color to '#b6d37d'\nfor bar in plt.gca().containers[1]:\n    bar.set_hatch('.')\n    bar.set_edgecolor('#b6d37d')\n\nax.legend(['CO2 Emissions', 'Air Quality Index', 'Population Density'])\n\n# Inverting y-axis and setting background color\nax.invert_yaxis()\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Bar/Bar_5cebd43707fc8cd9/Edit_figure.png",
        "Masked_image": "./test_dataset/Bar/Bar_5cebd43707fc8cd9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Bar/Bar_5cebd43707fc8cd9/figure.png"
    },
    {
        "id": "Box_8a8d2f7d73f3553d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\n\"Vehicle Type\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\"\n\"Sedans\",4000,8000,6000,7000,9000\n\"SUVs\",3000,3000,6000,5000,8000\n\"Electric Vehicles\",1000,5000,2000,2500,5000\n\"Trucks\",2500,2000,3000,2000,1000\n\"Motorcycles\",5000,4000,6000,8000,7000\n\"Hybrids\",2000,3000,7000,5000,6000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2016'].values, df['2017'].values, df['2018'].values, df['2019'].values, df['2020'].values]\nlabels = ['2016', '2017', '2018', '2019', '2020']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\"o\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], df['Vehicle Type'], loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the boxes that contain the center point of the bounding box to True, and change the box body's face color to #bcea5d.",
        "Input_image": "./test_dataset/Box/Box_8a8d2f7d73f3553d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\n\"Vehicle Type\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\"\n\"Sedans\",4000,8000,6000,7000,9000\n\"SUVs\",3000,3000,6000,5000,8000\n\"Electric Vehicles\",1000,5000,2000,2500,5000\n\"Trucks\",2500,2000,3000,2000,1000\n\"Motorcycles\",5000,4000,6000,8000,7000\n\"Hybrids\",2000,3000,7000,5000,6000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2016'].values, df['2017'].values, df['2018'].values, df['2019'].values, df['2020'].values]\nlabels = ['2016', '2017', '2018', '2019', '2020']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\"o\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], df['Vehicle Type'], loc='upper right')\n\n# Modify the clipping state and face color for the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 2:  # Targeting '2018'\n        patch.set_clip_on(True)\n        patch.set_facecolor('#bcea5d')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Box/Box_8a8d2f7d73f3553d/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_8a8d2f7d73f3553d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_8a8d2f7d73f3553d/myplot.png"
    },
    {
        "id": "Box_3b9485717caf5518",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data\ndata = {\n    'Year': [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016],\n    'Organic Farming (in hectares)': [1000, 1250, 1500, 1750, 2500, 2000, 1500, 3000, 3500],\n    'Percentage of Organic Farming': [0.5, 0.65, 0.67, 0.7, 1.5, 1.2, 0.9, 1.8, 2.1]\n}\n\n# Convert data to DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Box plot\nbp = ax.boxplot([df['Organic Farming (in hectares)'], df['Percentage of Organic Farming']], \n                patch_artist = True, notch = True, vert = 0,\n                labels = ['Organic Farming (in hectares)', 'Percentage of Organic Farming'], \n                widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Title and labels\nax.set_title('Organic Farming & Percentage of Organic Farming')\nax.set_xlabel('Variables')\nax.set_ylabel('Values')\n\n# Grid and background color\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the linewidth of the box body and median of the box that contain the center point of the bounding box to 0.69, and also disable the picker state for those box by setting it to False.",
        "Input_image": "./test_dataset/Box/Box_3b9485717caf5518/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {\n    'Year': [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016],\n    'Organic Farming (in hectares)': [1000, 1250, 1500, 1750, 2500, 2000, 1500, 3000, 3500],\n    'Percentage of Organic Farming': [0.5, 0.65, 0.67, 0.7, 1.5, 1.2, 0.9, 1.8, 2.1]\n}\n\n# Convert data to DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Box plot\nbp = ax.boxplot([df['Organic Farming (in hectares)'], df['Percentage of Organic Farming']], \n                patch_artist = True, notch = True, vert = 0,\n                labels = ['Organic Farming (in hectares)', 'Percentage of Organic Farming'], \n                widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modify the linewidth and picker state for the first box\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting 'Organic Farming (in hectares)'\n        for element in ['boxes', 'medians']:\n            for line in bp[element]:\n                line.set_linewidth(0.69)\n                line.set_picker(False)\n\n# Title and labels\nax.set_title('Organic Farming & Percentage of Organic Farming')\nax.set_xlabel('Variables')\nax.set_ylabel('Values')\n\n# Grid and background color\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_3b9485717caf5518/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_3b9485717caf5518/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_3b9485717caf5518/myplot.png"
    },
    {
        "id": "Box_82181a3609769924",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\n# Given csv data\ndata = '''\"Disaster\",\"Local Economy Impact\",\"Year\"\n\"Earthquake\",5000,2000\n\"Earthquake\",8000,2001\n\"Earthquake\",12000,2002\n\"Earthquake\",7000,2003\n\"Earthquake\",13000,2004\n\"Flood\",4500,2000\n\"Flood\",3000,2001\n\"Flood\",7000,2002\n\"Flood\",3000,2003\n\"Flood\",4500,2004\n\"Hurricane\",4000,2000\n\"Hurricane\",2000,2001\n\"Hurricane\",9000,2002\n\"Hurricane\",2000,2003\n\"Hurricane\",4000,2004\n\"Tornado\",3500,2000\n\"Tornado\",1500,2001\n\"Tornado\",6000,2002\n\"Tornado\",1500,2003\n\"Tornado\",3500,2004'''\n\n# Read the csv data\ndf = pd.read_csv(io.StringIO(data))\n\n# Prepare the data for boxplot\ndata_to_plot = [df[df['Disaster'] == disaster]['Local Economy Impact'].values for disaster in df['Disaster'].unique()]\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create an axes instance and the boxplot\nbp = ax.boxplot(data_to_plot, patch_artist=True, vert=0, widths=0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\n# Change fill color\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Change color and line width of the whiskers\nfor whisker in bp['whiskers']:\n    whisker.set(color ='#8B008B',\n                linewidth = 1.5,\n                linestyle =\":\")\n\n# Change color and line width of the caps\nfor cap in bp['caps']:\n    cap.set(color ='#8B008B',\n            linewidth = 2)\n\n# Change color and line width of the medians\nfor median in bp['medians']:\n    median.set(color ='red',\n               linewidth = 3)\n\n# Change the style of fliers and their fill\nfor flier in bp['fliers']:\n    flier.set(marker ='D',\n               color ='#e7298a',\n               alpha = 0.5)\n   \n# Custom x-axis labels\nax.set_xticklabels(df['Disaster'].unique())\n\n# Adding title  \nplt.title(\"Impact of Natural Disasters on Local Economies\") \n  \n# Removing top axes and right axes \n# ticks \nax.get_xaxis().tick_bottom() \nax.get_yaxis().tick_left() \n\n# Remove grid\nax.grid(False)\n\n# Change the facecolor of the figure to white\nfig.set_facecolor('white')\n\n# Adding legend\nplt.legend(['Earthquake', 'Flood', 'Hurricane', 'Tornado'])\n\n# Adding labels \nplt.xlabel(\"Disaster\") \nplt.ylabel(\"Local Economy Impact\") \n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the border thickness of the boxes that contain the center point of the bounding box to 2.13, and change the edge color to 'black'.",
        "Input_image": "./test_dataset/Box/Box_82181a3609769924/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\n# Given csv data\ndata = '''\"Disaster\",\"Local Economy Impact\",\"Year\"\n\"Earthquake\",5000,2000\n\"Earthquake\",8000,2001\n\"Earthquake\",12000,2002\n\"Earthquake\",7000,2003\n\"Earthquake\",13000,2004\n\"Flood\",4500,2000\n\"Flood\",3000,2001\n\"Flood\",7000,2002\n\"Flood\",3000,2003\n\"Flood\",4500,2004\n\"Hurricane\",4000,2000\n\"Hurricane\",2000,2001\n\"Hurricane\",9000,2002\n\"Hurricane\",2000,2003\n\"Hurricane\",4000,2004\n\"Tornado\",3500,2000\n\"Tornado\",1500,2001\n\"Tornado\",6000,2002\n\"Tornado\",1500,2003\n\"Tornado\",3500,2004'''\n\n# Read the csv data\ndf = pd.read_csv(io.StringIO(data))\n\n# Prepare the data for boxplot\ndata_to_plot = [df[df['Disaster'] == disaster]['Local Economy Impact'].values for disaster in df['Disaster'].unique()]\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create an axes instance and the boxplot\nbp = ax.boxplot(data_to_plot, patch_artist=True, vert=0, widths=0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\n# Change fill color\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Change color and line width of the whiskers\nfor whisker in bp['whiskers']:\n    whisker.set(color ='#8B008B',\n                linewidth = 1.5,\n                linestyle =\":\")\n\n# Change color and line width of the caps\nfor cap in bp['caps']:\n    cap.set(color ='#8B008B',\n            linewidth = 2)\n\n# Change color and line width of the medians\nfor median in bp['medians']:\n    median.set(color ='red',\n               linewidth = 3)\n\n# Change the style of fliers and their fill\nfor flier in bp['fliers']:\n    flier.set(marker ='D',\n               color ='#e7298a',\n               alpha = 0.5)\n\n# Custom x-axis labels\nax.set_xticklabels(df['Disaster'].unique())\n\n# Adding title  \nplt.title(\"Impact of Natural Disasters on Local Economies\") \n\n# Removing top axes and right axes \n# ticks \nax.get_xaxis().tick_bottom() \nax.get_yaxis().tick_left() \n\n# Remove grid\nax.grid(False)\n\n# Change the facecolor of the figure to white\nfig.set_facecolor('white')\n\n# Adding legend\nplt.legend(['Earthquake', 'Flood', 'Hurricane', 'Tornado'])\n\n# Adding labels \nplt.xlabel(\"Disaster\") \nplt.ylabel(\"Local Economy Impact\") \n\n# Set the border thickness and edge color for the boxes corresponding to the Target_object\nfor idx, patch in enumerate(bp['boxes']):\n    if df['Disaster'].unique()[idx] == df['Disaster'].unique()[1]:\n        patch.set_edgecolor('black')\n        patch.set_linewidth(2.1311458218493917)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_82181a3609769924/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_82181a3609769924/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_82181a3609769924/myplot.png"
    },
    {
        "id": "Box_62e5a77fe8179289",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Creating dataframe from the given data\ndata = {'Country': ['USA', 'India', 'Brazil', 'China', 'Nigeria'],\n        'Literacy Rate (%)': [98, 74, 92, 96, 60]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize =(10, 7))\nax.set_facecolor('lightgray')  # setting the background color of the plot\nax.grid(True)  # adding grids on the background\n\n# Creating box plot\nbp = ax.boxplot(df['Literacy Rate (%)'], patch_artist = True, notch = True, vert = 0, whis=2, widths=0.5, sym='ro')\n\ncolors = ['#008000']  # Changed the color code to green\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# adding annotations\nfor i in range(len(df['Literacy Rate (%)'])):\n    plt.text(i+1, df['Literacy Rate (%)'][i], df['Literacy Rate (%)'][i], ha = 'center')\n\nplt.title('Boxplot of Literacy Rate in Different Countries')  # Adding the title\nplt.xlabel('Country')  # Adding the label for x-axis\nplt.ylabel('Literacy Rate (%)')  # Adding the label for y-axis\nplt.legend([bp[\"boxes\"][0]], ['Literacy Rate'], loc='upper right')  # Adding legend\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the snap state of the box body that contain the center point of the bounding box to False. Also, change the visibility of the box body to False.",
        "Input_image": "./test_dataset/Box/Box_62e5a77fe8179289/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Creating dataframe from the given data\ndata = {'Country': ['USA', 'India', 'Brazil', 'China', 'Nigeria'],\n        'Literacy Rate (%)': [98, 74, 92, 96, 60]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize =(10, 7))\nax.set_facecolor('lightgray')  # setting the background color of the plot\nax.grid(True)  # adding grids on the background\n\n# Creating box plot\nbp = ax.boxplot(df['Literacy Rate (%)'], patch_artist = True, notch = True, vert = 0, whis=2, widths=0.5, sym='ro')\n\ncolors = ['#008000']  # Changed the color code to green\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# adding annotations\nfor i in range(len(df['Literacy Rate (%)'])):\n    plt.text(i+1, df['Literacy Rate (%)'][i], df['Literacy Rate (%)'][i], ha = 'center')\n\n# Setting the snap state and visibility of the object corresponding to the Target_object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting the first box\n        box.set_snap(False)\n        box.set_visible(False)\n\nplt.title('Boxplot of Literacy Rate in Different Countries')  # Adding the title\nplt.xlabel('Country')  # Adding the label for x-axis\nplt.ylabel('Literacy Rate (%)')  # Adding the label for y-axis\nplt.legend([bp[\"boxes\"][0]], ['Literacy Rate'], loc='upper right')  # Adding legend\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_62e5a77fe8179289/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_62e5a77fe8179289/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_62e5a77fe8179289/myplot.png"
    },
    {
        "id": "Box_e6b5371eafab9923",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,2010,2020\nHorror,100,180\nComedy,200,170\nDrama,150,300\n\"\"\")\n\ndf = pd.DataFrame(pd.read_csv(data))\n\n# Prepare data for box plot\nplot_data = [df['2010'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2010', '2020'], \n                sym = \"ro\", widths = 0.4)\n\n# New colors for the box plot\ncolors = ['#800080', '#FFA500']  # Purple for 2010, Orange for 2020\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Genre vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Genre\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['2010', '2020'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the boxes that contain the center point of the bounding box to #3f1ce7. Additionally, apply a stroke to these all of the boxes' lines with a linewidth of 4.18 and a foreground color of #c51b6c.",
        "Input_image": "./test_dataset/Box/Box_e6b5371eafab9923/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,2010,2020\nHorror,100,180\nComedy,200,170\nDrama,150,300\n\"\"\")\n\ndf = pd.DataFrame(pd.read_csv(data))\n\n# Prepare data for box plot\nplot_data = [df['2010'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2010', '2020'], \n                sym = \"ro\", widths = 0.4)\n\n# New colors for the box plot\ncolors = ['#800080', '#FFA500']  # Purple for 2010, Orange for 2020\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Genre vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Genre\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['2010', '2020'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\n# Modify the color and stroke of the target object\nstroke_effect = path_effects.withStroke(linewidth=4.179852186696542, foreground='#c51b6c')\nbp['boxes'][1].set_facecolor('#3f1ce7')\nfor element in ['boxes', 'medians']:\n    for idx, artist in enumerate(bp[element]):\n        if idx == 1:  # Targeting the second box (2020)\n            artist.set_path_effects([stroke_effect])\nfor element in ['whiskers', 'caps']:\n    for idx, artist in enumerate(bp[element]):\n        if idx in [1*2]+[1*2+1]:  # Targeting the second box (2020)\n            artist.set_path_effects([stroke_effect])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_e6b5371eafab9923/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_e6b5371eafab9923/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_e6b5371eafab9923/myplot.png"
    },
    {
        "id": "Box_3b76a6fbb7280d93",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\n# Given csv data\ndata = '''\"Disaster\",\"Local Economy Impact\",\"Year\"\n\"Earthquake\",5000,2000\n\"Earthquake\",8000,2001\n\"Earthquake\",12000,2002\n\"Earthquake\",7000,2003\n\"Earthquake\",13000,2004\n\"Flood\",4500,2000\n\"Flood\",3000,2001\n\"Flood\",7000,2002\n\"Flood\",3000,2003\n\"Flood\",4500,2004\n\"Hurricane\",4000,2000\n\"Hurricane\",2000,2001\n\"Hurricane\",9000,2002\n\"Hurricane\",2000,2003\n\"Hurricane\",4000,2004\n\"Tornado\",3500,2000\n\"Tornado\",1500,2001\n\"Tornado\",6000,2002\n\"Tornado\",1500,2003\n\"Tornado\",3500,2004'''\n\n# Read the csv data\ndf = pd.read_csv(io.StringIO(data))\n\n# Prepare the data for boxplot\ndata_to_plot = [df[df['Disaster'] == disaster]['Local Economy Impact'].values for disaster in df['Disaster'].unique()]\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create an axes instance and the boxplot\nbp = ax.boxplot(data_to_plot, patch_artist=True, vert=0, widths=0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\n# Change fill color\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Change color and line width of the whiskers\nfor whisker in bp['whiskers']:\n    whisker.set(color ='#8B008B',\n                linewidth = 1.5,\n                linestyle =\":\")\n\n# Change color and line width of the caps\nfor cap in bp['caps']:\n    cap.set(color ='#8B008B',\n            linewidth = 2)\n\n# Change color and line width of the medians\nfor median in bp['medians']:\n    median.set(color ='red',\n               linewidth = 3)\n\n# Change the style of fliers and their fill\nfor flier in bp['fliers']:\n    flier.set(marker ='D',\n               color ='#e7298a',\n               alpha = 0.5)\n   \n# Custom x-axis labels\nax.set_xticklabels(df['Disaster'].unique())\n\n# Adding title  \nplt.title(\"Impact of Natural Disasters on Local Economies\") \n  \n# Removing top axes and right axes \n# ticks \nax.get_xaxis().tick_bottom() \nax.get_yaxis().tick_left() \n\n# Remove grid\nax.grid(False)\n\n# Change the facecolor of the figure to white\nfig.set_facecolor('white')\n\n# Adding legend\nplt.legend(['Earthquake', 'Flood', 'Hurricane', 'Tornado'])\n\n# Adding labels \nplt.xlabel(\"Disaster\") \nplt.ylabel(\"Local Economy Impact\") \n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the clipping box for the boxes that contain the center point of the bounding box to a defined area with the bottom-left corner at (112, 139), a width of 169, and a height of 175 using matplotlib.transforms.Bbox. Also, set the clipping state of the boxes to False for these coordinates.",
        "Input_image": "./test_dataset/Box/Box_3b76a6fbb7280d93/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\nimport matplotlib.transforms as transforms\n\n# Given csv data\ndata = '''\"Disaster\",\"Local Economy Impact\",\"Year\"\n\"Earthquake\",5000,2000\n\"Earthquake\",8000,2001\n\"Earthquake\",12000,2002\n\"Earthquake\",7000,2003\n\"Earthquake\",13000,2004\n\"Flood\",4500,2000\n\"Flood\",3000,2001\n\"Flood\",7000,2002\n\"Flood\",3000,2003\n\"Flood\",4500,2004\n\"Hurricane\",4000,2000\n\"Hurricane\",2000,2001\n\"Hurricane\",9000,2002\n\"Hurricane\",2000,2003\n\"Hurricane\",4000,2004\n\"Tornado\",3500,2000\n\"Tornado\",1500,2001\n\"Tornado\",6000,2002\n\"Tornado\",1500,2003\n\"Tornado\",3500,2004'''\n\n# Read the csv data\ndf = pd.read_csv(io.StringIO(data))\n\n# Prepare the data for boxplot\ndata_to_plot = [df[df['Disaster'] == disaster]['Local Economy Impact'].values for disaster in df['Disaster'].unique()]\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create an axes instance and the boxplot\nbp = ax.boxplot(data_to_plot, patch_artist=True, vert=0, widths=0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\n# Change fill color\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Change color and line width of the whiskers\nfor whisker in bp['whiskers']:\n    whisker.set(color ='#8B008B',\n                linewidth = 1.5,\n                linestyle =\":\")\n\n# Change color and line width of the caps\nfor cap in bp['caps']:\n    cap.set(color ='#8B008B',\n            linewidth = 2)\n\n# Change color and line width of the medians\nfor median in bp['medians']:\n    median.set(color ='red',\n               linewidth = 3)\n\n# Change the style of fliers and their fill\nfor flier in bp['fliers']:\n    flier.set(marker ='D',\n               color ='#e7298a',\n               alpha = 0.5)\n   \n# Custom x-axis labels\nax.set_xticklabels(df['Disaster'].unique())\n\n# Adding title  \nplt.title(\"Impact of Natural Disasters on Local Economies\") \n  \n# Removing top axes and right axes \n# ticks \nax.get_xaxis().tick_bottom() \nax.get_yaxis().tick_left() \n\n# Remove grid\nax.grid(False)\n\n# Change the facecolor of the figure to white\nfig.set_facecolor('white')\n\n# Adding legend\nplt.legend(['Earthquake', 'Flood', 'Hurricane', 'Tornado'])\n\n# Adding labels \nplt.xlabel(\"Disaster\") \nplt.ylabel(\"Local Economy Impact\") \n\n# Set the clip box and clipping state for the target object\nbbox = transforms.Bbox.from_bounds(112, 139, 169, 175)\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Flood'\n        box.set_clip_box(bbox)\n        box.set_clip_on(False)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_3b76a6fbb7280d93/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_3b76a6fbb7280d93/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_3b76a6fbb7280d93/myplot.png"
    },
    {
        "id": "Box_e0c001c6e37062a0",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Pop,Rock,Country,Hip Hop\n2010,100,150,50,70\n2011,85,130,55,80\n2012,90,120,60,75\n2013,70,140,70,85\n2014,90,110,60,95\n2015,80,150,55,90\n2016,70,130,65,110\n2017,85,120,70,100\n2018,100,150,75,95\n2019,95,130,80,105\n2020,70,110,85,120\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Pop'].values, df['Rock'].values, df['Country'].values, df['Hip Hop'].values]\nlabels = ['Pop', 'Rock', 'Country', 'Hip Hop']\n# New color scheme\ncolors = ['#556270', '#4ECDC4', '#C7F464', '#FF6B6B']  # Adjusted colors\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Music Genres Popularity Over The Years')\nax.set_xlabel('Music Genres')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True, linestyle='--')\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Define the clipping area for the box containing the center point of the bounding box using a bounding box that starts at (367, 436), has a width of 148, and a height of 146. Also, update the face color of that box to #f3602a.",
        "Input_image": "./test_dataset/Box/Box_e0c001c6e37062a0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# Data\ndata = StringIO(\"\"\"\nYear,Pop,Rock,Country,Hip Hop\n2010,100,150,50,70\n2011,85,130,55,80\n2012,90,120,60,75\n2013,70,140,70,85\n2014,90,110,60,95\n2015,80,150,55,90\n2016,70,130,65,110\n2017,85,120,70,100\n2018,100,150,75,95\n2019,95,130,80,105\n2020,70,110,85,120\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Pop'].values, df['Rock'].values, df['Country'].values, df['Hip Hop'].values]\nlabels = ['Pop', 'Rock', 'Country', 'Hip Hop']\n# New color scheme\ncolors = ['#556270', '#4ECDC4', '#C7F464', '#FF6B6B']  # Adjusted colors\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Music Genres Popularity Over The Years')\nax.set_xlabel('Music Genres')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True, linestyle='--')\n\n# Modify the target object\nbbox = Bbox.from_bounds(367, 436, 148, 146)\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Rock'\n        patch.set_clip_box(bbox)\n        patch.set_facecolor('#f3602a')\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_e0c001c6e37062a0/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_e0c001c6e37062a0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_e0c001c6e37062a0/myplot.png"
    },
    {
        "id": "Box_621313cc87ecbd75",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Input data\ndata = {\n    'Profession': ['Teacher', 'Doctor', 'Software Developer', 'Construction Worker', 'Nurse', 'Chef', 'Lawyer', 'Police Officer', 'Retail Worker'],\n    'Hours in Week 1': [40, 50, 45, 60, 48, 50, 55, 60, 35],\n    'Hours in Week 2': [44, 75, 47, 42, 50, 50, 30, 60, 35]\n}\n\ndf = pd.DataFrame(data)\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Hours in Week 1'], df['Hours in Week 2']], patch_artist=True,\n                notch=True, vert=0, widths=0.5, labels=['Week 1', 'Week 2'])\n\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding grid\nax.grid(True)\nax.set_facecolor('gray')\n\n# Adding title and labels\nplt.title('Hours worked per week')\nplt.xlabel('Week')\nplt.ylabel('Hours')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the boxes that contain the center point of the bounding box to #d45e70, and enable the snap state for those boxes by setting it to True.",
        "Input_image": "./test_dataset/Box/Box_621313cc87ecbd75/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Input data\ndata = {\n    'Profession': ['Teacher', 'Doctor', 'Software Developer', 'Construction Worker', 'Nurse', 'Chef', 'Lawyer', 'Police Officer', 'Retail Worker'],\n    'Hours in Week 1': [40, 50, 45, 60, 48, 50, 55, 60, 35],\n    'Hours in Week 2': [44, 75, 47, 42, 50, 50, 30, 60, 35]\n}\n\ndf = pd.DataFrame(data)\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Hours in Week 1'], df['Hours in Week 2']], patch_artist=True,\n                notch=True, vert=0, widths=0.5, labels=['Week 1', 'Week 2'])\n\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modify the first box\nbp['boxes'][0].set_facecolor('#d45e70')\nbp['boxes'][0].set_snap(True)\n\n# Adding grid\nax.grid(True)\nax.set_facecolor('gray')\n\n# Adding title and labels\nplt.title('Hours worked per week')\nplt.xlabel('Week')\nplt.ylabel('Hours')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_621313cc87ecbd75/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_621313cc87ecbd75/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_621313cc87ecbd75/myplot.png"
    },
    {
        "id": "Box_f98383cd3963d2fc",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = \"\"\"City, Crime Rate 1, Crime Rate 2, Crime Rate 3, Crime Rate 4, Crime Rate 5\nNew York, 20, 22, 24, 50, 25\nLos Angeles, 18, 17, 16, 35, 15\nChicago, 28, 27, 25, 25, 27\nHouston, 15, 20, 35, 20, 15\nPhoenix, 10, 15, 10, 15, 5\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df[col] for col in df.columns if col != \"City\"]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 1, \n                labels = df.columns[1:], \n                sym = \"go\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF', '#FFFF00', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"City vs Crime Rate\")\nplt.xlabel(\"City\")\nplt.ylabel(\"Crime Rate\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df.columns[1:]))], df.columns[1:], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the clipping box of the boxes that contain the center point of the bounding box to have a lower-left corner at (156, 140), with a width of 195 and height of 185, according to the matplotlib.transforms.Bbox specifications. Also, update the color of the boxes related to the Target_object to #303fa2.",
        "Input_image": "./test_dataset/Box/Box_f98383cd3963d2fc/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# Given data\ndata = \"\"\"City, Crime Rate 1, Crime Rate 2, Crime Rate 3, Crime Rate 4, Crime Rate 5\nNew York, 20, 22, 24, 50, 25\nLos Angeles, 18, 17, 16, 35, 15\nChicago, 28, 27, 25, 25, 27\nHouston, 15, 20, 35, 20, 15\nPhoenix, 10, 15, 10, 15, 5\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df[col] for col in df.columns if col != \"City\"]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 1, \n                labels = df.columns[1:], \n                sym = \"go\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF', '#FFFF00', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"City vs Crime Rate\")\nplt.xlabel(\"City\")\nplt.ylabel(\"Crime Rate\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df.columns[1:]))], df.columns[1:], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\n# Set the clip box and color for the target object\nbbox = Bbox.from_bounds(156, 140,195, 185)\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Crime Rate 2'\n        box.set_clip_box(bbox)\n        box.set_facecolor('#303fa2')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_f98383cd3963d2fc/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_f98383cd3963d2fc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_f98383cd3963d2fc/myplot.png"
    },
    {
        "id": "Box_76b3af5c2877ae02",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nAllergies,Year1,Year2,Year3,Year4\nPeanuts,100,80,75,150\nDairy,50,45,50,45\nGluten,80,75,70,72\nShellfish,70,65,40,41\nPollen,100,50,60,110\nMold,90,95,110,80\nDust Mites,70,60,80,70\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Year1'].values, df['Year2'].values, df['Year3'].values, df['Year4'].values]\nlabels = ['Year1', 'Year2', 'Year3', 'Year4']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('white')  # Change background to white\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Allergy Cases Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\n\n# Remove grid\nax.grid(False)  # Remove grid lines\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the clipping state of the boxes that contain the center point of the bounding box to False, and also set their visibility to False.",
        "Input_image": "./test_dataset/Box/Box_76b3af5c2877ae02/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nAllergies,Year1,Year2,Year3,Year4\nPeanuts,100,80,75,150\nDairy,50,45,50,45\nGluten,80,75,70,72\nShellfish,70,65,40,41\nPollen,100,50,60,110\nMold,90,95,110,80\nDust Mites,70,60,80,70\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Year1'].values, df['Year2'].values, df['Year3'].values, df['Year4'].values]\nlabels = ['Year1', 'Year2', 'Year3', 'Year4']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('white')  # Change background to white\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Allergy Cases Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\n\n# Remove grid\nax.grid(False)  # Remove grid lines\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Modify the clipping state and visibility of the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx in [1]:  # Targeting 'Year2'\n        box.set_clip_on(False)\n        box.set_visible(False)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_76b3af5c2877ae02/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_76b3af5c2877ae02/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_76b3af5c2877ae02/myplot.png"
    },
    {
        "id": "Box_d7059b1cfadc5163",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'State': ['Texas', 'California', 'New York', 'Florida', 'Illinois', 'Ohio', 'Pennsylvania'],\n        'Unemployment Rate': [[5.9, 6.2, 6.5, 6.1, 5.7, 5.3, 5.5], \n                              [7.4, 7.6, 7.8, 7.5, 7.2, 7.0, 6.9],\n                              [6.4, 6.6, 6.9, 6.7, 6.4, 6.6, 7.0],\n                              [4.9, 5.1, 5.4, 5.2, 5.0, 5.1, 5.3],\n                              [7.7, 7.6, 7.5, 6.9, 7.4, 7.9, 8.2],\n                              [6.1, 6.3, 6.6, 6.4, 6.2, 6.5, 6.8],\n                              [6.3, 6.2, 5.9, 6.4, 6.9, 7.3, 7.6]]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Unemployment Rate'][i] for i in range(len(df))]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = df['State'].tolist(), \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF', '#FF0000', '#800080']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"State vs Unemployment Rate\")\nplt.xlabel(\"State\")\nplt.ylabel(\"Unemployment Rate\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df))], df['State'].tolist(), loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update all of the lines' linewidth of the boxes that contain the center point of the bounding box to 0.92 and color to #cbafcc, and adjust their transform to the data coordinate system.",
        "Input_image": "./test_dataset/Box/Box_d7059b1cfadc5163/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'State': ['Texas', 'California', 'New York', 'Florida', 'Illinois', 'Ohio', 'Pennsylvania'],\n        'Unemployment Rate': [[5.9, 6.2, 6.5, 6.1, 5.7, 5.3, 5.5], \n                              [7.4, 7.6, 7.8, 7.5, 7.2, 7.0, 6.9],\n                              [6.4, 6.6, 6.9, 6.7, 6.4, 6.6, 7.0],\n                              [4.9, 5.1, 5.4, 5.2, 5.0, 5.1, 5.3],\n                              [7.7, 7.6, 7.5, 6.9, 7.4, 7.9, 8.2],\n                              [6.1, 6.3, 6.6, 6.4, 6.2, 6.5, 6.8],\n                              [6.3, 6.2, 5.9, 6.4, 6.9, 7.3, 7.6]]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Unemployment Rate'][i] for i in range(len(df))]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = df['State'].tolist(), \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF', '#FF0000', '#800080']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"State vs Unemployment Rate\")\nplt.xlabel(\"State\")\nplt.ylabel(\"Unemployment Rate\")\n# Modifying the linewidth and transform of the target object\nfor idx in [1, 3]:  # Targeting 'California' and 'Florida'\n    bp['boxes'][idx].set_linewidth(0.92)\n    bp['boxes'][idx].set_transform(ax.transData)\n    bp['boxes'][idx].set_edgecolor('#cbafcc')\n    bp['medians'][idx].set_linewidth(0.92)\n    bp['medians'][idx].set_transform(ax.transData)\n    bp['medians'][idx].set_color('#cbafcc')\n    for element in ['whiskers', 'caps']:\n        for line in bp[element][2*idx:2*(idx+1)]:\n            line.set_linewidth(0.92)\n            line.set_transform(ax.transData)\n            line.set_color('#cbafcc')\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df))], df['State'].tolist(), loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Box/Box_d7059b1cfadc5163/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_d7059b1cfadc5163/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_d7059b1cfadc5163/myplot.png"
    },
    {
        "id": "Box_ab430ff22ef30842",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\"Year\": [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"],\n        \"Number of Visits\": [5000, 4600, 4700, 4400, 7000, 6900, 4500],\n        \"Number of Books Borrowed\": [7000, 6000, 9000, 6500, 8000, 12000, 7000]}\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create box plot\nbp = ax.boxplot([df[\"Number of Visits\"], df[\"Number of Books Borrowed\"]], patch_artist=True, vert=0, widths=0.5, sym='',\n                labels = ['Number of Visits', 'Number of Books Borrowed'])\n\n# Change color for each box\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Library Visits and Books Borrowed Over the Years')\nax.set_xlabel('Counts')\nax.set_ylabel('Categories')\n\n# Show grid\nax.grid(True)\n\n# Change the figure background color\nfig.set_facecolor('gray')\n\n# Annotate data value on the chart figure\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median: {x}', (x, y), textcoords=\"offset points\", xytext=(10,0), ha='center', fontsize=8)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow effect to the box body that contains the center point of the bounding box, using a shadow offset of (3, 3) units. Then, update the edge color of these boxes to #53aa08.",
        "Input_image": "./test_dataset/Box/Box_ab430ff22ef30842/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as PathEffects\n\n# Define the data\ndata = {\"Year\": [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"],\n        \"Number of Visits\": [5000, 4600, 4700, 4400, 7000, 6900, 4500],\n        \"Number of Books Borrowed\": [7000, 6000, 9000, 6500, 8000, 12000, 7000]}\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create box plot\nbp = ax.boxplot([df[\"Number of Visits\"], df[\"Number of Books Borrowed\"]], patch_artist=True, vert=0, widths=0.5, sym='',\n                labels = ['Number of Visits', 'Number of Books Borrowed'])\n\n# Change color for each box\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add shadow effect and set edge color for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:\n        box.set_path_effects([PathEffects.withSimplePatchShadow(offset=(3, 3))])\n        box.set_edgecolor('#53aa08')\n\n# Set title and labels\nax.set_title('Library Visits and Books Borrowed Over the Years')\nax.set_xlabel('Counts')\nax.set_ylabel('Categories')\n\n# Show grid\nax.grid(True)\n\n# Change the figure background color\nfig.set_facecolor('gray')\n\n# Annotate data value on the chart figure\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median: {x}', (x, y), textcoords=\"offset points\", xytext=(10,0), ha='center', fontsize=8)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_ab430ff22ef30842/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_ab430ff22ef30842/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_ab430ff22ef30842/myplot.png"
    },
    {
        "id": "Box_a7b0b79a8cb7168c",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame from the given data\ndata = {'Year': [2014, 2015, 2016, 2017, 2018, 2019],\n        'Organic Farming Practices': [2000, 2100, 2300, 3000, 2800, 3500]}\ndf = pd.DataFrame(data)\n\n# Create a box plot of the 'Organic Farming Practices' column\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(df['Organic Farming Practices'], patch_artist = True,\n                notch = True, vert = 0, widths=0.7, sym='r+')\n\n# Change the face color of the box\nfor patch in bp['boxes']:\n    patch.set_facecolor('#FFFF00')\n\n# Add a grid\nax.grid(True)\n\n# Change the background color of the plot\nax.set_facecolor('lightgray')\n\n# Set the title and labels\nax.set_title('Organic Farming Practices Over the Years')\nax.set_xlabel('Organic Farming Practices')\nax.set_ylabel('Year')\nax.legend(['Organic Farming Practices'])\n\n# Save the plot\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the face color of the box body that contains the center point of the bounding box to #6781cd. Also, change the picker state of the box to False.",
        "Input_image": "./test_dataset/Box/Box_a7b0b79a8cb7168c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame from the given data\ndata = {'Year': [2014, 2015, 2016, 2017, 2018, 2019],\n        'Organic Farming Practices': [2000, 2100, 2300, 3000, 2800, 3500]}\ndf = pd.DataFrame(data)\n\n# Create a box plot of the 'Organic Farming Practices' column\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(df['Organic Farming Practices'], patch_artist = True,\n                notch = True, vert = 0, widths=0.7, sym='r+')\n\n# Change the face color of the box\nfor patch in bp['boxes']:\n    patch.set_facecolor('#FFFF00')\n\n# Set the face color of the object corresponding to the Target_object to #6781cd and set picker state to False\nbp['boxes'][0].set_facecolor('#6781cd')\nbp['boxes'][0].set_picker(False)\n\n# Add a grid\nax.grid(True)\n\n# Change the background color of the plot\nax.set_facecolor('lightgray')\n\n# Set the title and labels\nax.set_title('Organic Farming Practices Over the Years')\nax.set_xlabel('Organic Farming Practices')\nax.set_ylabel('Year')\nax.legend(['Organic Farming Practices'])\n\n# Save the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_a7b0b79a8cb7168c/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_a7b0b79a8cb7168c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_a7b0b79a8cb7168c/myplot.png"
    },
    {
        "id": "Box_e49bc45a5e4dbe32",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Library\": [\"City Library\", \"City Library\", \"City Library\", \"County Library\", \"County Library\", \"County Library\", \"National Library\", \"National Library\", \"National Library\"],\n    \"Year\": [2017, 2018, 2019, 2017, 2018, 2019, 2017, 2018, 2019],\n    \"Visitors\": [12000, 9000, 9500, 8000, 6000, 7000, 15000, 12000, 13000],\n    \"Events\": [15, 10, 20, 8, 5, 15, 20, 15, 25]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot([df['Visitors'], df['Events']], patch_artist = True, notch = True, vert = 0, widths = 0.5)\n \ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting the background color of the plot\nax.set_facecolor('gray')\n\n# Adding grid\nax.grid(True)\n\n# Adding labels and title\nplt.xlabel('Data Categories')\nplt.ylabel('Values')\nplt.title('Library Visitors and Events')\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['Visitors', 'Events'], loc='upper right')\n\n# Saving the plot\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the picker state of the box that contains the center point of the bounding box to False. Additionally, update its transformation to align with the figure's coordinate system.",
        "Input_image": "./test_dataset/Box/Box_e49bc45a5e4dbe32/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Library\": [\"City Library\", \"City Library\", \"City Library\", \"County Library\", \"County Library\", \"County Library\", \"National Library\", \"National Library\", \"National Library\"],\n    \"Year\": [2017, 2018, 2019, 2017, 2018, 2019, 2017, 2018, 2019],\n    \"Visitors\": [12000, 9000, 9500, 8000, 6000, 7000, 15000, 12000, 13000],\n    \"Events\": [15, 10, 20, 8, 5, 15, 20, 15, 25]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot([df['Visitors'], df['Events']], patch_artist = True, notch = True, vert = 0, widths = 0.5)\n \ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting the background color of the plot\nax.set_facecolor('gray')\n\n# Adding grid\nax.grid(True)\n\n# Adding labels and title\nplt.xlabel('Data Categories')\nplt.ylabel('Values')\nplt.title('Library Visitors and Events')\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['Visitors', 'Events'], loc='upper right')\n\n# Modifying the picker state and transform of the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting 'Visitors'\n        box.set_picker(False)\n        box.set_transform(fig.transFigure)\n\n# Saving the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_e49bc45a5e4dbe32/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_e49bc45a5e4dbe32/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_e49bc45a5e4dbe32/myplot.png"
    },
    {
        "id": "Box_2318c9ea322a5a17",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = '''Year,Childhood Obesity,Adult Obesity,Senior Obesity\n2010,20,35,30\n2011,22,37,34\n2012,30,45,40\n2013,35,55,50\n2014,30,45,40\n2015,32,47,42\n2016,35,52,47\n2017,40,57,52\n2018,35,52,47\n2019,45,62,57\n2020,40,57,52\n2021,50,67,62'''\n\n# Read data into DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df['Childhood Obesity'], df['Adult Obesity'], df['Senior Obesity']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Childhood Obesity', 'Adult Obesity', 'Senior Obesity'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nax.set_title(\"Obesity Trends Over the Years\")\nax.set_xlabel(\"Age Group\")\nax.set_ylabel(\"Obesity Percentage (%)\")\n\n# Adding legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Childhood Obesity', 'Adult Obesity', 'Senior Obesity'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white') # Modification: changed 'gray' to 'white'\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the border thickness of the boxes that contain the center point of the bounding box to 2.7967, and update their edge color to 'black'.",
        "Input_image": "./test_dataset/Box/Box_2318c9ea322a5a17/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = '''Year,Childhood Obesity,Adult Obesity,Senior Obesity\n2010,20,35,30\n2011,22,37,34\n2012,30,45,40\n2013,35,55,50\n2014,30,45,40\n2015,32,47,42\n2016,35,52,47\n2017,40,57,52\n2018,35,52,47\n2019,45,62,57\n2020,40,57,52\n2021,50,67,62'''\n\n# Read data into DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df['Childhood Obesity'], df['Adult Obesity'], df['Senior Obesity']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Childhood Obesity', 'Adult Obesity', 'Senior Obesity'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nax.set_title(\"Obesity Trends Over the Years\")\nax.set_xlabel(\"Age Group\")\nax.set_ylabel(\"Obesity Percentage (%)\")\n\n# Adding legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Childhood Obesity', 'Adult Obesity', 'Senior Obesity'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white') # Modification: changed 'gray' to 'white'\n\n# Set the border thickness and edge color for the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Adult Obesity'\n        patch.set_edgecolor('black')\n        patch.set_linewidth(2.7967440568555997)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_2318c9ea322a5a17/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_2318c9ea322a5a17/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_2318c9ea322a5a17/myplot.png"
    },
    {
        "id": "Box_994217f24bd5a976",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Pop,Rock,Country,Hip Hop\n2010,100,150,50,70\n2011,85,130,55,80\n2012,90,120,60,75\n2013,70,140,70,85\n2014,90,110,60,95\n2015,80,150,55,90\n2016,70,130,65,110\n2017,85,120,70,100\n2018,100,150,75,95\n2019,95,130,80,105\n2020,70,110,85,120\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Pop'].values, df['Rock'].values, df['Country'].values, df['Hip Hop'].values]\nlabels = ['Pop', 'Rock', 'Country', 'Hip Hop']\n# New color scheme\ncolors = ['#556270', '#4ECDC4', '#C7F464', '#FF6B6B']  # Adjusted colors\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Music Genres Popularity Over The Years')\nax.set_xlabel('Music Genres')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True, linestyle='--')\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the median line width of the boxes that contain the center point of the bounding box to 2.35. Additionally, enable rasterization for these boxes by setting their rasterized state to True.",
        "Input_image": "./test_dataset/Box/Box_994217f24bd5a976/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Pop,Rock,Country,Hip Hop\n2010,100,150,50,70\n2011,85,130,55,80\n2012,90,120,60,75\n2013,70,140,70,85\n2014,90,110,60,95\n2015,80,150,55,90\n2016,70,130,65,110\n2017,85,120,70,100\n2018,100,150,75,95\n2019,95,130,80,105\n2020,70,110,85,120\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Pop'].values, df['Rock'].values, df['Country'].values, df['Hip Hop'].values]\nlabels = ['Pop', 'Rock', 'Country', 'Hip Hop']\n# New color scheme\ncolors = ['#556270', '#4ECDC4', '#C7F464', '#FF6B6B']  # Adjusted colors\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Music Genres Popularity Over The Years')\nax.set_xlabel('Music Genres')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True, linestyle='--')\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Modify the linewidth and rasterized state of the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx in [1]:  # Targeting 'Rock'\n        bp['medians'][idx].set_linewidth(2.35)\n        box.set_rasterized(True)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_994217f24bd5a976/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_994217f24bd5a976/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_994217f24bd5a976/myplot.png"
    },
    {
        "id": "Box_1d6e9eb533ae08e1",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\n\n# Change the background color of the chart to white\nax.set_facecolor('white')  # This line has been modified\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the animated state of the boxes containing the center point of the bounding box to True. Additionally, for these boxes, change the transform to the pixel coordinate system.",
        "Input_image": "./test_dataset/Box/Box_1d6e9eb533ae08e1/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\n\n# Change the background color of the chart to white\nax.set_facecolor('white')  # This line has been modified\n\n# Set the animated state of the object corresponding to the Target_object to True\n# and set the transform of the object corresponding to the Target_object to the Coordinate system of pixel\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Middle Aged'\n        box.set_animated(True)\n        box.set_transform(ax.transData)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_1d6e9eb533ae08e1/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_1d6e9eb533ae08e1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_1d6e9eb533ae08e1/myplot.png"
    },
    {
        "id": "Box_2a48043d448accba",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create DataFrame from the provided data\ndata = {'Year': [2013, 2014, 2015, 2016, 2017, 2018, 2019],\n        'North America': [12.7, 13.5, 14.2, 15.0, 16.1, 14.8, 15.5],\n        'Europe': [15.6, 16.2, 17.1, 18.0, 20.0, 19.8, 22.0],\n        'Asia': [18.9, 22.3, 20.8, 23.5, 18.0, 25.5, 24.0]}\ndf = pd.DataFrame(data)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\nbp = ax.boxplot([df['North America'], df['Europe'], df['Asia']], patch_artist=True,\n                notch=True, vert=0, widths=0.6)\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting labels\nax.set_yticklabels(['North America', 'Europe', 'Asia'])\n\n# Setting title and labels\nplt.title('Box Plot of Data')\nplt.xlabel('Values')\nplt.ylabel('Regions')\n\n# Setting grid\nax.grid(True)\n\n# Setting face color\nax.set_facecolor('gray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Update the label of the box that contains the center point of the bounding box to 'A new Label', and ensure that the rasterized state of this box is set to False.",
        "Input_image": "./test_dataset/Box/Box_2a48043d448accba/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create DataFrame from the provided data\ndata = {'Year': [2013, 2014, 2015, 2016, 2017, 2018, 2019],\n        'North America': [12.7, 13.5, 14.2, 15.0, 16.1, 14.8, 15.5],\n        'Europe': [15.6, 16.2, 17.1, 18.0, 20.0, 19.8, 22.0],\n        'Asia': [18.9, 22.3, 20.8, 23.5, 18.0, 25.5, 24.0]}\ndf = pd.DataFrame(data)\n\n# Set figure size\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\nbp = ax.boxplot([df['North America'], df['Europe'], df['Asia']], patch_artist=True,\n                notch=True, vert=0, widths=0.6)\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting labels\nax.set_yticklabels(['North America', 'A new Label', 'Asia'])\n\n# Setting title and labels\nplt.title('Box Plot of Data')\nplt.xlabel('Values')\nplt.ylabel('Regions')\n\n# Setting grid\nax.grid(True)\n\n# Setting face color\nax.set_facecolor('gray')\n\n# Set rasterized state to False for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Europe'\n        box.set_rasterized(False)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_2a48043d448accba/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_2a48043d448accba/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_2a48043d448accba/myplot.png"
    },
    {
        "id": "Box_ff4b761a57110fbe",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Input data\ndata = {\n    'Profession': ['Teacher', 'Doctor', 'Software Developer', 'Construction Worker', 'Nurse', 'Chef', 'Lawyer', 'Police Officer', 'Retail Worker'],\n    'Hours in Week 1': [40, 50, 45, 60, 48, 50, 55, 60, 35],\n    'Hours in Week 2': [44, 75, 47, 42, 50, 50, 30, 60, 35]\n}\n\ndf = pd.DataFrame(data)\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Hours in Week 1'], df['Hours in Week 2']], patch_artist=True,\n                notch=True, vert=0, widths=0.5, labels=['Week 1', 'Week 2'])\n\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding grid\nax.grid(True)\nax.set_facecolor('gray')\n\n# Adding title and labels\nplt.title('Hours worked per week')\nplt.xlabel('Week')\nplt.ylabel('Hours')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the median line's linestyle of the section that contains the center point of the bounding box to 'dotted' and change its transform to the figure's coordinate system.",
        "Input_image": "./test_dataset/Box/Box_ff4b761a57110fbe/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Input data\ndata = {\n    'Profession': ['Teacher', 'Doctor', 'Software Developer', 'Construction Worker', 'Nurse', 'Chef', 'Lawyer', 'Police Officer', 'Retail Worker'],\n    'Hours in Week 1': [40, 50, 45, 60, 48, 50, 55, 60, 35],\n    'Hours in Week 2': [44, 75, 47, 42, 50, 50, 30, 60, 35]\n}\n\ndf = pd.DataFrame(data)\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Hours in Week 1'], df['Hours in Week 2']], patch_artist=True,\n                notch=True, vert=0, widths=0.5, labels=['Week 1', 'Week 2'])\n\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modifying the linestyle and transform of the target object\nfor idx, median in enumerate(bp['medians']):\n    if idx == 0:  # Targeting 'Week 1'\n        median.set_linestyle('dotted')\n        median.set_transform(fig.transFigure)\n\n# Adding grid\nax.grid(True)\nax.set_facecolor('gray')\n\n# Adding title and labels\nplt.title('Hours worked per week')\nplt.xlabel('Week')\nplt.ylabel('Hours')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_ff4b761a57110fbe/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_ff4b761a57110fbe/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_ff4b761a57110fbe/myplot.png"
    },
    {
        "id": "Box_e54ab57beec4a5c9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\ndata = '''Year,Arctic Sea Levels (in meters),Antarctic Sea Levels (in meters),Global Average Sea Levels (in meters)\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60'''\n\ndf = pd.read_csv(io.StringIO(data))\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\ndata = [df[\"Arctic Sea Levels (in meters)\"], df[\"Antarctic Sea Levels (in meters)\"], df[\"Global Average Sea Levels (in meters)\"]]\n\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, widths = 0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(['Arctic', 'Antarctic', 'Global Average'])\n\nax.set_title('Sea Levels in Meters')\nax.set_xlabel('Sea Levels (in meters)')\nax.set_ylabel('Regions')\n\n# Removed the grid and changed the background color to white\nax.grid(False)\nax.set_facecolor('white')  # Changed from 'lightgray' to 'white'\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the color of the box body that contain the center point of the bounding box to #474d2d, and update its linewidth to 4.75.",
        "Input_image": "./test_dataset/Box/Box_e54ab57beec4a5c9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\ndata = '''Year,Arctic Sea Levels (in meters),Antarctic Sea Levels (in meters),Global Average Sea Levels (in meters)\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60'''\n\ndf = pd.read_csv(io.StringIO(data))\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\ndata = [df[\"Arctic Sea Levels (in meters)\"], df[\"Antarctic Sea Levels (in meters)\"], df[\"Global Average Sea Levels (in meters)\"]]\n\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, widths = 0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modify the color and linewidth of the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Antarctic'\n        box.set_facecolor('#474d2d')\n        box.set_linewidth(4.75)\n\nax.set_yticklabels(['Arctic', 'Antarctic', 'Global Average'])\n\nax.set_title('Sea Levels in Meters')\nax.set_xlabel('Sea Levels (in meters)')\nax.set_ylabel('Regions')\n\n# Removed the grid and changed the background color to white\nax.grid(False)\nax.set_facecolor('white')  # Changed from 'lightgray' to 'white'\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_e54ab57beec4a5c9/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_e54ab57beec4a5c9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_e54ab57beec4a5c9/myplot.png"
    },
    {
        "id": "Box_0718419241ae9e61",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# data\ndata = {'Year': [1990, 2000, 2010, 2020],\n        'Liberalism': [200, 210, 220, 250],\n        'Conservatism': [250, 230, 220, 300],\n        'Socialism': [300, 280, 260, 240],\n        'Libertarianism': [350, 370, 400, 360]}\ndf = pd.DataFrame(data)\n\n# Creating box plot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(df.iloc[:,1:].T, patch_artist = True,\n                notch = True, vert = 0, whis = 2,\n                widths = 0.4, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding title and labels\nplt.title('Ideologies over Years')\nplt.xlabel('Ideologies') \nplt.ylabel('Popularity') \nplt.xticks([1, 2, 3, 4], ['Liberalism', 'Conservatism', 'Socialism', 'Libertarianism'])\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0]], ['Ideologies'], loc='upper left')\n\n# Annotating data value\nfor line, year in zip(bp['medians'], df['Year']):\n    # get position data for median line\n    x, y = line.get_xydata()[1] \n    plt.text(x, y, 'Year {}'.format(year))\n\n# Adding grid\nplt.grid(True)\n\n# Changing the background color to light blue\nfig.set_facecolor('#ADD8E6')  # Light blue color code\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the color of the box' body that contain the center point of the bounding box to #22ba2a, and also update the median line color of these boxes to #52f3f7.",
        "Input_image": "./test_dataset/Box/Box_0718419241ae9e61/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# data\ndata = {'Year': [1990, 2000, 2010, 2020],\n        'Liberalism': [200, 210, 220, 250],\n        'Conservatism': [250, 230, 220, 300],\n        'Socialism': [300, 280, 260, 240],\n        'Libertarianism': [350, 370, 400, 360]}\ndf = pd.DataFrame(data)\n\n# Creating box plot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(df.iloc[:,1:].T, patch_artist = True,\n                notch = True, vert = 0, whis = 2,\n                widths = 0.4, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding title and labels\nplt.title('Ideologies over Years')\nplt.xlabel('Ideologies') \nplt.ylabel('Popularity') \nplt.xticks([1, 2, 3, 4], ['Liberalism', 'Conservatism', 'Socialism', 'Libertarianism'])\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0]], ['Ideologies'], loc='upper left')\n\n# Annotating data value\nfor line, year in zip(bp['medians'], df['Year']):\n    # get position data for median line\n    x, y = line.get_xydata()[1] \n    plt.text(x, y, 'Year {}'.format(year))\n\n# Adding grid\nplt.grid(True)\n\n# Changing the background color to light blue\nfig.set_facecolor('#ADD8E6')  # Light blue color code\n\n# Set the color of the object corresponding to the Target_object to #22ba2a and line color to #52f3f7\nbp['boxes'][1].set_facecolor('#22ba2a')\nbp['medians'][1].set_color('#52f3f7')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_0718419241ae9e61/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_0718419241ae9e61/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_0718419241ae9e61/myplot.png"
    },
    {
        "id": "Box_86e0756aeb82333e",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"City, Crime Rate 1, Crime Rate 2, Crime Rate 3, Crime Rate 4, Crime Rate 5\nNew York, 20, 22, 24, 50, 25\nLos Angeles, 18, 17, 16, 35, 15\nChicago, 28, 27, 25, 25, 27\nHouston, 15, 20, 35, 20, 15\nPhoenix, 10, 15, 10, 15, 5\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df[col] for col in df.columns if col != \"City\"]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 1,\n                labels = df.columns[1:],\n                sym = \"go\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF', '#FFFF00', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"City vs Crime Rate\")\nplt.xlabel(\"City\")\nplt.ylabel(\"Crime Rate\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df.columns[1:]))], df.columns[1:], loc='upper right')\n\n# Remove grid lines\nplt.grid(False)  # This line is changed to remove the grid lines\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # This line is changed to set the facecolor to white\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the boxes that contain the center point of the bounding box to True. Additionally, for the same boxes, set the rasterized state to True as well.",
        "Input_image": "./test_dataset/Box/Box_86e0756aeb82333e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"City, Crime Rate 1, Crime Rate 2, Crime Rate 3, Crime Rate 4, Crime Rate 5\nNew York, 20, 22, 24, 50, 25\nLos Angeles, 18, 17, 16, 35, 15\nChicago, 28, 27, 25, 25, 27\nHouston, 15, 20, 35, 20, 15\nPhoenix, 10, 15, 10, 15, 5\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df[col] for col in df.columns if col != \"City\"]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 1,\n                labels = df.columns[1:],\n                sym = \"go\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF', '#FFFF00', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"City vs Crime Rate\")\nplt.xlabel(\"City\")\nplt.ylabel(\"Crime Rate\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df.columns[1:]))], df.columns[1:], loc='upper right')\n\n# Remove grid lines\nplt.grid(False)  # This line is changed to remove the grid lines\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # This line is changed to set the facecolor to white\n\n# Set the animated and rasterized state of the object corresponding to the Target_object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 2:  # Targeting 'Crime Rate 3'\n        box.set_animated(True)\n        box.set_rasterized(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Box/Box_86e0756aeb82333e/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_86e0756aeb82333e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_86e0756aeb82333e/myplot.png"
    },
    {
        "id": "Box_9624a721838d7ac8",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\nax.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the face color of the box body that contain the center point of the bounding box to #144182, and also hide the box's caps by setting their visibility to False.",
        "Input_image": "./test_dataset/Box/Box_9624a721838d7ac8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modify the face color and visibility of the target object\nbp['boxes'][1].set_facecolor('#144182')\nfor idx, line in enumerate(bp['caps']):\n    if idx in[1*2]+[1*2+1]:\n        line.set_visible(False)\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\nax.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_9624a721838d7ac8/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_9624a721838d7ac8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_9624a721838d7ac8/myplot.png"
    },
    {
        "id": "Box_347b5cb7b1cb3fe1",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nAge_Groups = ['18-24', '25-34', '35-44', '45-54']\nElectronics = [100, 200, 300, 250]\nFashion = [125, 175, 275, 200]\nGroceries = [80, 210, 320, 180]\nBooks = [90, 190, 310, 170]\n\ndata = [Electronics, Fashion, Groceries, Books]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, whis = 2,\n                sym='ro', widths=0.3)\n\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']  # New color scheme\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Changing color and line width of whiskers\nfor whisker in bp['whiskers']:\n    whisker.set(color ='#8B008B', linewidth = 1.5, linestyle =':')\n\n# Changing color and linewidth of caps\nfor cap in bp['caps']:\n    cap.set(color ='#8B008B', linewidth = 2)\n\n# Changing color and linewidth of medians\nfor median in bp['medians']:\n    median.set(color ='red', linewidth = 3)\n\n# Changing style of fliers\nfor flier in bp['fliers']:\n    flier.set(marker ='D', color ='#e7298a', alpha = 0.5)\n\n# x-axis labels\nax.set_yticks([1, 2, 3, 4])\nax.set_yticklabels(Age_Groups)\n\n# Adding title\nplt.title(\"Box plot of Purchases by Age Group\")\n\n# Removing top axes and right axes ticks\nax.get_xaxis().tick_bottom()\nax.get_yaxis().tick_left()\n\n# Adding grid\nax.grid(True)\n\n# Adding legend\nax.legend(['Electronics', 'Fashion', 'Groceries', 'Books'])\n\n# Changing background color\nax.set_facecolor('#f0f0f0')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add an outline to the box body that contains the center point of the bounding box, using a linewidth of 1.16 and the color '#b92388'. Additionally, fill this box with the color #5fef3e and set its transparency (alpha) to  0.676.",
        "Input_image": "./test_dataset/Box/Box_347b5cb7b1cb3fe1/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nAge_Groups = ['18-24', '25-34', '35-44', '45-54']\nElectronics = [100, 200, 300, 250]\nFashion = [125, 175, 275, 200]\nGroceries = [80, 210, 320, 180]\nBooks = [90, 190, 310, 170]\n\ndata = [Electronics, Fashion, Groceries, Books]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, whis = 2,\n                sym='ro', widths=0.3)\n\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']  # New color scheme\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Changing color and line width of whiskers\nfor whisker in bp['whiskers']:\n    whisker.set(color ='#8B008B', linewidth = 1.5, linestyle =':')\n\n# Changing color and linewidth of caps\nfor cap in bp['caps']:\n    cap.set(color ='#8B008B', linewidth = 2)\n\n# Changing color and linewidth of medians\nfor median in bp['medians']:\n    median.set(color ='red', linewidth = 3)\n\n# Changing style of fliers\nfor flier in bp['fliers']:\n    flier.set(marker ='D', color ='#e7298a', alpha = 0.5)\n\n# x-axis labels\nax.set_yticks([1, 2, 3, 4])\nax.set_yticklabels(Age_Groups)\n\n# Adding title\nplt.title(\"Box plot of Purchases by Age Group\")\n\n# Removing top axes and right axes ticks\nax.get_xaxis().tick_bottom()\nax.get_yaxis().tick_left()\n\n# Adding grid\nax.grid(True)\n\n# Adding legend\nax.legend(['Electronics', 'Fashion', 'Groceries', 'Books'])\n\n# Changing background color\nax.set_facecolor('#f0f0f0')\n\n# Modification part\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 3:  \n        box.set_alpha(0.6757403024298969)\n        box.set_facecolor('#5fef3e')\n        box.set_edgecolor('#b92388')\n        box.set_linewidth(1.16)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "3",
        "Test_image": "./test_dataset/Box/Box_347b5cb7b1cb3fe1/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_347b5cb7b1cb3fe1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_347b5cb7b1cb3fe1/myplot.png"
    },
    {
        "id": "Box_3561973569441e78",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data in csv format\ncsv_data = \"Travel Type,Popularity Score\\nCar Travel,5\\nTrain Travel,15\\nBus Travel,7\\nAir Travel,30\\nBike Travel,9\\nBoat Travel,20\\nFoot Travel,3\\nCamel Travel,8\\nHorse Travel,12\"\n\n# Convert the csv data into a pandas dataframe\ndata = pd.read_csv(StringIO(csv_data))\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data[\"Popularity Score\"], patch_artist=True, notch=True, vert=0, widths=0.7, sym=\"r+\")\n\n# Set color for the box plot\nbp['boxes'][0].set_facecolor('#0000FF')\n\n# Add title and labels\nplt.title(\"Popularity of Different Travel Types\")\nplt.xlabel(\"Popularity Score\")\nplt.ylabel(\"Travel Type\")\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('#D3D3D3')\n\n# Add legend\nplt.legend([bp[\"boxes\"][0]], ['Travel Types'], loc='upper right')\n\n# Annotate the data value on the chart figure\nfor i, v in enumerate(data[\"Popularity Score\"]):\n    ax.text(v+1, i+1, str(v), color='black', fontweight='bold')\n\n# Set the layout tight\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping box of the boxes that contain the center point of the bounding box to a Matplotlib bounding box defined by the lower-left corner (x0, y0) at (114, 180), with a width of 179 and a height of 382. Also, change the label of these boxes to 'A new Label'.",
        "Input_image": "./test_dataset/Box/Box_3561973569441e78/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# Given data in csv format\ncsv_data = \"Travel Type,Popularity Score\\nCar Travel,5\\nTrain Travel,15\\nBus Travel,7\\nAir Travel,30\\nBike Travel,9\\nBoat Travel,20\\nFoot Travel,3\\nCamel Travel,8\\nHorse Travel,12\"\n\n# Convert the csv data into a pandas dataframe\ndata = pd.read_csv(StringIO(csv_data))\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data[\"Popularity Score\"], patch_artist=True, notch=True, vert=0, widths=0.7, sym=\"r+\")\n\n# Set color for the box plot\nbp['boxes'][0].set_facecolor('#0000FF')\n\n# Set the clip box and label for the target object\nbbox = Bbox.from_bounds(114, 180, 179, 382)\nbp['boxes'][0].set_clip_box(bbox)\nbp['boxes'][0].set_label('A new Label')\n\n# Add title and labels\nplt.title(\"Popularity of Different Travel Types\")\nplt.xlabel(\"Popularity Score\")\nplt.ylabel(\"Travel Type\")\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('#D3D3D3')\n\n# Add legend\nplt.legend([bp[\"boxes\"][0]], ['Travel Types'], loc='upper right')\n\n# Annotate the data value on the chart figure\nfor i, v in enumerate(data[\"Popularity Score\"]):\n    ax.text(v+1, i+1, str(v), color='black', fontweight='bold')\n\n# Set the layout tight\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_3561973569441e78/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_3561973569441e78/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_3561973569441e78/myplot.png"
    },
    {
        "id": "Box_d04c53e57de118c0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nWildlife,Urbanization_Impact_1970,Urbanization_Impact_2020\nDeer,80,55\nBear,50,40\nSquirrel,70,75\nBird,80,60\nFox,25,35\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Urbanization_Impact_1970'].values, df['Urbanization_Impact_2020'].values]\nlabels = ['1970', '2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Urbanization Impact on Wildlife Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Impact')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the boxes that contain the center point of the bounding box to True, and change the color of box body to #098b6f.",
        "Input_image": "./test_dataset/Box/Box_d04c53e57de118c0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nWildlife,Urbanization_Impact_1970,Urbanization_Impact_2020\nDeer,80,55\nBear,50,40\nSquirrel,70,75\nBird,80,60\nFox,25,35\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Urbanization_Impact_1970'].values, df['Urbanization_Impact_2020'].values]\nlabels = ['1970', '2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Urbanization Impact on Wildlife Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Impact')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Modify the first box\nbp['boxes'][0].set_clip_on(True)\nbp['boxes'][0].set_facecolor('#098b6f')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_d04c53e57de118c0/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_d04c53e57de118c0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_d04c53e57de118c0/myplot.png"
    },
    {
        "id": "Box_ec34f8233b2038bd",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame from the given data\ndata = {'Year': [2014, 2015, 2016, 2017, 2018, 2019],\n        'Organic Farming Practices': [2000, 2100, 2300, 3000, 2800, 3500]}\ndf = pd.DataFrame(data)\n\n# Create a box plot of the 'Organic Farming Practices' column\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(df['Organic Farming Practices'], patch_artist = True,\n                notch = True, vert = 0, widths=0.7, sym='r+')\n\n# Change the face color of the box\nfor patch in bp['boxes']:\n    patch.set_facecolor('#FFFF00')\n\n# Remove the grid\nax.grid(False)  # This line is modified to remove the grid lines\n\n# Change the background color of the plot to white\nax.set_facecolor('white')  # This line is modified to change the background color\n\n# Set the title and labels\nax.set_title('Organic Farming Practices Over the Years')\nax.set_xlabel('Organic Farming Practices')\nax.set_ylabel('Year')\nax.legend(['Organic Farming Practices'])\n\n# Save the plot\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the clipping state of the boxes that contain the center point of the bounding box to True. Also, adjust the linewidth of these boxes to 1.52.",
        "Input_image": "./test_dataset/Box/Box_ec34f8233b2038bd/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame from the given data\ndata = {'Year': [2014, 2015, 2016, 2017, 2018, 2019],\n        'Organic Farming Practices': [2000, 2100, 2300, 3000, 2800, 3500]}\ndf = pd.DataFrame(data)\n\n# Create a box plot of the 'Organic Farming Practices' column\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(df['Organic Farming Practices'], patch_artist = True,\n                notch = True, vert = 0, widths=0.7, sym='r+')\n\n# Change the face color of the box\nfor patch in bp['boxes']:\n    patch.set_facecolor('#FFFF00')\n\n# Set the clipping state and linewidth for the box\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Assuming the first box is the target object\n        box.set_clip_on(True)\n        box.set_linewidth(1.52)\n\n# Remove the grid\nax.grid(False)  # This line is modified to remove the grid lines\n\n# Change the background color of the plot to white\nax.set_facecolor('white')  # This line is modified to change the background color\n\n# Set the title and labels\nax.set_title('Organic Farming Practices Over the Years')\nax.set_xlabel('Organic Farming Practices')\nax.set_ylabel('Year')\nax.legend(['Organic Farming Practices'])\n\n# Save the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_ec34f8233b2038bd/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_ec34f8233b2038bd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_ec34f8233b2038bd/myplot.png"
    },
    {
        "id": "Box_4cef95aa10ce4785",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Prepare data\ndecades = ['1960', '1970', '1980', '1990', '2000', '2010', '2020', '2030']\ntrend_scores = [20, 25, 40, 35, 60, 65, 90, 30]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create box plot\nbp = ax.boxplot(trend_scores, patch_artist = True, notch = True, vert = 0, widths=0.5, sym='gD')\n\ncolors = ['#0000FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add a grid\nax.grid(True)\n\n# Set the background color of the figure\nax.set_facecolor('lightgray')\n\n# Set labels and title\nax.set_xlabel('Fashion Trend Score')\nax.set_ylabel('Decade')\nplt.title('Fashion Trend Score by Decade')\n\n# Show values on the plot\nfor i, v in enumerate(trend_scores):\n    ax.text(v + 3, i + .25, str(v), color='blue', fontweight='bold')\n\n# Add legend\nax.legend([bp[\"boxes\"][0]], ['Fashion Trend Score'], loc='upper left')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the transparency of the boxes that contain the center point of the bounding box to 0.57. For the same boxes, set the z-order to 13. Also, apply a shadow effect using an offset of (3.10, 3.40).",
        "Input_image": "./test_dataset/Box/Box_4cef95aa10ce4785/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\nimport random\n\n# Prepare data\ndecades = ['1960', '1970', '1980', '1990', '2000', '2010', '2020', '2030']\ntrend_scores = [20, 25, 40, 35, 60, 65, 90, 30]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create box plot\nbp = ax.boxplot(trend_scores, patch_artist = True, notch = True, vert = 0, widths=0.5, sym='gD')\n\ncolors = ['#0000FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n    patch.set_alpha(0.57)\n    \n\n\n\n# Set shadow effect\nshadow_color = \"silver\"\nshadow_effect = path_effects.SimplePatchShadow(offset=(3.10, 3.40))\n\nbp['boxes'][0].set_path_effects([shadow_effect,path_effects.Normal()])\nbp['boxes'][0].set_zorder(13)\n# Add a grid\nax.grid(True)\n\n# Set the background color of the figure\nax.set_facecolor('lightgray')\n\n# Set labels and title\nax.set_xlabel('Fashion Trend Score')\nax.set_ylabel('Decade')\nplt.title('Fashion Trend Score by Decade')\n\n# Show values on the plot\nfor i, v in enumerate(trend_scores):\n    ax.text(v + 3, i + .25, str(v), color='blue', fontweight='bold')\n\n# Add legend\nax.legend([bp[\"boxes\"][0]], ['Fashion Trend Score'], loc='upper left')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_4cef95aa10ce4785/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_4cef95aa10ce4785/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_4cef95aa10ce4785/myplot.png"
    },
    {
        "id": "Box_5fec4db5222ac409",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nYear,Software Sales,Software Use\n2016,10000,20000\n2017,12000,18000\n2018,14000,15000\n2019,10000,10000\n2020,12000,20000\n2021,16000,25000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Software Sales'].values, df['Software Use'].values]\nlabels = ['Software Sales', 'Software Use']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color of the figure\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Software Sales and Use Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set a shadow effect to the boxes that contain the center point of the bounding box, using a shadow offset of (5, 5). Set the alpha value of these boxes to 0.515 and change their fill color to #f1d4f8.",
        "Input_image": "./test_dataset/Box/Box_5fec4db5222ac409/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as PathEffects\n\n# Given data\ndata = StringIO(\"\"\"\nYear,Software Sales,Software Use\n2016,10000,20000\n2017,12000,18000\n2018,14000,15000\n2019,10000,10000\n2020,12000,20000\n2021,16000,25000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Software Sales'].values, df['Software Use'].values]\nlabels = ['Software Sales', 'Software Use']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color of the figure\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add shadow effect and set alpha and fill color for the Target_object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:\n        box.set_path_effects([PathEffects.withSimplePatchShadow(offset=(5, 5))])\n        box.set_alpha(0.5151510171633424)\n        box.set_facecolor('#f1d4f8')\n\n# Set title and labels\nax.set_title('Software Sales and Use Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_5fec4db5222ac409/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_5fec4db5222ac409/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_5fec4db5222ac409/myplot.png"
    },
    {
        "id": "Box_56738d8c99419e71",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Vacation Type': ['Cruise Vacations', 'Road Trips', 'Staycations'],\n        '2018': [5000, 6300, 4000],\n        '2019': [6000, 4500, 4200],\n        '2020': [2500, 9000, 8400]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['2018'], df['2019'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2018', '2019', '2020'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Vacation Type vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Vacation Type\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2018', '2019', '2020'], loc='upper right')\n\n# Removing grid lines\nplt.grid(False)  # Modified line\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # Modified line\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clip box for the boxes that contain the center point of the bounding box to a bounding box defined by the coordinates (x0, y0) = (142, 172), with a width of 336 and a height of 271 using `matplotlib.transforms.Bbox`. Also, modify the transform of these boxes to align with the pixel coordinate system.",
        "Input_image": "./test_dataset/Box/Box_56738d8c99419e71/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.transforms as mtransforms\n\n# Given data\ndata = {'Vacation Type': ['Cruise Vacations', 'Road Trips', 'Staycations'],\n        '2018': [5000, 6300, 4000],\n        '2019': [6000, 4500, 4200],\n        '2020': [2500, 9000, 8400]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['2018'], df['2019'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2018', '2019', '2020'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Vacation Type vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Vacation Type\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2018', '2019', '2020'], loc='upper right')\n\n# Removing grid lines\nplt.grid(False)  # Modified line\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # Modified line\n\n# Set the clip box and transform for the target object\nbbox = mtransforms.Bbox.from_bounds(142, 172, 336, 271)\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting '2019'\n        box.set_clip_box(bbox)\n        box.set_transform(ax.transData)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_56738d8c99419e71/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_56738d8c99419e71/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_56738d8c99419e71/myplot.png"
    },
    {
        "id": "Box_0110eb911918b54a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\"Disaster Type\":[\"Flood\",\"Drought\",\"Earthquake\"],\n        \"Economic Impact in Year 1\":[100,150,120],\n        \"Economic Impact in Year 2\":[50,80,200]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize = (10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df[\"Economic Impact in Year 1\"], df[\"Economic Impact in Year 2\"]], patch_artist = True,\n                notch = True, vert = 0, labels = [\"Economic Impact in Year 1\", \"Economic Impact in Year 2\"],\n                widths = 0.4, sym='gD')\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting title and labels with increased font size\nax.set_title('Economic Impact of Disasters', fontsize=18)\nax.set_xlabel('Years', fontsize=14)\nax.set_ylabel('Economic Impact', fontsize=14)\n\n# Adding legend\nax.legend([\"Economic Impact in Year 1\", \"Economic Impact in Year 2\"])\n\n# Annotating data\nfor i, v in enumerate(df[\"Economic Impact in Year 1\"]):\n    ax.text(i+1, v + 5, str(v), color='blue', fontweight='bold')\n\nfor i, v in enumerate(df[\"Economic Impact in Year 2\"]):\n    ax.text(i+2, v + 5, str(v), color='green', fontweight='bold')\n\n# Adding grid\nax.grid(True)\n\n# Change the background color of the chart figure\nax.set_facecolor(\"lightgray\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clip box for the boxes that correspond to the center point of the bounding box to a bounding box defined by the origin (x0, y0) at (80, 80), with a width of 472 and a height of 372 using `matplotlib.transforms.Bbox`. Also, update the stroke of the boxes containing the center point of the bounding box to have a line width of 4.405 and a foreground color of #436d8e.",
        "Input_image": "./test_dataset/Box/Box_0110eb911918b54a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\nimport matplotlib.patheffects as path_effects\n\n# Given data\ndata = {\"Disaster Type\":[\"Flood\",\"Drought\",\"Earthquake\"],\n        \"Economic Impact in Year 1\":[100,150,120],\n        \"Economic Impact in Year 2\":[50,80,200]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize = (10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df[\"Economic Impact in Year 1\"], df[\"Economic Impact in Year 2\"]], patch_artist = True,\n                notch = True, vert = 0, labels = [\"Economic Impact in Year 1\", \"Economic Impact in Year 2\"],\n                widths = 0.4, sym='gD')\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting title and labels with increased font size\nax.set_title('Economic Impact of Disasters', fontsize=18)\nax.set_xlabel('Years', fontsize=14)\nax.set_ylabel('Economic Impact', fontsize=14)\n\nbbox = Bbox.from_bounds(80, 80, 472, 372)\nstroke_effect = path_effects.withStroke(linewidth=4.405382507321752, foreground='#436d8e')\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting 'Economic Impact in Year 1'\n        box.set_clip_box(bbox)\n        box.set_path_effects([stroke_effect])\n\n# Adding legend\nax.legend([\"Economic Impact in Year 1\", \"Economic Impact in Year 2\"])\n\n# Annotating data\nfor i, v in enumerate(df[\"Economic Impact in Year 1\"]):\n    ax.text(i+1, v + 5, str(v), color='blue', fontweight='bold')\n\nfor i, v in enumerate(df[\"Economic Impact in Year 2\"]):\n    ax.text(i+2, v + 5, str(v), color='green', fontweight='bold')\n\n# Adding grid\nax.grid(True)\n\n# Change the background color of the chart figure\nax.set_facecolor(\"lightgray\")\n\n\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_0110eb911918b54a/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_0110eb911918b54a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_0110eb911918b54a/myplot.png"
    },
    {
        "id": "Box_a3ba1e1c7d3189d9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Age Group': ['15-24', '25-34', '35-44', '45-54', '55-64', '65+'],\n        'Fast Food Consumption': [50, 45, 60, 35, 70, 55]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Fast Food Consumption']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Fast Food Consumption'], \n                sym = \"go\", widths = 0.4)\n\ncolors = ['#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Fast Food Consumption by Age Group\")\nplt.xlabel(\"Consumption\")\nplt.ylabel(\"Age Group\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0]], ['Fast Food Consumption'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the boxes that contain the center point of the bounding box to 0.30, and ensure their animated state is set to False.",
        "Input_image": "./test_dataset/Box/Box_a3ba1e1c7d3189d9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Age Group': ['15-24', '25-34', '35-44', '45-54', '55-64', '65+'],\n        'Fast Food Consumption': [50, 45, 60, 35, 70, 55]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Fast Food Consumption']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Fast Food Consumption'], \n                sym = \"go\", widths = 0.4)\n\ncolors = ['#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting transparency and animated state for the first box\nbp['boxes'][0].set_alpha(0.30)\nbp['boxes'][0].set_animated(False)\n\n# Setting titles and labels\nplt.title(\"Fast Food Consumption by Age Group\")\nplt.xlabel(\"Consumption\")\nplt.ylabel(\"Age Group\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0]], ['Fast Food Consumption'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_a3ba1e1c7d3189d9/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_a3ba1e1c7d3189d9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_a3ba1e1c7d3189d9/myplot.png"
    },
    {
        "id": "Box_c729c8a0bb0a3161",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare the data\ndata = {\"Species\": [\"Amazon Rainforest\", \"Siberian Taiga\", \"Australian Bush\"],\n        \"Year 2000\": [5000, 4200, 3200],\n        \"Year 2020\": [3700, 4000, 1800]}\ndf = pd.DataFrame(data)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Change the boxplot parameters\nbp = ax.boxplot([df['Year 2000'], df['Year 2020']], patch_artist=True, vert=0, widths=0.5, sym='r+')\n\ncolors = ['#0000FF', '#00FF00']\n\n# Change the color of each boxplot\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate the data\nfor i in range(len(df['Year 2000'])):\n    ax.text(df['Year 2000'][i], i+1, str(df['Year 2000'][i]), ha='center')\n    ax.text(df['Year 2020'][i], i+1.4, str(df['Year 2020'][i]), ha='center')\n\n# Add title and labels\nax.set_title('Comparison of Forest Area in Year 2000 and 2020')\nax.set_xlabel('Year')\nax.set_ylabel('Forest Area (thousand square kilometers)')\n\n# Add legend\nax.legend(['Year 2000', 'Year 2020'], loc='upper right')\n\n# Add grid and change background color\nax.grid(True)\n# Modified background color to light blue\nax.set_facecolor('#add8e6')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill color of the box that contain the center point of the bounding box to #6ac12b. Also, add an outline to this box body with a linewidth of 1.81 and a color of '#ff8379'.",
        "Input_image": "./test_dataset/Box/Box_c729c8a0bb0a3161/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare the data\ndata = {\"Species\": [\"Amazon Rainforest\", \"Siberian Taiga\", \"Australian Bush\"],\n        \"Year 2000\": [5000, 4200, 3200],\n        \"Year 2020\": [3700, 4000, 1800]}\ndf = pd.DataFrame(data)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Change the boxplot parameters\nbp = ax.boxplot([df['Year 2000'], df['Year 2020']], patch_artist=True, vert=0, widths=0.5, sym='r+')\n\ncolors = ['#0000FF', '#00FF00']\n\n# Change the color of each boxplot\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the fill color of the boxes corresponding to the Target_object to #6ac12b and add an outline\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:\n        box.set_facecolor('#6ac12b')\n        box.set_edgecolor('#ff8379')\n        box.set_linewidth(1.81)\n\n# Annotate the data\nfor i in range(len(df['Year 2000'])):\n    ax.text(df['Year 2000'][i], i+1, str(df['Year 2000'][i]), ha='center')\n    ax.text(df['Year 2020'][i], i+1.4, str(df['Year 2020'][i]), ha='center')\n\n# Add title and labels\nax.set_title('Comparison of Forest Area in Year 2000 and 2020')\nax.set_xlabel('Year')\nax.set_ylabel('Forest Area (thousand square kilometers)')\n\n# Add legend\nax.legend(['Year 2000', 'Year 2020'], loc='upper right')\n\n# Add grid and change background color\nax.grid(True)\n# Modified background color to light blue\nax.set_facecolor('#add8e6')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_c729c8a0bb0a3161/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_c729c8a0bb0a3161/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_c729c8a0bb0a3161/myplot.png"
    },
    {
        "id": "Box_f1e57b108430ed7d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Import data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Pop': [100, 120, 150, 200, 180, 190, 210, 230, 240],\n        'Rock': [80, 70, 60, 50, 90, 80, 70, 150, 160],\n        'Classical': [120, 130, 140, 100, 120, 110, 90, 80, 70]}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Pop'], df['Rock'], df['Classical']], patch_artist = True,\n                notch = True, vert = 0, widths = 0.5, labels = ['Pop', 'Rock', 'Classical'])\ncolors = ['#0000FF', '#00FF00', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding title and labels\nplt.title('Music Genre Popularity Over Years')\nplt.xlabel('Genre')\nplt.ylabel('Popularity')\n\n# Adding grid\nax.grid(True)\n\n# Changing the background color of the figure\nax.set_facecolor('lightgray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the picker state of the box that contains the center point of the bounding box to True. At the same time, set the visibility of the corresponding box body to False for those same points.",
        "Input_image": "./test_dataset/Box/Box_f1e57b108430ed7d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Import data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Pop': [100, 120, 150, 200, 180, 190, 210, 230, 240],\n        'Rock': [80, 70, 60, 50, 90, 80, 70, 150, 160],\n        'Classical': [120, 130, 140, 100, 120, 110, 90, 80, 70]}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Pop'], df['Rock'], df['Classical']], patch_artist = True,\n                notch = True, vert = 0, widths = 0.5, labels = ['Pop', 'Rock', 'Classical'])\ncolors = ['#0000FF', '#00FF00', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the picker state and visibility for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Rock'\n        box.set_picker(True)\n        box.set_visible(False)\n\n# Adding title and labels\nplt.title('Music Genre Popularity Over Years')\nplt.xlabel('Genre')\nplt.ylabel('Popularity')\n\n# Adding grid\nax.grid(True)\n\n# Changing the background color of the figure\nax.set_facecolor('lightgray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_f1e57b108430ed7d/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_f1e57b108430ed7d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_f1e57b108430ed7d/myplot.png"
    },
    {
        "id": "Box_692bc4e3c754419c",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Import data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Pop': [100, 120, 150, 200, 180, 190, 210, 230, 240],\n        'Rock': [80, 70, 60, 50, 90, 80, 70, 150, 160],\n        'Classical': [120, 130, 140, 100, 120, 110, 90, 80, 70]}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Pop'], df['Rock'], df['Classical']], patch_artist = True,\n                notch = True, vert = 0, widths = 0.5, labels = ['Pop', 'Rock', 'Classical'])\ncolors = ['#0000FF', '#00FF00', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding title and labels with modified font sizes\nplt.title('Music Genre Popularity Over Years', fontsize=20)\nplt.xlabel('Genre', fontsize=14)\nplt.ylabel('Popularity', fontsize=14)\n\n# Modifying tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Adding grid\nax.grid(True)\n\n# Changing the background color of the figure\nax.set_facecolor('lightgray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply a shadow effect to the boxes that contain the center point of the bounding box, using a shadow offset of (2, 4). Then, adjust the opacity of these boxes to 0.7338 and fill them with a dotted hatch pattern.",
        "Input_image": "./test_dataset/Box/Box_692bc4e3c754419c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as PathEffects\n\n# Import data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Pop': [100, 120, 150, 200, 180, 190, 210, 230, 240],\n        'Rock': [80, 70, 60, 50, 90, 80, 70, 150, 160],\n        'Classical': [120, 130, 140, 100, 120, 110, 90, 80, 70]}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Pop'], df['Rock'], df['Classical']], patch_artist = True,\n                notch = True, vert = 0, widths = 0.5, labels = ['Pop', 'Rock', 'Classical'])\ncolors = ['#0000FF', '#00FF00', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding shadow effect and setting alpha and hatch pattern for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Assuming 'Rock' is the target object based on the instruction\n        box.set_path_effects([PathEffects.withSimplePatchShadow(offset=(2, 4))])\n        box.set_alpha(0.7337878288680293)\n        box.set_hatch('..')\n\n# Adding title and labels with modified font sizes\nplt.title('Music Genre Popularity Over Years', fontsize=20)\nplt.xlabel('Genre', fontsize=14)\nplt.ylabel('Popularity', fontsize=14)\n\n# Modifying tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Adding grid\nax.grid(True)\n\n# Changing the background color of the figure\nax.set_facecolor('lightgray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_692bc4e3c754419c/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_692bc4e3c754419c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_692bc4e3c754419c/myplot.png"
    },
    {
        "id": "Box_05f831f80609b7f5",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\n\"Architecture Type\",\"Year 2010\",\"Year 2020\"\n\"Modern Architecture\",500,250\n\"Gothic Architecture\",300,800\n\"Victorian Architecture\",700,350\n\"Romanesque Architecture\",200,600\n\"Baroque Architecture\",400,550\n\"Renaissance Architecture\",600,700\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Year 2010'].values, df['Year 2020'].values]\nlabels = ['Year 2010', 'Year 2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Architecture Popularity Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the boxes that contain the center point of the bounding box to #137107. Set the z-order of these boxes' body to 17. Additionally, add a line shadow effect to these boxes' body with an offset of (3.88, 3.20), and the shadow color as 'gold'.",
        "Input_image": "./test_dataset/Box/Box_05f831f80609b7f5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\nimport random\nfrom matplotlib.patheffects import Normal\n# Data\ndata = StringIO(\"\"\"\n\"Architecture Type\",\"Year 2010\",\"Year 2020\"\n\"Modern Architecture\",500,250\n\"Gothic Architecture\",300,800\n\"Victorian Architecture\",700,350\n\"Romanesque Architecture\",200,600\n\"Baroque Architecture\",400,550\n\"Renaissance Architecture\",600,700\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Year 2010'].values, df['Year 2020'].values]\nlabels = ['Year 2010', 'Year 2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Architecture Popularity Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Modify the first box\nbp['boxes'][0].set_facecolor('#137107')\nbp['boxes'][0].set_zorder(17)\nshadow_color = 'gold'\nshadow_effect = path_effects.SimpleLineShadow(offset=(3.88,3.20), shadow_color=shadow_color)\nbp['boxes'][0].set_path_effects([shadow_effect,path_effects.Normal()])\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_05f831f80609b7f5/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_05f831f80609b7f5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_05f831f80609b7f5/myplot.png"
    },
    {
        "id": "Box_dacf4d8e7a677113",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nMental Health Disorder,Prevalence\nAnxiety Disorders,12\nMood Disorders,15\nSchizophrenia,8\nMood Disorders,10\nSchizophrenia,6\nAnxiety Disorders,18\n\"\"\")\n\ndf = pd.DataFrame(pd.read_csv(data))\n\n# Prepare data for box plot\nplot_data = [df[df['Mental Health Disorder'] == disorder]['Prevalence'] for disorder in df['Mental Health Disorder'].unique()]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = df['Mental Health Disorder'].unique(), \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Mental Health Disorders vs Prevalence\")\nplt.xlabel(\"Mental Health Disorders\")\nplt.ylabel(\"Prevalence\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], \n           df['Mental Health Disorder'].unique(), loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure to light blue\nfig.patch.set_facecolor('#ADD8E6')  # Light blue color\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the boxes that contain the center point of the bounding box to True, and also enable the rasterized state for those boxes.",
        "Input_image": "./test_dataset/Box/Box_dacf4d8e7a677113/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nMental Health Disorder,Prevalence\nAnxiety Disorders,12\nMood Disorders,15\nSchizophrenia,8\nMood Disorders,10\nSchizophrenia,6\nAnxiety Disorders,18\n\"\"\")\n\ndf = pd.DataFrame(pd.read_csv(data))\n\n# Prepare data for box plot\nplot_data = [df[df['Mental Health Disorder'] == disorder]['Prevalence'] for disorder in df['Mental Health Disorder'].unique()]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = df['Mental Health Disorder'].unique(), \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Mental Health Disorders vs Prevalence\")\nplt.xlabel(\"Mental Health Disorders\")\nplt.ylabel(\"Prevalence\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], \n           df['Mental Health Disorder'].unique(), loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure to light blue\nfig.patch.set_facecolor('#ADD8E6')  # Light blue color\n\n# Set the clipping state and rasterized state of the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Mood Disorders'\n        box.set_clip_on(True)\n        box.set_rasterized(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_dacf4d8e7a677113/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_dacf4d8e7a677113/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_dacf4d8e7a677113/myplot.png"
    },
    {
        "id": "Box_28f1511f9bf291b2",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\ndata_string = StringIO(\"\"\"\nPlatform,Year 1,Year 2,Year 3,Year 4,Year 5,Year 6,Year 7,Year 8,Year 9\nFacebook,5000,5500,3000,3500,4000,6000,6500,3000,3500\nTwitter,3000,3500,4000,3000,2500,2000,1500,1000,500\nInstagram,2000,4500,5000,5500,5000,4500,4000,8500,8000\nSnapchat,1000,2000,3000,2000,1000,800,600,400,200\nLinkedIn,2000,2500,3000,3500,4000,4500,5000,5500,6000\n\"\"\")\ndata_df = pd.read_csv(data_string)\n\ndata = [data_df[col].values for col in data_df.columns if col != 'Platform']\n\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data, patch_artist = True,\n                notch = True, vert = 0, widths = 0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(data_df.columns[1:])\nax.set_xlabel('Popularity')\nax.set_ylabel('Years')\nax.set_title('Popularity of Social Media Platforms Over 9 Years')\n\nfor i in range(len(data_df.columns[1:])):\n    ax.text(data[i].mean(), i+1, f'{data[i].mean():.2f}', horizontalalignment='center', verticalalignment='center')\n\nax.set_facecolor('lightgray')\nax.grid(True)\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Update the visibility of the median line of the box that contain the center point of the bounding box to False. For those same box, set the z-order of its body to 6. Additionally, apply a stroke effect to the box body with an offset of (3.93, 3.50) and shadow color of red.",
        "Input_image": "./test_dataset/Box/Box_28f1511f9bf291b2/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom matplotlib.patheffects import withStroke\n\ndata_string = StringIO(\"\"\"\nPlatform,Year 1,Year 2,Year 3,Year 4,Year 5,Year 6,Year 7,Year 8,Year 9\nFacebook,5000,5500,3000,3500,4000,6000,6500,3000,3500\nTwitter,3000,3500,4000,3000,2500,2000,1500,1000,500\nInstagram,2000,4500,5000,5500,5000,4500,4000,8500,8000\nSnapchat,1000,2000,3000,2000,1000,800,600,400,200\nLinkedIn,2000,2500,3000,3500,4000,4500,5000,5500,6000\n\"\"\")\ndata_df = pd.read_csv(data_string)\n\ndata = [data_df[col].values for col in data_df.columns if col != 'Platform']\n\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data, patch_artist = True,\n                notch = True, vert = 0, widths = 0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(data_df.columns[1:])\nax.set_xlabel('Popularity')\nax.set_ylabel('Years')\nax.set_title('Popularity of Social Media Platforms Over 9 Years')\n\nfor i in range(len(data_df.columns[1:])):\n    ax.text(data[i].mean(), i+1, f'{data[i].mean():.2f}', horizontalalignment='center', verticalalignment='center')\n\nax.set_facecolor('lightgray')\nax.grid(True)\n\n# Modifications for Target_object\nshadow_color = 'red'\nfor idx in [1]:  # Targeting 'Twitter'\n    bp['medians'][idx].set_visible(False)\n    bp['boxes'][idx].set_zorder(6)\n    bp['boxes'][idx].set_path_effects([withStroke(linewidth=3, offset=(3.93,3.50), foreground=shadow_color)])\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_28f1511f9bf291b2/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_28f1511f9bf291b2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_28f1511f9bf291b2/myplot.png"
    },
    {
        "id": "Box_3a0195407e3a9234",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [\n    [25,30,35,70,75,30,20], # Rose\n    [40,30,20,10,50,60,70], # Sunflower\n    [60,50,40,30,80,90,100], # Fern\n    [20,30,40,80,85,40,30], # Dandelion\n    [100,90,80,70,150,140,130], # Orchid\n    [30,40,50,100,105,50,40], # Cactus\n    [70,60,50,40,90,100,110], # Lily\n    [50,60,70,80,85,90,40] # Oak\n]\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=0, whis=2, widths=0.4, sym='r+')\n\ncolors = ['#FF0000', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#FF00FF', '#808080', '#000000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nplt.title('Plant Growth Patterns')\nplt.xlabel('Growth Rate')\nplt.ylabel('Plant Species')\nplt.legend(['Rose', 'Sunflower', 'Fern', 'Dandelion', 'Orchid', 'Cactus', 'Lily', 'Oak'], loc='upper right')\n\nax.set_facecolor('#F0F0F0')\nplt.grid(linestyle='--')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the boxes' bodies that contain the center point of the bounding box to #3b27c8, and enable the picker state for these boxes by setting it to True.",
        "Input_image": "./test_dataset/Box/Box_3a0195407e3a9234/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ndata = [\n    [25,30,35,70,75,30,20], # Rose\n    [40,30,20,10,50,60,70], # Sunflower\n    [60,50,40,30,80,90,100], # Fern\n    [20,30,40,80,85,40,30], # Dandelion\n    [100,90,80,70,150,140,130], # Orchid\n    [30,40,50,100,105,50,40], # Cactus\n    [70,60,50,40,90,100,110], # Lily\n    [50,60,70,80,85,90,40] # Oak\n]\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=0, whis=2, widths=0.4, sym='r+')\n\ncolors = ['#FF0000', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#FF00FF', '#808080', '#000000']\n\nfor idx, (patch, color) in enumerate(zip(bp['boxes'], colors)):\n    if idx in [1, 3]:  # Targeting Sunflower and Dandelion\n        patch.set_facecolor('#3b27c8')\n        patch.set_picker(True)\n    else:\n        patch.set_facecolor(color)\n\nplt.title('Plant Growth Patterns')\nplt.xlabel('Growth Rate')\nplt.ylabel('Plant Species')\nplt.legend(['Rose', 'Sunflower', 'Fern', 'Dandelion', 'Orchid', 'Cactus', 'Lily', 'Oak'], loc='upper right')\n\nax.set_facecolor('#F0F0F0')\nplt.grid(linestyle='--')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Box/Box_3a0195407e3a9234/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_3a0195407e3a9234/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_3a0195407e3a9234/myplot.png"
    },
    {
        "id": "Box_4d5be11ebfd702e8",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nRegion,2010,2020\nAsia,80,65\nEurope,70,40\nAmerica,90,50\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2010'].values, df['2020'].values]\nlabels = ['2010', '2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Population Change from 2010 to 2020')\nax.set_xlabel('Year')\nax.set_ylabel('Population')\n\n# Change the face color of the chart\nax.set_facecolor('#f0f0f0')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterization state of the box body that contains the center point of the bounding box to False. Also, for the same box, adjust its transform to align with the coordinate system of the axes.",
        "Input_image": "./test_dataset/Box/Box_4d5be11ebfd702e8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nRegion,2010,2020\nAsia,80,65\nEurope,70,40\nAmerica,90,50\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2010'].values, df['2020'].values]\nlabels = ['2010', '2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Population Change from 2010 to 2020')\nax.set_xlabel('Year')\nax.set_ylabel('Population')\n\n# Change the face color of the chart\nax.set_facecolor('#f0f0f0')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Modify the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting the first box\n        box.set_rasterized(False)\n        box.set_transform(ax.transData)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_4d5be11ebfd702e8/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_4d5be11ebfd702e8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_4d5be11ebfd702e8/myplot.png"
    },
    {
        "id": "Box_358cb7834748c3cc",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Anxiety Disorders,Depression\n2012,7.8,6.6\n2013,7.4,6.3\n2014,7.1,5.9\n2015,6.8,8.2\n2016,6.5,7.8\n2017,6.2,7.5\n2018,5.9,7.1\n2019,5.6,6.9\n2020,5.2,11.4\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Anxiety Disorders'].values, df['Depression'].values]\nlabels = ['Anxiety Disorders', 'Depression']\ncolors = ['#1f77b4', '#aec7e8']  # Changed colors to different shades of blue\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Prevalence of Anxiety Disorders and Depression Over The Years')\nax.set_xlabel('Mental Health Conditions')\nax.set_ylabel('Prevalence (%)')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the box body that contain the center point of the bounding box to #354dc9, and adjust its transparency to 0.52.",
        "Input_image": "./test_dataset/Box/Box_358cb7834748c3cc/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Anxiety Disorders,Depression\n2012,7.8,6.6\n2013,7.4,6.3\n2014,7.1,5.9\n2015,6.8,8.2\n2016,6.5,7.8\n2017,6.2,7.5\n2018,5.9,7.1\n2019,5.6,6.9\n2020,5.2,11.4\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Anxiety Disorders'].values, df['Depression'].values]\nlabels = ['Anxiety Disorders', 'Depression']\ncolors = ['#1f77b4', '#aec7e8']  # Changed colors to different shades of blue\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set color and transparency for the target box\nfor idx, patch in enumerate(bp['boxes']):\n    if labels[idx] == labels[1]:  # Targeting 'Depression'\n        patch.set_facecolor('#354dc9')\n        patch.set_alpha(0.52)\n\n# Set title and labels\nax.set_title('Prevalence of Anxiety Disorders and Depression Over The Years')\nax.set_xlabel('Mental Health Conditions')\nax.set_ylabel('Prevalence (%)')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_358cb7834748c3cc/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_358cb7834748c3cc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_358cb7834748c3cc/myplot.png"
    },
    {
        "id": "Box_755e776a5163e592",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Convert string data to list of integers\ndust_mites = list(map(int, \"15,17,13,16,20,18,15,20,17,25,12,15,13,18,17,20,16,19,17,16\".split(',')))\npollens = list(map(int, \"25,28,24,23,22,30,34,33,32,30,40,35,39,36,38,32,30,28,27,25\".split(',')))\ndairy = list(map(int, \"20,22,25,20,18,17,16,15,17,30,18,18,20,19,14,15,16,20,18,20\".split(',')))\n\ndata = [dust_mites, pollens, dairy]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, whis = 2,\n                widths = 0.4, sym = 'r+')\n\ncolors = ['#0000FF', '#00FF00', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding labels\nplt.xlabel(\"Prevalence\")\nplt.ylabel(\"Allergy Type\")\nplt.title(\"Allergy Prevalence Box Plot\")\nplt.xticks([1, 2, 3], ['Dust Mites', 'Pollens', 'Dairy'])\n\n# Adding grid\nax.grid(True)\n\n# Changing background color\nax.set_facecolor('lightgray')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Stroke the box body that contain the center point of the bounding box using a linewidth of 3.06 and a foreground color of #86cffa. Make sure this box is set to use the axes' coordinate system.",
        "Input_image": "./test_dataset/Box/Box_755e776a5163e592/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Convert string data to list of integers\ndust_mites = list(map(int, \"15,17,13,16,20,18,15,20,17,25,12,15,13,18,17,20,16,19,17,16\".split(',')))\npollens = list(map(int, \"25,28,24,23,22,30,34,33,32,30,40,35,39,36,38,32,30,28,27,25\".split(',')))\ndairy = list(map(int, \"20,22,25,20,18,17,16,15,17,30,18,18,20,19,14,15,16,20,18,20\".split(',')))\n\ndata = [dust_mites, pollens, dairy]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, whis = 2,\n                widths = 0.4, sym = 'r+')\n\ncolors = ['#0000FF', '#00FF00', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding labels\nplt.xlabel(\"Prevalence\")\nplt.ylabel(\"Allergy Type\")\nplt.title(\"Allergy Prevalence Box Plot\")\nplt.xticks([1, 2, 3], ['Dust Mites', 'Pollens', 'Dairy'])\n\n# Adding grid\nax.grid(True)\n\n# Changing background color\nax.set_facecolor('lightgray')\n\n# Applying stroke effect and transform to the target object\nstroke_effect = path_effects.withStroke(linewidth=3.0592840764438134, foreground='#86cffa')\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Pollens'\n        box.set_path_effects([stroke_effect])\n        box.set_transform(ax.transData)\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_755e776a5163e592/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_755e776a5163e592/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_755e776a5163e592/myplot.png"
    },
    {
        "id": "Box_53d831bcff49c9d0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Compact Cars,SUVs,Trucks\n2010,1000,1200,1400\n2011,1200,1100,1300\n2012,1400,1000,1200\n2013,1600,1400,1100\n2014,1800,1600,1000\n2015,2000,1800,1300\n2016,1600,2000,1500\n2017,1700,1500,1600\n2018,1900,1300,1400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Compact Cars'].values, df['SUVs'].values, df['Trucks'].values]\nlabels = ['Compact Cars', 'SUVs', 'Trucks']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the label of the boxes that contain the center point of the bounding box to 'A new Label'. Additionally, change the linestyle of the box's median to 'dotted'.",
        "Input_image": "./test_dataset/Box/Box_53d831bcff49c9d0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Compact Cars,SUVs,Trucks\n2010,1000,1200,1400\n2011,1200,1100,1300\n2012,1400,1000,1200\n2013,1600,1400,1100\n2014,1800,1600,1000\n2015,2000,1800,1300\n2016,1600,2000,1500\n2017,1700,1500,1600\n2018,1900,1300,1400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Compact Cars'].values, df['SUVs'].values, df['Trucks'].values]\nlabels = ['Compact Cars', 'SUVs', 'Trucks']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Modify the label and linestyle for the target object\nlabels[1] = 'A new Label'\nfor line in bp['medians']:\n    line.set_linestyle('dotted')\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_53d831bcff49c9d0/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_53d831bcff49c9d0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_53d831bcff49c9d0/myplot.png"
    },
    {
        "id": "Box_b7f9bbcabf07417e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Compact Cars,SUVs,Trucks\n2010,1000,1200,1400\n2011,1200,1100,1300\n2012,1400,1000,1200\n2013,1600,1400,1100\n2014,1800,1600,1000\n2015,2000,1800,1300\n2016,1600,2000,1500\n2017,1700,1500,1600\n2018,1900,1300,1400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Compact Cars'].values, df['SUVs'].values, df['Trucks'].values]\nlabels = ['Compact Cars', 'SUVs', 'Trucks']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the box that contains the center point of the bounding box to True. Additionally, update the label of this box to 'A new Label'.",
        "Input_image": "./test_dataset/Box/Box_b7f9bbcabf07417e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Compact Cars,SUVs,Trucks\n2010,1000,1200,1400\n2011,1200,1100,1300\n2012,1400,1000,1200\n2013,1600,1400,1100\n2014,1800,1600,1000\n2015,2000,1800,1300\n2016,1600,2000,1500\n2017,1700,1500,1600\n2018,1900,1300,1400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Compact Cars'].values, df['SUVs'].values, df['Trucks'].values]\nlabels = ['Compact Cars', 'SUVs', 'Trucks']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Modify the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'SUVs'\n        box.set_animated(True)\n        labels[idx] = 'A new Label'\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_b7f9bbcabf07417e/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_b7f9bbcabf07417e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_b7f9bbcabf07417e/myplot.png"
    },
    {
        "id": "Box_66b7e483272e93a9",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Anxiety Disorders,Depression\n2012,7.8,6.6\n2013,7.4,6.3\n2014,7.1,5.9\n2015,6.8,8.2\n2016,6.5,7.8\n2017,6.2,7.5\n2018,5.9,7.1\n2019,5.6,6.9\n2020,5.2,11.4\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Anxiety Disorders'].values, df['Depression'].values]\nlabels = ['Anxiety Disorders', 'Depression']\ncolors = ['#1f77b4', '#aec7e8']  # Changed colors to different shades of blue\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Prevalence of Anxiety Disorders and Depression Over The Years')\nax.set_xlabel('Mental Health Conditions')\nax.set_ylabel('Prevalence (%)')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the z-order of the boxes that contain the center point of the bounding box to 18, and apply a shadow effect to these boxes with an offset of (2.51, 2.28).",
        "Input_image": "./test_dataset/Box/Box_66b7e483272e93a9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom matplotlib.patheffects import withSimplePatchShadow\n# Data\ndata = StringIO(\"\"\"\nYear,Anxiety Disorders,Depression\n2012,7.8,6.6\n2013,7.4,6.3\n2014,7.1,5.9\n2015,6.8,8.2\n2016,6.5,7.8\n2017,6.2,7.5\n2018,5.9,7.1\n2019,5.6,6.9\n2020,5.2,11.4\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Anxiety Disorders'].values, df['Depression'].values]\nlabels = ['Anxiety Disorders', 'Depression']\ncolors = ['#1f77b4', '#aec7e8']  # Changed colors to different shades of blue\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Prevalence of Anxiety Disorders and Depression Over The Years')\nax.set_xlabel('Mental Health Conditions')\nax.set_ylabel('Prevalence (%)')\n\n# Add grid\nax.grid(True)\n\n# Modify the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting 'Anxiety Disorders'\n        box.set_zorder(18)\n        box.set_path_effects([withSimplePatchShadow(offset=(2.51,2.28))])\n        \n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_66b7e483272e93a9/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_66b7e483272e93a9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_66b7e483272e93a9/myplot.png"
    },
    {
        "id": "Box_335753dfe1baac74",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Compact Cars,SUVs,Trucks\n2010,1000,1200,1400\n2011,1200,1100,1300\n2012,1400,1000,1200\n2013,1600,1400,1100\n2014,1800,1600,1000\n2015,2000,1800,1300\n2016,1600,2000,1500\n2017,1700,1500,1600\n2018,1900,1300,1400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Compact Cars'].values, df['SUVs'].values, df['Trucks'].values]\nlabels = ['Compact Cars', 'SUVs', 'Trucks']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a dashed outline to the box body that contain the center point of the bounding box, using a linewidth of 1.71 and a color of '#a51bd0'. Set this transparency (alpha) to 0.6537 and apply a horizontal hatch pattern for the fill.",
        "Input_image": "./test_dataset/Box/Box_335753dfe1baac74/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Compact Cars,SUVs,Trucks\n2010,1000,1200,1400\n2011,1200,1100,1300\n2012,1400,1000,1200\n2013,1600,1400,1100\n2014,1800,1600,1000\n2015,2000,1800,1300\n2016,1600,2000,1500\n2017,1700,1500,1600\n2018,1900,1300,1400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Compact Cars'].values, df['SUVs'].values, df['Trucks'].values]\nlabels = ['Compact Cars', 'SUVs', 'Trucks']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modification\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:\n        box.set_linestyle('-.')\n        box.set_linewidth(1.71)\n        box.set_edgecolor('#a51bd0')\n        box.set_alpha(0.65371273668125)\n        box.set_hatch('////')\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_335753dfe1baac74/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_335753dfe1baac74/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_335753dfe1baac74/myplot.png"
    },
    {
        "id": "Box_1337b8c3da323411",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Prepare data\ndecades = ['1960', '1970', '1980', '1990', '2000', '2010', '2020', '2030']\ntrend_scores = [20, 25, 40, 35, 60, 65, 90, 30]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create box plot\nbp = ax.boxplot(trend_scores, patch_artist = True, notch = True, vert = 0, widths=0.5, sym='gD')\n\n# Create a gradient color list from blue to red\nn_boxes = len(bp['boxes'])\ncolors = [(i / n_boxes, 0, 1 - i / n_boxes) for i in range(n_boxes)]\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Change the outlier marker color to magenta\nfor flier in bp['fliers']:\n    flier.set(marker='o', color='magenta', alpha=0.5)\n\n# Add a grid\nax.grid(True)\n\n# Set the background color of the figure\nax.set_facecolor('lightgray')\n\n# Set labels and title\nax.set_xlabel('Fashion Trend Score')\nax.set_ylabel('Decade')\nplt.title('Fashion Trend Score by Decade')\n\n# Show values on the plot\nfor i, v in enumerate(trend_scores):\n    ax.text(v + 3, i + .25, str(v), color='blue', fontweight='bold')\n\n# Add legend\nax.legend([bp[\"boxes\"][0]], ['Fashion Trend Score'], loc='upper left')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Change the face color of the box body that contain the center point of the bounding box to #4ad14b. Additionally, apply a foreground color of #f3e22c with a linewidth of 4.51 to the outline of the box.",
        "Input_image": "./test_dataset/Box/Box_1337b8c3da323411/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\nimport matplotlib.patheffects as path_effects\n\n# Prepare data\ndecades = ['1960', '1970', '1980', '1990', '2000', '2010', '2020', '2030']\ntrend_scores = [20, 25, 40, 35, 60, 65, 90, 30]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create box plot\nbp = ax.boxplot(trend_scores, patch_artist = True, notch = True, vert = 0, widths=0.5, sym='gD')\n\n# Create a gradient color list from blue to red\nn_boxes = len(bp['boxes'])\ncolors = [(i / n_boxes, 0, 1 - i / n_boxes) for i in range(n_boxes)]\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Change the outlier marker color to magenta\nfor flier in bp['fliers']:\n    flier.set(marker='o', color='magenta', alpha=0.5)\n\n# Add a grid\nax.grid(True)\n\n# Set the background color of the figure\nax.set_facecolor('lightgray')\n\n# Set labels and title\nax.set_xlabel('Fashion Trend Score')\nax.set_ylabel('Decade')\nplt.title('Fashion Trend Score by Decade')\n\n# Show values on the plot\nfor i, v in enumerate(trend_scores):\n    ax.text(v + 3, i + .25, str(v), color='blue', fontweight='bold')\n\n# Modify the face color and stroke of the target object\nstroke_effect = path_effects.withStroke(linewidth=4.507347901687084, foreground='#f3e22c')\nbp['boxes'][0].set_facecolor('#4ad14b')\nbp['boxes'][0].set_path_effects([stroke_effect])\nbp['medians'][0].set_path_effects([stroke_effect])\nfor element in ['whiskers','caps']:\n    for idx,line in enumerate(bp[element]):\n        if idx in[0*2]+[0*2+1]:\n            line.set_path_effects([stroke_effect])\n# Add legend\nax.legend([bp[\"boxes\"][0]], ['Fashion Trend Score'], loc='upper left')\n\n# Adjust layout\nplt.tight_layout()\n\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_1337b8c3da323411/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_1337b8c3da323411/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_1337b8c3da323411/myplot.png"
    },
    {
        "id": "Box_a1a10bac425b207b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"City, Crime Rate 1, Crime Rate 2, Crime Rate 3, Crime Rate 4, Crime Rate 5\nNew York, 20, 22, 24, 50, 25\nLos Angeles, 18, 17, 16, 35, 15\nChicago, 28, 27, 25, 25, 27\nHouston, 15, 20, 35, 20, 15\nPhoenix, 10, 15, 10, 15, 5\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df[col] for col in df.columns if col != \"City\"]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 1,\n                labels = df.columns[1:],\n                sym = \"go\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF', '#FFFF00', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"City vs Crime Rate\")\nplt.xlabel(\"City\")\nplt.ylabel(\"Crime Rate\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df.columns[1:]))], df.columns[1:], loc='upper right')\n\n# Remove grid lines\nplt.grid(False)  # This line is changed to remove the grid lines\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # This line is changed to set the facecolor to white\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the boxes bodies that contain the center point of the bounding box to 0.6024, and fill them with a dotted hatch pattern. Also, change their fill color to #677139.",
        "Input_image": "./test_dataset/Box/Box_a1a10bac425b207b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"City, Crime Rate 1, Crime Rate 2, Crime Rate 3, Crime Rate 4, Crime Rate 5\nNew York, 20, 22, 24, 50, 25\nLos Angeles, 18, 17, 16, 35, 15\nChicago, 28, 27, 25, 25, 27\nHouston, 15, 20, 35, 20, 15\nPhoenix, 10, 15, 10, 15, 5\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df[col] for col in df.columns if col != \"City\"]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 1,\n                labels = df.columns[1:],\n                sym = \"go\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF', '#FFFF00', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modification part\nfor i in [1, 2]:\n    bp['boxes'][i].set_alpha(0.6024148742382301)\n    bp['boxes'][i].set_hatch('..')\n    bp['boxes'][i].set_facecolor('#677139')\n\n# Setting titles and labels\nplt.title(\"City vs Crime Rate\")\nplt.xlabel(\"City\")\nplt.ylabel(\"Crime Rate\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df.columns[1:]))], df.columns[1:], loc='upper right')\n\n# Remove grid lines\nplt.grid(False)  # This line is changed to remove the grid lines\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # This line is changed to set the facecolor to white\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,2",
        "Test_image": "./test_dataset/Box/Box_a1a10bac425b207b/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_a1a10bac425b207b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_a1a10bac425b207b/myplot.png"
    },
    {
        "id": "Box_98be9904dd5ffd9c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Creating DataFrame from given data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Sparrow': [2000, 2100, 2150, 7000, 2200, 2250, 2300, 2350, 2400],\n        'Hummingbird': [1000, 3500, 3700, 4000, 4100, 8000, 4200, 4300, 4400],\n        'Eagle': [500, 450, 400, 350, 300, 250, 200, 150, 100]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Sparrow'], df['Hummingbird'], df['Eagle']], \n                patch_artist=True, \n                notch=True, \n                vert=0, \n                labels=['Sparrow', 'Hummingbird', 'Eagle'],\n                sym='r+',\n                widths=0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Remove grid\nax.grid(False)\n\n# Set background color to white\nax.set_facecolor('white')\n\n# Set title and labels\nax.set_title('Birds Population Over Years')\nax.set_xlabel('Population')\nax.set_ylabel('Bird Species')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the median line's linestyle of the boxes that contain the center point of the bounding box to 'dashed', and also enable the picker state for these boxes by setting it to True.",
        "Input_image": "./test_dataset/Box/Box_98be9904dd5ffd9c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Creating DataFrame from given data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Sparrow': [2000, 2100, 2150, 7000, 2200, 2250, 2300, 2350, 2400],\n        'Hummingbird': [1000, 3500, 3700, 4000, 4100, 8000, 4200, 4300, 4400],\n        'Eagle': [500, 450, 400, 350, 300, 250, 200, 150, 100]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Sparrow'], df['Hummingbird'], df['Eagle']], \n                patch_artist=True, \n                notch=True, \n                vert=0, \n                labels=['Sparrow', 'Hummingbird', 'Eagle'],\n                sym='r+',\n                widths=0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set linestyle and picker state for the target object\nfor idx, median in enumerate(bp['medians']):\n    if idx == 1:  # Targeting 'Hummingbird'\n        median.set_linestyle('dashed')\n        median.set_picker(True)\n\n# Remove grid\nax.grid(False)\n\n# Set background color to white\nax.set_facecolor('white')\n\n# Set title and labels\nax.set_title('Birds Population Over Years')\nax.set_xlabel('Population')\nax.set_ylabel('Bird Species')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_98be9904dd5ffd9c/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_98be9904dd5ffd9c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_98be9904dd5ffd9c/myplot.png"
    },
    {
        "id": "Box_5d88022d9fdbb28f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\"Year\": [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"],\n        \"Number of Visits\": [5000, 4600, 4700, 4400, 7000, 6900, 4500],\n        \"Number of Books Borrowed\": [7000, 6000, 9000, 6500, 8000, 12000, 7000]}\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create box plot\nbp = ax.boxplot([df[\"Number of Visits\"], df[\"Number of Books Borrowed\"]], patch_artist=True, vert=0, widths=0.5, sym='',\n                labels = ['Number of Visits', 'Number of Books Borrowed'])\n\n# Change color for each box\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Library Visits and Books Borrowed Over the Years')\nax.set_xlabel('Counts')\nax.set_ylabel('Categories')\n\n# Show grid\nax.grid(True)\n\n# Change the figure background color\nfig.set_facecolor('gray')\n\n# Annotate data value on the chart figure\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median: {x}', (x, y), textcoords=\"offset points\", xytext=(10,0), ha='center', fontsize=8)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the median line color of the box that contains the center point of the bounding box to #389d64. Also, adjust this box's transformation to align with the figure's coordinate system.",
        "Input_image": "./test_dataset/Box/Box_5d88022d9fdbb28f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\"Year\": [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"],\n        \"Number of Visits\": [5000, 4600, 4700, 4400, 7000, 6900, 4500],\n        \"Number of Books Borrowed\": [7000, 6000, 9000, 6500, 8000, 12000, 7000]}\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create box plot\nbp = ax.boxplot([df[\"Number of Visits\"], df[\"Number of Books Borrowed\"]], patch_artist=True, vert=0, widths=0.5, sym='',\n                labels = ['Number of Visits', 'Number of Books Borrowed'])\n\n# Change color for each box\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Library Visits and Books Borrowed Over the Years')\nax.set_xlabel('Counts')\nax.set_ylabel('Categories')\n\n# Show grid\nax.grid(True)\n\n# Change the figure background color\nfig.set_facecolor('gray')\n\n# Annotate data value on the chart figure\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median: {x}', (x, y), textcoords=\"offset points\", xytext=(10,0), ha='center', fontsize=8)\n\n# Set the line color of the object corresponding to the Target_object to #389d64 and set the transform to the Coordinate system of figure\nfor idx, median in enumerate(bp['medians']):\n    if idx == 0:  # Targeting 'Number of Visits'\n        median.set_color('#389d64')\n        median.set_transform(fig.transFigure)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_5d88022d9fdbb28f/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_5d88022d9fdbb28f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_5d88022d9fdbb28f/myplot.png"
    },
    {
        "id": "Box_22b737bb7e1fd699",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Data\ndata = pd.DataFrame({\n    \"Year\": [2015, 2016, 2017, 2018, 2019, 2020],\n    \"Drone Production\": [1000, 950, 870, 1050, 800, 1200],\n    \"Drone Sales\": [500, 600, 400, 650, 450, 700]\n})\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([data['Drone Production'], data['Drone Sales']], patch_artist = True,\n                notch = True, vert = 0, labels = ['Drone Production', 'Drone Sales'], widths=0.5)\n\n# Gradient colors for the boxes\ncolors_production = ['#1E90FF', '#4169E1', '#6495ED', '#4682B4', '#5F9EA0', '#00BFFF']\ncolors_sales = ['#32CD32', '#98FB98', '#00FF00', '#008000', '#3CB371', '#90EE90']\n\n# Apply gradient colors across the boxes for 'Drone Production'\nfor patch, color in zip(bp['boxes'], colors_production):\n    patch.set_facecolor(color)\n\n# Apply a different set of gradient colors across the boxes for 'Drone Sales'\nfor patch, color in zip(bp['boxes'], colors_sales):\n    patch.set_facecolor(color)\n\n# Setting title and labels\nax.set_title('Drone Production and Sales over Years')\nax.set_xlabel('Quantity')\nax.set_ylabel('Categories')\n\n# Annotating data\nfor i in range(len(data['Year'])):\n    ax.annotate(str(data['Year'][i]), (data['Drone Production'][i], 1),\n                textcoords=\"offset points\", xytext=(10,10), ha='center')\n    ax.annotate(str(data['Year'][i]), (data['Drone Sales'][i], 0),\n                textcoords=\"offset points\", xytext=(10,-20), ha='center')\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the line color of the box body containing the center point of the bounding box to #1f8414, and set its face color to #f2bf8f.",
        "Input_image": "./test_dataset/Box/Box_22b737bb7e1fd699/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = pd.DataFrame({\n    \"Year\": [2015, 2016, 2017, 2018, 2019, 2020],\n    \"Drone Production\": [1000, 950, 870, 1050, 800, 1200],\n    \"Drone Sales\": [500, 600, 400, 650, 450, 700]\n})\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([data['Drone Production'], data['Drone Sales']], patch_artist = True,\n                notch = True, vert = 0, labels = ['Drone Production', 'Drone Sales'], widths=0.5)\n\n# Gradient colors for the boxes\ncolors_production = ['#1E90FF', '#4169E1', '#6495ED', '#4682B4', '#5F9EA0', '#00BFFF']\ncolors_sales = ['#32CD32', '#98FB98', '#00FF00', '#008000', '#3CB371', '#90EE90']\n\n# Apply gradient colors across the boxes for 'Drone Production'\nfor patch, color in zip(bp['boxes'], colors_production):\n    patch.set_facecolor(color)\n\n# Apply a different set of gradient colors across the boxes for 'Drone Sales'\nfor patch, color in zip(bp['boxes'], colors_sales):\n    patch.set_facecolor(color)\n\n# Setting title and labels\nax.set_title('Drone Production and Sales over Years')\nax.set_xlabel('Quantity')\nax.set_ylabel('Categories')\n\n# Annotating data\nfor i in range(len(data['Year'])):\n    ax.annotate(str(data['Year'][i]), (data['Drone Production'][i], 1),\n                textcoords=\"offset points\", xytext=(10,10), ha='center')\n    ax.annotate(str(data['Year'][i]), (data['Drone Sales'][i], 0),\n                textcoords=\"offset points\", xytext=(10,-20), ha='center')\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Modifying the line color and face color of the target object\nbp['boxes'][0].set_edgecolor('#1f8414')\nbp['boxes'][0].set_facecolor('#f2bf8f')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_22b737bb7e1fd699/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_22b737bb7e1fd699/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_22b737bb7e1fd699/myplot.png"
    },
    {
        "id": "Box_5c58341b442a615d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {'Country': ['USA', 'China', 'India', 'Brazil', 'Australia'],\n        'Year 1': [100, 150, 120, 200, 80],\n        'Year 2': [200, 160, 140, 210, 70],\n        'Year 3': [170, 320, 120, 160, 150]\n       }\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Year 1'], df['Year 2'], df['Year 3']], patch_artist=True,\n                notch=True, vert=0, widths=0.5, labels=['Year 1', 'Year 2', 'Year 3'],\n                flierprops={'marker':'o', 'markerfacecolor':'red', 'markersize':12,\n                            'linestyle':'none', 'markeredgecolor':'black'}\n               )\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate data values\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{y:.1f}', (i+1.1, y), ha='center', va='center')\n\nax.set_title('Box plot of Yearly Data')\nax.set_xlabel('Years')\nax.set_ylabel('Data Value')\nax.legend([bp[\"boxes\"][0]], ['Data'], loc='upper right')\nax.grid(True)\nax.set_facecolor('#f5f5f5')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clip box for the boxes' body that contain the center point of the bounding box to the coordinates (34, 361) with a width of 821 and a height of 643, following the matplotlib.transforms.Bbox style. Also, change all of the line color of the boxes that contain the center point of the bounding box to #64c953.",
        "Input_image": "./test_dataset/Box/Box_5c58341b442a615d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.transforms as transforms\n\n# Given data\ndata = {'Country': ['USA', 'China', 'India', 'Brazil', 'Australia'],\n        'Year 1': [100, 150, 120, 200, 80],\n        'Year 2': [200, 160, 140, 210, 70],\n        'Year 3': [170, 320, 120, 160, 150]\n       }\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Year 1'], df['Year 2'], df['Year 3']], patch_artist=True,\n                notch=True, vert=0, widths=0.5, labels=['Year 1', 'Year 2', 'Year 3'],\n                flierprops={'marker':'o', 'markerfacecolor':'red', 'markersize':12,\n                            'linestyle':'none', 'markeredgecolor':'black'}\n               )\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate data values\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{y:.1f}', (i+1.1, y), ha='center', va='center')\n\n# Set clip box and line color for the target object\nbbox = transforms.Bbox.from_bounds(34, 361, 821, 643)\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Year 2'\n        box.set_clip_box(bbox)\n        box.set_edgecolor('#64c953')\nfor idx,line in enumerate(bp['medians']):\n    if idx==1:\n        line.set_color('#64c953')   \nfor idx,whisker in enumerate(bp['whiskers']):\n    if idx in [1*2]+[1*2+1]:\n        whisker.set_color('#64c953')\nfor idx,cap in enumerate(bp['caps']):\n    if idx in [1*2]+[1*2+1]:\n        cap.set_color('#64c953')\n\nax.set_title('Box plot of Yearly Data')\nax.set_xlabel('Years')\nax.set_ylabel('Data Value')\nax.legend([bp[\"boxes\"][0]], ['Data'], loc='upper right')\nax.grid(True)\nax.set_facecolor('#f5f5f5')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_5c58341b442a615d/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_5c58341b442a615d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_5c58341b442a615d/myplot.png"
    },
    {
        "id": "Box_644c27ae908c2116",
        "Input_code": "# Importing Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nplatforms = {\n    'Platform A': [9, 8, 7, 9, 8, 7, 8, 9, 9, 8, 7, 6, 8, 9, 9],\n    'Platform B': [10, 9, 9, 8, 10, 9, 9, 10, 10, 9, 8, 9, 8, 7, 7],\n    'Platform C': [7, 7, 6, 8, 7, 9, 8, 6, 7, 6, 7, 8, 9, 7, 8],\n    'Platform D': [8, 7, 8, 7, 9, 8, 8, 7, 8, 7, 8, 7, 8, 9, 9],\n    'Platform E': [9, 10, 9, 10, 8, 9, 9, 10, 9, 10, 9, 10, 10, 9, 9],\n    'Platform F': [6, 7, 7, 8, 6, 7, 8, 9, 8, 7, 7, 8, 6, 8, 8]\n}\n\n# Preparing data for boxplot\nlabels, data = platforms.keys(), platforms.values()\n\n# Plotting boxplot\nplt.figure(figsize=(10, 6))\nplt.boxplot(data, vert=True, patch_artist=True)\nplt.xticks(range(1, len(labels) + 1), labels)\nplt.title('Comparison of Customer Satisfaction Ratings For Online Shopping Platforms')\nplt.xlabel('Online Shopping Platforms')\nplt.ylabel('Customer Satisfaction Ratings')\nplt.grid()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the body color of the boxes that contain the center point of the bounding box to #b84de0 and adjust their transparency to 0.41.",
        "Input_image": "./test_dataset/Box/Box_644c27ae908c2116/Visual_figure.png",
        "Test_code": "# Importing Necessary Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Data\nplatforms = {\n    'Platform A': [9, 8, 7, 9, 8, 7, 8, 9, 9, 8, 7, 6, 8, 9, 9],\n    'Platform B': [10, 9, 9, 8, 10, 9, 9, 10, 10, 9, 8, 9, 8, 7, 7],\n    'Platform C': [7, 7, 6, 8, 7, 9, 8, 6, 7, 6, 7, 8, 9, 7, 8],\n    'Platform D': [8, 7, 8, 7, 9, 8, 8, 7, 8, 7, 8, 7, 8, 9, 9],\n    'Platform E': [9, 10, 9, 10, 8, 9, 9, 10, 9, 10, 9, 10, 10, 9, 9],\n    'Platform F': [6, 7, 7, 8, 6, 7, 8, 9, 8, 7, 7, 8, 6, 8, 8]\n}\n\n# Preparing data for boxplot\nlabels, data = platforms.keys(), platforms.values()\n\n# Plotting boxplot\nplt.figure(figsize=(10, 6))\nbp = plt.boxplot(data, vert=True, patch_artist=True)\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 2:\n        patch.set_color('#b84de0')\n        patch.set_alpha(0.41)\nplt.xticks(range(1, len(labels) + 1), labels)\nplt.title('Comparison of Customer Satisfaction Ratings For Online Shopping Platforms')\nplt.xlabel('Online Shopping Platforms')\nplt.ylabel('Customer Satisfaction Ratings')\nplt.grid()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Box/Box_644c27ae908c2116/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_644c27ae908c2116/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_644c27ae908c2116/figure.png"
    },
    {
        "id": "Box_9d1122a77449a395",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\ndf = pd.DataFrame(data)\n\n# Create subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df[\"App Usage\"], df[\"Call Duration\"], df[\"Data Consumption\"]],\n                patch_artist = True, notch = True, vert = 0, widths = 0.5,\n                labels = [\"App Usage\", \"Call Duration\", \"Data Consumption\"])\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add annotations\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median: {y}', (x, y), textcoords=\"offset points\", xytext=(10,-10), ha='center', fontsize=8, color='black')\n\n# Add title and labels\nax.set_title('Usage Statistics')\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('gray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill color of the box that contains the center point of the bounding box to #d62c01, and set its edge color to #d5d43d.",
        "Input_image": "./test_dataset/Box/Box_9d1122a77449a395/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\ndf = pd.DataFrame(data)\n\n# Create subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df[\"App Usage\"], df[\"Call Duration\"], df[\"Data Consumption\"]],\n                patch_artist = True, notch = True, vert = 0, widths = 0.5,\n                labels = [\"App Usage\", \"Call Duration\", \"Data Consumption\"])\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add annotations\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median: {y}', (x, y), textcoords=\"offset points\", xytext=(10,-10), ha='center', fontsize=8, color='black')\n\n# Set the fill color and edge color of the boxes corresponding to the Target_object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:\n        box.set_facecolor('#d62c01')\n        box.set_edgecolor('#d5d43d')\n\n# Add title and labels\nax.set_title('Usage Statistics')\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\n\n# Add grid and set background color\nax.grid(True)\nax.set_facecolor('gray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_9d1122a77449a395/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_9d1122a77449a395/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_9d1122a77449a395/myplot.png"
    },
    {
        "id": "Box_238415ba8ee29ba4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [\n    [25,30,35,70,75,30,20], # Rose\n    [40,30,20,10,50,60,70], # Sunflower\n    [60,50,40,30,80,90,100], # Fern\n    [20,30,40,80,85,40,30], # Dandelion\n    [100,90,80,70,150,140,130], # Orchid\n    [30,40,50,100,105,50,40], # Cactus\n    [70,60,50,40,90,100,110], # Lily\n    [50,60,70,80,85,90,40] # Oak\n]\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=0, whis=2, widths=0.4, sym='r+')\n\ncolors = ['#FF0000', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#FF00FF', '#808080', '#000000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nplt.title('Plant Growth Patterns')\nplt.xlabel('Growth Rate')\nplt.ylabel('Plant Species')\nplt.legend(['Rose', 'Sunflower', 'Fern', 'Dandelion', 'Orchid', 'Cactus', 'Lily', 'Oak'], loc='upper right')\n\nax.set_facecolor('#F0F0F0')\nplt.grid(linestyle='--')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow effect to the boxes bodies that contain the center point of the bounding box, with a shadow offset of (3, 3). Set the alpha value of these boxes to 0.892 and fill them with a horizontal hatch pattern.",
        "Input_image": "./test_dataset/Box/Box_238415ba8ee29ba4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as PathEffects\n\n# Data\ndata = [\n    [25,30,35,70,75,30,20], # Rose\n    [40,30,20,10,50,60,70], # Sunflower\n    [60,50,40,30,80,90,100], # Fern\n    [20,30,40,80,85,40,30], # Dandelion\n    [100,90,80,70,150,140,130], # Orchid\n    [30,40,50,100,105,50,40], # Cactus\n    [70,60,50,40,90,100,110], # Lily\n    [50,60,70,80,85,90,40] # Oak\n]\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=0, whis=2, widths=0.4, sym='r+')\n\ncolors = ['#FF0000', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#FF00FF', '#808080', '#000000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nfor idx, box in enumerate(bp['boxes']):\n    if idx in [0, 1]:\n        box.set_path_effects([PathEffects.withSimplePatchShadow(offset=(3, 3))])\n        box.set_alpha(0.8922875723238008)\n        box.set_hatch('--')\n\nplt.title('Plant Growth Patterns')\nplt.xlabel('Growth Rate')\nplt.ylabel('Plant Species')\nplt.legend(['Rose', 'Sunflower', 'Fern', 'Dandelion', 'Orchid', 'Cactus', 'Lily', 'Oak'], loc='upper right')\n\nax.set_facecolor('#F0F0F0')\nplt.grid(linestyle='--')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0,1",
        "Test_image": "./test_dataset/Box/Box_238415ba8ee29ba4/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_238415ba8ee29ba4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_238415ba8ee29ba4/myplot.png"
    },
    {
        "id": "Box_7e3d72a0266a8ef0",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# CSV data in a dictionary\ndata_dict = {\"Service\": [\"Online Shopping\", \"Digital Payment\", \"Streaming Services\", \"Cloud Storage\"],\n             \"Usage\": [80, 60, 100, 120]}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data_dict)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create a box plot\nbp = ax.boxplot(df['Usage'], patch_artist = True, notch = True, vert = 0, widths = 0.5, sym = 'r+')\n\n# Change the face color of the box\nbp['boxes'][0].set_facecolor('#FFFF00')\n\n# Set the background color of the chart\nax.set_facecolor('lightgray')\n\n# Add a grid\nax.grid(True)\n\n# Set the title and labels\nax.set_title('Usage of Different Services')\nax.set_xlabel('Service')\nax.set_ylabel('Usage')\n\n# Annotate data value on the chart\nfor i, v in enumerate(df['Usage']):\n    ax.text(v + 3, i + 1, str(v), color='blue', fontweight='bold')\n\n# Add a legend\nax.legend([bp[\"boxes\"][0]], ['Usage'], loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Change the whisker,cap and median color of the box that contain the center point of the bounding box to #658448, and update its label to 'A new Label'.",
        "Input_image": "./test_dataset/Box/Box_7e3d72a0266a8ef0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# CSV data in a dictionary\ndata_dict = {\"Service\": [\"Online Shopping\", \"Digital Payment\", \"Streaming Services\", \"Cloud Storage\"],\n             \"Usage\": [80, 60, 100, 120]}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data_dict)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create a box plot\nbp = ax.boxplot(df['Usage'], patch_artist = True, notch = True, vert = 0, widths = 0.5, sym = 'r+')\n\n# Change the face color of the box\nbp['boxes'][0].set_facecolor('#FFFF00')\n\n# Set the line color of the object corresponding to the Target_object to #658448\nfor whisker in bp['whiskers']:\n    whisker.set_color('#658448')\nfor cap in bp['caps']:\n    cap.set_color('#658448')\nfor median in bp['medians']:\n    median.set_color('#658448')\n\n# Set the background color of the chart\nax.set_facecolor('lightgray')\n\n# Add a grid\nax.grid(True)\n\n# Set the title and labels\nax.set_title('Usage of Different Services')\nax.set_xlabel('Service')\nax.set_ylabel('Usage')\n\n# Annotate data value on the chart\nfor i, v in enumerate(df['Usage']):\n    ax.text(v + 3, i + 1, str(v), color='blue', fontweight='bold')\n\n# Add a legend with a new label\nax.legend([bp[\"boxes\"][0]], ['A new Label'], loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_7e3d72a0266a8ef0/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_7e3d72a0266a8ef0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_7e3d72a0266a8ef0/myplot.png"
    },
    {
        "id": "Box_df029463efc7c23c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Data\ndata = pd.DataFrame({\n    \"Year\": [2015, 2016, 2017, 2018, 2019, 2020],\n    \"Drone Production\": [1000, 950, 870, 1050, 800, 1200],\n    \"Drone Sales\": [500, 600, 400, 650, 450, 700]\n})\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([data['Drone Production'], data['Drone Sales']], patch_artist = True,\n                notch = True, vert = 0, labels = ['Drone Production', 'Drone Sales'], widths=0.5)\n\n# Gradient colors for the boxes\ncolors_production = ['#1E90FF', '#4169E1', '#6495ED', '#4682B4', '#5F9EA0', '#00BFFF']\ncolors_sales = ['#32CD32', '#98FB98', '#00FF00', '#008000', '#3CB371', '#90EE90']\n\n# Apply gradient colors across the boxes for 'Drone Production'\nfor patch, color in zip(bp['boxes'], colors_production):\n    patch.set_facecolor(color)\n\n# Apply a different set of gradient colors across the boxes for 'Drone Sales'\nfor patch, color in zip(bp['boxes'], colors_sales):\n    patch.set_facecolor(color)\n\n# Setting title and labels\nax.set_title('Drone Production and Sales over Years')\nax.set_xlabel('Quantity')\nax.set_ylabel('Categories')\n\n# Annotating data\nfor i in range(len(data['Year'])):\n    ax.annotate(str(data['Year'][i]), (data['Drone Production'][i], 1),\n                textcoords=\"offset points\", xytext=(10,10), ha='center')\n    ax.annotate(str(data['Year'][i]), (data['Drone Sales'][i], 0),\n                textcoords=\"offset points\", xytext=(10,-20), ha='center')\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow effect to the box body that contain the center point of the bounding box, with a shadow offset of (3, 6) units. Additionally, change the edge color of this box to #d7da49.",
        "Input_image": "./test_dataset/Box/Box_df029463efc7c23c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.patheffects as PathEffects\n\n# Data\ndata = pd.DataFrame({\n    \"Year\": [2015, 2016, 2017, 2018, 2019, 2020],\n    \"Drone Production\": [1000, 950, 870, 1050, 800, 1200],\n    \"Drone Sales\": [500, 600, 400, 650, 450, 700]\n})\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([data['Drone Production'], data['Drone Sales']], patch_artist = True,\n                notch = True, vert = 0, labels = ['Drone Production', 'Drone Sales'], widths=0.5)\n\n# Gradient colors for the boxes\ncolors_production = ['#1E90FF', '#4169E1', '#6495ED', '#4682B4', '#5F9EA0', '#00BFFF']\ncolors_sales = ['#32CD32', '#98FB98', '#00FF00', '#008000', '#3CB371', '#90EE90']\n\n# Apply gradient colors across the boxes for 'Drone Production'\nfor patch, color in zip(bp['boxes'], colors_production):\n    patch.set_facecolor(color)\n\n# Apply a different set of gradient colors across the boxes for 'Drone Sales'\nfor patch, color in zip(bp['boxes'], colors_sales):\n    patch.set_facecolor(color)\n\n# Add shadow effect and set edge color for the Target_object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Assuming 'Drone Sales' is the Target_object\n        box.set_path_effects([PathEffects.withSimplePatchShadow(offset=(3, 6))])\n        box.set_edgecolor('#d7da49')\n\n# Setting title and labels\nax.set_title('Drone Production and Sales over Years')\nax.set_xlabel('Quantity')\nax.set_ylabel('Categories')\n\n# Annotating data\nfor i in range(len(data['Year'])):\n    ax.annotate(str(data['Year'][i]), (data['Drone Production'][i], 1),\n                textcoords=\"offset points\", xytext=(10,10), ha='center')\n    ax.annotate(str(data['Year'][i]), (data['Drone Sales'][i], 0),\n                textcoords=\"offset points\", xytext=(10,-20), ha='center')\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_df029463efc7c23c/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_df029463efc7c23c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_df029463efc7c23c/myplot.png"
    },
    {
        "id": "Box_e5cc26ae9781e072",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Age Groups\":[\"15-24\",\"25-34\",\"35-44\",\"45-54\",\"55-64\",\"65+\"],\n    \"Vegetables\":[20,30,40,50,60,70],\n    \"Meat\":[80,70,60,50,40,30],\n    \"Dairy\":[100,90,80,70,60,50]\n}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot([df[\"Vegetables\"], df[\"Meat\"], df[\"Dairy\"]], patch_artist = True,\n                notch = True, vert = 0, whis = 2, widths = 0.4, sym = 'r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding labels \nax.set_yticklabels(['Vegetables', 'Meat', 'Dairy'])\n\n# Adding title and labels \nplt.title('Box Plot of Food Consumption by Age Groups')\nplt.xlabel('Amount')\nplt.ylabel('Type of food')\n\n# Adding grid \nax.grid(True)\n\n# Changing background color \nax.set_facecolor('lightgray')\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Vegetables', 'Meat', 'Dairy'], loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the box body that contain the center point of the bounding box to #b28677, and also set its line style to 'dotted'.",
        "Input_image": "./test_dataset/Box/Box_e5cc26ae9781e072/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Age Groups\":[\"15-24\",\"25-34\",\"35-44\",\"45-54\",\"55-64\",\"65+\"],\n    \"Vegetables\":[20,30,40,50,60,70],\n    \"Meat\":[80,70,60,50,40,30],\n    \"Dairy\":[100,90,80,70,60,50]\n}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot([df[\"Vegetables\"], df[\"Meat\"], df[\"Dairy\"]], patch_artist = True,\n                notch = True, vert = 0, whis = 2, widths = 0.4, sym = 'r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modify the target object\nbp['boxes'][1].set_facecolor('#b28677')\nbp['boxes'][1].set_linestyle('dotted')\n\n# Adding labels \nax.set_yticklabels(['Vegetables', 'Meat', 'Dairy'])\n\n# Adding title and labels \nplt.title('Box Plot of Food Consumption by Age Groups')\nplt.xlabel('Amount')\nplt.ylabel('Type of food')\n\n# Adding grid \nax.grid(True)\n\n# Changing background color \nax.set_facecolor('lightgray')\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Vegetables', 'Meat', 'Dairy'], loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_e5cc26ae9781e072/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_e5cc26ae9781e072/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_e5cc26ae9781e072/myplot.png"
    },
    {
        "id": "Box_43eac22ff45aaf93",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Create a DataFrame from the given data\ndata = pd.DataFrame({\n    \"Mental Health Disorder\": [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"],\n    \"2018\": [100, 80, 60],\n    \"2019\": [150, 90, 70],\n    \"2020\": [130, 200, 65]\n})\n\n# Set the index to 'Mental Health Disorder'\ndata.set_index('Mental Health Disorder', inplace=True)\n\n# Create boxplot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data.values, patch_artist = True, notch = True, vert = 0, widths=0.6,\n                labels=data.index, sym='r+')\n\n# Set colors for each box using a monochromatic palette\ncolors = ['#1E90FF', '#4169E1', '#0000CD']  # Shades of blue\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Mental Health Disorders over the Years')\nax.set_xlabel('Mental Health Disorder')\nax.set_ylabel('Number of Cases')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Depression', 'Anxiety', 'Bipolar Disorder'], loc='upper right')\n\n# Annotate data values on the chart\nfor line, value in zip(bp['medians'], data.median(axis=1)):\n    x, y = line.get_xydata()[1] # Top of the median line\n    ax.text(x, y, f'{value}', horizontalalignment='center') # Draw text in the middle\n\n# Set the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the boxes that contain the center point of the bounding box to #2e0674. Also, enable the snap state for those boxes by setting it to True.",
        "Input_image": "./test_dataset/Box/Box_43eac22ff45aaf93/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame from the given data\ndata = pd.DataFrame({\n    \"Mental Health Disorder\": [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"],\n    \"2018\": [100, 80, 60],\n    \"2019\": [150, 90, 70],\n    \"2020\": [130, 200, 65]\n})\n\n# Set the index to 'Mental Health Disorder'\ndata.set_index('Mental Health Disorder', inplace=True)\n\n# Create boxplot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data.values, patch_artist = True, notch = True, vert = 0, widths=0.6,\n                labels=data.index, sym='r+')\n\n# Set colors for each box using a monochromatic palette\ncolors = ['#1E90FF', '#4169E1', '#0000CD']  # Shades of blue\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modify the color and snap state of the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Anxiety'\n        patch.set_facecolor('#2e0674')\n        patch.set_snap(True)\n\n# Set title and labels\nax.set_title('Mental Health Disorders over the Years')\nax.set_xlabel('Mental Health Disorder')\nax.set_ylabel('Number of Cases')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Depression', 'Anxiety', 'Bipolar Disorder'], loc='upper right')\n\n# Annotate data values on the chart\nfor line, value in zip(bp['medians'], data.median(axis=1)):\n    x, y = line.get_xydata()[1] # Top of the median line\n    ax.text(x, y, f'{value}', horizontalalignment='center') # Draw text in the middle\n\n# Set the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_43eac22ff45aaf93/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_43eac22ff45aaf93/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_43eac22ff45aaf93/myplot.png"
    },
    {
        "id": "Box_52e79146de3b7123",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given Data\ndata = StringIO(\"\"\"\nVehicle Type,2010,2015,2020\nSedans,50000,60000,35000\nSUVs,40000,35000,70000\nElectric Vehicles,500,1500,5000\nTrucks,70000,65000,67000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2010'].values, df['2015'].values, df['2020'].values]\nlabels = ['2010', '2015', '2020']\ncolors = ['#e6194B', '#f58231', '#3cb44b', '#4363d8']  # Updated color scheme\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\n# Apply new colors to the boxplot patches\nfor i, patch in enumerate(bp['boxes']):\n    patch.set_facecolor(colors[i % len(colors)])  # Use modulo to cycle through new colors\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend with updated color scheme\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], ['Sedans', 'SUVs', 'Electric Vehicles', 'Trucks'], loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the box's body that contain the center point of the bounding box to #c581e8 and update its label to 'A new Label'.",
        "Input_image": "./test_dataset/Box/Box_52e79146de3b7123/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given Data\ndata = StringIO(\"\"\"\nVehicle Type,2010,2015,2020\nSedans,50000,60000,35000\nSUVs,40000,35000,70000\nElectric Vehicles,500,1500,5000\nTrucks,70000,65000,67000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2010'].values, df['2015'].values, df['2020'].values]\nlabels = ['2010', '2015', '2020']\ncolors = ['#e6194B', '#f58231', '#3cb44b', '#4363d8']  # Updated color scheme\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\n# Apply new colors to the boxplot patches\nfor i, patch in enumerate(bp['boxes']):\n    if i == 2:  # Targeting 'Electric Vehicles'\n        patch.set_facecolor('#c581e8')\n    else:\n        patch.set_facecolor(colors[i % len(colors)])  # Use modulo to cycle through new colors\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend with updated color scheme\nlegend_labels = ['Sedans', 'SUVs', 'A new Label', 'Trucks']\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], legend_labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Box/Box_52e79146de3b7123/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_52e79146de3b7123/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_52e79146de3b7123/myplot.png"
    },
    {
        "id": "Box_b1e3fda9228e83fc",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Create a DataFrame from the given data\ndata = pd.DataFrame({\n    \"Mental Health Disorder\": [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"],\n    \"2018\": [100, 80, 60],\n    \"2019\": [150, 90, 70],\n    \"2020\": [130, 200, 65]\n})\n\n# Set the index to 'Mental Health Disorder'\ndata.set_index('Mental Health Disorder', inplace=True)\n\n# Create boxplot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data.values, patch_artist = True, notch = True, vert = 0, widths=0.6,\n                labels=data.index, sym='r+')\n\n# Set colors for each box\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Mental Health Disorders over the Years')\nax.set_xlabel('Mental Health Disorder')\nax.set_ylabel('Number of Cases')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Depression', 'Anxiety', 'Bipolar Disorder'], loc='upper right')\n\n# Annotate data values on the chart\nfor line, value in zip(bp['medians'], data.median(axis=1)):\n    x, y = line.get_xydata()[1] # Top of the median line\n    ax.text(x, y, f'{value}', horizontalalignment='center') # Draw text in the middle\n\n# Set the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the boxes that contain the center point of the bounding box to 0.34, and update their label to 'A new Label'.",
        "Input_image": "./test_dataset/Box/Box_b1e3fda9228e83fc/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame from the given data\ndata = pd.DataFrame({\n    \"Mental Health Disorder\": [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"],\n    \"2018\": [100, 80, 60],\n    \"2019\": [150, 90, 70],\n    \"2020\": [130, 200, 65]\n})\n\n# Set the index to 'Mental Health Disorder'\ndata.set_index('Mental Health Disorder', inplace=True)\n\n# Create boxplot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data.values, patch_artist = True, notch = True, vert = 0, widths=0.6,\n                labels=data.index, sym='r+')\n\n# Set colors for each box\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set transparency and label for the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Anxiety'\n        patch.set_alpha(0.34)\n        labels = list(data.index)\n        labels[idx] = 'A new Label'\n        ax.set_yticklabels(labels)\n\n# Set title and labels\nax.set_title('Mental Health Disorders over the Years')\nax.set_xlabel('Mental Health Disorder')\nax.set_ylabel('Number of Cases')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Depression', 'A new Label', 'Bipolar Disorder'], loc='upper right')\n\n# Annotate data values on the chart\nfor line, value in zip(bp['medians'], data.median(axis=1)):\n    x, y = line.get_xydata()[1] # Top of the median line\n    ax.text(x, y, f'{value}', horizontalalignment='center') # Draw text in the middle\n\n# Set the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_b1e3fda9228e83fc/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_b1e3fda9228e83fc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_b1e3fda9228e83fc/myplot.png"
    },
    {
        "id": "Box_235c20d8a0435dce",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Stock Indices': ['Dow Jones', 'S&P 500', 'Nasdaq', 'FTSE 100'],\n        'Week 1': [25000, 3000, 7500, 7000],\n        'Week 2': [24000, 3200, 7400, 7100],\n        'Week 3': [23500, 3100, 7800, 7200],\n        'Week 4': [26000, 2700, 7300, 6800]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Week 1'], df['Week 2'], df['Week 3'], df['Week 4']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4'], \n                sym = \"ro\", widths = 0.4)\n\n# Define a gradient of blue tones\nblue_gradients = ['#1E90FF', '#4169E1', '#0000FF', '#00008B']\n\nfor patch, color in zip(bp['boxes'], blue_gradients):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Weekly Stock Indices\")\nplt.xlabel(\"Weeks\")\nplt.ylabel(\"Stock Indices\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2], bp[\"boxes\"][3]], ['Week 1', 'Week 2', 'Week 3', 'Week 4'], loc='upper right')\n\n# Removing grid\nplt.grid(False)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the clipping state of the boxes that contain the center point of the bounding box to False. Also, set the snap state of these boxes to False.",
        "Input_image": "./test_dataset/Box/Box_235c20d8a0435dce/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Stock Indices': ['Dow Jones', 'S&P 500', 'Nasdaq', 'FTSE 100'],\n        'Week 1': [25000, 3000, 7500, 7000],\n        'Week 2': [24000, 3200, 7400, 7100],\n        'Week 3': [23500, 3100, 7800, 7200],\n        'Week 4': [26000, 2700, 7300, 6800]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Week 1'], df['Week 2'], df['Week 3'], df['Week 4']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4'], \n                sym = \"ro\", widths = 0.4)\n\n# Define a gradient of blue tones\nblue_gradients = ['#1E90FF', '#4169E1', '#0000FF', '#00008B']\n\nfor patch, color in zip(bp['boxes'], blue_gradients):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Weekly Stock Indices\")\nplt.xlabel(\"Weeks\")\nplt.ylabel(\"Stock Indices\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2], bp[\"boxes\"][3]], ['Week 1', 'Week 2', 'Week 3', 'Week 4'], loc='upper right')\n\n# Removing grid\nplt.grid(False)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\n# Modify the clipping and snap state for the target object\nfor idx in [1]:  # Targeting 'Week 2'\n    bp['boxes'][idx].set_clip_on(False)\n    bp['boxes'][idx].set_snap(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_235c20d8a0435dce/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_235c20d8a0435dce/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_235c20d8a0435dce/myplot.png"
    },
    {
        "id": "Box_200646b834ab66e3",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\ndata = '''Year,Arctic Sea Levels (in meters),Antarctic Sea Levels (in meters),Global Average Sea Levels (in meters)\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60'''\n\ndf = pd.read_csv(io.StringIO(data))\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\ndata = [df[\"Arctic Sea Levels (in meters)\"], df[\"Antarctic Sea Levels (in meters)\"], df[\"Global Average Sea Levels (in meters)\"]]\n\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, widths = 0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(['Arctic', 'Antarctic', 'Global Average'])\n\nax.set_title('Sea Levels in Meters')\nax.set_xlabel('Sea Levels (in meters)')\nax.set_ylabel('Regions')\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the face color of the box body that contain the center point of the bounding box to #277d67, and also update its linewidth to 3.90.",
        "Input_image": "./test_dataset/Box/Box_200646b834ab66e3/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\ndata = '''Year,Arctic Sea Levels (in meters),Antarctic Sea Levels (in meters),Global Average Sea Levels (in meters)\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60'''\n\ndf = pd.read_csv(io.StringIO(data))\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\ndata = [df[\"Arctic Sea Levels (in meters)\"], df[\"Antarctic Sea Levels (in meters)\"], df[\"Global Average Sea Levels (in meters)\"]]\n\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, widths = 0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Antarctic'\n        patch.set_facecolor('#277d67')\n        patch.set_linewidth(3.90)\n\nax.set_yticklabels(['Arctic', 'Antarctic', 'Global Average'])\n\nax.set_title('Sea Levels in Meters')\nax.set_xlabel('Sea Levels (in meters)')\nax.set_ylabel('Regions')\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_200646b834ab66e3/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_200646b834ab66e3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_200646b834ab66e3/myplot.png"
    },
    {
        "id": "Box_453bf2d98014a1a2",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {'Age_Group': ['20-30', '30-40', '40-50', '50-60', '60-70', '70-80', '80-90', '90-100'],\n        'Running': [140, 160, 180, 210, 200, 180, 220, 180],\n        'Yoga': [180, 220, 210, 205, 180, 160, 140, 120],\n        'Weightlifting': [200, 210, 190, 205, 215, 210, 190, 160]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Running'], df['Yoga'], df['Weightlifting']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Running', 'Yoga', 'Weightlifting'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Age Group vs Fitness Activity\")\nplt.xlabel(\"Fitness Activity\")\nplt.ylabel(\"Frequency\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Running', 'Yoga', 'Weightlifting'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply a stroke to box's whiskers and caps that contains the center point of the bounding box with a linewidth of 2.04 and a foreground color of #fa62a8.",
        "Input_image": "./test_dataset/Box/Box_453bf2d98014a1a2/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Given data\ndata = {'Age_Group': ['20-30', '30-40', '40-50', '50-60', '60-70', '70-80', '80-90', '90-100'],\n        'Running': [140, 160, 180, 210, 200, 180, 220, 180],\n        'Yoga': [180, 220, 210, 205, 180, 160, 140, 120],\n        'Weightlifting': [200, 210, 190, 205, 215, 210, 190, 160]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Running'], df['Yoga'], df['Weightlifting']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Running', 'Yoga', 'Weightlifting'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Age Group vs Fitness Activity\")\nplt.xlabel(\"Fitness Activity\")\nplt.ylabel(\"Frequency\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Running', 'Yoga', 'Weightlifting'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')\n\n# Modify the label and stroke the object corresponding to the Target_object\nstroke_effect = path_effects.withStroke(linewidth=2.0435307481240197, foreground='#fa62a8')\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Yoga'\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n            whisker.set_path_effects([stroke_effect])\n        for cap in bp['caps'][2*idx:2*(idx+1)]:\n            cap.set_path_effects([stroke_effect])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_453bf2d98014a1a2/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_453bf2d98014a1a2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_453bf2d98014a1a2/myplot.png"
    },
    {
        "id": "Box_e9d167e59e224f77",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Data\ndata = StringIO(\"\"\"\nYear,Crime Rate\n2000,5000\n2001,4500\n2002,8000\n2003,3000\n2004,7000\n2005,6000\n2006,2000\n2007,5000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Crime Rate'].values]\nlabels = ['Crime Rate']\ncolors = ['#1f77b4']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Crime Rate Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Crime Rate')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the face color of the boxes that contain the center point of the bounding box to #1649c1. Additionally, ensure that these boxes use the data coordinate system for their transformation.",
        "Input_image": "./test_dataset/Box/Box_e9d167e59e224f77/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Data\ndata = StringIO(\"\"\"\nYear,Crime Rate\n2000,5000\n2001,4500\n2002,8000\n2003,3000\n2004,7000\n2005,6000\n2006,2000\n2007,5000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Crime Rate'].values]\nlabels = ['Crime Rate']\ncolors = ['#1f77b4']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Crime Rate Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Crime Rate')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Modify the face color and transform of the target object\nbp['boxes'][0].set_facecolor('#1649c1')\nbp['boxes'][0].set_transform(ax.transData)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_e9d167e59e224f77/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_e9d167e59e224f77/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_e9d167e59e224f77/myplot.png"
    },
    {
        "id": "Box_cdf126922ac16c2f",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nWildlife,Urbanization_Impact_1970,Urbanization_Impact_2020\nDeer,80,55\nBear,50,40\nSquirrel,70,75\nBird,80,60\nFox,25,35\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Urbanization_Impact_1970'].values, df['Urbanization_Impact_2020'].values]\nlabels = ['1970', '2020']\ncolors = ['#6baed6', '#fd8d3c']  # Changed colors here\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)  # This uses the new colors\n\n# Set title and labels\nax.set_title('Urbanization Impact on Wildlife Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Impact')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the label of the box that contains the center point of the bounding box to 'A new Label'. Also, make the whole box invisible.",
        "Input_image": "./test_dataset/Box/Box_cdf126922ac16c2f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nWildlife,Urbanization_Impact_1970,Urbanization_Impact_2020\nDeer,80,55\nBear,50,40\nSquirrel,70,75\nBird,80,60\nFox,25,35\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Urbanization_Impact_1970'].values, df['Urbanization_Impact_2020'].values]\nlabels = ['1970', '2020']\ncolors = ['#6baed6', '#fd8d3c']  # Changed colors here\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\nlabels[1]='A new Label'\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)  # This uses the new colors\n\n# Set title and labels\nax.set_title('Urbanization Impact on Wildlife Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Impact')\n\n# Add grid\nax.grid(True)\nfor whisker in bp['whiskers'][2:4]:\n    whisker.set_visible(False)\nbp['boxes'][1].set_visible(False)\nfor cap in bp['caps'][2:4]:\n    cap.set_visible(False)\nfor median in bp['medians'][1:2]:\n    median.set_visible(False)\nfor flier in bp['fliers'][1:2]:\n    flier.set_visible(False)\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Modify the label and visibility for the target object\n\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_cdf126922ac16c2f/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_cdf126922ac16c2f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_cdf126922ac16c2f/myplot.png"
    },
    {
        "id": "Box_2e9d3fda2f465e9c",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nYear,Software Sales,Software Use\n2016,10000,20000\n2017,12000,18000\n2018,14000,15000\n2019,10000,10000\n2020,12000,20000\n2021,16000,25000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Software Sales'].values, df['Software Use'].values]\nlabels = ['Software Sales', 'Software Use']\ncolors = ['#1f77b4', '#2ca02c']  # Change color for 'Software Sales' to blue and 'Software Use' to green\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color of the figure\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Software Sales and Use Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the boxes that contain the center point of the bounding box to 0.17, and also change their color to #e74058.",
        "Input_image": "./test_dataset/Box/Box_2e9d3fda2f465e9c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nYear,Software Sales,Software Use\n2016,10000,20000\n2017,12000,18000\n2018,14000,15000\n2019,10000,10000\n2020,12000,20000\n2021,16000,25000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Software Sales'].values, df['Software Use'].values]\nlabels = ['Software Sales', 'Software Use']\ncolors = ['#1f77b4', '#2ca02c']  # Change color for 'Software Sales' to blue and 'Software Use' to green\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color of the figure\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting 'Software Sales'\n        patch.set_facecolor('#e74058')\n        patch.set_alpha(0.17)\n    else:\n        patch.set_facecolor(colors[idx])\n\n# Set title and labels\nax.set_title('Software Sales and Use Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_2e9d3fda2f465e9c/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_2e9d3fda2f465e9c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_2e9d3fda2f465e9c/myplot.png"
    },
    {
        "id": "Box_2019a6af722d6ae5",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Input the given data\ndata = {\"Age Group\":[\"Under 18\",\"18-24\",\"25-34\",\"35-44\",\"45 and over\"],\n        \"Morning Viewers\":[100,80,70,60,50],\n        \"Afternoon Viewers\":[85,70,90,75,60],\n        \"Evening Viewers\":[90,110,105,95,80]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Creating box plot\nbp = ax.boxplot([df['Morning Viewers'], df['Afternoon Viewers'], df['Evening Viewers']], patch_artist = True,\n                notch = True, vert = 0, sym='r+', widths=0.3)\n\n# New color palette\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']  # Changed the color palette\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting labels\nax.set_yticklabels(['Morning Viewers', 'Afternoon Viewers', 'Evening Viewers'])\nax.set_xlabel('Viewers')\nax.set_ylabel('Time of Day')\n\n# Setting title\nplt.title(\"Viewer Distribution by Time of Day\")\n\n# Adding a legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Morning Viewers', 'Afternoon Viewers', 'Evening Viewers'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Annotate data values on the chart\nfor i,d in enumerate(df['Morning Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\nfor i,d in enumerate(df['Afternoon Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\nfor i,d in enumerate(df['Evening Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\n\n# Change the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Adjust layout to make sure everything fits\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Set the clipping box for the boxes containing the center point of the bounding box to a defined area with coordinates (x0, y0) = (33, 33) and dimensions of width = 266 and height = 266, using the matplotlib.transforms.Bbox pattern. Additionally, make sure the snap state for the same boxes is set to True.",
        "Input_image": "./test_dataset/Box/Box_2019a6af722d6ae5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# Input the given data\ndata = {\"Age Group\":[\"Under 18\",\"18-24\",\"25-34\",\"35-44\",\"45 and over\"],\n        \"Morning Viewers\":[100,80,70,60,50],\n        \"Afternoon Viewers\":[85,70,90,75,60],\n        \"Evening Viewers\":[90,110,105,95,80]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Creating box plot\nbp = ax.boxplot([df['Morning Viewers'], df['Afternoon Viewers'], df['Evening Viewers']], patch_artist = True,\n                notch = True, vert = 0, sym='r+', widths=0.3)\n\n# New color palette\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']  # Changed the color palette\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting labels\nax.set_yticklabels(['Morning Viewers', 'Afternoon Viewers', 'Evening Viewers'])\nax.set_xlabel('Viewers')\nax.set_ylabel('Time of Day')\n\n# Setting title\nplt.title(\"Viewer Distribution by Time of Day\")\n\n# Adding a legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Morning Viewers', 'Afternoon Viewers', 'Evening Viewers'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Annotate data values on the chart\nfor i,d in enumerate(df['Morning Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\nfor i,d in enumerate(df['Afternoon Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\nfor i,d in enumerate(df['Evening Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\n\n# Change the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Set the clip box and snap state for the target object\nbbox = Bbox.from_bounds(33, 33, 266, 266)\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Afternoon Viewers'\n        box.set_clip_box(bbox)\n        box.set_snap(True)\n\n# Adjust layout to make sure everything fits\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_2019a6af722d6ae5/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_2019a6af722d6ae5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_2019a6af722d6ae5/myplot.png"
    },
    {
        "id": "Box_7afd8e5a96278aec",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data in csv format\ncsv_data = \"Travel Type,Popularity Score\\nCar Travel,5\\nTrain Travel,15\\nBus Travel,7\\nAir Travel,30\\nBike Travel,9\\nBoat Travel,20\\nFoot Travel,3\\nCamel Travel,8\\nHorse Travel,12\"\n\n# Convert the csv data into a pandas dataframe\ndata = pd.read_csv(StringIO(csv_data))\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data[\"Popularity Score\"], patch_artist=True, notch=True, vert=0, widths=0.7, sym=\"r+\")\n\n# Set color for the box plot\nbp['boxes'][0].set_facecolor('#0000FF')\n\n# Add title and labels\nplt.title(\"Popularity of Different Travel Types\")\nplt.xlabel(\"Popularity Score\")\nplt.ylabel(\"Travel Type\")\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('#D3D3D3')\n\n# Add legend\nplt.legend([bp[\"boxes\"][0]], ['Travel Types'], loc='upper right')\n\n# Annotate the data value on the chart figure\nfor i, v in enumerate(data[\"Popularity Score\"]):\n    ax.text(v+1, i+1, str(v), color='black', fontweight='bold')\n\n# Set the layout tight\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the transparency of the boxes that contain the center point of the bounding box to 0.07 and set their face color to #9d080e.",
        "Input_image": "./test_dataset/Box/Box_7afd8e5a96278aec/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data in csv format\ncsv_data = \"Travel Type,Popularity Score\\nCar Travel,5\\nTrain Travel,15\\nBus Travel,7\\nAir Travel,30\\nBike Travel,9\\nBoat Travel,20\\nFoot Travel,3\\nCamel Travel,8\\nHorse Travel,12\"\n\n# Convert the csv data into a pandas dataframe\ndata = pd.read_csv(StringIO(csv_data))\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data[\"Popularity Score\"], patch_artist=True, notch=True, vert=0, widths=0.7, sym=\"r+\")\n\n# Set color and transparency for the box plot\nbp['boxes'][0].set_facecolor('#9d080e')\nbp['boxes'][0].set_alpha(0.07)\n\n# Add title and labels\nplt.title(\"Popularity of Different Travel Types\")\nplt.xlabel(\"Popularity Score\")\nplt.ylabel(\"Travel Type\")\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('#D3D3D3')\n\n# Add legend\nplt.legend([bp[\"boxes\"][0]], ['Travel Types'], loc='upper right')\n\n# Annotate the data value on the chart figure\nfor i, v in enumerate(data[\"Popularity Score\"]):\n    ax.text(v+1, i+1, str(v), color='black', fontweight='bold')\n\n# Set the layout tight\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_7afd8e5a96278aec/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_7afd8e5a96278aec/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_7afd8e5a96278aec/myplot.png"
    },
    {
        "id": "Box_c550ea0a29620b43",
        "Input_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# data\nprofitability = {\n    \"Manufacturing\": [10, 12, 15, 18, 20, 25, 28],\n    \"Technology\": [5, 8, 12, 15, 18, 20, 25],\n    \"Agriculture\": [2, 4, 6, 10, 12, 15, 18],\n    \"Services\": [15, 18, 22, 25, 30, 35, 40],\n    \"Retail\": [8, 10, 12, 15, 20, 25, 30],\n}\n\n# preparing data for plot\nlabels, data = [*zip(*profitability.items())]  # 'transpose' items to parallel key, value lists\n\n# or backwards compatable    \nlabels, data = profitability.keys(), profitability.values()\n\nplt.figure(figsize=(10,6))\nplt.boxplot(data)\nplt.xticks(range(1, len(labels) + 1), labels)\nplt.title('Profitability by industry')\nplt.xlabel('Industry')\nplt.ylabel('Profitability (%)')\n#plt.savefig('figure.png')\nplt.savefig('figure.png')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Assign different colors to the box that contains the center point of the bounding box: use #0dbaa9 for the box body, #f16310 for the median, and #a14db2 for the whiskers.",
        "Input_image": "./test_dataset/Box/Box_c550ea0a29620b43/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# data\nprofitability = {\n    \"Manufacturing\": [10, 12, 15, 18, 20, 25, 28],\n    \"Technology\": [5, 8, 12, 15, 18, 20, 25],\n    \"Agriculture\": [2, 4, 6, 10, 12, 15, 18],\n    \"Services\": [15, 18, 22, 25, 30, 35, 40],\n    \"Retail\": [8, 10, 12, 15, 20, 25, 30],\n}\n\n# preparing data for plot\nlabels, data = [*zip(*profitability.items())]  # 'transpose' items to parallel key, value lists\n\n# or backwards compatable    \nlabels, data = profitability.keys(), profitability.values()\n\nplt.figure(figsize=(10,6))\nbp = plt.boxplot(data)\nplt.xticks(range(1, len(labels) + 1), labels)\nplt.title('Profitability by industry')\nplt.xlabel('Industry')\nplt.ylabel('Profitability (%)')\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 3:\n        patch.set_color('#0dbaa9')\n        bp['medians'][idx].set_color('#f16310')\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]: whisker.set_color('#a14db2')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "3",
        "Test_image": "./test_dataset/Box/Box_c550ea0a29620b43/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_c550ea0a29620b43/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_c550ea0a29620b43/figure.png"
    },
    {
        "id": "Box_23b98430416d70bc",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = {'Smartphone Feature': ['Web Browsing', 'Social Media', 'Gaming', 'Music and Video', 'Email and Messaging', 'Other'],\n        'Week 1': [50, 80, 60, 70, 40, 30],\n        'Week 2': [70, 70, 50, 60, 60, 34],\n        'Week 3': [90, 75, 40, 50, 70, 38],\n        'Week 4': [30, 140, 120, 51, 50, 140],\n        'Week 5': [35, 100, 115, 70, 52, 130]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Week 1'], df['Week 2'], df['Week 3'], df['Week 4'], df['Week 5']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5'], \n                sym = \"ro\", widths = 0.4)\n\n# Define blue gradient colors\ncolors = ['#003366', '#336699', '#6699CC', '#99CCFF', '#CCCCFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Weekly Smartphone Feature Usage\")\nplt.xlabel(\"Weeks\")\nplt.ylabel(\"Usage\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2], bp[\"boxes\"][3], bp[\"boxes\"][4]], \n           ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the boxes that contain the center point of the bounding box to 0.32. Also, enable the picker state for these same boxes by setting it to True.",
        "Input_image": "./test_dataset/Box/Box_23b98430416d70bc/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = {'Smartphone Feature': ['Web Browsing', 'Social Media', 'Gaming', 'Music and Video', 'Email and Messaging', 'Other'],\n        'Week 1': [50, 80, 60, 70, 40, 30],\n        'Week 2': [70, 70, 50, 60, 60, 34],\n        'Week 3': [90, 75, 40, 50, 70, 38],\n        'Week 4': [30, 140, 120, 51, 50, 140],\n        'Week 5': [35, 100, 115, 70, 52, 130]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Week 1'], df['Week 2'], df['Week 3'], df['Week 4'], df['Week 5']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5'], \n                sym = \"ro\", widths = 0.4)\n\n# Define blue gradient colors\ncolors = ['#003366', '#336699', '#6699CC', '#99CCFF', '#CCCCFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Weekly Smartphone Feature Usage\")\nplt.xlabel(\"Weeks\")\nplt.ylabel(\"Usage\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2], bp[\"boxes\"][3], bp[\"boxes\"][4]], \n           ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\n# Set the transparency and picker state for the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if idx in [1, 3]:  # Targeting 'Week 2' and 'Week 4'\n        patch.set_alpha(0.32)\n        patch.set_picker(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Box/Box_23b98430416d70bc/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_23b98430416d70bc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_23b98430416d70bc/myplot.png"
    },
    {
        "id": "Box_b31007ee864f2341",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\ndf = pd.DataFrame(data)\n\n# Create subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df[\"App Usage\"], df[\"Call Duration\"], df[\"Data Consumption\"]],\n                patch_artist = True, notch = True, vert = 0, widths = 0.5,\n                labels = [\"App Usage\", \"Call Duration\", \"Data Consumption\"])\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add annotations\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median: {y}', (x, y), textcoords=\"offset points\", xytext=(10,-10), ha='center', fontsize=8, color='black')\n\n# Add title and labels\nax.set_title('Usage Statistics')\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\n\n# Remove grid and set background color to white\nax.grid(False)\nax.set_facecolor('white')  # Background color changed to white\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the transparency of the box that contains the center point of the bounding box to 0.61. Also, for those same points, adjust its clipping box to a bounding box defined by the coordinates (179, 102) with a width of 161 and a height of 241, using the matplotlib.transforms.Bbox pattern.",
        "Input_image": "./test_dataset/Box/Box_b31007ee864f2341/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.transforms as transforms\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\ndf = pd.DataFrame(data)\n\n# Create subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df[\"App Usage\"], df[\"Call Duration\"], df[\"Data Consumption\"]],\n                patch_artist = True, notch = True, vert = 0, widths = 0.5,\n                labels = [\"App Usage\", \"Call Duration\", \"Data Consumption\"])\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Add annotations\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median: {y}', (x, y), textcoords=\"offset points\", xytext=(10,-10), ha='center', fontsize=8, color='black')\n\n# Add title and labels\nax.set_title('Usage Statistics')\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\n\n# Remove grid and set background color to white\nax.grid(False)\nax.set_facecolor('white')  # Background color changed to white\n\n# Set transparency and clip box for the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Call Duration'\n        patch.set_alpha(0.61)\n        bbox = transforms.Bbox.from_bounds(179, 102, 161, 241)\n        patch.set_clip_box(bbox)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_b31007ee864f2341/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_b31007ee864f2341/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_b31007ee864f2341/myplot.png"
    },
    {
        "id": "Box_7f98d173e1a02c87",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\ndata = '''Year,Arctic Sea Levels (in meters),Antarctic Sea Levels (in meters),Global Average Sea Levels (in meters)\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60'''\n\ndf = pd.read_csv(io.StringIO(data))\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\ndata = [df[\"Arctic Sea Levels (in meters)\"], df[\"Antarctic Sea Levels (in meters)\"], df[\"Global Average Sea Levels (in meters)\"]]\n\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, widths = 0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(['Arctic', 'Antarctic', 'Global Average'])\n\nax.set_title('Sea Levels in Meters')\nax.set_xlabel('Sea Levels (in meters)')\nax.set_ylabel('Regions')\n\n# Removed the grid and changed the background color to white\nax.grid(False)\nax.set_facecolor('white')  # Changed from 'lightgray' to 'white'\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the rasterized state of the box body that contain the center point of the bounding box to True. For those same boxes, adjust the z-order to 10 and add a shadow effect with an offset of (2.40, 3.37).",
        "Input_image": "./test_dataset/Box/Box_7f98d173e1a02c87/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\nimport random\nfrom matplotlib.patheffects import withSimplePatchShadow\n# Data\ndata = '''Year,Arctic Sea Levels (in meters),Antarctic Sea Levels (in meters),Global Average Sea Levels (in meters)\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60'''\n\ndf = pd.read_csv(io.StringIO(data))\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\ndata = [df[\"Arctic Sea Levels (in meters)\"], df[\"Antarctic Sea Levels (in meters)\"], df[\"Global Average Sea Levels (in meters)\"]]\n\nbp = ax.boxplot(data, patch_artist = True, notch = True, vert = 0, widths = 0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set properties for the first box\nbp['boxes'][0].set_rasterized(True)\nbp['boxes'][0].set_zorder(10)\nbp['boxes'][0].set_path_effects([withSimplePatchShadow(offset=(2.40,3.37))])\n\nax.set_yticklabels(['Arctic', 'Antarctic', 'Global Average'])\n\nax.set_title('Sea Levels in Meters')\nax.set_xlabel('Sea Levels (in meters)')\nax.set_ylabel('Regions')\n\n# Removed the grid and changed the background color to white\nax.grid(False)\nax.set_facecolor('white')  # Changed from 'lightgray' to 'white'\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_7f98d173e1a02c87/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_7f98d173e1a02c87/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_7f98d173e1a02c87/myplot.png"
    },
    {
        "id": "Box_bb3f9a63c0c403c0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO('''\\\nPlatform,2016,2017,2018\nFacebook,100,120,85\nInstagram,80,110,130\nTwitter,90,70,95\nSnapchat,70,100,70\nLinkedIn,60,80,85\nPinterest,50,75,55\nReddit,30,60,65\nWeChat,20,40,45\nWhatsApp,10,5,30\n''')\n\ndf = pd.read_csv(data)\n\n# Prepare data for box plot\nplot_data = [df['2016'], df['2017'], df['2018']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2016', '2017', '2018'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Platform vs Yearly User Count\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"User Count in Millions\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2016', '2017', '2018'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the transform of the boxes that contain the center point of the bounding box to the data coordinate system.",
        "Input_image": "./test_dataset/Box/Box_bb3f9a63c0c403c0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO('''\\\nPlatform,2016,2017,2018\nFacebook,100,120,85\nInstagram,80,110,130\nTwitter,90,70,95\nSnapchat,70,100,70\nLinkedIn,60,80,85\nPinterest,50,75,55\nReddit,30,60,65\nWeChat,20,40,45\nWhatsApp,10,5,30\n''')\n\ndf = pd.read_csv(data)\n\n# Prepare data for box plot\nplot_data = [df['2016'], df['2017'], df['2018']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2016', '2017', '2018'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Platform vs Yearly User Count\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"User Count in Millions\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2016', '2017', '2018'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('lightgray')\n\n# Set the transform of the object corresponding to the Target_object to the Coordinate system of data\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting '2017'\n        box.set_transform(ax.transData)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_bb3f9a63c0c403c0/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_bb3f9a63c0c403c0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_bb3f9a63c0c403c0/myplot.png"
    },
    {
        "id": "Box_8c7299e2001303c9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Data\ndata = StringIO(\"\"\"\n\"Property Type\",\"2018\",\"2019\",\"2020\"\n\"Residential\",150000,120000,185000\n\"Commercial\",200000,210000,145000\n\"Industrial\",180000,225000,215000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2018'].values, df['2019'].values, df['2020'].values]\nlabels = ['2018', '2019', '2020']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Change the background color here\nax.set_facecolor('white')  # This line was modified\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Property Prices Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Property Price')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], ['Residential', 'Commercial', 'Industrial'], loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the boxes that contain the center point of the bounding box to 0.93, and change the color of all the lines for these boxes to #6380d1.",
        "Input_image": "./test_dataset/Box/Box_8c7299e2001303c9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Data\ndata = StringIO(\"\"\"\n\"Property Type\",\"2018\",\"2019\",\"2020\"\n\"Residential\",150000,120000,185000\n\"Commercial\",200000,210000,145000\n\"Industrial\",180000,225000,215000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2018'].values, df['2019'].values, df['2020'].values]\nlabels = ['2018', '2019', '2020']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Change the background color here\nax.set_facecolor('white')  # This line was modified\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set transparency and line color for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting '2019'\n        box.set_alpha(0.93)\n        box.set_edgecolor('#6380d1')\n        for element in [ 'whiskers', 'caps']:\n            for line in bp[element][2*idx:2*(idx+1)]:\n                line.set_color('#6380d1')\n        bp['medians'][idx].set_color('#6380d1')\n            \n\n# Set title and labels\nax.set_title('Property Prices Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Property Price')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], ['Residential', 'Commercial', 'Industrial'], loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_8c7299e2001303c9/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_8c7299e2001303c9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_8c7299e2001303c9/myplot.png"
    },
    {
        "id": "Box_764cbd3d6b6dbb7a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,\"Satellite Launches\",\"Space Missions\",\"Investment in Space Technology\"\n1990,100,5,1\n1995,50,10,1.5\n2000,150,15,2\n2005,120,20,3\n2010,75,25,2.5\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Satellite Launches'].values, df['Space Missions'].values, df['Investment in Space Technology'].values]\nlabels = ['Satellite Launches', 'Space Missions', 'Investment in Space Technology']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Investment, Satellite Launches and Space Missions Over The Years')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Assign different colors to the boxes that contain the center point of the bounding box: use #025435 for the box bodies, #606933 for the medians, and #01da87 for the whiskers.",
        "Input_image": "./test_dataset/Box/Box_764cbd3d6b6dbb7a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,\"Satellite Launches\",\"Space Missions\",\"Investment in Space Technology\"\n1990,100,5,1\n1995,50,10,1.5\n2000,150,15,2\n2005,120,20,3\n2010,75,25,2.5\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Satellite Launches'].values, df['Space Missions'].values, df['Investment in Space Technology'].values]\nlabels = ['Satellite Launches', 'Space Missions', 'Investment in Space Technology']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modify the target box\nfor idx, patch in enumerate(bp['boxes']):\n    if labels[idx] == labels[1]:  # Targeting 'Space Missions'\n        patch.set_facecolor('#025435')\n        bp['medians'][idx].set_color('#606933')\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n            whisker.set_color('#01da87')\n\n# Set title and labels\nax.set_title('Investment, Satellite Launches and Space Missions Over The Years')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_764cbd3d6b6dbb7a/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_764cbd3d6b6dbb7a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_764cbd3d6b6dbb7a/myplot.png"
    },
    {
        "id": "Box_aa153e1a47d56427",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Data\ndata = StringIO(\"\"\"\nYear,Book Sales\n2005,2000\n2006,4000\n2007,10000\n2008,2500\n2009,9000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Book Sales'].values]\nlabels = ['Book Sales']\ncolors = ['#1f77b4']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Book Sales Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping box for the boxes that contain the center point of the bounding box to the coordinates defined by (x0, y0) = (477, 167) with a width of 158 and a height of 863, following the matplotlib.transforms.Bbox pattern. Also, enable the picker state for those boxes by setting it to True.",
        "Input_image": "./test_dataset/Box/Box_aa153e1a47d56427/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Data\ndata = StringIO(\"\"\"\nYear,Book Sales\n2005,2000\n2006,4000\n2007,10000\n2008,2500\n2009,9000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Book Sales'].values]\nlabels = ['Book Sales']\ncolors = ['#1f77b4']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set clip box and picker state for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting 'Book Sales'\n        box.set_clip_box(Bbox.from_bounds(477, 167, 158, 863))\n        box.set_picker(True)\n\n# Set title and labels\nax.set_title('Book Sales Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_aa153e1a47d56427/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_aa153e1a47d56427/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_aa153e1a47d56427/myplot.png"
    },
    {
        "id": "Box_3db02c76c00053c4",
        "Input_code": "import matplotlib.pyplot as plt\n\ncurrent_speed_data = {\n    'Location 1': [1.5, 1.7, 1.6, 1.8, 1.9, 2.0, 1.6, 1.4, 1.7, 1.8],\n    'Location 2': [2.2, 2.0, 2.1, 2.3, 2.4, 2.0, 2.2, 2.1, 2.3, 2.1],\n    'Location 3': [1.8, 1.9, 1.7, 1.6, 1.5, 1.7, 1.8, 1.6, 1.9, 1.8],\n    'Location 4': [2.5, 2.4, 2.3, 2.6, 2.7, 2.5, 2.4, 2.2, 2.6, 2.3],\n    'Location 5': [1.6, 1.5, 1.7, 1.8, 1.6, 1.9, 1.7, 1.5, 1.8, 1.6]\n}\n\nplt.figure(figsize=(10, 6))\nplt.boxplot(current_speed_data.values(), labels=current_speed_data.keys())\nplt.xlabel('Location')\nplt.ylabel('Current Speed (knots)')\nplt.title('Box Plot of Oceanographic Current Speeds in the Pacific')\n#plt.savefig('figure.png')\nplt.savefig('figure.png')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the border thickness of the boxes that contain the center point of the bounding box to 2.25, and set the edge color to 'black'.",
        "Input_image": "./test_dataset/Box/Box_3db02c76c00053c4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\ncurrent_speed_data = {\n    'Location 1': [1.5, 1.7, 1.6, 1.8, 1.9, 2.0, 1.6, 1.4, 1.7, 1.8],\n    'Location 2': [2.2, 2.0, 2.1, 2.3, 2.4, 2.0, 2.2, 2.1, 2.3, 2.1],\n    'Location 3': [1.8, 1.9, 1.7, 1.6, 1.5, 1.7, 1.8, 1.6, 1.9, 1.8],\n    'Location 4': [2.5, 2.4, 2.3, 2.6, 2.7, 2.5, 2.4, 2.2, 2.6, 2.3],\n    'Location 5': [1.6, 1.5, 1.7, 1.8, 1.6, 1.9, 1.7, 1.5, 1.8, 1.6]\n}\n\nplt.figure(figsize=(10, 6))\nbp = plt.boxplot(current_speed_data.values(), labels=current_speed_data.keys())\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 2:  # Targeting 'Location 3'\n        box.set_linewidth(2.2538355468413886)\n        box.set_color('black')\nplt.xlabel('Location')\nplt.ylabel('Current Speed (knots)')\nplt.title('Box Plot of Oceanographic Current Speeds in the Pacific')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Box/Box_3db02c76c00053c4/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_3db02c76c00053c4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_3db02c76c00053c4/figure.png"
    },
    {
        "id": "Box_937b34cf9dca3c7e",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Vacation Type': ['Cruise Vacations', 'Road Trips', 'Staycations'],\n        '2018': [5000, 6300, 4000],\n        '2019': [6000, 4500, 4200],\n        '2020': [2500, 9000, 8400]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['2018'], df['2019'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2018', '2019', '2020'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Vacation Type vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Vacation Type\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2018', '2019', '2020'], loc='upper right')\n\n# Removing grid lines\nplt.grid(False)  # Modified line\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # Modified line\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border style of the boxes that contain the center point of the bounding box to 'dashed', with a width of 2.8 and a color of '#630767'. Leave all other elements unchanged.",
        "Input_image": "./test_dataset/Box/Box_937b34cf9dca3c7e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Vacation Type': ['Cruise Vacations', 'Road Trips', 'Staycations'],\n        '2018': [5000, 6300, 4000],\n        '2019': [6000, 4500, 4200],\n        '2020': [2500, 9000, 8400]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['2018'], df['2019'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2018', '2019', '2020'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Vacation Type vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Vacation Type\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2018', '2019', '2020'], loc='upper right')\n\n# Removing grid lines\nplt.grid(False)  # Modified line\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # Modified line\n\n# Set the border style of the boxes corresponding to the Target_object\nfor i in [1]:\n    bp['boxes'][i].set_linestyle('dashed')\n    bp['boxes'][i].set_linewidth(2.8)\n    bp['boxes'][i].set_edgecolor('#630767')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_937b34cf9dca3c7e/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_937b34cf9dca3c7e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_937b34cf9dca3c7e/myplot.png"
    },
    {
        "id": "Box_ccbde303bee6548a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Library\": [\"City Library\", \"City Library\", \"City Library\", \"County Library\", \"County Library\", \"County Library\", \"National Library\", \"National Library\", \"National Library\"],\n    \"Year\": [2017, 2018, 2019, 2017, 2018, 2019, 2017, 2018, 2019],\n    \"Visitors\": [12000, 9000, 9500, 8000, 6000, 7000, 15000, 12000, 13000],\n    \"Events\": [15, 10, 20, 8, 5, 15, 20, 15, 25]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot([df['Visitors'], df['Events']], patch_artist = True, notch = True, vert = 0, widths = 0.5)\n \ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting the background color of the plot\nax.set_facecolor('gray')\n\n# Adding grid\nax.grid(True)\n\n# Adding labels and title\nplt.xlabel('Data Categories')\nplt.ylabel('Values')\nplt.title('Library Visitors and Events')\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['Visitors', 'Events'], loc='upper right')\n\n# Saving the plot\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the linestyle of the box body that contains the center point of the bounding box to 'dotted'. Also, make sure to set the rasterized state of this box to False.",
        "Input_image": "./test_dataset/Box/Box_ccbde303bee6548a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Library\": [\"City Library\", \"City Library\", \"City Library\", \"County Library\", \"County Library\", \"County Library\", \"National Library\", \"National Library\", \"National Library\"],\n    \"Year\": [2017, 2018, 2019, 2017, 2018, 2019, 2017, 2018, 2019],\n    \"Visitors\": [12000, 9000, 9500, 8000, 6000, 7000, 15000, 12000, 13000],\n    \"Events\": [15, 10, 20, 8, 5, 15, 20, 15, 25]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot([df['Visitors'], df['Events']], patch_artist = True, notch = True, vert = 0, widths = 0.5)\n \ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting the background color of the plot\nax.set_facecolor('gray')\n\n# Adding grid\nax.grid(True)\n\n# Adding labels and title\nplt.xlabel('Data Categories')\nplt.ylabel('Values')\nplt.title('Library Visitors and Events')\n# Modifying the linestyle and rasterized state of the first box\nbp['boxes'][0].set_linestyle('dotted')\nbp['boxes'][0].set_rasterized(False)\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['Visitors', 'Events'], loc='upper right')\n\n\n# Saving the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_ccbde303bee6548a/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_ccbde303bee6548a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_ccbde303bee6548a/myplot.png"
    },
    {
        "id": "Box_22ed530066330f77",
        "Input_code": "from io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Data\ndata = StringIO(\"\"\"\nYear,Book Sales\n2005,2000\n2006,4000\n2007,10000\n2008,2500\n2009,9000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Book Sales'].values]\nlabels = ['Book Sales']\ncolors = ['#1f77b4']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance and change background to white\nax.set_facecolor('white')  # Changed from '#f0f0f0' to 'white'\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Book Sales Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Hide the box body that contain the center point of the bounding box. However, for the same box, outline the box's median,whiskers and caps with a linewidth of 2.81 and a foreground color of #3af914.",
        "Input_image": "./test_dataset/Box/Box_22ed530066330f77/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Data\ndata = StringIO(\"\"\"\nYear,Book Sales\n2005,2000\n2006,4000\n2007,10000\n2008,2500\n2009,9000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Book Sales'].values]\nlabels = ['Book Sales']\ncolors = ['#1f77b4']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance and change background to white\nax.set_facecolor('white')  # Changed from '#f0f0f0' to 'white'\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set visibility to False and apply stroke effect for the target object\nstroke_effect = path_effects.withStroke(linewidth=2.8129693161221443, foreground='#3af914')\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting 'Book Sales'\n        box.set_visible(False)\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n            whisker.set_path_effects([stroke_effect])\n        for cap in bp['caps'][2*idx:2*(idx+1)]:\n            cap.set_path_effects([stroke_effect])\n        bp['medians'][idx].set_path_effects([stroke_effect])\n\n\n# Set title and labels\nax.set_title('Book Sales Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_22ed530066330f77/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_22ed530066330f77/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_22ed530066330f77/myplot.png"
    },
    {
        "id": "Box_df5356184e7e0d88",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\n\"Architecture Type\",\"Year 2010\",\"Year 2020\"\n\"Modern Architecture\",500,250\n\"Gothic Architecture\",300,800\n\"Victorian Architecture\",700,350\n\"Romanesque Architecture\",200,600\n\"Baroque Architecture\",400,550\n\"Renaissance Architecture\",600,700\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Year 2010'].values, df['Year 2020'].values]\nlabels = ['Year 2010', 'Year 2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Architecture Popularity Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the edge color of the boxes that contain the center point of the bounding box to #69eccc, without altering any other elements.",
        "Input_image": "./test_dataset/Box/Box_df5356184e7e0d88/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\n\"Architecture Type\",\"Year 2010\",\"Year 2020\"\n\"Modern Architecture\",500,250\n\"Gothic Architecture\",300,800\n\"Victorian Architecture\",700,350\n\"Romanesque Architecture\",200,600\n\"Baroque Architecture\",400,550\n\"Renaissance Architecture\",600,700\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Year 2010'].values, df['Year 2020'].values]\nlabels = ['Year 2010', 'Year 2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set edge color of the boxes corresponding to the Target_object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Assuming 'Year 2020' is the target\n        box.set_edgecolor('#69eccc')\n\n# Set title and labels\nax.set_title('Architecture Popularity Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_df5356184e7e0d88/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_df5356184e7e0d88/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_df5356184e7e0d88/myplot.png"
    },
    {
        "id": "Box_f256486042e66bbb",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Import data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Pop': [100, 120, 150, 200, 180, 190, 210, 230, 240],\n        'Rock': [80, 70, 60, 50, 90, 80, 70, 150, 160],\n        'Classical': [120, 130, 140, 100, 120, 110, 90, 80, 70]}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Pop'], df['Rock'], df['Classical']], patch_artist = True,\n                notch = True, vert = 0, widths = 0.5, labels = ['Pop', 'Rock', 'Classical'])\ncolors = ['#0000FF', '#00FF00', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding title and labels with modified font sizes\nplt.title('Music Genre Popularity Over Years', fontsize=20)\nplt.xlabel('Genre', fontsize=14)\nplt.ylabel('Popularity', fontsize=14)\n\n# Modifying tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Adding grid\nax.grid(True)\n\n# Changing the background color of the figure\nax.set_facecolor('lightgray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the flier properties for the points that contain the center point of the bounding box to have a rectangular shape and a size of 8. Additionally, change the face color of the box body to #95b6fb.",
        "Input_image": "./test_dataset/Box/Box_f256486042e66bbb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Import data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Pop': [100, 120, 150, 200, 180, 190, 210, 230, 240],\n        'Rock': [80, 70, 60, 50, 90, 80, 70, 150, 160],\n        'Classical': [120, 130, 140, 100, 120, 110, 90, 80, 70]}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Pop'], df['Rock'], df['Classical']], patch_artist = True,\n                notch = True, vert = 0, widths = 0.5, labels = ['Pop', 'Rock', 'Classical'],\n                flierprops=dict(marker='^', markersize=8)  # Set outlier properties\n                )\ncolors = ['#0000FF', '#00FF00', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the animated state and face color for the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Rock'\n        patch.set_facecolor('#95b6fb')\n\n# Adding title and labels with modified font sizes\nplt.title('Music Genre Popularity Over Years', fontsize=20)\nplt.xlabel('Genre', fontsize=14)\nplt.ylabel('Popularity', fontsize=14)\n\n# Modifying tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Adding grid\nax.grid(True)\n\n# Changing the background color of the figure\nax.set_facecolor('lightgray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_f256486042e66bbb/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_f256486042e66bbb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_f256486042e66bbb/myplot.png"
    },
    {
        "id": "Box_1d69e1d967ea0854",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\nax.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the body color of the boxes that contain the center point of the bounding box to #cea404, and set their transparency to 0.61.",
        "Input_image": "./test_dataset/Box/Box_1d69e1d967ea0854/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nfor idx, patch in enumerate(bp['boxes']):\n    if df['Demographics'][idx] == df['Demographics'][2]:\n        patch.set_facecolor('#cea404')\n        patch.set_alpha(0.61)\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\nax.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Box/Box_1d69e1d967ea0854/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_1d69e1d967ea0854/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_1d69e1d967ea0854/myplot.png"
    },
    {
        "id": "Box_0937ca154b6b016d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Create a DataFrame from the given data\ndata = pd.DataFrame({\n    \"Mental Health Disorder\": [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"],\n    \"2018\": [100, 80, 60],\n    \"2019\": [150, 90, 70],\n    \"2020\": [130, 200, 65]\n})\n\n# Set the index to 'Mental Health Disorder'\ndata.set_index('Mental Health Disorder', inplace=True)\n\n# Create boxplot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data.values, patch_artist = True, notch = True, vert = 0, widths=0.6,\n                labels=data.index, sym='r+')\n\n# Set colors for each box\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Mental Health Disorders over the Years')\nax.set_xlabel('Mental Health Disorder')\nax.set_ylabel('Number of Cases')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Depression', 'Anxiety', 'Bipolar Disorder'], loc='upper right')\n\n# Annotate data values on the chart\nfor line, value in zip(bp['medians'], data.median(axis=1)):\n    x, y = line.get_xydata()[1] # Top of the median line\n    ax.text(x, y, f'{value}', horizontalalignment='center') # Draw text in the middle\n\n# Set the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label of the box that contain the center point of the bounding box to 'A new Label' in the legend. For the same boxes, set the z-order to 0 and apply a shadow effect to the box body with an offset of (2.26, 2.58).",
        "Input_image": "./test_dataset/Box/Box_0937ca154b6b016d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom matplotlib.patheffects import withSimplePatchShadow\n# Create a DataFrame from the given data\ndata = pd.DataFrame({\n    \"Mental Health Disorder\": [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"],\n    \"2018\": [100, 80, 60],\n    \"2019\": [150, 90, 70],\n    \"2020\": [130, 200, 65]\n})\n\n# Set the index to 'Mental Health Disorder'\ndata.set_index('Mental Health Disorder', inplace=True)\n\n# Create boxplot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data.values, patch_artist = True, notch = True, vert = 0, widths=0.6,\n                labels=data.index, sym='r+')\n\n# Set colors for each box\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Mental Health Disorders over the Years')\nax.set_xlabel('Mental Health Disorder')\nax.set_ylabel('Number of Cases')\n\n# Add grid\nax.grid(True)\n# Modify the target object\n\n        \nbp['boxes'][1].set_zorder(0)\nbp['boxes'][1].set_path_effects([withSimplePatchShadow(offset=(2.26, 2.58))])\n\n# Add legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Depression', 'A new Label', 'Bipolar Disorder'], loc='upper right')\n\n# Annotate data values on the chart\nfor line, value in zip(bp['medians'], data.median(axis=1)):\n    x, y = line.get_xydata()[1] # Top of the median line\n    ax.text(x, y, f'{value}', horizontalalignment='center') # Draw text in the middle\n\n# Set the background color of the chart figure\nax.set_facecolor('lightgray')\n\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_0937ca154b6b016d/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_0937ca154b6b016d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_0937ca154b6b016d/myplot.png"
    },
    {
        "id": "Box_fe595190df111d81",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# Data\ndata = StringIO(\"\"\"\nAR Devices,AR Applications,AR Investments\n150,200,1000\n120,190,700\n180,220,1100\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['AR Devices'].values, df['AR Applications'].values, df['AR Investments'].values]\nlabels = ['AR Devices', 'AR Applications', 'AR Investments']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Change the background color of the chart figure\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('AR Devices, Applications and Investments')\nax.set_xlabel('AR Categories')\nax.set_ylabel('Values')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the box body that contain the center point of the bounding box to #f4f6ef. Also, make sure to apply the transformation to the coordinate system of the axes for the box.",
        "Input_image": "./test_dataset/Box/Box_fe595190df111d81/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nAR Devices,AR Applications,AR Investments\n150,200,1000\n120,190,700\n180,220,1100\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['AR Devices'].values, df['AR Applications'].values, df['AR Investments'].values]\nlabels = ['AR Devices', 'AR Applications', 'AR Investments']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Change the background color of the chart figure\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'AR Applications'\n        patch.set_facecolor('#f4f6ef')\n        patch.set_transform(ax.transData)\n    else:\n        patch.set_facecolor(colors[idx])\n\n# Set title and labels\nax.set_title('AR Devices, Applications and Investments')\nax.set_xlabel('AR Categories')\nax.set_ylabel('Values')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_fe595190df111d81/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_fe595190df111d81/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_fe595190df111d81/myplot.png"
    },
    {
        "id": "Box_91aa58b0532edc9e",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given Data\ndata = StringIO(\"\"\"\nVehicle Type,2010,2015,2020\nSedans,50000,60000,35000\nSUVs,40000,35000,70000\nElectric Vehicles,500,1500,5000\nTrucks,70000,65000,67000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2010'].values, df['2015'].values, df['2020'].values]\nlabels = ['2010', '2015', '2020']\ncolors = ['#e6194B', '#f58231', '#3cb44b', '#4363d8']  # Updated color scheme\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\n# Apply new colors to the boxplot patches\nfor i, patch in enumerate(bp['boxes']):\n    patch.set_facecolor(colors[i % len(colors)])  # Use modulo to cycle through new colors\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend with updated color scheme\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], ['Sedans', 'SUVs', 'Electric Vehicles', 'Trucks'], loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the boxes that contain the center point of the bounding box to 0.32.",
        "Input_image": "./test_dataset/Box/Box_91aa58b0532edc9e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given Data\ndata = StringIO(\"\"\"\nVehicle Type,2010,2015,2020\nSedans,50000,60000,35000\nSUVs,40000,35000,70000\nElectric Vehicles,500,1500,5000\nTrucks,70000,65000,67000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2010'].values, df['2015'].values, df['2020'].values]\nlabels = ['2010', '2015', '2020']\ncolors = ['#e6194B', '#f58231', '#3cb44b', '#4363d8']  # Updated color scheme\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\n# Apply new colors to the boxplot patches\nfor i, patch in enumerate(bp['boxes']):\n    patch.set_facecolor(colors[i % len(colors)])  # Use modulo to cycle through new colors\n    if i == 1:  # Targeting 'SUVs'\n        patch.set_alpha(0.32)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend with updated color scheme\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], ['Sedans', 'SUVs', 'Electric Vehicles', 'Trucks'], loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_91aa58b0532edc9e/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_91aa58b0532edc9e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_91aa58b0532edc9e/myplot.png"
    },
    {
        "id": "Box_4aa937ec6c035747",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\n\"Vehicle Type\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\"\n\"Sedans\",4000,8000,6000,7000,9000\n\"SUVs\",3000,3000,6000,5000,8000\n\"Electric Vehicles\",1000,5000,2000,2500,5000\n\"Trucks\",2500,2000,3000,2000,1000\n\"Motorcycles\",5000,4000,6000,8000,7000\n\"Hybrids\",2000,3000,7000,5000,6000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2016'].values, df['2017'].values, df['2018'].values, df['2019'].values, df['2020'].values]\nlabels = ['2016', '2017', '2018', '2019', '2020']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\"o\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], df['Vehicle Type'], loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the boxes body that contain the center point of the bounding box to 0.41, and set their line width to 1.27 as well.",
        "Input_image": "./test_dataset/Box/Box_4aa937ec6c035747/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\n\"Vehicle Type\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\"\n\"Sedans\",4000,8000,6000,7000,9000\n\"SUVs\",3000,3000,6000,5000,8000\n\"Electric Vehicles\",1000,5000,2000,2500,5000\n\"Trucks\",2500,2000,3000,2000,1000\n\"Motorcycles\",5000,4000,6000,8000,7000\n\"Hybrids\",2000,3000,7000,5000,6000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['2016'].values, df['2017'].values, df['2018'].values, df['2019'].values, df['2020'].values]\nlabels = ['2016', '2017', '2018', '2019', '2020']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\"o\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set transparency and linewidth for the target objects\nfor idx in [1, 3]:  # Targeting '2017' and '2019'\n    bp['boxes'][idx].set_alpha(0.41)\n    bp['boxes'][idx].set_linewidth(1.27)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], df['Vehicle Type'], loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Box/Box_4aa937ec6c035747/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_4aa937ec6c035747/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_4aa937ec6c035747/myplot.png"
    },
    {
        "id": "Box_959b829362ccb961",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO('''\\\nPlatform,2016,2017,2018\nFacebook,100,120,85\nInstagram,80,110,130\nTwitter,90,70,95\nSnapchat,70,100,70\nLinkedIn,60,80,85\nPinterest,50,75,55\nReddit,30,60,65\nWeChat,20,40,45\nWhatsApp,10,5,30\n''')\n\ndf = pd.read_csv(data)\n\n# Prepare data for box plot\nplot_data = [df['2016'], df['2017'], df['2018']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2016', '2017', '2018'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Platform vs Yearly User Count\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"User Count in Millions\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2016', '2017', '2018'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the fill pattern for the boxes that contain the center point of the bounding box to a horizontal hatch pattern with a density of x.",
        "Input_image": "./test_dataset/Box/Box_959b829362ccb961/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO('''\\\nPlatform,2016,2017,2018\nFacebook,100,120,85\nInstagram,80,110,130\nTwitter,90,70,95\nSnapchat,70,100,70\nLinkedIn,60,80,85\nPinterest,50,75,55\nReddit,30,60,65\nWeChat,20,40,45\nWhatsApp,10,5,30\n''')\n\ndf = pd.read_csv(data)\n\n# Prepare data for box plot\nplot_data = [df['2016'], df['2017'], df['2018']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2016', '2017', '2018'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Platform vs Yearly User Count\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"User Count in Millions\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2016', '2017', '2018'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('lightgray')\n\n# Set the fill pattern of the boxes corresponding to the Target_object to a horizontal hatch pattern with a density of x\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Assuming '2017' is the target object\n        patch.set_hatch('x')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_959b829362ccb961/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_959b829362ccb961/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_959b829362ccb961/myplot.png"
    },
    {
        "id": "Box_d82e0029afe6ad21",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create a pandas DataFrame from the given csv data.\ndata = pd.DataFrame({\n    \"Meat Type\": [\"Beef\", \"Poultry\", \"Pork\", \"Fish\", \"Lamb\"],\n    \"2000\": [50, 30, 70, 40, 10],\n    \"2005\": [55, 35, 75, 50, 12],\n    \"2010\": [52, 37, 80, 60, 14],\n    \"2015\": [54, 40, 78, 45, 16],\n    \"2020\": [60, 80, 79, 48, 30]\n})\n\n# Transpose the DataFrame and convert meat types to columns\ndata.set_index('Meat Type', inplace=True)\ndata = data.T\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist = True,\n                notch = True, vert = 0,\n                sym='r+', widths=0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate data value on the chart figure\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{y}', (x, y))\n\n# Set labels\nax.set_xlabel('Meat Types')\nax.set_ylabel('Amount')\n\n# Set title\nax.set_title('Meat Consumption Over Years')\n\n# Add grids on the background\nax.grid(True)\n\n# Change the background the chart figure\nax.set_facecolor('#f0f0f0')\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], data.columns, loc='upper right')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the whisker,cap,median color of the boxes that contain the center point of the bounding box to #496aef and update their line width to 3.04.",
        "Input_image": "./test_dataset/Box/Box_d82e0029afe6ad21/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a pandas DataFrame from the given csv data.\ndata = pd.DataFrame({\n    \"Meat Type\": [\"Beef\", \"Poultry\", \"Pork\", \"Fish\", \"Lamb\"],\n    \"2000\": [50, 30, 70, 40, 10],\n    \"2005\": [55, 35, 75, 50, 12],\n    \"2010\": [52, 37, 80, 60, 14],\n    \"2015\": [54, 40, 78, 45, 16],\n    \"2020\": [60, 80, 79, 48, 30]\n})\n\n# Transpose the DataFrame and convert meat types to columns\ndata.set_index('Meat Type', inplace=True)\ndata = data.T\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist = True,\n                notch = True, vert = 0,\n                sym='r+', widths=0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate data value on the chart figure\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{y}', (x, y))\n\n# Set labels\nax.set_xlabel('Meat Types')\nax.set_ylabel('Amount')\n\n# Set title\nax.set_title('Meat Consumption Over Years')\n\n# Add grids on the background\nax.grid(True)\n\n# Change the background the chart figure\nax.set_facecolor('#f0f0f0')\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], data.columns, loc='upper right')\n\n# Modify the line color and linewidth for the target object\nfor idx in [1, 3]:  # Targeting 'Poultry' and 'Fish'\n    for line in bp['medians'][idx], bp['whiskers'][2*idx], bp['whiskers'][2*idx+1], bp['caps'][2*idx], bp['caps'][2*idx+1]:\n        line.set_color('#496aef')\n        line.set_linewidth(3.04)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Box/Box_d82e0029afe6ad21/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_d82e0029afe6ad21/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_d82e0029afe6ad21/myplot.png"
    },
    {
        "id": "Box_e4232ee949215bb1",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\"Disaster Type\":[\"Flood\",\"Drought\",\"Earthquake\"],\n        \"Economic Impact in Year 1\":[100,150,120],\n        \"Economic Impact in Year 2\":[50,80,200]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize = (10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df[\"Economic Impact in Year 1\"], df[\"Economic Impact in Year 2\"]], patch_artist = True,\n                notch = True, vert = 0, labels = [\"Economic Impact in Year 1\", \"Economic Impact in Year 2\"],\n                widths = 0.4, sym='gD')\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting title and labels\nax.set_title('Economic Impact of Disasters')\nax.set_xlabel('Years')\nax.set_ylabel('Economic Impact')\n\n# Adding legend\nax.legend([\"Economic Impact in Year 1\", \"Economic Impact in Year 2\"])\n\n# Annotating data\nfor i, v in enumerate(df[\"Economic Impact in Year 1\"]):\n    ax.text(i+1, v + 5, str(v), color='blue', fontweight='bold')\n\nfor i, v in enumerate(df[\"Economic Impact in Year 2\"]):\n    ax.text(i+2, v + 5, str(v), color='green', fontweight='bold')\n\n# Adding grid\nax.grid(True)\n\n# Change the background color of the chart figure\nax.set_facecolor(\"lightgray\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the picker state of the boxes that contain the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Box/Box_e4232ee949215bb1/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\"Disaster Type\":[\"Flood\",\"Drought\",\"Earthquake\"],\n        \"Economic Impact in Year 1\":[100,150,120],\n        \"Economic Impact in Year 2\":[50,80,200]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize = (10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df[\"Economic Impact in Year 1\"], df[\"Economic Impact in Year 2\"]], patch_artist = True,\n                notch = True, vert = 0, labels = [\"Economic Impact in Year 1\", \"Economic Impact in Year 2\"],\n                widths = 0.4, sym='gD')\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting title and labels\nax.set_title('Economic Impact of Disasters')\nax.set_xlabel('Years')\nax.set_ylabel('Economic Impact')\n\n# Adding legend\nax.legend([\"Economic Impact in Year 1\", \"Economic Impact in Year 2\"])\n\n# Annotating data\nfor i, v in enumerate(df[\"Economic Impact in Year 1\"]):\n    ax.text(i+1, v + 5, str(v), color='blue', fontweight='bold')\n\nfor i, v in enumerate(df[\"Economic Impact in Year 2\"]):\n    ax.text(i+2, v + 5, str(v), color='green', fontweight='bold')\n\n# Adding grid\nax.grid(True)\n\n# Change the background color of the chart figure\nax.set_facecolor(\"lightgray\")\n\n# Set the picker state of the object corresponding to the Target_object to True\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting 'Economic Impact in Year 1'\n        box.set_picker(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_e4232ee949215bb1/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_e4232ee949215bb1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_e4232ee949215bb1/myplot.png"
    },
    {
        "id": "Box_260b8d60523d531c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Age Groups\":[\"15-24\",\"25-34\",\"35-44\",\"45-54\",\"55-64\",\"65+\"],\n    \"Vegetables\":[20,30,40,50,60,70],\n    \"Meat\":[80,70,60,50,40,30],\n    \"Dairy\":[100,90,80,70,60,50]\n}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot([df[\"Vegetables\"], df[\"Meat\"], df[\"Dairy\"]], patch_artist = True,\n                notch = True, vert = 0, whis = 2, widths = 0.4, sym = 'r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding labels \nax.set_yticklabels(['Vegetables', 'Meat', 'Dairy'])\n\n# Adding title and labels \nplt.title('Box Plot of Food Consumption by Age Groups')\nplt.xlabel('Amount')\nplt.ylabel('Type of food')\n\n# Adding grid \nax.grid(True)\n\n# Changing background color \nax.set_facecolor('lightgray')\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Vegetables', 'Meat', 'Dairy'], loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the animated state of the boxes that contain the center point of the bounding box to False. For the same boxes, change their color to #b3d50a.",
        "Input_image": "./test_dataset/Box/Box_260b8d60523d531c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Age Groups\":[\"15-24\",\"25-34\",\"35-44\",\"45-54\",\"55-64\",\"65+\"],\n    \"Vegetables\":[20,30,40,50,60,70],\n    \"Meat\":[80,70,60,50,40,30],\n    \"Dairy\":[100,90,80,70,60,50]\n}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot([df[\"Vegetables\"], df[\"Meat\"], df[\"Dairy\"]], patch_artist = True,\n                notch = True, vert = 0, whis = 2, widths = 0.4, sym = 'r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the animated state of the object corresponding to the Target_object to False and set the color\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Meat'\n        patch.set_animated(False)\n        patch.set_facecolor('#b3d50a')\n\n# Adding labels \nax.set_yticklabels(['Vegetables', 'Meat', 'Dairy'])\n\n# Adding title and labels \nplt.title('Box Plot of Food Consumption by Age Groups')\nplt.xlabel('Amount')\nplt.ylabel('Type of food')\n\n# Adding grid \nax.grid(True)\n\n# Changing background color \nax.set_facecolor('lightgray')\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Vegetables', 'Meat', 'Dairy'], loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_260b8d60523d531c/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_260b8d60523d531c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_260b8d60523d531c/myplot.png"
    },
    {
        "id": "Box_05cebecd8d8e09fb",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nAge Group,Vegetarian Diet,Paleo Diet,Keto Diet\nYoung Adults (18-29),50,70,90\nMiddle Aged (30-49),60,80,65\nSeniors (50+),45,62,70\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Vegetarian Diet'].values, df['Paleo Diet'].values, df['Keto Diet'].values]\nlabels = ['Vegetarian Diet', 'Paleo Diet', 'Keto Diet']\ncolors = ['#e377c2', '#7f7f7f', '#bcbd22']  # Updated colors\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Diet Popularity by Age Group')\nax.set_xlabel('Diet Type')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the boxes that contain the center point of the bounding box to 0.39, and ensure that their rasterized state is set to False.",
        "Input_image": "./test_dataset/Box/Box_05cebecd8d8e09fb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nAge Group,Vegetarian Diet,Paleo Diet,Keto Diet\nYoung Adults (18-29),50,70,90\nMiddle Aged (30-49),60,80,65\nSeniors (50+),45,62,70\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Vegetarian Diet'].values, df['Paleo Diet'].values, df['Keto Diet'].values]\nlabels = ['Vegetarian Diet', 'Paleo Diet', 'Keto Diet']\ncolors = ['#e377c2', '#7f7f7f', '#bcbd22']  # Updated colors\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set transparency and rasterized state for the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if idx in [1]:  # Targeting 'Paleo Diet'\n        patch.set_alpha(0.39)\n        patch.set_rasterized(False)\n\n# Set title and labels\nax.set_title('Diet Popularity by Age Group')\nax.set_xlabel('Diet Type')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_05cebecd8d8e09fb/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_05cebecd8d8e09fb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_05cebecd8d8e09fb/myplot.png"
    },
    {
        "id": "Box_0ed5884af749abfd",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare the data\ndata = {\"Species\": [\"Amazon Rainforest\", \"Siberian Taiga\", \"Australian Bush\"],\n        \"Year 2000\": [5000, 4200, 3200],\n        \"Year 2020\": [3700, 4000, 1800]}\ndf = pd.DataFrame(data)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Change the boxplot parameters\nbp = ax.boxplot([df['Year 2000'], df['Year 2020']], patch_artist=True, vert=0, widths=0.5, sym='r+')\n\ncolors = ['#0000FF', '#00FF00']\n\n# Change the color of each boxplot\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate the data\nfor i in range(len(df['Year 2000'])):\n    ax.text(df['Year 2000'][i], i+1, str(df['Year 2000'][i]), ha='center')\n    ax.text(df['Year 2020'][i], i+1.4, str(df['Year 2020'][i]), ha='center')\n\n# Add title and labels\nax.set_title('Comparison of Forest Area in Year 2000 and 2020')\nax.set_xlabel('Year')\nax.set_ylabel('Forest Area (thousand square kilometers)')\n\n# Add legend\nax.legend(['Year 2000', 'Year 2020'], loc='upper right')\n\n# Add grid and change background color\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the fill color of the box body that contains the center point of the bounding box to #823c85. Additionally, add an outline to this box with a linewidth of 0.91 and a color of '#11359c'.",
        "Input_image": "./test_dataset/Box/Box_0ed5884af749abfd/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare the data\ndata = {\"Species\": [\"Amazon Rainforest\", \"Siberian Taiga\", \"Australian Bush\"],\n        \"Year 2000\": [5000, 4200, 3200],\n        \"Year 2020\": [3700, 4000, 1800]}\ndf = pd.DataFrame(data)\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Change the boxplot parameters\nbp = ax.boxplot([df['Year 2000'], df['Year 2020']], patch_artist=True, vert=0, widths=0.5, sym='r+')\n\ncolors = ['#0000FF', '#00FF00']\n\n# Change the color of each boxplot\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the fill color and outline for the Target_object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:\n        box.set_facecolor('#823c85')\n        box.set_edgecolor('#11359c')\n        box.set_linewidth(0.91)\n        box.set_linestyle('-')\n\n# Annotate the data\nfor i in range(len(df['Year 2000'])):\n    ax.text(df['Year 2000'][i], i+1, str(df['Year 2000'][i]), ha='center')\n    ax.text(df['Year 2020'][i], i+1.4, str(df['Year 2020'][i]), ha='center')\n\n# Add title and labels\nax.set_title('Comparison of Forest Area in Year 2000 and 2020')\nax.set_xlabel('Year')\nax.set_ylabel('Forest Area (thousand square kilometers)')\n\n# Add legend\nax.legend(['Year 2000', 'Year 2020'], loc='upper right')\n\n# Add grid and change background color\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_0ed5884af749abfd/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_0ed5884af749abfd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_0ed5884af749abfd/myplot.png"
    },
    {
        "id": "Box_25765be15b56c5e6",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\nax.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the rasterized state of the boxes that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Box/Box_25765be15b56c5e6/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Middle Aged'\n        patch.set_rasterized(False)\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\nax.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_25765be15b56c5e6/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_25765be15b56c5e6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_25765be15b56c5e6/myplot.png"
    },
    {
        "id": "Box_7cabd9f7e1b62a73",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Stock Indices': ['Dow Jones', 'S&P 500', 'Nasdaq', 'FTSE 100'],\n        'Week 1': [25000, 3000, 7500, 7000],\n        'Week 2': [24000, 3200, 7400, 7100],\n        'Week 3': [23500, 3100, 7800, 7200],\n        'Week 4': [26000, 2700, 7300, 6800]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Week 1'], df['Week 2'], df['Week 3'], df['Week 4']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Weekly Stock Indices\")\nplt.xlabel(\"Weeks\")\nplt.ylabel(\"Stock Indices\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2], bp[\"boxes\"][3]], ['Week 1', 'Week 2', 'Week 3', 'Week 4'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the whiskers,caps and median color of the box that contain the center point of the bounding box to #8a9805. Also, apply a stroke to the box body with a linewidth of 2.11 and a foreground color of #e02f2d.",
        "Input_image": "./test_dataset/Box/Box_7cabd9f7e1b62a73/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\n\n# Given data\ndata = {'Stock Indices': ['Dow Jones', 'S&P 500', 'Nasdaq', 'FTSE 100'],\n        'Week 1': [25000, 3000, 7500, 7000],\n        'Week 2': [24000, 3200, 7400, 7100],\n        'Week 3': [23500, 3100, 7800, 7200],\n        'Week 4': [26000, 2700, 7300, 6800]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Week 1'], df['Week 2'], df['Week 3'], df['Week 4']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Weekly Stock Indices\")\nplt.xlabel(\"Weeks\")\nplt.ylabel(\"Stock Indices\")\n# Modify the line color and stroke effect for the target object\nstroke_effect = path_effects.withStroke(linewidth=2.1128333786668203, foreground='#e02f2d')\nfor idx in [1]:  # Targeting 'Week 2'\n    for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n        whisker.set_color('#8a9805')\n    for cap in bp['caps'][2*idx:2*(idx+1)]:\n        cap.set_color('#8a9805')\n    bp['medians'][idx].set_color('#8a9805')\n    bp['boxes'][idx].set_path_effects([stroke_effect])\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2], bp[\"boxes\"][3]], ['Week 1', 'Week 2', 'Week 3', 'Week 4'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_7cabd9f7e1b62a73/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_7cabd9f7e1b62a73/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_7cabd9f7e1b62a73/myplot.png"
    },
    {
        "id": "Box_12c1962a7d706a4a",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare the data\ndata = {\n    \"Age Group\": [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"],\n    \"Gym Visits\": [12, 27, 45, 60, 30],\n    \"Outdoor Activities\": [35, 30, 25, 15, 5]\n}\ndf = pd.DataFrame(data)\n\n# Create the figure and the axes\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the data\nbp = ax.boxplot([df[\"Gym Visits\"], df[\"Outdoor Activities\"]], \n                patch_artist=True, notch=True, vert=0, whis=2, widths=0.4, sym='r.')\ncolors = ['#0000FF', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the x-axis labels\nax.set_yticklabels(['Gym Visits', 'Outdoor Activities'])\n\n# Add title and labels\nplt.title(\"Gym Visits vs Outdoor Activities by Age Group\")\nplt.xlabel('Number of Activities')\nplt.ylabel('Type of Activities')\n\n# Add grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#f5f5f5') \n\n# Annotate data values\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median:{x:.1f}', (x, y), textcoords = \"offset points\", xytext = (0, 10), ha='center', fontsize=8, color='black')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the visibility of the boxes' body that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Box/Box_12c1962a7d706a4a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare the data\ndata = {\n    \"Age Group\": [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"],\n    \"Gym Visits\": [12, 27, 45, 60, 30],\n    \"Outdoor Activities\": [35, 30, 25, 15, 5]\n}\ndf = pd.DataFrame(data)\n\n# Create the figure and the axes\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the data\nbp = ax.boxplot([df[\"Gym Visits\"], df[\"Outdoor Activities\"]], \n                patch_artist=True, notch=True, vert=0, whis=2, widths=0.4, sym='r.')\ncolors = ['#0000FF', '#FF0000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set the x-axis labels\nax.set_yticklabels(['Gym Visits', 'Outdoor Activities'])\n\n# Add title and labels\nplt.title(\"Gym Visits vs Outdoor Activities by Age Group\")\nplt.xlabel('Number of Activities')\nplt.ylabel('Type of Activities')\n\n# Add grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#f5f5f5') \n\n# Annotate data values\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'Median:{x:.1f}', (x, y), textcoords = \"offset points\", xytext = (0, 10), ha='center', fontsize=8, color='black')\n\n# Set visibility of the target object to False\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting 'Gym Visits'\n        box.set_visible(False)\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_12c1962a7d706a4a/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_12c1962a7d706a4a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_12c1962a7d706a4a/myplot.png"
    },
    {
        "id": "Box_6cba1e2394c67ad5",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for bacterial growth rates in varying environments\ntime_hours = [0, 4, 8, 12, 16, 20]\ngrowth_25C = [0.2, 0.5, 0.8, 1.1, 1.3, 1.6]\ngrowth_30C = [0.4, 0.7, 1.0, 1.3, 1.6, 1.9]\ngrowth_37C = [0.6, 0.9, 1.2, 1.5, 1.8, 2.1]\n\nplt.figure(figsize=(12, 8))\nplt.boxplot([growth_25C, growth_30C, growth_37C], labels=['25\u00b0C', '30\u00b0C', '37\u00b0C'])\nplt.xlabel('Temperature Levels')\nplt.ylabel('Bacterial Growth Rate (OD600 units)')\nplt.title('Box Plot of Bacterial Growth in Varying Environments')\n#plt.savefig('figure.png')\nplt.savefig('figure.png')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the border thickness of the boxes that contain the center point of the bounding box to 2.11 and set the edge color to 'black'.",
        "Input_image": "./test_dataset/Box/Box_6cba1e2394c67ad5/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points for bacterial growth rates in varying environments\ntime_hours = [0, 4, 8, 12, 16, 20]\ngrowth_25C = [0.2, 0.5, 0.8, 1.1, 1.3, 1.6]\ngrowth_30C = [0.4, 0.7, 1.0, 1.3, 1.6, 1.9]\ngrowth_37C = [0.6, 0.9, 1.2, 1.5, 1.8, 2.1]\n\nplt.figure(figsize=(12, 8))\nbp = plt.boxplot([growth_25C, growth_30C, growth_37C], labels=['25\u00b0C', '30\u00b0C', '37\u00b0C'])\nplt.xlabel('Temperature Levels')\nplt.ylabel('Bacterial Growth Rate (OD600 units)')\nplt.title('Box Plot of Bacterial Growth in Varying Environments')\n\n# Modify the border thickness and edge color of the boxes corresponding to the Target_object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Assuming the target is the second box (30\u00b0C)\n        box.set_linewidth(2.1109242248808386)\n        box.set_color('black')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_6cba1e2394c67ad5/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_6cba1e2394c67ad5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_6cba1e2394c67ad5/figure.png"
    },
    {
        "id": "Box_ea384c38fbb64ca0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create DataFrame from the given data\ndata = {'Age Group': ['18-25', '25-35', '35-45', '45-55'],\n        'Vegan': [200, 450, 500, 600],\n        'Gluten-Free': [400, 550, 300, 700],\n        'Keto': [600, 350, 200, 1000]}\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\ndata_to_plot = [df['Vegan'].values, df['Gluten-Free'].values, df['Keto'].values]\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data_to_plot, patch_artist = True, notch = True, vert = 0, widths=0.3)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding background grid\nax.grid(True)\n\n# Setting background color\nax.set_facecolor('#f0f0f0') \n\n# Setting title and labels\nax.set_title('Diet Preference by Age Group')\nax.set_xlabel('Diet Type')\nax.set_ylabel('Number of People')\n\n# Adding legend\nax.legend(['Vegan', 'Gluten-Free', 'Keto'], loc='upper right')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Update the linewidth of the median,whiskers and caps line of the box that contain the center point of the bounding box to 1.48 and set their linestyle to 'dashed'.",
        "Input_image": "./test_dataset/Box/Box_ea384c38fbb64ca0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create DataFrame from the given data\ndata = {'Age Group': ['18-25', '25-35', '35-45', '45-55'],\n        'Vegan': [200, 450, 500, 600],\n        'Gluten-Free': [400, 550, 300, 700],\n        'Keto': [600, 350, 200, 1000]}\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\ndata_to_plot = [df['Vegan'].values, df['Gluten-Free'].values, df['Keto'].values]\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data_to_plot, patch_artist = True, notch = True, vert = 0, widths=0.3)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modifying the linewidth and linestyle for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Gluten-Free'\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n            whisker.set_linewidth(1.48)\n            whisker.set_linestyle('dashed')\n        for cap in bp['caps'][2*idx:2*(idx+1)]:\n            cap.set_linewidth(1.48)\n            cap.set_linestyle('dashed')\n        bp['medians'][idx].set_linewidth(1.48)\n        bp['medians'][idx].set_linestyle('dashed')\n        \n# Adding background grid\nax.grid(True)\n\n# Setting background color\nax.set_facecolor('#f0f0f0') \n\n# Setting title and labels\nax.set_title('Diet Preference by Age Group')\nax.set_xlabel('Diet Type')\nax.set_ylabel('Number of People')\n\n# Adding legend\nax.legend(['Vegan', 'Gluten-Free', 'Keto'], loc='upper right')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_ea384c38fbb64ca0/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_ea384c38fbb64ca0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_ea384c38fbb64ca0/myplot.png"
    },
    {
        "id": "Box_aaad266bb3fd47e0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'State': ['Texas', 'California', 'New York', 'Florida', 'Illinois', 'Ohio', 'Pennsylvania'],\n        'Unemployment Rate': [[5.9, 6.2, 6.5, 6.1, 5.7, 5.3, 5.5], \n                              [7.4, 7.6, 7.8, 7.5, 7.2, 7.0, 6.9],\n                              [6.4, 6.6, 6.9, 6.7, 6.4, 6.6, 7.0],\n                              [4.9, 5.1, 5.4, 5.2, 5.0, 5.1, 5.3],\n                              [7.7, 7.6, 7.5, 6.9, 7.4, 7.9, 8.2],\n                              [6.1, 6.3, 6.6, 6.4, 6.2, 6.5, 6.8],\n                              [6.3, 6.2, 5.9, 6.4, 6.9, 7.3, 7.6]]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Unemployment Rate'][i] for i in range(len(df))]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = df['State'].tolist(), \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF', '#FF0000', '#800080']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"State vs Unemployment Rate\")\nplt.xlabel(\"State\")\nplt.ylabel(\"Unemployment Rate\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df))], df['State'].tolist(), loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the z-order of the boxes that contain the center point of the bounding box to 4. Also, apply a shadow effect to this same portion with an offset of (3.51, 2.27), and make sure to adjust the transformation to the pixel coordinate system.",
        "Input_image": "./test_dataset/Box/Box_aaad266bb3fd47e0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\nimport random\n\n# Given data\ndata = {'State': ['Texas', 'California', 'New York', 'Florida', 'Illinois', 'Ohio', 'Pennsylvania'],\n        'Unemployment Rate': [[5.9, 6.2, 6.5, 6.1, 5.7, 5.3, 5.5], \n                              [7.4, 7.6, 7.8, 7.5, 7.2, 7.0, 6.9],\n                              [6.4, 6.6, 6.9, 6.7, 6.4, 6.6, 7.0],\n                              [4.9, 5.1, 5.4, 5.2, 5.0, 5.1, 5.3],\n                              [7.7, 7.6, 7.5, 6.9, 7.4, 7.9, 8.2],\n                              [6.1, 6.3, 6.6, 6.4, 6.2, 6.5, 6.8],\n                              [6.3, 6.2, 5.9, 6.4, 6.9, 7.3, 7.6]]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Unemployment Rate'][i] for i in range(len(df))]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = df['State'].tolist(), \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF', '#FF0000', '#800080']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"State vs Unemployment Rate\")\nplt.xlabel(\"State\")\nplt.ylabel(\"Unemployment Rate\")\n# Modifying the target object\nshadow_color = random.choice(['gray','gold'])\nfor idx in [1, 3]:  # Targeting 'California' and 'Florida'\n    bp['boxes'][idx].set_zorder(4)\n    effect = path_effects.withSimplePatchShadow(offset=(3.51, 2.27))\n    bp['boxes'][idx].set_path_effects([effect])\n    bp['boxes'][idx].set_transform(ax.transData)\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df))], df['State'].tolist(), loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Box/Box_aaad266bb3fd47e0/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_aaad266bb3fd47e0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_aaad266bb3fd47e0/myplot.png"
    },
    {
        "id": "Box_476d4b630e718840",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,\"Satellite Launches\",\"Space Missions\",\"Investment in Space Technology\"\n1990,100,5,1\n1995,50,10,1.5\n2000,150,15,2\n2005,120,20,3\n2010,75,25,2.5\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Satellite Launches'].values, df['Space Missions'].values, df['Investment in Space Technology'].values]\nlabels = ['Satellite Launches', 'Space Missions', 'Investment in Space Technology']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Investment, Satellite Launches and Space Missions Over The Years')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the label of the box that contains the center point of the bounding box to 'A new Label'. Additionally, adjust its transform to use the figure's coordinate system, focusing only on the portion at the center point.",
        "Input_image": "./test_dataset/Box/Box_476d4b630e718840/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,\"Satellite Launches\",\"Space Missions\",\"Investment in Space Technology\"\n1990,100,5,1\n1995,50,10,1.5\n2000,150,15,2\n2005,120,20,3\n2010,75,25,2.5\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Satellite Launches'].values, df['Space Missions'].values, df['Investment in Space Technology'].values]\nlabels = ['Satellite Launches', 'A new Label', 'Investment in Space Technology']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\nlabels[1] = 'A new Label'\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nlabels[1] = 'A new Label'\nbp['boxes'][1].set_transform(fig.transFigure)\n# Set title and labels\nax.set_title('Investment, Satellite Launches and Space Missions Over The Years')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n\n\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_476d4b630e718840/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_476d4b630e718840/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_476d4b630e718840/myplot.png"
    },
    {
        "id": "Box_afd1d6e53fd8bf5c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\n\"Architecture Type\",\"Year 2010\",\"Year 2020\"\n\"Modern Architecture\",500,250\n\"Gothic Architecture\",300,800\n\"Victorian Architecture\",700,350\n\"Romanesque Architecture\",200,600\n\"Baroque Architecture\",400,550\n\"Renaissance Architecture\",600,700\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Year 2010'].values, df['Year 2020'].values]\nlabels = ['Year 2010', 'Year 2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Architecture Popularity Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the face color of the box body that include the center point of the bounding box to #48064f, and also apply a 'dashed' linestyle to the same box's median line.",
        "Input_image": "./test_dataset/Box/Box_afd1d6e53fd8bf5c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\n\"Architecture Type\",\"Year 2010\",\"Year 2020\"\n\"Modern Architecture\",500,250\n\"Gothic Architecture\",300,800\n\"Victorian Architecture\",700,350\n\"Romanesque Architecture\",200,600\n\"Baroque Architecture\",400,550\n\"Renaissance Architecture\",600,700\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Year 2010'].values, df['Year 2020'].values]\nlabels = ['Year 2010', 'Year 2020']\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Modify the first box\nbp['boxes'][0].set_facecolor('#48064f')\nfor median in bp['medians']:\n    median.set_linestyle('dashed')\n\n# Set title and labels\nax.set_title('Architecture Popularity Over The Years')\nax.set_xlabel('Years')\nax.set_ylabel('Popularity')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_afd1d6e53fd8bf5c/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_afd1d6e53fd8bf5c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_afd1d6e53fd8bf5c/myplot.png"
    },
    {
        "id": "Box_fce6a4b1eea56f77",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = {\n    \"Refrigerator\": [10, 12, 10, 8, 9],\n    \"Air Conditioner\": [3, 5, 10, 2, 3],\n    \"Washing Machine\": [5, 7, 7, 6, 10],\n    \"Dishwasher\": [1, 1, 5, 1, 1],\n    \"Microwave\": [2, 3, 3, 5, 6]\n}\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(data.values(), patch_artist = True, notch = True, vert = 0, \n                labels = data.keys(), widths=0.5, sym='b+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels for axes\nax.set_xlabel(\"Appliance\")\nax.set_ylabel(\"Usage\")\nplt.title(\"Box Plot of Appliance Usage\")\n\n# Add a grid\nax.grid(True)\n\n# Change the background color\nax.set_facecolor('lightgray')\n\n# Annotate the data value on the chart figure\nfor line, value in zip(bp['medians'], data.values()):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{np.median(value)}', xy=(x, y))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the alpha transparency of the box body that contain the center point of the bounding box to 0.6602, and change its fill color to #2602c8. Also, set the border of the box to be solid with a width of 2.3 and a color of #58f761.",
        "Input_image": "./test_dataset/Box/Box_fce6a4b1eea56f77/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = {\n    \"Refrigerator\": [10, 12, 10, 8, 9],\n    \"Air Conditioner\": [3, 5, 10, 2, 3],\n    \"Washing Machine\": [5, 7, 7, 6, 10],\n    \"Dishwasher\": [1, 1, 5, 1, 1],\n    \"Microwave\": [2, 3, 3, 5, 6]\n}\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(data.values(), patch_artist = True, notch = True, vert = 0, \n                labels = data.keys(), widths=0.5, sym='b+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels for axes\nax.set_xlabel(\"Appliance\")\nax.set_ylabel(\"Usage\")\nplt.title(\"Box Plot of Appliance Usage\")\n\n# Add a grid\nax.grid(True)\n\n# Change the background color\nax.set_facecolor('lightgray')\n\n# Annotate the data value on the chart figure\nfor line, value in zip(bp['medians'], data.values()):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{np.median(value)}', xy=(x, y))\n\n# Modification part\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Assuming 'Refrigerator' is the first item\n        box.set_alpha(0.6602091499303866)\n        box.set_facecolor('#2602c8')\n        box.set_linestyle('solid')\n        box.set_linewidth(2.3)\n        box.set_edgecolor('#58f761')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_fce6a4b1eea56f77/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_fce6a4b1eea56f77/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_fce6a4b1eea56f77/myplot.png"
    },
    {
        "id": "Box_9c225791aad2976b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [\n    [25,30,35,70,75,30,20], # Rose\n    [40,30,20,10,50,60,70], # Sunflower\n    [60,50,40,30,80,90,100], # Fern\n    [20,30,40,80,85,40,30], # Dandelion\n    [100,90,80,70,150,140,130], # Orchid\n    [30,40,50,100,105,50,40], # Cactus\n    [70,60,50,40,90,100,110], # Lily\n    [50,60,70,80,85,90,40] # Oak\n]\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=0, whis=2, widths=0.4, sym='r+')\n\ncolors = ['#FF0000', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#FF00FF', '#808080', '#000000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nplt.title('Plant Growth Patterns')\nplt.xlabel('Growth Rate')\nplt.ylabel('Plant Species')\nplt.legend(['Rose', 'Sunflower', 'Fern', 'Dandelion', 'Orchid', 'Cactus', 'Lily', 'Oak'], loc='upper right')\n\nax.set_facecolor('#F0F0F0')\nplt.grid(linestyle='--')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add an outline to the boxes body that contain the center point of the bounding box with a linewidth of 0.98 and color '#6231dd', while keeping all other elements unchanged.",
        "Input_image": "./test_dataset/Box/Box_9c225791aad2976b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [\n    [25,30,35,70,75,30,20], # Rose\n    [40,30,20,10,50,60,70], # Sunflower\n    [60,50,40,30,80,90,100], # Fern\n    [20,30,40,80,85,40,30], # Dandelion\n    [100,90,80,70,150,140,130], # Orchid\n    [30,40,50,100,105,50,40], # Cactus\n    [70,60,50,40,90,100,110], # Lily\n    [50,60,70,80,85,90,40] # Oak\n]\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=0, whis=2, widths=0.4, sym='r+')\n\ncolors = ['#FF0000', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#FF00FF', '#808080', '#000000']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nfor idx, box in enumerate(bp['boxes']):\n    if idx in [0, 1, 2, 3, 4, 5, 6, 7]:\n        box.set_linestyle('-')\n        box.set_linewidth(0.98)\n        box.set_edgecolor('#6231dd')\n\nplt.title('Plant Growth Patterns')\nplt.xlabel('Growth Rate')\nplt.ylabel('Plant Species')\nplt.legend(['Rose', 'Sunflower', 'Fern', 'Dandelion', 'Orchid', 'Cactus', 'Lily', 'Oak'], loc='upper right')\n\nax.set_facecolor('#F0F0F0')\nplt.grid(linestyle='--')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0,1,2,3,4,5,6,7",
        "Test_image": "./test_dataset/Box/Box_9c225791aad2976b/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_9c225791aad2976b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_9c225791aad2976b/myplot.png"
    },
    {
        "id": "Box_62dd38dfe375edb8",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Input the given data\ndata = {\"Age Group\":[\"Under 18\",\"18-24\",\"25-34\",\"35-44\",\"45 and over\"],\n        \"Morning Viewers\":[100,80,70,60,50],\n        \"Afternoon Viewers\":[85,70,90,75,60],\n        \"Evening Viewers\":[90,110,105,95,80]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Creating box plot\nbp = ax.boxplot([df['Morning Viewers'], df['Afternoon Viewers'], df['Evening Viewers']], patch_artist = True,\n                notch = True, vert = 0, sym='r+', widths=0.3)\n\n# New color palette\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']  # Changed the color palette\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting labels\nax.set_yticklabels(['Morning Viewers', 'Afternoon Viewers', 'Evening Viewers'])\nax.set_xlabel('Viewers')\nax.set_ylabel('Time of Day')\n\n# Setting title\nplt.title(\"Viewer Distribution by Time of Day\")\n\n# Adding a legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Morning Viewers', 'Afternoon Viewers', 'Evening Viewers'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Annotate data values on the chart\nfor i,d in enumerate(df['Morning Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\nfor i,d in enumerate(df['Afternoon Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\nfor i,d in enumerate(df['Evening Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\n\n# Change the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Adjust layout to make sure everything fits\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Change the clipping state of the boxes that contain the center point of the bounding box to False. Also, apply a stroke to these boxes' whiskers,caps and medians with a linewidth of 3.0355 and a foreground color of #e34c13.",
        "Input_image": "./test_dataset/Box/Box_62dd38dfe375edb8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\n\n# Input the given data\ndata = {\"Age Group\":[\"Under 18\",\"18-24\",\"25-34\",\"35-44\",\"45 and over\"],\n        \"Morning Viewers\":[100,80,70,60,50],\n        \"Afternoon Viewers\":[85,70,90,75,60],\n        \"Evening Viewers\":[90,110,105,95,80]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Creating box plot\nbp = ax.boxplot([df['Morning Viewers'], df['Afternoon Viewers'], df['Evening Viewers']], patch_artist = True,\n                notch = True, vert = 0, sym='r+', widths=0.3)\n\n# New color palette\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']  # Changed the color palette\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting labels\nax.set_yticklabels(['Morning Viewers', 'Afternoon Viewers', 'Evening Viewers'])\nax.set_xlabel('Viewers')\nax.set_ylabel('Time of Day')\n\n# Setting title\nplt.title(\"Viewer Distribution by Time of Day\")\n\n# Adding a legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Morning Viewers', 'Afternoon Viewers', 'Evening Viewers'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Annotate data values on the chart\nfor i,d in enumerate(df['Morning Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\nfor i,d in enumerate(df['Afternoon Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\nfor i,d in enumerate(df['Evening Viewers']):\n    ax.text(i+1, d, str(d), ha='center')\n\n# Change the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Adjust layout to make sure everything fits\nplt.tight_layout()\n\n# Set the clipping state of the object corresponding to the Target_object to False and stroke effect\nstroke_effect = path_effects.withStroke(linewidth=3.035544313877835, foreground='#e34c13')\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Afternoon Viewers'\n        box.set_clip_on(False)\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n            whisker.set_path_effects([stroke_effect])\n        for cap in bp['caps'][2*idx:2*(idx+1)]:\n            cap.set_path_effects([stroke_effect])\n        bp['medians'][idx].set_path_effects([stroke_effect])\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_62dd38dfe375edb8/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_62dd38dfe375edb8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_62dd38dfe375edb8/myplot.png"
    },
    {
        "id": "Box_41a9c56f5e5a2ecc",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# CSV data in a dictionary\ndata_dict = {\"Service\": [\"Online Shopping\", \"Digital Payment\", \"Streaming Services\", \"Cloud Storage\"],\n             \"Usage\": [80, 60, 100, 120]}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data_dict)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create a box plot\nbp = ax.boxplot(df['Usage'], patch_artist = True, notch = True, vert = 0, widths = 0.5, sym = 'r+')\n\n# Change the face color of the box to light green\nbp['boxes'][0].set_facecolor('#90ee90')\n\n# Set the background color of the chart\nax.set_facecolor('lightgray')\n\n# Add a grid\nax.grid(True)\n\n# Set the title and labels\nax.set_title('Usage of Different Services')\nax.set_xlabel('Service')\nax.set_ylabel('Usage')\n\n# Annotate data value on the chart\nfor i, v in enumerate(df['Usage']):\n    ax.text(v + 3, i + 1, str(v), color='blue', fontweight='bold')\n\n# Add a legend\nax.legend([bp[\"boxes\"][0]], ['Usage'], loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Set the animated state of the box that contain the center point of the bounding box to True. Also, update the color of all the lines for the box to #9364eb.",
        "Input_image": "./test_dataset/Box/Box_41a9c56f5e5a2ecc/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# CSV data in a dictionary\ndata_dict = {\"Service\": [\"Online Shopping\", \"Digital Payment\", \"Streaming Services\", \"Cloud Storage\"],\n             \"Usage\": [80, 60, 100, 120]}\n\n# Convert dictionary to dataframe\ndf = pd.DataFrame(data_dict)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Create a box plot\nbp = ax.boxplot(df['Usage'], patch_artist = True, notch = True, vert = 0, widths = 0.5, sym = 'r+')\n\n# Change the face color of the box to light green\nbp['boxes'][0].set_facecolor('#90ee90')\n\n# Set the background color of the chart\nax.set_facecolor('lightgray')\n\n# Add a grid\nax.grid(True)\n\n# Set the title and labels\nax.set_title('Usage of Different Services')\nax.set_xlabel('Service')\nax.set_ylabel('Usage')\n\n# Annotate data value on the chart\nfor i, v in enumerate(df['Usage']):\n    ax.text(v + 3, i + 1, str(v), color='blue', fontweight='bold')\n\n# Set the animated state of the object corresponding to the Target_object to True and set the line color to #9364eb\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting the first box\n        box.set_animated(True)\n        box.set_edgecolor('#9364eb')\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n            whisker.set_color('#9364eb')\n        for cap in bp['caps'][2*idx:2*(idx+1)]:\n            cap.set_color('#9364eb')\n        for median in bp['medians'][idx:idx+1]:\n            median.set_color('#9364eb')\n        for flier in bp['fliers'][idx:idx+1]:\n            flier.set_color('#9364eb')\n# Add a legend\nax.legend([bp[\"boxes\"][0]], ['Usage'], loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_41a9c56f5e5a2ecc/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_41a9c56f5e5a2ecc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_41a9c56f5e5a2ecc/myplot.png"
    },
    {
        "id": "Box_e13894924222ea98",
        "Input_code": "import matplotlib.pyplot as plt\n\nrobot_distances = [\n    [250, 275, 300, 325, 350, 375, 400],\n    [200, 225, 250, 275, 300, 325, 350],\n    [180, 200, 220, 240, 260, 280, 300],\n    [300, 320, 340, 360, 380, 400, 420],\n    [150, 175, 200, 225, 250, 275, 300]\n]\n\nplt.figure(figsize=(10, 6))\nplt.boxplot(robot_distances, labels=[\"Robot 1\", \"Robot 2\", \"Robot 3\", \"Robot 4\", \"Robot 5\"])\nplt.xlabel('Robots')\nplt.ylabel('Distance Traveled (m)')\nplt.title('Box Plot of Robot Swarm Movement Analysis')\n#plt.savefig('figure.png')\nplt.savefig('figure.png')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Assign different colors to the boxes that contain the center point of the bounding box: use #28fbdc for the box body, #0295b6 for the median, and #725ca3 for the whiskers.",
        "Input_image": "./test_dataset/Box/Box_e13894924222ea98/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nrobot_distances = [\n    [250, 275, 300, 325, 350, 375, 400],\n    [200, 225, 250, 275, 300, 325, 350],\n    [180, 200, 220, 240, 260, 280, 300],\n    [300, 320, 340, 360, 380, 400, 420],\n    [150, 175, 200, 225, 250, 275, 300]\n]\n\nplt.figure(figsize=(10, 6))\nbp = plt.boxplot(robot_distances, labels=[\"Robot 1\", \"Robot 2\", \"Robot 3\", \"Robot 4\", \"Robot 5\"])\nplt.xlabel('Robots')\nplt.ylabel('Distance Traveled (m)')\nplt.title('Box Plot of Robot Swarm Movement Analysis')\n\n# Modify the box, median, and whiskers for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 2:  # Target_object: Robot 3\n        box.set_color('#28fbdc')\n        bp['medians'][idx].set_color('#0295b6')\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n            whisker.set_color('#725ca3')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Box/Box_e13894924222ea98/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_e13894924222ea98/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_e13894924222ea98/figure.png"
    },
    {
        "id": "Box_9c72907e3360674f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Stock Indices': ['Dow Jones', 'S&P 500', 'Nasdaq', 'FTSE 100'],\n        'Week 1': [25000, 3000, 7500, 7000],\n        'Week 2': [24000, 3200, 7400, 7100],\n        'Week 3': [23500, 3100, 7800, 7200],\n        'Week 4': [26000, 2700, 7300, 6800]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Week 1'], df['Week 2'], df['Week 3'], df['Week 4']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Weekly Stock Indices\")\nplt.xlabel(\"Weeks\")\nplt.ylabel(\"Stock Indices\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2], bp[\"boxes\"][3]], ['Week 1', 'Week 2', 'Week 3', 'Week 4'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change all of the lines' color of the box that contains the center point of the bounding box to #432226. Set the z-order of this box to 20. Also, set a line shadow effect to the box with an offset of (3.00, 2.67) and choose a shadow color 'gray'.",
        "Input_image": "./test_dataset/Box/Box_9c72907e3360674f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\nimport random\n\n# Given data\ndata = {'Stock Indices': ['Dow Jones', 'S&P 500', 'Nasdaq', 'FTSE 100'],\n        'Week 1': [25000, 3000, 7500, 7000],\n        'Week 2': [24000, 3200, 7400, 7100],\n        'Week 3': [23500, 3100, 7800, 7200],\n        'Week 4': [26000, 2700, 7300, 6800]}\n\ndf = pd.DataFrame(data)\n\n# Prepare data for box plot\nplot_data = [df['Week 1'], df['Week 2'], df['Week 3'], df['Week 4']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Weekly Stock Indices\")\nplt.xlabel(\"Weeks\")\nplt.ylabel(\"Stock Indices\")\n\n# Modifying the target object\n\nfor idx,line in enumerate(bp['medians']):\n    if idx==1:\n        line.set_color('#432226')\nfor idx,line in enumerate(bp['whiskers']):\n    if idx in [1*2]+[1*2+1]:\n        line.set_color('#432226')\nfor idx,line in enumerate(bp['caps']):\n    if idx in [1*2]+[1*2+1]:\n        line.set_color('#432226')\nfor idx,line in enumerate(bp['fliers']):\n    if idx in [1*2]+[1*2+1]:\n        line.set_color('#432226')\nbp['boxes'][1].set_zorder(20)\nbp['boxes'][1].set_edgecolor('#432226')\nshadow_color = 'gray'\nshadow_effect = path_effects.SimpleLineShadow(offset=(3.00, 2.67), shadow_color=shadow_color)\nbp['boxes'][1].set_path_effects([shadow_effect,path_effects.Normal()])\n\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2], bp[\"boxes\"][3]], ['Week 1', 'Week 2', 'Week 3', 'Week 4'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_9c72907e3360674f/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_9c72907e3360674f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_9c72907e3360674f/myplot.png"
    },
    {
        "id": "Box_3404bc436c292511",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {'Country': ['USA', 'China', 'India', 'Brazil', 'Australia'],\n        'Year 1': [100, 150, 120, 200, 80],\n        'Year 2': [200, 160, 140, 210, 70],\n        'Year 3': [170, 320, 120, 160, 150]\n       }\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Year 1'], df['Year 2'], df['Year 3']], patch_artist=True,\n                notch=True, vert=0, widths=0.5, labels=['Year 1', 'Year 2', 'Year 3'],\n                flierprops={'marker':'o', 'markerfacecolor':'red', 'markersize':12,\n                            'linestyle':'none', 'markeredgecolor':'black'}\n               )\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate data values\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{y:.1f}', (i+1.1, y), ha='center', va='center')\n\nax.set_title('Box plot of Yearly Data')\nax.set_xlabel('Years')\nax.set_ylabel('Data Value')\nax.legend([bp[\"boxes\"][0]], ['Data'], loc='upper right')\nax.grid(True)\nax.set_facecolor('#f5f5f5')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterized state of the box body that contains the center point of the bounding box to True. For the same box, also set the snap state to False.",
        "Input_image": "./test_dataset/Box/Box_3404bc436c292511/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {'Country': ['USA', 'China', 'India', 'Brazil', 'Australia'],\n        'Year 1': [100, 150, 120, 200, 80],\n        'Year 2': [200, 160, 140, 210, 70],\n        'Year 3': [170, 320, 120, 160, 150]\n       }\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot([df['Year 1'], df['Year 2'], df['Year 3']], patch_artist=True,\n                notch=True, vert=0, widths=0.5, labels=['Year 1', 'Year 2', 'Year 3'],\n                flierprops={'marker':'o', 'markerfacecolor':'red', 'markersize':12,\n                            'linestyle':'none', 'markeredgecolor':'black'}\n               )\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate data values\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{y:.1f}', (i+1.1, y), ha='center', va='center')\n\n# Set the rasterized state and snap state for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Year 2'\n        box.set_rasterized(True)\n        box.set_snap(False)\n\nax.set_title('Box plot of Yearly Data')\nax.set_xlabel('Years')\nax.set_ylabel('Data Value')\nax.legend([bp[\"boxes\"][0]], ['Data'], loc='upper right')\nax.grid(True)\nax.set_facecolor('#f5f5f5')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_3404bc436c292511/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_3404bc436c292511/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_3404bc436c292511/myplot.png"
    },
    {
        "id": "Box_9d051d3e5cb284dc",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\ndata_string = StringIO(\"\"\"\nPlatform,Year 1,Year 2,Year 3,Year 4,Year 5,Year 6,Year 7,Year 8,Year 9\nFacebook,5000,5500,3000,3500,4000,6000,6500,3000,3500\nTwitter,3000,3500,4000,3000,2500,2000,1500,1000,500\nInstagram,2000,4500,5000,5500,5000,4500,4000,8500,8000\nSnapchat,1000,2000,3000,2000,1000,800,600,400,200\nLinkedIn,2000,2500,3000,3500,4000,4500,5000,5500,6000\n\"\"\")\ndata_df = pd.read_csv(data_string)\n\ndata = [data_df[col].values for col in data_df.columns if col != 'Platform']\n\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data, patch_artist = True,\n                notch = True, vert = 0, widths = 0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(data_df.columns[1:])\nax.set_xlabel('Popularity')\nax.set_ylabel('Years')\nax.set_title('Popularity of Social Media Platforms Over 9 Years')\n\nfor i in range(len(data_df.columns[1:])):\n    ax.text(data[i].mean(), i+1, f'{data[i].mean():.2f}', horizontalalignment='center', verticalalignment='center')\n\nax.set_facecolor('lightgray')\nax.grid(True)\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Update the linewidth of the boxes' bodies that contain the center point of the bounding box to 0.58. Also, ensure that the snap state of these boxes is set to True.",
        "Input_image": "./test_dataset/Box/Box_9d051d3e5cb284dc/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom io import StringIO\n\ndata_string = StringIO(\"\"\"\nPlatform,Year 1,Year 2,Year 3,Year 4,Year 5,Year 6,Year 7,Year 8,Year 9\nFacebook,5000,5500,3000,3500,4000,6000,6500,3000,3500\nTwitter,3000,3500,4000,3000,2500,2000,1500,1000,500\nInstagram,2000,4500,5000,5500,5000,4500,4000,8500,8000\nSnapchat,1000,2000,3000,2000,1000,800,600,400,200\nLinkedIn,2000,2500,3000,3500,4000,4500,5000,5500,6000\n\"\"\")\ndata_df = pd.read_csv(data_string)\n\ndata = [data_df[col].values for col in data_df.columns if col != 'Platform']\n\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(data, patch_artist = True,\n                notch = True, vert = 0, widths = 0.5)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n# Modifying the linewidth and snap state for the target objects\nfor idx in [1, 3]:  # Targeting Twitter and Snapchat\n    bp['boxes'][idx].set_linewidth(0.58)\n    bp['boxes'][idx].set_snap(True)\nax.set_yticklabels(data_df.columns[1:])\nax.set_xlabel('Popularity')\nax.set_ylabel('Years')\nax.set_title('Popularity of Social Media Platforms Over 9 Years')\n\nfor i in range(len(data_df.columns[1:])):\n    ax.text(data[i].mean(), i+1, f'{data[i].mean():.2f}', horizontalalignment='center', verticalalignment='center')\n\nax.set_facecolor('lightgray')\nax.grid(True)\n\n\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Box/Box_9d051d3e5cb284dc/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_9d051d3e5cb284dc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_9d051d3e5cb284dc/myplot.png"
    },
    {
        "id": "Box_051406c01b7ac4aa",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\nax.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Update the linewidth of the box's body that contain the center point of the bounding box to 1.14, and set their z-order to 3. Also, set a shadow effect to these boxes with an offset of (3.30, 3.42), using a randomly chosen shadow color from  'gold'.",
        "Input_image": "./test_dataset/Box/Box_051406c01b7ac4aa/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\nimport random\n\ndata = {'Demographics': ['Young Adults', 'Middle Aged', 'Seniors', 'Teens'],\n        'Recycling Habits': [[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20], \n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50], \n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]]\n       }\n\ndf = pd.DataFrame(data, columns=['Demographics', 'Recycling Habits'])\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\nbp = ax.boxplot(df['Recycling Habits'], patch_artist = True, notch = True, vert = 0, widths=0.7, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Middle Aged'\n        box.set_linewidth(1.14)\n        box.set_zorder(3)\n        shadow_color = 'gold'\n        shadow = path_effects.SimpleLineShadow(offset=(3.30,3.42), shadow_color=shadow_color)\n        box.set_path_effects([shadow,path_effects.Normal()])\n\nax.set_yticklabels(df['Demographics'])\nax.set_xlabel('Recycling Habits')\nax.set_title('Boxplot of Recycling Habits by Demographics')\nax.grid(True)\nax.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_051406c01b7ac4aa/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_051406c01b7ac4aa/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_051406c01b7ac4aa/myplot.png"
    },
    {
        "id": "Box_bd981f418d84e227",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Compact Cars,SUVs,Trucks\n2010,1000,1200,1400\n2011,1200,1100,1300\n2012,1400,1000,1200\n2013,1600,1400,1100\n2014,1800,1600,1000\n2015,2000,1800,1300\n2016,1600,2000,1500\n2017,1700,1500,1600\n2018,1900,1300,1400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Compact Cars'].values, df['SUVs'].values, df['Trucks'].values]\nlabels = ['Compact Cars', 'SUVs', 'Trucks']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the transparency of the boxes that contain the center point of the bounding box to 0.88. For the same boxes, apply a stroke with a linewidth of 4.84 and a foreground color of #c6171d for the box body.",
        "Input_image": "./test_dataset/Box/Box_bd981f418d84e227/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\n\n# Data\ndata = StringIO(\"\"\"\nYear,Compact Cars,SUVs,Trucks\n2010,1000,1200,1400\n2011,1200,1100,1300\n2012,1400,1000,1200\n2013,1600,1400,1100\n2014,1800,1600,1000\n2015,2000,1800,1300\n2016,1600,2000,1500\n2017,1700,1500,1600\n2018,1900,1300,1400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Compact Cars'].values, df['SUVs'].values, df['Trucks'].values]\nlabels = ['Compact Cars', 'SUVs', 'Trucks']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set transparency and stroke effect for the target object\nstroke_effect = path_effects.withStroke(linewidth=4.842183326482834, foreground='#c6171d')\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'SUVs'\n        patch.set_alpha(0.88)\n        patch.set_path_effects([stroke_effect])\n\n# Set title and labels\nax.set_title('Vehicle Sales Over The Years')\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Sales')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_bd981f418d84e227/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_bd981f418d84e227/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_bd981f418d84e227/myplot.png"
    },
    {
        "id": "Box_93fa4c9511a0d235",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nYear,Climate Change Effects,Greenhouse Gas Emissions,Global Average Temperature\n2000,0.4,1.2,0.6\n2001,0.5,1.1,0.65\n2002,0.55,0.9,0.7\n2003,0.6,0.5,0.75\n2004,0.65,0.4,0.8\n2005,0.7,0.3,0.85\n2006,0.75,0.2,0.9\n2007,2.0,1.5,1.0\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Climate Change Effects'].values, df['Greenhouse Gas Emissions'].values, df['Global Average Temperature'].values]\nlabels = ['Climate Change Effects', 'Greenhouse Gas Emissions', 'Global Average Temperature']\n# Updated color scheme to pastel\ncolors = ['#92c6ff', '#97f0aa', '#ff9f9a']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Climate Change Indicators Over The Years')\nax.set_xlabel('Indicators')\nax.set_ylabel('Values')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot_pastel.png\")",
        "Instruction": "Set the picker state of the boxes that contain the center point of the bounding box to True. For those same boxes, change its z-order to 7 and add a shadow effect with an offset of (3.31, 2.81).",
        "Input_image": "./test_dataset/Box/Box_93fa4c9511a0d235/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom matplotlib.patheffects import withSimplePatchShadow\n# Data\ndata = StringIO(\"\"\"\nYear,Climate Change Effects,Greenhouse Gas Emissions,Global Average Temperature\n2000,0.4,1.2,0.6\n2001,0.5,1.1,0.65\n2002,0.55,0.9,0.7\n2003,0.6,0.5,0.75\n2004,0.65,0.4,0.8\n2005,0.7,0.3,0.85\n2006,0.75,0.2,0.9\n2007,2.0,1.5,1.0\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Climate Change Effects'].values, df['Greenhouse Gas Emissions'].values, df['Global Average Temperature'].values]\nlabels = ['Climate Change Effects', 'Greenhouse Gas Emissions', 'Global Average Temperature']\n# Updated color scheme to pastel\ncolors = ['#92c6ff', '#97f0aa', '#ff9f9a']\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Create an axes instance\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Climate Change Indicators Over The Years')\nax.set_xlabel('Indicators')\nax.set_ylabel('Values')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Modify the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Greenhouse Gas Emissions'\n        box.set_picker(True)\n        box.set_zorder(7)\n        box.set_path_effects([withSimplePatchShadow(offset=(3.31, 2.81))])\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_93fa4c9511a0d235/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_93fa4c9511a0d235/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_93fa4c9511a0d235/myplot_pastel.png"
    },
    {
        "id": "Box_0bac6f8cc2330d46",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = '''Year,Childhood Obesity,Adult Obesity,Senior Obesity\n2010,20,35,30\n2011,22,37,34\n2012,30,45,40\n2013,35,55,50\n2014,30,45,40\n2015,32,47,42\n2016,35,52,47\n2017,40,57,52\n2018,35,52,47\n2019,45,62,57\n2020,40,57,52\n2021,50,67,62'''\n\n# Read data into DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df['Childhood Obesity'], df['Adult Obesity'], df['Senior Obesity']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Childhood Obesity', 'Adult Obesity', 'Senior Obesity'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nax.set_title(\"Obesity Trends Over the Years\")\nax.set_xlabel(\"Age Group\")\nax.set_ylabel(\"Obesity Percentage (%)\")\n\n# Adding legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Childhood Obesity', 'Adult Obesity', 'Senior Obesity'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the box that contains the center point of the bounding box to True. Additionally, for the same box, adjust its transformation to align with the data coordinate system.",
        "Input_image": "./test_dataset/Box/Box_0bac6f8cc2330d46/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = '''Year,Childhood Obesity,Adult Obesity,Senior Obesity\n2010,20,35,30\n2011,22,37,34\n2012,30,45,40\n2013,35,55,50\n2014,30,45,40\n2015,32,47,42\n2016,35,52,47\n2017,40,57,52\n2018,35,52,47\n2019,45,62,57\n2020,40,57,52\n2021,50,67,62'''\n\n# Read data into DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df['Childhood Obesity'], df['Adult Obesity'], df['Senior Obesity']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['Childhood Obesity', 'Adult Obesity', 'Senior Obesity'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nax.set_title(\"Obesity Trends Over the Years\")\nax.set_xlabel(\"Age Group\")\nax.set_ylabel(\"Obesity Percentage (%)\")\n\n# Adding legend\nax.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['Childhood Obesity', 'Adult Obesity', 'Senior Obesity'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\n# Set the clipping state and transform of the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Adult Obesity'\n        box.set_clip_on(True)\n        box.set_transform(ax.transData)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_0bac6f8cc2330d46/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_0bac6f8cc2330d46/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_0bac6f8cc2330d46/myplot.png"
    },
    {
        "id": "Box_b146d30215cc9e58",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"City, Crime Rate 1, Crime Rate 2, Crime Rate 3, Crime Rate 4, Crime Rate 5\nNew York, 20, 22, 24, 50, 25\nLos Angeles, 18, 17, 16, 35, 15\nChicago, 28, 27, 25, 25, 27\nHouston, 15, 20, 35, 20, 15\nPhoenix, 10, 15, 10, 15, 5\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df[col] for col in df.columns if col != \"City\"]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 1,\n                labels = df.columns[1:],\n                sym = \"go\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF', '#FFFF00', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"City vs Crime Rate\")\nplt.xlabel(\"City\")\nplt.ylabel(\"Crime Rate\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df.columns[1:]))], df.columns[1:], loc='upper right')\n\n# Remove grid lines\nplt.grid(False)  # This line is changed to remove the grid lines\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # This line is changed to set the facecolor to white\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the label of the box that contains the center point of the bounding box to 'A new Label'. ",
        "Input_image": "./test_dataset/Box/Box_b146d30215cc9e58/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"City, Crime Rate 1, Crime Rate 2, Crime Rate 3, Crime Rate 4, Crime Rate 5\nNew York, 20, 22, 24, 50, 25\nLos Angeles, 18, 17, 16, 35, 15\nChicago, 28, 27, 25, 25, 27\nHouston, 15, 20, 35, 20, 15\nPhoenix, 10, 15, 10, 15, 5\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Prepare data for box plot\nplot_data = [df[col] for col in df.columns if col != \"City\"]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 1,\n                labels = [df.columns[idx+1] if idx!=1 else 'A new Label' for idx in range(len(df))],\n                sym = \"go\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FF00FF', '#FFFF00', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"City vs Crime Rate\")\nplt.xlabel(\"City\")\nplt.ylabel(\"Crime Rate\")\n# Modify the label and picker state of the target object\n\n# Adding legend\nplt.legend([bp[\"boxes\"][i] for i in range(len(df.columns[1:]))], df.columns[1:], loc='upper right')\n\n# Remove grid lines\nplt.grid(False)  # This line is changed to remove the grid lines\n\n# Change the facecolor of the figure to white\nfig.patch.set_facecolor('white')  # This line is changed to set the facecolor to white\n\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_b146d30215cc9e58/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_b146d30215cc9e58/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_b146d30215cc9e58/myplot.png"
    },
    {
        "id": "Box_b31e324a66e7f98f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,2010,2020\nHorror,100,180\nComedy,200,170\nDrama,150,300\n\"\"\")\n\ndf = pd.DataFrame(pd.read_csv(data))\n\n# Prepare data for box plot\nplot_data = [df['2010'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2010', '2020'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Genre vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Genre\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['2010', '2020'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the line color of the box body that contain the center point of the bounding box to #f15eb9. Additionally, enable the picker state for those same boxes by setting it to True.",
        "Input_image": "./test_dataset/Box/Box_b31e324a66e7f98f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,2010,2020\nHorror,100,180\nComedy,200,170\nDrama,150,300\n\"\"\")\n\ndf = pd.DataFrame(pd.read_csv(data))\n\n# Prepare data for box plot\nplot_data = [df['2010'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2010', '2020'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Genre vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Genre\")\n# Modifying the line color and picker state for the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  # Targeting the first box\n        box.set_edgecolor('#f15eb9')\n        box.set_picker(True)\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['2010', '2020'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_b31e324a66e7f98f/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_b31e324a66e7f98f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_b31e324a66e7f98f/myplot.png"
    },
    {
        "id": "Box_9a106934a7d39c83",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# create the data\ndata = {\n    \"Household Type\": [\"Single Person Household\", \"Two-Person Household\", \"Three-Person Household\", \n                       \"Four-Person Household\", \"Five-Person Household\", \n                       \"Six or More Person Household\", \"Average Household\"],\n    \"Food Waste (2019)\": [450, 1000, 700, 800, 500, 1100, 720],\n    \"Food Waste (2020)\": [550, 1100, 800, 600, 700, 1300, 790]\n}\n\n# convert the data to DataFrame\ndf = pd.DataFrame(data)\n\n# set the figure size and create the box plots\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot([df[\"Food Waste (2019)\"], df[\"Food Waste (2020)\"]], patch_artist=True, notch=True, vert=0, widths=0.5)\n\n# add special values\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# set the x-axis and y-axis labels\nax.set_xlabel('Year')\nax.set_ylabel('Food Waste')\n\n# set the title\nax.set_title('Comparison of Food Waste between 2019 and 2020')\n\n# add legend\nax.legend([\"Food Waste (2019)\", \"Food Waste (2020)\"])\n\n# add grid\nax.grid(True)\n\n# set the background color\nax.set_facecolor('lightgray')\n\n# annotate the data value\nfor i, val in enumerate(df[\"Food Waste (2019)\"]):\n    ax.text(1, i, val, ha='center')\nfor i, val in enumerate(df[\"Food Waste (2020)\"]):\n    ax.text(2, i, val, ha='center')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Assign distinct colors to the box that contain the center point of the bounding box: use #343323 for the box body, #676f85 for the median, and #06755b for the whiskers.",
        "Input_image": "./test_dataset/Box/Box_9a106934a7d39c83/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# create the data\ndata = {\n    \"Household Type\": [\"Single Person Household\", \"Two-Person Household\", \"Three-Person Household\", \n                       \"Four-Person Household\", \"Five-Person Household\", \n                       \"Six or More Person Household\", \"Average Household\"],\n    \"Food Waste (2019)\": [450, 1000, 700, 800, 500, 1100, 720],\n    \"Food Waste (2020)\": [550, 1100, 800, 600, 700, 1300, 790]\n}\n\n# convert the data to DataFrame\ndf = pd.DataFrame(data)\n\n# set the figure size and create the box plots\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot([df[\"Food Waste (2019)\"], df[\"Food Waste (2020)\"]], patch_artist=True, notch=True, vert=0, widths=0.5)\n\n# add special values\ncolors = ['#0000FF', '#00FF00']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# set the x-axis and y-axis labels\nax.set_xlabel('Year')\nax.set_ylabel('Food Waste')\n\n# set the title\nax.set_title('Comparison of Food Waste between 2019 and 2020')\n\n# add legend\nax.legend([\"Food Waste (2019)\", \"Food Waste (2020)\"])\n\n# add grid\nax.grid(True)\n\n# set the background color\nax.set_facecolor('lightgray')\n\n# annotate the data value\nfor i, val in enumerate(df[\"Food Waste (2019)\"]):\n    ax.text(1, i, val, ha='center')\nfor i, val in enumerate(df[\"Food Waste (2020)\"]):\n    ax.text(2, i, val, ha='center')\n\n# Customize the boxes for the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if idx == 1:  # Assuming the target is the second box (2020)\n        patch.set_facecolor('#343323')\n        bp['medians'][idx].set_color('#676f85')\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n            whisker.set_color('#06755b')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_9a106934a7d39c83/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_9a106934a7d39c83/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_9a106934a7d39c83/myplot.png"
    },
    {
        "id": "Box_1cc3492a1087f671",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nYear,Software Sales,Software Use\n2016,10000,20000\n2017,12000,18000\n2018,14000,15000\n2019,10000,10000\n2020,12000,20000\n2021,16000,25000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Software Sales'].values, df['Software Use'].values]\nlabels = ['Software Sales', 'Software Use']\ncolors = ['#1f77b4', '#2ca02c']  # Change color for 'Software Sales' to blue and 'Software Use' to green\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color of the figure\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set title and labels\nax.set_title('Software Sales and Use Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the fill pattern of the boxes that contain the center point of the bounding box to a horizontal hatch design with a density of 'x'.",
        "Input_image": "./test_dataset/Box/Box_1cc3492a1087f671/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nYear,Software Sales,Software Use\n2016,10000,20000\n2017,12000,18000\n2018,14000,15000\n2019,10000,10000\n2020,12000,20000\n2021,16000,25000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Preprocessing\ndata = [df['Software Sales'].values, df['Software Use'].values]\nlabels = ['Software Sales', 'Software Use']\ncolors = ['#1f77b4', '#2ca02c']  # Change color for 'Software Sales' to blue and 'Software Use' to green\n\n# Create a figure instance\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the background color of the figure\nax.set_facecolor('#f0f0f0')\n\n# Create the boxplot with customization\nbp = ax.boxplot(data, patch_artist=True, notch=True, vert=True, widths=0.5, labels=labels, sym=\".\")\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set fill pattern for the target object\nfor idx, patch in enumerate(bp['boxes']):\n    if labels[idx] == labels[1]:  # Assuming 'Software Use' is the target\n        patch.set_hatch('x')\n\n# Set title and labels\nax.set_title('Software Sales and Use Over The Years')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add grid\nax.grid(True)\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], labels, loc='upper right')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_1cc3492a1087f671/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_1cc3492a1087f671/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_1cc3492a1087f671/myplot.png"
    },
    {
        "id": "Box_1ae6f5f3223444c4",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {\n    '18-24 years': [500, 550, 600, 580, 560, 590, 630, 650, 680, 670, 630, 660],\n    '25-34 years': [800, 850, 870, 900, 950, 930, 910, 920, 940, 980, 1000, 970],\n    '35-44 years': [400, 420, 430, 380, 410, 410, 390, 400, 380, 360, 370, 380],\n    '45-54 years': [250, 240, 260, 280, 290, 300, 310, 320, 310, 290, 280, 300],\n    '55+ years': [150, 140, 130, 140, 160, 170, 180, 190, 200, 210, 220, 230]\n}\n\n# DataFrame\ndf = pd.DataFrame(data)\n\n# Box Plot\nplt.figure(figsize=(10, 5))\nplt.boxplot([df[c] for c in df], labels=[c for c in df])\nplt.title('Trends in Online Dating Behavior Among Different Age Groups During the COVID-19 Pandemic')\nplt.xlabel('Age Group')\nplt.ylabel('Number of Online Dating App Downloads per Month')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Assign unique colors to the box that contains the center point of the bounding box: use #288a4b for the box body, #fc54cc for the median, and #ae9e5a for the whiskers.",
        "Input_image": "./test_dataset/Box/Box_1ae6f5f3223444c4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {\n    '18-24 years': [500, 550, 600, 580, 560, 590, 630, 650, 680, 670, 630, 660],\n    '25-34 years': [800, 850, 870, 900, 950, 930, 910, 920, 940, 980, 1000, 970],\n    '35-44 years': [400, 420, 430, 380, 410, 410, 390, 400, 380, 360, 370, 380],\n    '45-54 years': [250, 240, 260, 280, 290, 300, 310, 320, 310, 290, 280, 300],\n    '55+ years': [150, 140, 130, 140, 160, 170, 180, 190, 200, 210, 220, 230]\n}\n\n# DataFrame\ndf = pd.DataFrame(data)\n\n# Box Plot\nplt.figure(figsize=(10, 5))\nbp = plt.boxplot([df[c] for c in df], labels=[c for c in df])\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 2:  # Targeting '35-44 years'\n        box.set_color('#288a4b')\n        bp['medians'][idx].set_color('#fc54cc')\n        for whisker in bp['whiskers'][2*idx:2*(idx+1)]:\n            whisker.set_color('#ae9e5a')\nplt.title('Trends in Online Dating Behavior Among Different Age Groups During the COVID-19 Pandemic')\nplt.xlabel('Age Group')\nplt.ylabel('Number of Online Dating App Downloads per Month')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Box/Box_1ae6f5f3223444c4/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_1ae6f5f3223444c4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_1ae6f5f3223444c4/figure.png"
    },
    {
        "id": "Box_b504289473b22c08",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\n\"Diet Type\",\"2010\",\"2015\",\"2020\"\n\"Vegetarian\",10,15,9\n\"Vegan\",5,10,8\n\"Paleo\",20,35,20\n\"Keto\",5,15,5\n\"\"\")\ndf = pd.read_csv(data, quotechar='\"')\n\n# Prepare data for box plot\nplot_data = [df['2010'], df['2015'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2010', '2015', '2020'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Diet Type vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Diet Type\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2010', '2015', '2020'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the snap state of the box that contains the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Box/Box_b504289473b22c08/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\n\"Diet Type\",\"2010\",\"2015\",\"2020\"\n\"Vegetarian\",10,15,9\n\"Vegan\",5,10,8\n\"Paleo\",20,35,20\n\"Keto\",5,15,5\n\"\"\")\ndf = pd.read_csv(data, quotechar='\"')\n\n# Prepare data for box plot\nplot_data = [df['2010'], df['2015'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2010', '2015', '2020'], \n                sym = \"ro\", widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Diet Type vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Diet Type\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1], bp[\"boxes\"][2]], ['2010', '2015', '2020'], loc='upper right')\n\n# Adding grid\nplt.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\n# Set the snap state of the object corresponding to the Target_object to True\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting '2015'\n        box.set_snap(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_b504289473b22c08/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_b504289473b22c08/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_b504289473b22c08/myplot.png"
    },
    {
        "id": "Box_e7fafc1b8f74af14",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create a pandas DataFrame from the given csv data.\ndata = pd.DataFrame({\n    \"Meat Type\": [\"Beef\", \"Poultry\", \"Pork\", \"Fish\", \"Lamb\"],\n    \"2000\": [50, 30, 70, 40, 10],\n    \"2005\": [55, 35, 75, 50, 12],\n    \"2010\": [52, 37, 80, 60, 14],\n    \"2015\": [54, 40, 78, 45, 16],\n    \"2020\": [60, 80, 79, 48, 30]\n})\n\n# Transpose the DataFrame and convert meat types to columns\ndata.set_index('Meat Type', inplace=True)\ndata = data.T\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist = True,\n                notch = True, vert = 0,\n                sym='r+', widths=0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate data value on the chart figure\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{y}', (x, y))\n\n# Set labels\nax.set_xlabel('Meat Types')\nax.set_ylabel('Amount')\n\n# Set title\nax.set_title('Meat Consumption Over Years')\n\n# Add grids on the background\nax.grid(True)\n\n# Change the background the chart figure\nax.set_facecolor('#f0f0f0')\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], data.columns, loc='upper right')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Add a dashed outline to the boxes bodies that contain the center point of the bounding box, with a linewidth of 1.62 and the color '#02b08b'. Additionally, set the transparency (alpha) of these boxes to 0.7958, and fill them with a horizontal hatch pattern.",
        "Input_image": "./test_dataset/Box/Box_e7fafc1b8f74af14/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create a pandas DataFrame from the given csv data.\ndata = pd.DataFrame({\n    \"Meat Type\": [\"Beef\", \"Poultry\", \"Pork\", \"Fish\", \"Lamb\"],\n    \"2000\": [50, 30, 70, 40, 10],\n    \"2005\": [55, 35, 75, 50, 12],\n    \"2010\": [52, 37, 80, 60, 14],\n    \"2015\": [54, 40, 78, 45, 16],\n    \"2020\": [60, 80, 79, 48, 30]\n})\n\n# Transpose the DataFrame and convert meat types to columns\ndata.set_index('Meat Type', inplace=True)\ndata = data.T\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot\nbp = ax.boxplot(data, patch_artist = True,\n                notch = True, vert = 0,\n                sym='r+', widths=0.7)\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF', '#00FFFF']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Annotate data value on the chart figure\nfor i, line in enumerate(bp['medians']):\n    x, y = line.get_xydata()[1]\n    ax.annotate(f'{y}', (x, y))\n\n# Set labels\nax.set_xlabel('Meat Types')\nax.set_ylabel('Amount')\n\n# Set title\nax.set_title('Meat Consumption Over Years')\n\n# Add grids on the background\nax.grid(True)\n\n# Change the background the chart figure\nax.set_facecolor('#f0f0f0')\n\n# Modification part\nfor i in [3, 4]:\n    bp['boxes'][i].set_linestyle('-.')\n    bp['boxes'][i].set_linewidth(1.62)\n    bp['boxes'][i].set_edgecolor('#02b08b')\n    bp['boxes'][i].set_alpha(0.7958059393308161)\n    bp['boxes'][i].set_hatch('////')\n\n# Add legend\nax.legend([bp[\"boxes\"][i] for i in range(len(bp[\"boxes\"]))], data.columns, loc='upper right')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "3,4",
        "Test_image": "./test_dataset/Box/Box_e7fafc1b8f74af14/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_e7fafc1b8f74af14/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_e7fafc1b8f74af14/myplot.png"
    },
    {
        "id": "Box_524b4b2f07605d74",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,2010,2020\nHorror,100,180\nComedy,200,170\nDrama,150,300\n\"\"\")\n\ndf = pd.DataFrame(pd.read_csv(data))\n\n# Prepare data for box plot\nplot_data = [df['2010'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2010', '2020'], \n                sym = \"ro\", widths = 0.4)\n\n# New colors for the box plot\ncolors = ['#800080', '#FFA500']  # Purple for 2010, Orange for 2020\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Genre vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Genre\")\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['2010', '2020'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the line color of the box body that contain the center point of the bounding box to #ee04cf, and also set the box whiskers to be invisible by adjusting their visibility to False.",
        "Input_image": "./test_dataset/Box/Box_524b4b2f07605d74/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nGenre,2010,2020\nHorror,100,180\nComedy,200,170\nDrama,150,300\n\"\"\")\n\ndf = pd.DataFrame(pd.read_csv(data))\n\n# Prepare data for box plot\nplot_data = [df['2010'], df['2020']]\n\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Creating box plot with customized labels\nbp = ax.boxplot(plot_data, patch_artist = True, notch = True, vert = 0, \n                labels = ['2010', '2020'], \n                sym = \"ro\", widths = 0.4)\n\n# New colors for the box plot\ncolors = ['#800080', '#FFA500']  # Purple for 2010, Orange for 2020\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Setting titles and labels\nplt.title(\"Genre vs Years\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Genre\")\n\n# Modify the line color and visibility of the target object\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 0:  \n        box.set_edgecolor('#ee04cf')\nfor idx,whisker in enumerate(bp['whiskers']):\n    if idx in[0*2]+[0*2+1]:\n        whisker.set_visible(False)\n# Adding legend\nplt.legend([bp[\"boxes\"][0], bp[\"boxes\"][1]], ['2010', '2020'], loc='upper right')\n\n# Adding grid\nax.grid(True)\n\n# Change the facecolor of the figure\nfig.patch.set_facecolor('gray')\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_524b4b2f07605d74/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_524b4b2f07605d74/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_524b4b2f07605d74/myplot.png"
    },
    {
        "id": "Box_12a01a1e59c95c00",
        "Input_code": "import matplotlib.pyplot as plt\n\nbond_distances = [\n    [2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0],\n    [2.5, 3.1, 3.3, 3.5, 3.7, 4.0, 4.2],\n    [2.7, 3.2, 3.4, 3.6, 3.8, 4.1, 4.3],\n    [2.9, 3.1, 3.3, 3.5, 3.7, 4.0, 4.2],\n    [2.6, 3.0, 3.2, 3.4, 3.6, 3.9, 4.1]\n]\n\nplt.figure(figsize=(10, 6))\nplt.boxplot(bond_distances, labels=[\"Atom Pair 1\", \"Atom Pair 2\", \"Atom Pair 3\", \"Atom Pair 4\", \"Atom Pair 5\"])\nplt.xlabel('Atom Pairs')\nplt.ylabel('Bond Distance (\u00c5)')\nplt.title('Box Plot of Bond Distances in Protein Interactions')\n#plt.savefig('figure.png')\nplt.savefig('figure.png')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the whisker length of the boxes that contain the center point of the bounding box to be 1.9 times the interquartile range (IQR).",
        "Input_image": "./test_dataset/Box/Box_12a01a1e59c95c00/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nbond_distances = [\n    [2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0],\n    [2.5, 3.1, 3.3, 3.5, 3.7, 4.0, 4.2],\n    [2.7, 3.2, 3.4, 3.6, 3.8, 4.1, 4.3],\n    [2.9, 3.1, 3.3, 3.5, 3.7, 4.0, 4.2],\n    [2.6, 3.0, 3.2, 3.4, 3.6, 3.9, 4.1]\n]\n\nplt.figure(figsize=(10, 6))\nbp = plt.boxplot(bond_distances, labels=[\"Atom Pair 1\", \"Atom Pair 2\", \"Atom Pair 3\", \"Atom Pair 4\", \"Atom Pair 5\"])\n\n# Modify whisker length for the target object\nfor i in range(len(bond_distances)):\n    if i == 2:  # Target_object: Atom Pair 3\n        q1 = np.percentile(bond_distances[i], 25)\n        q3 = np.percentile(bond_distances[i], 75)\n        iqr = q3 - q1\n        whisker_min = q1 - 1.9 * iqr\n        whisker_max = q3 + 1.9 * iqr\n        bp['whiskers'][2*i].set_ydata([q1, whisker_min])\n        bp['whiskers'][2*i+1].set_ydata([q3, whisker_max])\n\nplt.xlabel('Atom Pairs')\nplt.ylabel('Bond Distance (\u00c5)')\nplt.title('Box Plot of Bond Distances in Protein Interactions')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Box/Box_12a01a1e59c95c00/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_12a01a1e59c95c00/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_12a01a1e59c95c00/figure.png"
    },
    {
        "id": "Box_60142e79c3454a55",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# data\ndata = {'Year': [1990, 2000, 2010, 2020],\n        'Liberalism': [200, 210, 220, 250],\n        'Conservatism': [250, 230, 220, 300],\n        'Socialism': [300, 280, 260, 240],\n        'Libertarianism': [350, 370, 400, 360]}\ndf = pd.DataFrame(data)\n\n# Creating box plot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(df.iloc[:,1:].T, patch_artist = True,\n                notch = True, vert = 0, whis = 2,\n                widths = 0.4, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding title and labels\nplt.title('Ideologies over Years')\nplt.xlabel('Ideologies') \nplt.ylabel('Popularity') \nplt.xticks([1, 2, 3, 4], ['Liberalism', 'Conservatism', 'Socialism', 'Libertarianism'])\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0]], ['Ideologies'], loc='upper left')\n\n# Annotating data value\nfor line, year in zip(bp['medians'], df['Year']):\n    # get position data for median line\n    x, y = line.get_xydata()[1] \n    plt.text(x, y, 'Year {}'.format(year))\n\n# Adding grid\nplt.grid(True)\n\n# Changing the background color\nfig.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the clipping box for the boxes that contain the center point of the bounding box using a bounding box defined by the corner point (98, 55), a width of 498, and a height of 431 with matplotlib.transforms.Bbox. Also, enable the rasterized state for the boxes linked to the same points by setting it to True.",
        "Input_image": "./test_dataset/Box/Box_60142e79c3454a55/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# data\ndata = {'Year': [1990, 2000, 2010, 2020],\n        'Liberalism': [200, 210, 220, 250],\n        'Conservatism': [250, 230, 220, 300],\n        'Socialism': [300, 280, 260, 240],\n        'Libertarianism': [350, 370, 400, 360]}\ndf = pd.DataFrame(data)\n\n# Creating box plot\nfig, ax = plt.subplots(figsize =(10, 7))\nbp = ax.boxplot(df.iloc[:,1:].T, patch_artist = True,\n                notch = True, vert = 0, whis = 2,\n                widths = 0.4, sym='r+')\n\ncolors = ['#0000FF', '#00FF00', '#FFFF00', '#FF00FF']\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Adding title and labels\nplt.title('Ideologies over Years')\nplt.xlabel('Ideologies') \nplt.ylabel('Popularity') \nplt.xticks([1, 2, 3, 4], ['Liberalism', 'Conservatism', 'Socialism', 'Libertarianism'])\n\n# Adding legend\nplt.legend([bp[\"boxes\"][0]], ['Ideologies'], loc='upper left')\n\n# Annotating data value\nfor line, year in zip(bp['medians'], df['Year']):\n    # get position data for median line\n    x, y = line.get_xydata()[1] \n    plt.text(x, y, 'Year {}'.format(year))\n\n# Adding grid\nplt.grid(True)\n\n# Changing the background color\nfig.set_facecolor('gray')\n\n# Setting clip box and rasterized state for the target object\nbbox = Bbox.from_bounds(98, 55, 498, 431)\nfor idx, box in enumerate(bp['boxes']):\n    if idx == 1:  # Targeting 'Conservatism'\n        box.set_clip_box(bbox)\n        box.set_rasterized(True)\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Box/Box_60142e79c3454a55/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_60142e79c3454a55/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_60142e79c3454a55/myplot.png"
    },
    {
        "id": "Box_12ea2e163c0e18de",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data\ndata = {\n    'Year': [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016],\n    'Organic Farming (in hectares)': [1000, 1250, 1500, 1750, 2500, 2000, 1500, 3000, 3500],\n    'Percentage of Organic Farming': [0.5, 0.65, 0.67, 0.7, 1.5, 1.2, 0.9, 1.8, 2.1]\n}\n\n# Convert data to DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Box plot\nbp = ax.boxplot([df['Organic Farming (in hectares)'], df['Percentage of Organic Farming']], \n                patch_artist = True, notch = True, vert = 0,\n                labels = ['Organic Farming (in hectares)', 'Percentage of Organic Farming'], \n                widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Title and labels\nax.set_title('Organic Farming & Percentage of Organic Farming')\nax.set_xlabel('Variables')\nax.set_ylabel('Values')\n\n# Grid and background color\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the linestyle of the boxes that contain the center point of the bounding box to 'dotted'.",
        "Input_image": "./test_dataset/Box/Box_12ea2e163c0e18de/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {\n    'Year': [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016],\n    'Organic Farming (in hectares)': [1000, 1250, 1500, 1750, 2500, 2000, 1500, 3000, 3500],\n    'Percentage of Organic Farming': [0.5, 0.65, 0.67, 0.7, 1.5, 1.2, 0.9, 1.8, 2.1]\n}\n\n# Convert data to DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize =(10, 7))\n\n# Box plot\nbp = ax.boxplot([df['Organic Farming (in hectares)'], df['Percentage of Organic Farming']], \n                patch_artist = True, notch = True, vert = 0,\n                labels = ['Organic Farming (in hectares)', 'Percentage of Organic Farming'], \n                widths = 0.4)\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# Set linestyle to 'dotted' for the first box\nfor median in bp['medians']:\n    median.set_linestyle('dotted')\n\n# Title and labels\nax.set_title('Organic Farming & Percentage of Organic Farming')\nax.set_xlabel('Variables')\nax.set_ylabel('Values')\n\n# Grid and background color\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Box/Box_12ea2e163c0e18de/Edit_figure.png",
        "Masked_image": "./test_dataset/Box/Box_12ea2e163c0e18de/Masked_figure.png",
        "Initial_figure": "./test_dataset/Box/Box_12ea2e163c0e18de/myplot.png"
    },
    {
        "id": "Pie_495d42a826f66de3",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ndebris_type = [\"Defunct Satellites\", \"Rocket Body Debris\", \"Mission-Related Debris\", \"Fragmentation Debris\"]\ndata = [40, 25, 20, 15]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nax.legend(wedges, debris_type,\n          title=\"Debris Type\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Space Debris Types\")\nfig.set_facecolor('grey')\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the picker state of the slice that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Pie/Pie_495d42a826f66de3/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ndebris_type = [\"Defunct Satellites\", \"Rocket Body Debris\", \"Mission-Related Debris\", \"Fragmentation Debris\"]\ndata = [40, 25, 20, 15]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nax.legend(wedges, debris_type,\n          title=\"Debris Type\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_picker(False)\n\nax.set_title(\"Space Debris Types\")\nfig.set_facecolor('grey')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_495d42a826f66de3/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_495d42a826f66de3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_495d42a826f66de3/myplot.png"
    },
    {
        "id": "Pie_c3007a197361d96d",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nregion = [\"North America\", \"Europe\", \"Asia\"]\n\npercentage = [35, 45, 20]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\nwedges, texts, autotexts = ax.pie(percentage, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), explode=(0.1, 0, 0), \n                                  shadow=True, startangle=90)\n\nax.legend(wedges, region,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage of Population by Region\")\n\n# Change the background color here\nfig.patch.set_facecolor('white')  # Changed from 'gray' to 'white'\n\nplt.tight_layout()\n\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slices that contain the center point of the bounding box to 0.16, and also enable the snap state for these slices by setting it to True.",
        "Input_image": "./test_dataset/Pie/Pie_c3007a197361d96d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nregion = [\"North America\", \"Europe\", \"Asia\"]\n\npercentage = [35, 45, 20]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\nwedges, texts, autotexts = ax.pie(percentage, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), explode=(0.1, 0, 0), \n                                  shadow=True, startangle=90)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:\n        wedge.set_alpha(0.16)\n        wedge.set_snap(True)\n\nax.legend(wedges, region,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage of Population by Region\")\n\n# Change the background color here\nfig.patch.set_facecolor('white')  # Changed from 'gray' to 'white'\n\nplt.tight_layout()\n\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_c3007a197361d96d/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_c3007a197361d96d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_c3007a197361d96d/myplot.png"
    },
    {
        "id": "Pie_b9ad99882e483c78",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [\"2001-2003\", \"2004-2006\", \"2007-2010\"]\npercentage = [30, 35, 35]\n\n# Figure and Axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Pie chart\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0), labels=years, autopct='%1.1f%%',\n                                   shadow=True, startangle=90, colors=['#ff9999','#66b3ff','#99ff99'])\n\n# Draw white circle in the middle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Title\nax.set_title(\"Percentage Distribution Over Years\")\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the border thickness of the pie slices that contain the center point of the bounding box to 1.71, change their line color to #7ad350, and apply an explode effect of 0.16 to these slices.",
        "Input_image": "./test_dataset/Pie/Pie_b9ad99882e483c78/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [\"2001-2003\", \"2004-2006\", \"2007-2010\"]\npercentage = [30, 35, 35]\n\n# Figure and Axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Pie chart\nexplode = [0.1604232979024254 if i == 0 else 0 for i in range(len(years))]\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, labels=years, autopct='%1.1f%%',\n                                   shadow=True, startangle=90, colors=['#ff9999','#66b3ff','#99ff99'])\n\n# Modify border thickness and line color for the target object\nfor idx, wedge in enumerate(wedges):\n    if idx == 0:\n        wedge.set_linewidth(1.7099400141815395)\n        wedge.set_edgecolor('#7ad350')\n\n# Draw white circle in the middle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Title\nax.set_title(\"Percentage Distribution Over Years\")\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Pie/Pie_b9ad99882e483c78/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_b9ad99882e483c78/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_b9ad99882e483c78/myplot.png"
    },
    {
        "id": "Pie_98d63c707c47664b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define labels and sizes based on the given data\nlabels = 'Sofa', 'Bed', 'Dining Table', 'Coffee Table', 'Armchair', 'Wardrobe'\nsizes = [20, 25, 15, 10, 20, 10]\n\n# Create a new figure and axes\nfig, ax = plt.subplots()\n\n# Set the background color of the figure to white\nfig.set_facecolor('white')  # Changed from 'gray' to 'white'\n\n# Create the pie chart\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0, 0.1, 0, 0, 0, 0), \n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, pctdistance=0.85,\n       colors=['red', 'blue', 'green', 'orange', 'purple', 'brown'])\n\n# Add title, x and y axis labels\nplt.title(\"Distribution of Furniture Type\") \nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Furniture Type\")\n\n# Add legend\nplt.legend(labels, title=\"Furniture Type\", loc=\"upper right\") \n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect of 0.14147942417002493 to the slices that contain the center point of the bounding box.",
        "Input_image": "./test_dataset/Pie/Pie_98d63c707c47664b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define labels and sizes based on the given data\nlabels = 'Sofa', 'Bed', 'Dining Table', 'Coffee Table', 'Armchair', 'Wardrobe'\nsizes = [20, 25, 15, 10, 20, 10]\n\n# Create a new figure and axes\nfig, ax = plt.subplots()\n\n# Set the background color of the figure to white\nfig.set_facecolor('white')  # Changed from 'gray' to 'white'\n\n# Create the pie chart\ntarget_object = [0, 4]\nexplode = [0.14147942417002493 if idx in target_object else 0 for idx in range(len(labels))]\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=explode, \n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, pctdistance=0.85,\n       colors=['red', 'blue', 'green', 'orange', 'purple', 'brown'])\n\n# Add title, x and y axis labels\nplt.title(\"Distribution of Furniture Type\") \nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Furniture Type\")\n\n# Add legend\nplt.legend(labels, title=\"Furniture Type\", loc=\"upper right\") \n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,4",
        "Test_image": "./test_dataset/Pie/Pie_98d63c707c47664b/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_98d63c707c47664b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_98d63c707c47664b/myplot.png"
    },
    {
        "id": "Pie_9195d01d524d78ce",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating the figure and axis objects\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the face color of the figure\nfig.patch.set_facecolor('gray')\n\n# Dataset\ncities = [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]\nprogress = [25, 20, 30, 15, 10]\n\n# Creating the pie chart\nwedges, texts, autotexts = ax.pie(progress, explode=(0.1, 0, 0, 0, 0), labels=cities, autopct='%1.1f%%', shadow=True, startangle=90, colors=['red','blue','green','purple','orange'])\n\n# Adding title and other enhancements\nax.set_title(\"Recycling Progress in Major U.S. Cities\", fontsize=16)  # Changed title font size to 16\nax.legend(wedges, cities, title=\"Cities\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=12, weight=\"bold\")  # Changed label font size to 12\nplt.setp(texts, size=12)  # Also change the font size of the legend to 12 to maintain consistency\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slices that contain the center point of the bounding box to 0.11. For these same slices, apply a shadow effect with an offset of (2.01, 3.07) and set the shadow color to gray.",
        "Input_image": "./test_dataset/Pie/Pie_9195d01d524d78ce/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Creating the figure and axis objects\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the face color of the figure\nfig.patch.set_facecolor('gray')\n\n# Dataset\ncities = [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]\nprogress = [25, 20, 30, 15, 10]\n\n# Creating the pie chart\nwedges, texts, autotexts = ax.pie(progress, explode=(0.1, 0, 0, 0, 0), labels=cities, autopct='%1.1f%%', shadow=True, startangle=90, colors=['red','blue','green','purple','orange'])\n\n# Setting transparency and shadow effect for selected slices\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Los Angeles, and Index 3 for Houston\n        wedge.set_alpha(0.11)\n        wedge.set_path_effects([SimplePatchShadow(offset=(2.01,3.07), shadow_rgbFace='gray'), Normal()])\n\n# Adding title and other enhancements\nax.set_title(\"Recycling Progress in Major U.S. Cities\", fontsize=16)  # Changed title font size to 16\nax.legend(wedges, cities, title=\"Cities\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=12, weight=\"bold\")  # Changed label font size to 12\nplt.setp(texts, size=12)  # Also change the font size of the legend to 12 to maintain consistency\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_9195d01d524d78ce/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_9195d01d524d78ce/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_9195d01d524d78ce/myplot.png"
    },
    {
        "id": "Pie_dd2f894d9cbe5f5e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nprofessions = [\"Doctors\", \"Lawyers\", \"Teachers\", \"Engineers\", \"Artists\", \"Others\"]\nrates = [15, 20, 10, 25, 20, 10]\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(rates, labels=professions, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Set up properties for the legend and title\nax.set_title(\"Divorce Rates in Different Professions\")\nax.legend(wedges, professions, title=\"Professions\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color of the figure\nfig.set_facecolor('gray')\n\n# Set layout to tight to minimize the amount of empty space on the figure\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the label of the slice that contains the center point of the bounding box to 'A new Label' and set its rasterized state to True.",
        "Input_image": "./test_dataset/Pie/Pie_dd2f894d9cbe5f5e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nprofessions = [\"Doctors\", \"Lawyers\", \"Teachers\", \"Engineers\", \"Artists\", \"Others\"]\nrates = [15, 20, 10, 25, 20, 10]\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(rates, labels=professions, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Modify the label and set rasterized state for the target objects\nfor idx, text in enumerate(texts):\n    if idx in [1, 3]:  # Index 1 for Lawyers, and Index 3 for Engineers\n        text.set_text('A new Label')\n        wedges[idx].set_rasterized(True)\n\n# Set up properties for the legend and title\nax.set_title(\"Divorce Rates in Different Professions\")\nax.legend(wedges, professions, title=\"Professions\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color of the figure\nfig.set_facecolor('gray')\n\n# Set layout to tight to minimize the amount of empty space on the figure\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_dd2f894d9cbe5f5e/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_dd2f894d9cbe5f5e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_dd2f894d9cbe5f5e/myplot.png"
    },
    {
        "id": "Pie_c6b3c635a973cee4",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data from the csv file\nhousehold_types = [\"Single Family Residence\", \"Multi Family Residence\", \"Apartment\"]\npercentages = [45, 25, 30]\n\n# Create the figure and axis objects\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to calculate the absolute values\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} households)\"\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(percentages, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), explode=[0.05]*len(household_types), \n                                  shadow=True, startangle=140, colors=['#ff9999','#66b3ff','#99ff99'])\n\n# Set the legend\nax.legend(wedges, household_types,\n          title=\"Household Types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title\nax.set_title(\"Distribution of Household Types\")\n\n# Set the properties of the autotexts\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Set the face color of the figure\nfig.set_facecolor('lightgray')\n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the linestyle of the slice containing the center point of the bounding box to 'dashdot', and set its visibility to False.",
        "Input_image": "./test_dataset/Pie/Pie_c6b3c635a973cee4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data from the csv file\nhousehold_types = [\"Single Family Residence\", \"Multi Family Residence\", \"Apartment\"]\npercentages = [45, 25, 30]\n\n# Create the figure and axis objects\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to calculate the absolute values\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} households)\"\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(percentages, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), explode=[0.05]*len(household_types), \n                                  shadow=True, startangle=140, colors=['#ff9999','#66b3ff','#99ff99'])\n\n# Modify the linestyle and visibility of the selected slices\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:  # Index 1 for Multi Family Residence\n        wedge.set_linestyle('dashdot')\n        wedge.set_visible(False)\n\n# Set the legend\nax.legend(wedges, household_types,\n          title=\"Household Types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title\nax.set_title(\"Distribution of Household Types\")\n\n# Set the properties of the autotexts\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Set the face color of the figure\nfig.set_facecolor('lightgray')\n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_c6b3c635a973cee4/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_c6b3c635a973cee4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_c6b3c635a973cee4/myplot.png"
    },
    {
        "id": "Pie_161812cc007cbf0c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = 'Malware', 'Phishing', 'Password Attacks', 'Denial of Service', 'Man in the Middle', 'Advanced Persistent Threats'\nsizes = [30, 25, 15, 10, 10, 10]  # Convert the percentages to integers\n\n# Plot\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0.1, 0, 0, 0, 0, 0), labeldistance=1.05, shadow=True, pctdistance=0.85, colors=['red', 'green', 'blue', 'yellow', 'purple', 'orange'])\n\n# Set title, legend, and face color\nplt.title(\"Distribution of Cybersecurity Threats\") \nplt.legend(labels, title=\"Threats\", loc=\"upper right\") \nfig.set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the border thickness of the slices that contain the center point of the bounding box to 1.59 and set the line color to black.",
        "Input_image": "./test_dataset/Pie/Pie_161812cc007cbf0c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = 'Malware', 'Phishing', 'Password Attacks', 'Denial of Service', 'Man in the Middle', 'Advanced Persistent Threats'\nsizes = [30, 25, 15, 10, 10, 10]  # Convert the percentages to integers\n\n# Plot\nfig, ax = plt.subplots()\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0.1, 0, 0, 0, 0, 0), labeldistance=1.05, shadow=True, pctdistance=0.85, colors=['red', 'green', 'blue', 'yellow', 'purple', 'orange'])\n\n# Set title, legend, and face color\nplt.title(\"Distribution of Cybersecurity Threats\") \nplt.legend(labels, title=\"Threats\", loc=\"upper right\") \nfig.set_facecolor('lightgray')\n\n# Modify border thickness and line color for selected segments\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_linewidth(1.5913690449804971)\n        wedge.set_edgecolor('black')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_161812cc007cbf0c/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_161812cc007cbf0c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_161812cc007cbf0c/myplot.png"
    },
    {
        "id": "Pie_3c3ecdf1eed9df7a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# The given data\ndata = StringIO(\"\"\"\nProfession,Divorce Rate\n\"Healthcare professionals\",\"20%\"\n\"Artists and entertainers\",\"18%\"\n\"Sales representatives\",\"15%\"\n\"Lawyers\",\"12%\"\n\"Engineers\",\"10%\"\n\"Teachers\",\"8%\"\n\"IT Professionals\",\"7%\"\n\"Scientists\",\"5%\"\n\"Farmers\",\"5%\"\n\"\"\")\n\n# Read the data into a DataFrame\ndf = pd.read_csv(data, sep =\",\")\ndf['Divorce Rate'] = df['Divorce Rate'].str.rstrip('%').astype('float') \n\nlabels = df['Profession'].values.tolist()\nsizes = df['Divorce Rate'].values.tolist()\n\nfig, ax = plt.subplots()\nfig.set_facecolor('lightgray')\n\n# Add explode parameter to highlight the 'Healthcare professionals' slice\nexplode = [0.1 if i == 'Healthcare professionals' else 0 for i in labels]\n\nax.pie(sizes, labels=labels, explode=explode, autopct='%.0f%%', \n       textprops={'size': 'smaller'}, radius=0.8, shadow=True, labeldistance=1.2, pctdistance=0.7)\n\nplt.title(\"Divorce Rate by Profession\") # Add title\nplt.legend(labels, title=\"Professions\", loc=\"upper right\") # Add legend\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the slice that includes the center point of the bounding box to #9269bd.",
        "Input_image": "./test_dataset/Pie/Pie_3c3ecdf1eed9df7a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# The given data\ndata = StringIO(\"\"\"\nProfession,Divorce Rate\n\"Healthcare professionals\",\"20%\"\n\"Artists and entertainers\",\"18%\"\n\"Sales representatives\",\"15%\"\n\"Lawyers\",\"12%\"\n\"Engineers\",\"10%\"\n\"Teachers\",\"8%\"\n\"IT Professionals\",\"7%\"\n\"Scientists\",\"5%\"\n\"Farmers\",\"5%\"\n\"\"\")\n\n# Read the data into a DataFrame\ndf = pd.read_csv(data, sep =\",\")\ndf['Divorce Rate'] = df['Divorce Rate'].str.rstrip('%').astype('float') \n\nlabels = df['Profession'].values.tolist()\nsizes = df['Divorce Rate'].values.tolist()\n\nfig, ax = plt.subplots()\nfig.set_facecolor('lightgray')\n\n# Add explode parameter to highlight the 'Healthcare professionals' slice\nexplode = [0.1 if i == 'Healthcare professionals' else 0 for i in labels]\n\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, explode=explode, autopct='%.0f%%', \n       textprops={'size': 'smaller'}, radius=0.8, shadow=True, labeldistance=1.2, pctdistance=0.7)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 4]:  # Index 1 for Artists and entertainers, and Index 4 for Engineers\n        wedge.set_color('#9269bd')\n\nplt.title(\"Divorce Rate by Profession\") # Add title\nplt.legend(labels, title=\"Professions\", loc=\"upper right\") # Add legend\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_3c3ecdf1eed9df7a/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_3c3ecdf1eed9df7a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_3c3ecdf1eed9df7a/myplot.png"
    },
    {
        "id": "Pie_d53ab98a09232799",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = '''Category,Percentage\n\"Enterprise Software\",\"30%\"\n\"Cloud Services\",\"20%\"\n\"Business Intelligence and Analytics\",\"15%\"\n\"Data Management and Software\",\"10%\"\n\"Security Software\",\"10%\"\n\"Software Development Tools\",\"10%\"\n\"Other Software\",\"5%\"'''\n\n# Creating DataFrame from given data\ndf = pd.read_csv(StringIO(data))\n\n# Converting percentage to float\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nfig, ax = plt.subplots()\n\n# Pie chart parameters with new color scheme\ncolors = ['#1f77b4', '#aec7e8', '#4c78a8', '#7f7f7f', '#9edae5', '#c5b0d5', '#17becf']  # New shades of blue\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Pie chart creation with new colors\nax.pie(df['Percentage'], explode=explode, labels=df['Category'], colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.title(\"Software Category Distribution\")  # Add title\nplt.legend(df['Category'], title=\"Categories\", loc=\"upper right\")  # Add legend\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nfig.patch.set_facecolor('gray')  # Set the background color to gray\nplt.tight_layout()  # Adjust subplot parameters to give specified padding\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the linestyle of the slices that contain the center point of the bounding box to 'solid' and color to black.",
        "Input_image": "./test_dataset/Pie/Pie_d53ab98a09232799/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = '''Category,Percentage\n\"Enterprise Software\",\"30%\"\n\"Cloud Services\",\"20%\"\n\"Business Intelligence and Analytics\",\"15%\"\n\"Data Management and Software\",\"10%\"\n\"Security Software\",\"10%\"\n\"Software Development Tools\",\"10%\"\n\"Other Software\",\"5%\"'''\n\n# Creating DataFrame from given data\ndf = pd.read_csv(StringIO(data))\n\n# Converting percentage to float\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nfig, ax = plt.subplots()\n\n# Pie chart parameters with new color scheme\ncolors = ['#1f77b4', '#aec7e8', '#4c78a8', '#7f7f7f', '#9edae5', '#c5b0d5', '#17becf']  # New shades of blue\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Pie chart creation with new colors\nwedges, texts, autotexts = ax.pie(df['Percentage'], explode=explode, labels=df['Category'], colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_linestyle('solid')\n        wedge.set_edgecolor('black')\n\nplt.title(\"Software Category Distribution\")  # Add title\nplt.legend(df['Category'], title=\"Categories\", loc=\"upper right\")  # Add legend\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nfig.patch.set_facecolor('gray')  # Set the background color to gray\nplt.tight_layout()  # Adjust subplot parameters to give specified padding\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_d53ab98a09232799/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_d53ab98a09232799/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_d53ab98a09232799/myplot.png"
    },
    {
        "id": "Pie_56bec03934710ff6",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\narchitecture_style = [\"Classical\", \"Modernist\", \"Postmodern\", \"Art Deco\", \"Gothic\", \"Baroque\", \"Renaissance\", \"Romanesque\"]\npercentage = [20, 15, 10, 10, 20, 15, 5, 5]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(percentage, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), explode=(0.1, 0, 0, 0, 0.1, 0, 0, 0), shadow=True)\n\nax.legend(wedges, architecture_style,\n          title=\"Architecture Style\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage of Architecture Styles\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Rearrange the order of the slices that contain the center point of the bounding box, while retaining all their original settings. Additionally, apply an explode effect of 0.2416 to these slices.",
        "Input_image": "./test_dataset/Pie/Pie_56bec03934710ff6/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\narchitecture_style = [\"Classical\", \"Modernist\", \"Postmodern\", \"Art Deco\", \"Gothic\", \"Baroque\", \"Renaissance\", \"Romanesque\"]\npercentage = [20, 15, 10, 10, 20, 15, 5, 5]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\ntarget_object = [1, 5]\nnew_order = [0, 5, 2, 3, 4, 1, 6, 7]\nnew_architecture_style = [architecture_style[i] for i in new_order]\nnew_percentage = [percentage[i] for i in new_order]\nexplode = [0.24159684902462533 if idx in target_object else 0 for idx in range(len(architecture_style))]\nnew_explode = [0 for i in new_order]\n\nwedges, texts, autotexts = ax.pie(new_percentage, autopct=lambda pct: func(pct, new_percentage),\n                                  textprops=dict(color=\"w\"), explode=new_explode, shadow=True)\n\nax.legend(wedges, new_architecture_style,\n          title=\"Architecture Style\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage of Architecture Styles\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,5",
        "Test_image": "./test_dataset/Pie/Pie_56bec03934710ff6/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_56bec03934710ff6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_56bec03934710ff6/myplot.png"
    },
    {
        "id": "Pie_8388e40c1ac8ab1f",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the data\ntypes_of_vehicles = [\"Hybrid Electric Vehicles\", \n                     \"Plug-in Hybrid Electric Vehicles\", \n                     \"Battery Electric Vehicles\", \n                     \"Fuel Cell Electric Vehicles\"]\npercentages = [25, 30, 40, 5]\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(percentages, \n                                   explode=(0.1, 0, 0, 0), \n                                   labels=types_of_vehicles, \n                                   autopct='%1.1f%%',\n                                   pctdistance=0.85,\n                                   shadow=True,\n                                   startangle=140)\n\n# Draw white circle in the middle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set the title\nax.set_title(\"Percentage of Different Electric Vehicle Types\")\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slice that contains the center point of the bounding box to 0.15.",
        "Input_image": "./test_dataset/Pie/Pie_8388e40c1ac8ab1f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set the figure size\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the data\ntypes_of_vehicles = [\"Hybrid Electric Vehicles\", \n                     \"Plug-in Hybrid Electric Vehicles\", \n                     \"Battery Electric Vehicles\", \n                     \"Fuel Cell Electric Vehicles\"]\npercentages = [25, 30, 40, 5]\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(percentages, \n                                   explode=(0.1, 0, 0, 0), \n                                   labels=types_of_vehicles, \n                                   autopct='%1.1f%%',\n                                   pctdistance=0.85,\n                                   shadow=True,\n                                   startangle=140)\n\n# Set transparency for selected slices\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_alpha(0.15)\n\n# Draw white circle in the middle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set the title\nax.set_title(\"Percentage of Different Electric Vehicle Types\")\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_8388e40c1ac8ab1f/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_8388e40c1ac8ab1f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_8388e40c1ac8ab1f/myplot.png"
    },
    {
        "id": "Pie_face4cfcdb39dcef",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare data\nage_group = [\"Under 18\", \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65-74\", \"75+\"]\nconsumption_percentage = [20, 20, 15, 15, 10, 10, 5, 5]\n\nfig, ax = plt.subplots(figsize=(8, 6), subplot_kw=dict(aspect=\"equal\"))\n\n# Set colors\ncolors = ['red', 'blue', 'green', 'gold', 'purple', 'pink', 'orange', 'grey']\n\n# Explode the first slice\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  \n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(consumption_percentage, explode=explode, labels=age_group, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set the title and legend\nax.set_title(\"Fast Food Consumption by Age Group\")\nax.legend(wedges, age_group, title=\"Age Groups\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the text color to black\nplt.setp(autotexts, size=8, weight=\"bold\", color=\"black\")\n\n# Change the background color\nax.set_facecolor('lightgray')\n\n# Layout adjustment\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect to the slices that contain the center point of the bounding box, using a value of 0.1058. Additionally, set their transparency to 0.6686. Remember, \"apply\" means to implement the explode effect while preserving the original settings.",
        "Input_image": "./test_dataset/Pie/Pie_face4cfcdb39dcef/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare data\nage_group = [\"Under 18\", \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65-74\", \"75+\"]\nconsumption_percentage = [20, 20, 15, 15, 10, 10, 5, 5]\n\nfig, ax = plt.subplots(figsize=(8, 6), subplot_kw=dict(aspect=\"equal\"))\n\n# Set colors\ncolors = ['red', 'blue', 'green', 'gold', 'purple', 'pink', 'orange', 'grey']\n\n# Explode the first slice\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  \nexplode_new = [0.10580910791061693 if i in [1, 3] else explode[i] for i in range(len(age_group))]\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(consumption_percentage, explode=explode_new, labels=age_group, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set the title and legend\nax.set_title(\"Fast Food Consumption by Age Group\")\nax.legend(wedges, age_group, title=\"Age Groups\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the text color to black\nplt.setp(autotexts, size=8, weight=\"bold\", color=\"black\")\n\n# Change the background color\nax.set_facecolor('lightgray')\n\n# Change transparency of the segments corresponding to the Target_object\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_alpha(0.6686023948702011)\n\n# Layout adjustment\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_face4cfcdb39dcef/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_face4cfcdb39dcef/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_face4cfcdb39dcef/myplot.png"
    },
    {
        "id": "Pie_a25c94fdf34caea1",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Domestic Flights', 'International Flights', 'Business Class', 'Economy Class', 'First Class', 'Other Classes'\nsizes = [35, 30, 10, 15, 5, 5]\n\n# Create a pie chart\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e., 'Domestic Flights')\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'purple', 'pink']\n\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Add title and labels\nplt.title(\"Air Travel Trends\")\nplt.xlabel(\"Types of Flights and Classes\")\nplt.ylabel(\"Percentage\")\n\n# Add legend\nplt.legend(labels, title=\"Air Travel Categories\", loc=\"upper right\")\n\n# Change the background color\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add an explode effect to the slices that contain the center point of the bounding box, using a value of 0.18784179777133542. Also, set the border thickness of these slices to 1.746248215851796 and update their line color to #ba5543. Remember, \"Add\" means to enhance the existing explode effect while preserving the original settings.",
        "Input_image": "./test_dataset/Pie/Pie_a25c94fdf34caea1/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Domestic Flights', 'International Flights', 'Business Class', 'Economy Class', 'First Class', 'Other Classes'\nsizes = [35, 30, 10, 15, 5, 5]\n\n# Create a pie chart\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = [0.1, 0, 0, 0, 0, 0]  # only \"explode\" the 1st slice (i.e., 'Domestic Flights')\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'purple', 'pink']\n\n# Target objects\ntarget_object = [1, 3]\n\n# Modify explode effect for target objects\nfor idx in target_object:\n    explode[idx] = 0.18784179777133542\n\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Set border thickness and line color for target objects\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_linewidth(1.746248215851796)\n        wedge.set_edgecolor('#ba5543')\n\n# Add title and labels\nplt.title(\"Air Travel Trends\")\nplt.xlabel(\"Types of Flights and Classes\")\nplt.ylabel(\"Percentage\")\n\n# Add legend\nplt.legend(labels, title=\"Air Travel Categories\", loc=\"upper right\")\n\n# Change the background color\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_a25c94fdf34caea1/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_a25c94fdf34caea1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_a25c94fdf34caea1/myplot.png"
    },
    {
        "id": "Pie_c9591337e2867732",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nbook_types = [\"Fantasy\", \"Science Fiction\", \"Mystery\", \"Romance\", \"Biography\", \"Non-Fiction\", \"Children's Books\", \"Others\"]\npercentages = [20, 15, 15, 10, 10, 15, 10, 5]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Fantasy')\n\nax.pie(percentages, explode=explode, labels=book_types, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Customizations: Title, labels, and legend\nplt.title(\"Percentage of Book Types\")  # Add title\nplt.xlabel(\"Book Types\")  # Add x-label\nplt.ylabel(\"Percentage\")  # Add y-label\nplt.legend(book_types, title=\"Book Types\", loc=\"upper right\")  # Add legend\n\n# Set background color of the figure to gray\nfig.set_facecolor('gray')\n\n# Use tight_layout to automatically adjust subplot parameters to give specified padding.\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the clipping state of the slice that contains the center point of the bounding box to True, and set the linewidth of that slice to 2.11.",
        "Input_image": "./test_dataset/Pie/Pie_c9591337e2867732/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nbook_types = [\"Fantasy\", \"Science Fiction\", \"Mystery\", \"Romance\", \"Biography\", \"Non-Fiction\", \"Children's Books\", \"Others\"]\npercentages = [20, 15, 15, 10, 10, 15, 10, 5]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Fantasy')\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, labels=book_types, autopct='%1.1f%%', shadow=True, startangle=90)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Science Fiction, and Index 3 for Romance\n        wedge.set_clip_on(True)\n        wedge.set_linewidth(2.11)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Customizations: Title, labels, and legend\nplt.title(\"Percentage of Book Types\")  # Add title\nplt.xlabel(\"Book Types\")  # Add x-label\nplt.ylabel(\"Percentage\")  # Add y-label\nplt.legend(book_types, title=\"Book Types\", loc=\"upper right\")  # Add legend\n\n# Set background color of the figure to gray\nfig.set_facecolor('gray')\n\n# Use tight_layout to automatically adjust subplot parameters to give specified padding.\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_c9591337e2867732/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_c9591337e2867732/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_c9591337e2867732/myplot.png"
    },
    {
        "id": "Pie_b8e0e89992b3775a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nclothing_types = [\"Casual Wear\", \"Formal Wear\", \"Athletic Wear\"]\npercentages = [30, 40, 30]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set color for the chart figure\nfig.patch.set_facecolor('lightgray')\n\n# Plot pie chart\nwedges, texts, autotexts = ax.pie(percentages, explode=(0, 0.1, 0), labels=clothing_types, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Draw white circles at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set title\nplt.title('Distribution of Clothing Types')\n\n# Set legend\nplt.legend(wedges, clothing_types, title=\"Clothing Types\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the picker state of the slices that contain the center point of the bounding box to False. Also, set the rasterized state of those same slices to False.",
        "Input_image": "./test_dataset/Pie/Pie_b8e0e89992b3775a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nclothing_types = [\"Casual Wear\", \"Formal Wear\", \"Athletic Wear\"]\npercentages = [30, 40, 30]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set color for the chart figure\nfig.patch.set_facecolor('lightgray')\n\n# Plot pie chart\nwedges, texts, autotexts = ax.pie(percentages, explode=(0, 0.1, 0), labels=clothing_types, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Modify the picker and rasterized state for the selected wedges\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:  # Index 1 for Formal Wear\n        wedge.set_picker(False)\n        wedge.set_rasterized(False)\n\n# Draw white circles at the centre\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set title\nplt.title('Distribution of Clothing Types')\n\n# Set legend\nplt.legend(wedges, clothing_types, title=\"Clothing Types\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_b8e0e89992b3775a/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_b8e0e89992b3775a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_b8e0e89992b3775a/myplot.png"
    },
    {
        "id": "Pie_b334e47257a83056",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nphobia_data = [\"30%\", \"20%\", \"15%\", \"10%\", \"15%\", \"10%\"]\nphobia_types = [\"Arachnophobia\", \"Claustrophobia\", \"Aerophobia\", \"Acrophobia\", \"Cynophobia\", \"Ophidiophobia\"]\n\ndata = [float(x.strip('%')) for x in phobia_data]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nexplode = (0.1, 0, 0, 0, 0, 0)  \ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6']\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"k\"), colors=colors, shadow=True)\n\nax.legend(wedges, phobia_types,\n          title=\"Phobias\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Pie Chart: Phobia Percentages\")\nfig.set_facecolor('lightgray') \nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect of 0.1835 to the slices that contain the center point of the bounding box, and set their transparency to 0.3848. Remember, \"set\" means to apply the explode effect only to those specific slices.",
        "Input_image": "./test_dataset/Pie/Pie_b334e47257a83056/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nphobia_data = [\"30%\", \"20%\", \"15%\", \"10%\", \"15%\", \"10%\"]\nphobia_types = [\"Arachnophobia\", \"Claustrophobia\", \"Aerophobia\", \"Acrophobia\", \"Cynophobia\", \"Ophidiophobia\"]\n\ndata = [float(x.strip('%')) for x in phobia_data]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\ntarget_object = [1, 3]\nexplode = [0.18353176876091143 if idx in target_object else 0 for idx in range(len(data))]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6']\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"k\"), colors=colors, shadow=True)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_alpha(0.384775580659775)\n\nax.legend(wedges, phobia_types,\n          title=\"Phobias\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Pie Chart: Phobia Percentages\")\nfig.set_facecolor('lightgray') \nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_b334e47257a83056/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_b334e47257a83056/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_b334e47257a83056/myplot.png"
    },
    {
        "id": "Pie_e97804db0d9d46dd",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\narchitecture_style = [\"Classical\", \"Modernist\", \"Postmodern\", \"Art Deco\", \"Gothic\", \"Baroque\", \"Renaissance\", \"Romanesque\"]\npercentage = [20, 15, 10, 10, 20, 15, 5, 5]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(percentage, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), explode=(0.1, 0, 0, 0, 0.1, 0, 0, 0), shadow=True)\n\nax.legend(wedges, architecture_style,\n          title=\"Architecture Style\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage of Architecture Styles\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the slice that contains the center point of the bounding box to #ee6892. For the same slice, add a stroke with a linewidth of 2.54 and a foreground color of #b24212.",
        "Input_image": "./test_dataset/Pie/Pie_e97804db0d9d46dd/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as path_effects\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\narchitecture_style = [\"Classical\", \"Modernist\", \"Postmodern\", \"Art Deco\", \"Gothic\", \"Baroque\", \"Renaissance\", \"Romanesque\"]\npercentage = [20, 15, 10, 10, 20, 15, 5, 5]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(percentage, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), explode=(0.1, 0, 0, 0, 0.1, 0, 0, 0), shadow=True)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [0, 4]:  # Index 0 for Classical, and Index 4 for Gothic\n        wedge.set_color('#ee6892')\n        stroke_effect = path_effects.withStroke(linewidth=2.5427497618368995, foreground='#b24212')\n        wedge.set_path_effects([stroke_effect])\n\nax.legend(wedges, architecture_style,\n          title=\"Architecture Style\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage of Architecture Styles\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,4",
        "Test_image": "./test_dataset/Pie/Pie_e97804db0d9d46dd/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_e97804db0d9d46dd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_e97804db0d9d46dd/myplot.png"
    },
    {
        "id": "Pie_eaada1f5ee4af09a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Data\ndecades = [\"1960s\", \"1970s\", \"2000s and beyond\"]\npercentages = [30, 35, 35]\n\n# Create figure and axis\nfig, ax = plt.subplots()\n\n# Pie chart\nexplode = (0.1, 0, 0)  # only \"explode\" the 1st slice (i.e. '1960s')\nax.pie(percentages, explode=explode, labels=decades, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Title and labels\nax.set_title(\"Decades' Percentage\")\nplt.xlabel('Decades')\nplt.ylabel('Percentage')\n\n# Legend\nplt.legend(decades, title=\"Decades\", loc=\"upper right\")\n\n# Change the background color\nfig.set_facecolor('gray')\n\n# Layout and save\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect to the slices that contain the center point of the bounding box, using a value of 0.2815. This will separate the slices from their original arrangement.",
        "Input_image": "./test_dataset/Pie/Pie_eaada1f5ee4af09a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ndecades = [\"1960s\", \"1970s\", \"2000s and beyond\"]\npercentages = [30, 35, 35]\n\n# Create figure and axis\nfig, ax = plt.subplots()\n\n# Pie chart\ntarget_object = [1]\nexplode = [0.1, 0, 0]\nexplode = [0.2815087959187159 if idx in target_object else explode[idx] for idx in range(len(decades))]\nax.pie(percentages, explode=explode, labels=decades, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Title and labels\nax.set_title(\"Decades' Percentage\")\nplt.xlabel('Decades')\nplt.ylabel('Percentage')\n\n# Legend\nplt.legend(decades, title=\"Decades\", loc=\"upper right\")\n\n# Change the background color\nfig.set_facecolor('gray')\n\n# Layout and save\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_eaada1f5ee4af09a/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_eaada1f5ee4af09a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_eaada1f5ee4af09a/myplot.png"
    },
    {
        "id": "Pie_7b4234e4198eec6d",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nsegments = [\"Cable Television\", \"Satellite Television\", \"Internet Protocol Television\", \"Hybrid IPTV\", \"Other Technologies\"]\ndata = [40, 25, 15, 12, 8]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ndef func(pct, allvals):\n    absolute = int(pct)\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"),\n                                  explode=(0.1, 0, 0, 0, 0),\n                                  shadow=True,\n                                  colors=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0'])\n\nax.legend(wedges, segments,\n          title=\"Market Segments\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Market Segment Shares\")\n\n# Set the facecolor to white\nfig.set_facecolor('white')\n\nplt.tight_layout()\n\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slice that contains the center point of the bounding box to 0.53, and change its color to #e53285.",
        "Input_image": "./test_dataset/Pie/Pie_7b4234e4198eec6d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nsegments = [\"Cable Television\", \"Satellite Television\", \"Internet Protocol Television\", \"Hybrid IPTV\", \"Other Technologies\"]\ndata = [40, 25, 15, 12, 8]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ndef func(pct, allvals):\n    absolute = int(pct)\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"),\n                                  explode=(0.1, 0, 0, 0, 0),\n                                  shadow=True,\n                                  colors=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0'])\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Satellite Television, and Index 3 for Hybrid IPTV\n        wedge.set_color('#e53285')\n        wedge.set_alpha(0.53)\n\nax.legend(wedges, segments,\n          title=\"Market Segments\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Market Segment Shares\")\n\n# Set the facecolor to white\nfig.set_facecolor('white')\n\nplt.tight_layout()\n\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_7b4234e4198eec6d/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_7b4234e4198eec6d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_7b4234e4198eec6d/myplot.png"
    },
    {
        "id": "Pie_f452b3e9f38ae347",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntypes_of_tv_show = [\"Drama\", \"Comedy\", \"Reality\", \"News\", \"Documentary\"]\npopularity_percentage = [35, 25, 15, 15, 10]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(popularity_percentage, explode=(0.1, 0, 0, 0, 0), labels=types_of_tv_show, autopct='%1.1f%%',\n                                  shadow=True, startangle=90)\n\n# Draw a donut chart\nax.set(aspect=\"equal\", title='TV Show Popularity')\n\n# Change the color of the figure background\nfig.set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border thickness of the slices that contain the center point of the bounding box to 1.76, set the border color to #dc4549, and update the fill color of these slices to #5ae1c4.",
        "Input_image": "./test_dataset/Pie/Pie_f452b3e9f38ae347/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ntypes_of_tv_show = [\"Drama\", \"Comedy\", \"Reality\", \"News\", \"Documentary\"]\npopularity_percentage = [35, 25, 15, 15, 10]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(popularity_percentage, explode=(0.1, 0, 0, 0, 0), labels=types_of_tv_show, autopct='%1.1f%%',\n                                  shadow=True, startangle=90)\n\n# Draw a donut chart\nax.set(aspect=\"equal\", title='TV Show Popularity')\n\n# Change the color of the figure background\nfig.set_facecolor('lightgray')\n\n# Set the border thickness and line color, and change the color of the segments corresponding to the Target_object\ntarget_object = [1, 3]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_edgecolor('#dc4549')\n        wedge.set_linewidth(1.7575053560138227)\n        wedge.set_facecolor('#5ae1c4')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_f452b3e9f38ae347/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_f452b3e9f38ae347/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_f452b3e9f38ae347/myplot.png"
    },
    {
        "id": "Pie_80b61a6656ad82a9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# CSV data\ndata = {\n    \"Area of Genetic Engineering\": [\"Crispr Technology\", \"Gene Therapy\", \"Genetic Modification\", \"Genome Sequencing\", \"Synthetic Biology\", \"Bioinformatics\"],\n    \"Percentage\": [35, 25, 20, 10, 5, 5]\n}\n\n# Prepare pie chart parameters\nlabels = data[\"Area of Genetic Engineering\"]\nsizes = data[\"Percentage\"]\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # slightly offset each slice\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'red', 'blue']\n\n# Create figure and axes\nfig, ax = plt.subplots()\nfig.set_facecolor('gray')  # Set background color\n\n# Plot pie chart\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140, labeldistance=1.05, pctdistance=0.85)\n\n# Set title and legend\nplt.title(\"Distribution of Genetic Engineering Areas\")\nplt.legend(labels, title=\"Genetic Engineering Areas\", loc=\"upper right\")\n\nplt.tight_layout()  # Adjust layout\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect to the slices that contain the center point of the bounding box, with a value of 0.1111. This will enhance the explosion effect relative to their original settings.",
        "Input_image": "./test_dataset/Pie/Pie_80b61a6656ad82a9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# CSV data\ndata = {\n    \"Area of Genetic Engineering\": [\"Crispr Technology\", \"Gene Therapy\", \"Genetic Modification\", \"Genome Sequencing\", \"Synthetic Biology\", \"Bioinformatics\"],\n    \"Percentage\": [35, 25, 20, 10, 5, 5]\n}\n\n# Prepare pie chart parameters\nlabels = data[\"Area of Genetic Engineering\"]\nsizes = data[\"Percentage\"]\ntarget_object = [0, 2, 4]\nexplode = [0.11106604936056326 if idx in target_object else 0.1 for idx in range(len(labels))]  # slightly offset each slice\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'red', 'blue']\n\n# Create figure and axes\nfig, ax = plt.subplots()\nfig.set_facecolor('gray')  # Set background color\n\n# Plot pie chart\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140, labeldistance=1.05, pctdistance=0.85)\n\n# Set title and legend\nplt.title(\"Distribution of Genetic Engineering Areas\")\nplt.legend(labels, title=\"Genetic Engineering Areas\", loc=\"upper right\")\n\nplt.tight_layout()  # Adjust layout\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2,4",
        "Test_image": "./test_dataset/Pie/Pie_80b61a6656ad82a9/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_80b61a6656ad82a9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_80b61a6656ad82a9/myplot.png"
    },
    {
        "id": "Pie_14f6491a6b4915c9",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nage_group = [\"Under 18\",\"18-34\",\"35-64\",\"65+\"]\npercentages = [15, 35, 40, 10]\n\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\n# Updated color scheme for the pie chart\nnew_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\nwedges, texts, autotexts = ax.pie(percentages, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), explode=[0.1,0,0,0], shadow=True, pctdistance=0.85, colors=new_colors)\n\nax.legend(wedges, age_group,\n          title=\"Age Group\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Age Distribution\")\n\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slices that contain the center point of the bounding box to 0.42. Additionally, enable the animated state for these slices and set it to True.",
        "Input_image": "./test_dataset/Pie/Pie_14f6491a6b4915c9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nage_group = [\"Under 18\",\"18-34\",\"35-64\",\"65+\"]\npercentages = [15, 35, 40, 10]\n\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\n# Updated color scheme for the pie chart\nnew_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\nwedges, texts, autotexts = ax.pie(percentages, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), explode=[0.1,0,0,0], shadow=True, pctdistance=0.85, colors=new_colors)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 2]:  # Index 1 for 18-34, and Index 2 for 35-64\n        wedge.set_alpha(0.42)\n        wedge.set_animated(True)\n\nax.legend(wedges, age_group,\n          title=\"Age Group\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Age Distribution\")\n\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,2",
        "Test_image": "./test_dataset/Pie/Pie_14f6491a6b4915c9/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_14f6491a6b4915c9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_14f6491a6b4915c9/myplot.png"
    },
    {
        "id": "Pie_e63d545faf30e617",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = [\"VR Headsets\", \"VR Software\", \"VR Games\", \"VR Application in Medicine\", \n          \"VR Application in Education\", \"VR Application in Military Training\", \n          \"VR Application in Entertainment\", \"VR Accessories\", \"VR Research and Development\"]\n\npercentages = [25, 20, 15, 10, 10, 5, 10, 3, 2]\n\n# Figure\nfig, ax = plt.subplots()\n\n# Pie chart\nax.pie(percentages, labels=labels, autopct='%.0f%%', \n        textprops={'size': 'smaller'}, radius=0.5, \n        explode=(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1), \n        shadow=True, labeldistance=1.2, pctdistance=0.7)\n\n# Title and Legends\nplt.title(\"Distribution of Virtual Reality Elements\")\nplt.legend(labels, title=\"Elements\", loc=\"upper right\")\n\n# Background color\nfig.patch.set_facecolor('lightgray')\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the line width of the slices that contain the center point of the bounding box to 2.83, and modify the line style of those same slices to 'dashdot'.",
        "Input_image": "./test_dataset/Pie/Pie_e63d545faf30e617/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = [\"VR Headsets\", \"VR Software\", \"VR Games\", \"VR Application in Medicine\", \n          \"VR Application in Education\", \"VR Application in Military Training\", \n          \"VR Application in Entertainment\", \"VR Accessories\", \"VR Research and Development\"]\n\npercentages = [25, 20, 15, 10, 10, 5, 10, 3, 2]\n\n# Figure\nfig, ax = plt.subplots()\n\n# Pie chart\nwedges, texts, autotexts = ax.pie(percentages, labels=labels, autopct='%.0f%%', \n        textprops={'size': 'smaller'}, radius=0.5, \n        explode=(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1), \n        shadow=True, labeldistance=1.2, pctdistance=0.7)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3, 5]:\n        wedge.set_linewidth(2.83)\n        wedge.set_linestyle('dashdot')\n\n# Title and Legends\nplt.title(\"Distribution of Virtual Reality Elements\")\nplt.legend(labels, title=\"Elements\", loc=\"upper right\")\n\n# Background color\nfig.patch.set_facecolor('lightgray')\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3,5",
        "Test_image": "./test_dataset/Pie/Pie_e63d545faf30e617/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_e63d545faf30e617/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_e63d545faf30e617/myplot.png"
    },
    {
        "id": "Pie_7d4eaf17e5e08054",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('white')  # Changed background color to white\n\ndata = ['Under 18', '18-34', '35+']\npercentage = [30, 40, 30]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d}%)\"\n\nexplode = (0.1, 0, 0) \ncolors = ['red','green','blue']\nwedges, texts, autotexts = ax.pie(percentage, labels=data, autopct=lambda pct: func(pct, percentage),\n                                  explode=explode, shadow=True, startangle=90, colors=colors)\n\nax.legend(wedges, data,\n          title=\"Age Groups\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"TV Viewing Percentage by Age Group\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the rasterized state of the slices that contain the center point of the bounding box to True, and also make those slices invisible by setting their visibility to False.",
        "Input_image": "./test_dataset/Pie/Pie_7d4eaf17e5e08054/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('white')  # Changed background color to white\n\ndata = ['Under 18', '18-34', '35+']\npercentage = [30, 40, 30]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d}%)\"\n\nexplode = (0.1, 0, 0) \ncolors = ['red','green','blue']\nwedges, texts, autotexts = ax.pie(percentage, labels=data, autopct=lambda pct: func(pct, percentage),\n                                  explode=explode, shadow=True, startangle=90, colors=colors)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:\n        wedge.set_rasterized(True)\n        wedge.set_visible(False)\n\nax.legend(wedges, data,\n          title=\"Age Groups\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"TV Viewing Percentage by Age Group\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_7d4eaf17e5e08054/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_7d4eaf17e5e08054/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_7d4eaf17e5e08054/myplot.png"
    },
    {
        "id": "Pie_ac6e0682790e5bcf",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10, 6), subplot_kw=dict(aspect=\"equal\"))\n\nagri_practices = [\"Shift to Organic Farming\",\n                  \"Adoption of Drought Tolerant Crops\",\n                  \"Use of Crop Rotation\",\n                  \"Increased Irrigation\",\n                  \"Investment in Greenhouses\",\n                  \"Implementation of Terracing\",\n                  \"Use of Weather Forecasting Technology\",\n                  \"Adoption of Genetically Modified Crops\"]\n\ndata = [20, 18, 15, 12, 10, 10, 10, 5]\n\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\nax.legend(wedges, agri_practices,\n          title=\"Agricultural Practices\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Agricultural Practices: A Pie Chart\")\n\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Fill the slices that contain the center point of the bounding box in the pie chart with a dotted pattern, and set their transparency to 0.5001505492585916.",
        "Input_image": "./test_dataset/Pie/Pie_ac6e0682790e5bcf/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10, 6), subplot_kw=dict(aspect=\"equal\"))\n\nagri_practices = [\"Shift to Organic Farming\",\n                  \"Adoption of Drought Tolerant Crops\",\n                  \"Use of Crop Rotation\",\n                  \"Increased Irrigation\",\n                  \"Investment in Greenhouses\",\n                  \"Implementation of Terracing\",\n                  \"Use of Weather Forecasting Technology\",\n                  \"Adoption of Genetically Modified Crops\"]\n\ndata = [20, 18, 15, 12, 10, 10, 10, 5]\n\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\ntarget_object = [1, 3]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_hatch('..')\n        wedge.set_alpha(0.5001505492585916)\n\nax.legend(wedges, agri_practices,\n          title=\"Agricultural Practices\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Agricultural Practices: A Pie Chart\")\n\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_ac6e0682790e5bcf/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_ac6e0682790e5bcf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_ac6e0682790e5bcf/myplot.png"
    },
    {
        "id": "Pie_3f7e1c7bc4284ecf",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\nindustries = [\"Power Plants\", \"Transportation\", \"Residential and Commercial Buildings\",\n              \"Industrial Processes\", \"Agriculture\", \"Waste Management\", \"Deforestation\", \n              \"Others\"]\n\npercentages = [30, 20, 15, 10, 10, 5, 5, 5]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10, 6), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, autopct='%1.1f%%', \n                                  pctdistance=0.85, labeldistance=1.1, \n                                  explode=[0.05]*8, shadow=True,\n                                  startangle=140)\n\n# Draw a white circle in the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Add a title\nplt.title('Percentage Distribution of Industries')\n\n# Add a legend\nplt.legend(wedges, industries, title=\"Industries\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color\nax.set_facecolor('gray')\n\n# Ensuring the figure is not cut off when saving\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Change the color of the slice that contains the center point of the bounding box to #0f7a01.",
        "Input_image": "./test_dataset/Pie/Pie_3f7e1c7bc4284ecf/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\nindustries = [\"Power Plants\", \"Transportation\", \"Residential and Commercial Buildings\",\n              \"Industrial Processes\", \"Agriculture\", \"Waste Management\", \"Deforestation\", \n              \"Others\"]\n\npercentages = [30, 20, 15, 10, 10, 5, 5, 5]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10, 6), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, autopct='%1.1f%%', \n                                  pctdistance=0.85, labeldistance=1.1, \n                                  explode=[0.05]*8, shadow=True,\n                                  startangle=140)\n\n# Draw a white circle in the centre\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Add a title\nplt.title('Percentage Distribution of Industries')\n\n# Add a legend\nplt.legend(wedges, industries, title=\"Industries\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color\nax.set_facecolor('gray')\n\n# Ensuring the figure is not cut off when saving\nplt.tight_layout()\n\n# Set the color of the object corresponding to the Target_object to #0f7a01\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 4]:\n        wedge.set_color('#0f7a01')\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_3f7e1c7bc4284ecf/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_3f7e1c7bc4284ecf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_3f7e1c7bc4284ecf/myplot.png"
    },
    {
        "id": "Pie_bb86239dad11e247",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO('''Decade,Trend Percentage\n\"1960s\",\"30%\"\n\"1980s\",\"35%\"\n\"2000s\",\"35%\"''')\n\n# Read the csv data\ndf = pd.read_csv(data, sep=\",\")\ndf['Trend Percentage'] = df['Trend Percentage'].str.rstrip('%').astype('float')\n\n# Labels and sizes\nlabels = df['Decade'].tolist()\nsizes = df['Trend Percentage'].tolist()\n\n# Create figure and axis\nfig, ax = plt.subplots()\n\n# Plot pie chart\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0.1, 0, 0), \n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, pctdistance=1.2, \n       colors=['#ff9999','#66b3ff','#99ff99'])\n\n# Set title and legend\nplt.title(\"Trend Percentage by Decade\")\nplt.legend(labels, title=\"Decades\", loc=\"upper right\")\n\n# Set figure background color\nfig.set_facecolor(\"lightgray\")\n\n# Layout setting and save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the color of the slice that contains the center point of the bounding box to #df9dde, and adjust the linewidth for that slice to 1.08.",
        "Input_image": "./test_dataset/Pie/Pie_bb86239dad11e247/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO('''Decade,Trend Percentage\n\"1960s\",\"30%\"\n\"1980s\",\"35%\"\n\"2000s\",\"35%\"''')\n\n# Read the csv data\ndf = pd.read_csv(data, sep=\",\")\ndf['Trend Percentage'] = df['Trend Percentage'].str.rstrip('%').astype('float')\n\n# Labels and sizes\nlabels = df['Decade'].tolist()\nsizes = df['Trend Percentage'].tolist()\n\n# Create figure and axis\nfig, ax = plt.subplots()\n\n# Plot pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0.1, 0, 0), \n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, pctdistance=1.2, \n       colors=['#ff9999','#66b3ff','#99ff99'])\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:\n        wedge.set_color('#df9dde')\n        wedge.set_linewidth(1.08)\n\n# Set title and legend\nplt.title(\"Trend Percentage by Decade\")\nplt.legend(labels, title=\"Decades\", loc=\"upper right\")\n\n# Set figure background color\nfig.set_facecolor(\"lightgray\")\n\n# Layout setting and save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_bb86239dad11e247/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_bb86239dad11e247/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_bb86239dad11e247/myplot.png"
    },
    {
        "id": "Pie_f54407727fe64dab",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    'Type of Media': ['Television', 'Radio', 'Newspaper', 'Social Media', 'Books', 'Magazines'],\n    'Percentage': [30, 20, 15, 25, 5, 5]\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to calculate the absolute values\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\n# Use the 'explode' parameter to slightly separate each piece of the pie\nexplode = (0.1, 0, 0, 0, 0, 0)\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(data['Percentage'], explode=explode, autopct=lambda pct: func(pct, data['Percentage']),\n                                  textprops=dict(color=\"w\"))\n\n# Add a legend\nax.legend(wedges, data['Type of Media'],\n          title=\"Type of Media\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title\nax.set_title(\"Distribution of Media Types\")\n\n# Set the background color\nax.set_facecolor(\"lightgray\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add an explode effect of 0.2806 to the slices that contain the center point of the bounding box, which will separate these slices from the pie.",
        "Input_image": "./test_dataset/Pie/Pie_f54407727fe64dab/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    'Type of Media': ['Television', 'Radio', 'Newspaper', 'Social Media', 'Books', 'Magazines'],\n    'Percentage': [30, 20, 15, 25, 5, 5]\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to calculate the absolute values\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\n# Use the 'explode' parameter to slightly separate each piece of the pie\nexplode = [0.2806166295543898 if i in [1, 3] else 0 for i in range(len(data['Type of Media']))]\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(data['Percentage'], explode=explode, autopct=lambda pct: func(pct, data['Percentage']),\n                                  textprops=dict(color=\"w\"))\n\n# Add a legend\nax.legend(wedges, data['Type of Media'],\n          title=\"Type of Media\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title\nax.set_title(\"Distribution of Media Types\")\n\n# Set the background color\nax.set_facecolor(\"lightgray\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_f54407727fe64dab/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_f54407727fe64dab/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_f54407727fe64dab/myplot.png"
    },
    {
        "id": "Pie_8919f15de82ffebb",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# data\ntech = [\"Navigation Systems\",\n        \"Artificial Intelligence\",\n        \"Camera Technology\",\n        \"Materials and Design\",\n        \"Power Efficiency\"]\n\ndata = [30, 25, 20, 15, 10]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), explode=(0, 0.1, 0, 0, 0), labeldistance=1.05, shadow=True, pctdistance=0.8, colors=['red', 'green', 'blue', 'orange', 'purple'])\n\nax.legend(wedges, tech,\n          title=\"Drone Technology\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Drone Technology Distribution\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state to False for the slices that contain the center point of the bounding box, and also set the rasterized state to True for those same slices.",
        "Input_image": "./test_dataset/Pie/Pie_8919f15de82ffebb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# data\ntech = [\"Navigation Systems\",\n        \"Artificial Intelligence\",\n        \"Camera Technology\",\n        \"Materials and Design\",\n        \"Power Efficiency\"]\n\ndata = [30, 25, 20, 15, 10]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), explode=(0, 0.1, 0, 0, 0), labeldistance=1.05, shadow=True, pctdistance=0.8, colors=['red', 'green', 'blue', 'orange', 'purple'])\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Artificial Intelligence, and Index 3 for Materials and Design\n        wedge.set_clip_on(False)\n        wedge.set_rasterized(True)\n\nax.legend(wedges, tech,\n          title=\"Drone Technology\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Drone Technology Distribution\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_8919f15de82ffebb/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_8919f15de82ffebb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_8919f15de82ffebb/myplot.png"
    },
    {
        "id": "Pie_efbc4581411d94b7",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nphobia_data = [\"30%\", \"20%\", \"15%\", \"10%\", \"15%\", \"10%\"]\nphobia_types = [\"Arachnophobia\", \"Claustrophobia\", \"Aerophobia\", \"Acrophobia\", \"Cynophobia\", \"Ophidiophobia\"]\n\ndata = [float(x.strip('%')) for x in phobia_data]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nexplode = (0.1, 0, 0, 0, 0, 0)  \ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6']\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"k\"), colors=colors, shadow=True)\n\nax.legend(wedges, phobia_types,\n          title=\"Phobias\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Pie Chart: Phobia Percentages\")\nfig.set_facecolor('lightgray') \nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the snap state of the slices that contain the center point of the bounding box to False. Also, apply a shadow effect to those slices with an offset of (3.21, 3.74) and use gray for the shadow color.",
        "Input_image": "./test_dataset/Pie/Pie_efbc4581411d94b7/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nphobia_data = [\"30%\", \"20%\", \"15%\", \"10%\", \"15%\", \"10%\"]\nphobia_types = [\"Arachnophobia\", \"Claustrophobia\", \"Aerophobia\", \"Acrophobia\", \"Cynophobia\", \"Ophidiophobia\"]\n\ndata = [float(x.strip('%')) for x in phobia_data]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nexplode = (0.1, 0, 0, 0, 0, 0)  \ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6']\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"k\"), colors=colors, shadow=True)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Claustrophobia, and Index 3 for Acrophobia\n        wedge.set_snap(False)\n        wedge.set_path_effects([SimplePatchShadow(offset=(3.21,3.74), shadow_rgbFace='gray'), Normal()])\n\nax.legend(wedges, phobia_types,\n          title=\"Phobias\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Pie Chart: Phobia Percentages\")\nfig.set_facecolor('lightgray') \nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_efbc4581411d94b7/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_efbc4581411d94b7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_efbc4581411d94b7/myplot.png"
    },
    {
        "id": "Pie_1a1f92d218e022bf",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nregions = ['North America', 'Asia', 'Europe', 'South America', 'Africa']\npercentages = [15, 50, 20, 10, 5]\n\nfig, ax = plt.subplots()\n\n# Pie chart parameters\nexplode = (0.1, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'North America')\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'grey']\n\n# Set font size for pie chart labels and autopct\nplt.rcParams['font.size'] = 14\n\nax.pie(percentages, explode=explode, labels=regions, colors=colors, autopct='%1.1f%%',\n       shadow=True, startangle=140, pctdistance=0.85, labeldistance=1.2)\n\nplt.title(\"Percentage Distribution of Regions\")  # Add title\n# Set font size for legend\nplt.legend(regions, title=\"Regions\", loc=\"upper right\", title_fontsize=12, fontsize=12)\n\n# Draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set the background color of the chart figure\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the linestyle of the slice that contains the center point of the bounding box to 'solid', and make that same slice rasterized by setting its state to True.",
        "Input_image": "./test_dataset/Pie/Pie_1a1f92d218e022bf/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nregions = ['North America', 'Asia', 'Europe', 'South America', 'Africa']\npercentages = [15, 50, 20, 10, 5]\n\nfig, ax = plt.subplots()\n\n# Pie chart parameters\nexplode = (0.1, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'North America')\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'grey']\n\n# Set font size for pie chart labels and autopct\nplt.rcParams['font.size'] = 14\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, labels=regions, colors=colors, autopct='%1.1f%%',\n       shadow=True, startangle=140, pctdistance=0.85, labeldistance=1.2)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Asia, and Index 3 for South America\n        wedge.set_linestyle('solid')\n        wedge.set_rasterized(True)\n\nplt.title(\"Percentage Distribution of Regions\")  # Add title\n# Set font size for legend\nplt.legend(regions, title=\"Regions\", loc=\"upper right\", title_fontsize=12, fontsize=12)\n\n# Draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set the background color of the chart figure\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_1a1f92d218e022bf/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_1a1f92d218e022bf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_1a1f92d218e022bf/myplot.png"
    },
    {
        "id": "Pie_f49d90cd07fcc589",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nage_group = [\"Under 20\", \"20-40\", \"40 and above\"]\nconsumption_percentage = [30, 45, 25]\n\n# Additional parameters for the pie chart\nexplode = (0.1, 0, 0)  # Only \"explode\" the 1st slice (i.e. 'Under 20')\ncolors = ['blue', 'green', 'red']  # Changed the segment colors\n\n# Create a new figure, with a single axis\nfig1, ax1 = plt.subplots()\n\n# Plot the pie chart\nax1.pie(consumption_percentage, explode=explode, labels=age_group, colors=colors, autopct='%1.1f%%', \n        shadow=True, startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')  \n\n# Set the title and labels\nplt.title('Fast Food Consumption Percentage by Age Group')\nplt.xlabel('Age Group')\nplt.ylabel('Consumption Percentage')\n\n# Set the background color\nax1.set_facecolor('whitesmoke')  # Changed the background color\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slices that contain the center point of the bounding box to 0.305. Additionally, set the border thickness of these slices to 1.72 and change the border color to #e987e8.",
        "Input_image": "./test_dataset/Pie/Pie_f49d90cd07fcc589/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nage_group = [\"Under 20\", \"20-40\", \"40 and above\"]\nconsumption_percentage = [30, 45, 25]\n\n# Additional parameters for the pie chart\nexplode = (0.1, 0, 0)  # Only \"explode\" the 1st slice (i.e. 'Under 20')\ncolors = ['blue', 'green', 'red']  # Changed the segment colors\n\n# Create a new figure, with a single axis\nfig1, ax1 = plt.subplots()\n\n# Plot the pie chart\nwedges, texts, autotexts = ax1.pie(consumption_percentage, explode=explode, labels=age_group, colors=colors, autopct='%1.1f%%', \n        shadow=True, startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')  \n\n# Set the title and labels\nplt.title('Fast Food Consumption Percentage by Age Group')\nplt.xlabel('Age Group')\nplt.ylabel('Consumption Percentage')\n\n# Set the background color\nax1.set_facecolor('whitesmoke')  # Changed the background color\n\n# Modify the transparency and border thickness of the segments corresponding to the Target_object\ntarget_object = [1]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_alpha(0.3051667248870085)\n        wedge.set_linewidth(1.7205016961538009)\n        wedge.set_edgecolor('#e987e8')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_f49d90cd07fcc589/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_f49d90cd07fcc589/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_f49d90cd07fcc589/myplot.png"
    },
    {
        "id": "Pie_62a254333dbe16d8",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data Preparation\nsubjects = [\"Mathematics\", \"Science\", \"English\", \"History\", \"Arts\",\"Physical Education\"]\npercentage = [20, 25, 30, 10, 10, 5]\n\n# Define a new color palette\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6']\n\n# Create Pie Chart\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0, 0, 0, 0), labels=subjects, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors)\n\n# Draw white center for donut chart\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set the background color of the chart\nax.set_facecolor('gray')\n\n# Title of the chart\nplt.title('Subject Percentage Distribution')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the linewidth of the slice that includes the center point of the bounding box to 4.91. For that same slice, set a stroke with a linewidth of 4.472 and a foreground color of #7acf3d.",
        "Input_image": "./test_dataset/Pie/Pie_62a254333dbe16d8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Data Preparation\nsubjects = [\"Mathematics\", \"Science\", \"English\", \"History\", \"Arts\",\"Physical Education\"]\npercentage = [20, 25, 30, 10, 10, 5]\n\n# Define a new color palette\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6']\n\n# Create Pie Chart\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0, 0, 0, 0), labels=subjects, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors)\n\n# Apply modifications to selected slices\nstroke_effect = path_effects.withStroke(linewidth=4.472490512853932, foreground='#7acf3d')\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Science, and Index 3 for History\n        wedge.set_linewidth(4.91)\n        wedge.set_path_effects([stroke_effect])\n\n# Draw white center for donut chart\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set the background color of the chart\nax.set_facecolor('gray')\n\n# Title of the chart\nplt.title('Subject Percentage Distribution')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_62a254333dbe16d8/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_62a254333dbe16d8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_62a254333dbe16d8/myplot.png"
    },
    {
        "id": "Pie_f9b808ad36c4a38b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data preparation\ndata = {\"Disease\": [\"Cancer\", \"Heart Disease\", \"Stroke\", \"Respiratory Diseases\", \"Diabetes\", \"Alzheimer's Disease\", \"Kidney Disease\"],\n        \"Percentage\": [20, 15, 10, 25, 15, 10, 5]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the background color of the figure\nfig.set_facecolor('gray')\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(df['Percentage'], autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = (0.05,0.05,0.05,0.05,0.05,0.05,0.05))\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Set the title of the chart\nplt.title('Percentage of Diseases')\n\n# Add labels to the pie chart\nlabels = df['Disease']\nplt.legend(wedges, labels, title =\"Diseases\", loc =\"center left\", bbox_to_anchor =(1, 0, 0.5, 1))\n\n# Adjust layout to make room for the legend, and save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the slices that contain the center point of the bounding box to False. Also, change the linestyle of those same slices to 'dotted'.",
        "Input_image": "./test_dataset/Pie/Pie_f9b808ad36c4a38b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data preparation\ndata = {\"Disease\": [\"Cancer\", \"Heart Disease\", \"Stroke\", \"Respiratory Diseases\", \"Diabetes\", \"Alzheimer's Disease\", \"Kidney Disease\"],\n        \"Percentage\": [20, 15, 10, 25, 15, 10, 5]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the background color of the figure\nfig.set_facecolor('gray')\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(df['Percentage'], autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = (0.05,0.05,0.05,0.05,0.05,0.05,0.05))\n\n# Modify the clipping state and linestyle of the selected wedges\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Heart Disease, and Index 3 for Respiratory Diseases\n        wedge.set_clip_on(False)\n        wedge.set_linestyle('dotted')\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Set the title of the chart\nplt.title('Percentage of Diseases')\n\n# Add labels to the pie chart\nlabels = df['Disease']\nplt.legend(wedges, labels, title =\"Diseases\", loc =\"center left\", bbox_to_anchor =(1, 0, 0.5, 1))\n\n# Adjust layout to make room for the legend, and save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_f9b808ad36c4a38b/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_f9b808ad36c4a38b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_f9b808ad36c4a38b/myplot.png"
    },
    {
        "id": "Pie_604a4f1b894e0022",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The data\njobs = ['Doctors', 'Engineers', 'Teachers']\npercentage = [40, 30, 30]\n\n# Creating the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Setting the background color of the figure\nfig.patch.set_facecolor('gray')\n\n# Creating the pie chart\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0), labels=jobs, autopct='%1.1f%%', shadow=True, startangle=140, colors=['blue', 'orange', 'green'])\n\n# Title for the pie chart\nax.set_title('Percentage of Different Professions')\n\n# Adding the legend\nax.legend(wedges, jobs, title='Professions', loc='center left', bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight='bold')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the clipping state of the slices that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Pie/Pie_604a4f1b894e0022/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The data\njobs = ['Doctors', 'Engineers', 'Teachers']\npercentage = [40, 30, 30]\n\n# Creating the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Setting the background color of the figure\nfig.patch.set_facecolor('gray')\n\n# Creating the pie chart\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0), labels=jobs, autopct='%1.1f%%', shadow=True, startangle=140, colors=['blue', 'orange', 'green'])\n\n# Title for the pie chart\nax.set_title('Percentage of Different Professions')\n\n# Adding the legend\nax.legend(wedges, jobs, title='Professions', loc='center left', bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight='bold')\n\n# Set the clipping state of the object corresponding to the Target_object to False\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:\n        wedge.set_clip_on(False)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_604a4f1b894e0022/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_604a4f1b894e0022/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_604a4f1b894e0022/myplot.png"
    },
    {
        "id": "Pie_38c5b0d480eaa23d",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = '''Category,Percentage\n\"Enterprise Software\",\"30%\"\n\"Cloud Services\",\"20%\"\n\"Business Intelligence and Analytics\",\"15%\"\n\"Data Management and Software\",\"10%\"\n\"Security Software\",\"10%\"\n\"Software Development Tools\",\"10%\"\n\"Other Software\",\"5%\"'''\n\n# Creating DataFrame from given data\ndf = pd.read_csv(StringIO(data))\n\n# Converting percentage to float\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nfig, ax = plt.subplots()\n\n# Pie chart parameters with new color scheme\ncolors = ['#1f77b4', '#aec7e8', '#4c78a8', '#7f7f7f', '#9edae5', '#c5b0d5', '#17becf']  # New shades of blue\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Pie chart creation with new colors\nax.pie(df['Percentage'], explode=explode, labels=df['Category'], colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.title(\"Software Category Distribution\")  # Add title\nplt.legend(df['Category'], title=\"Categories\", loc=\"upper right\")  # Add legend\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nfig.patch.set_facecolor('gray')  # Set the background color to gray\nplt.tight_layout()  # Adjust subplot parameters to give specified padding\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the picker state of the slice that contains the center point of the bounding box to False, and also hide that slice by setting its visibility to False.",
        "Input_image": "./test_dataset/Pie/Pie_38c5b0d480eaa23d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = '''Category,Percentage\n\"Enterprise Software\",\"30%\"\n\"Cloud Services\",\"20%\"\n\"Business Intelligence and Analytics\",\"15%\"\n\"Data Management and Software\",\"10%\"\n\"Security Software\",\"10%\"\n\"Software Development Tools\",\"10%\"\n\"Other Software\",\"5%\"'''\n\n# Creating DataFrame from given data\ndf = pd.read_csv(StringIO(data))\n\n# Converting percentage to float\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nfig, ax = plt.subplots()\n\n# Pie chart parameters with new color scheme\ncolors = ['#1f77b4', '#aec7e8', '#4c78a8', '#7f7f7f', '#9edae5', '#c5b0d5', '#17becf']  # New shades of blue\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Pie chart creation with new colors\nwedges, texts, autotexts = ax.pie(df['Percentage'], explode=explode, labels=df['Category'], colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Cloud Services, and Index 3 for Data Management and Software\n        wedge.set_picker(False)\n        wedge.set_visible(False)\n\nplt.title(\"Software Category Distribution\")  # Add title\nplt.legend(df['Category'], title=\"Categories\", loc=\"upper right\")  # Add legend\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nfig.patch.set_facecolor('gray')  # Set the background color to gray\nplt.tight_layout()  # Adjust subplot parameters to give specified padding\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_38c5b0d480eaa23d/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_38c5b0d480eaa23d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_38c5b0d480eaa23d/myplot.png"
    },
    {
        "id": "Pie_b5c349a4fe0c2266",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\nindustries = [\"Power Plants\", \"Transportation\", \"Residential and Commercial Buildings\",\n              \"Industrial Processes\", \"Agriculture\", \"Waste Management\", \"Deforestation\", \n              \"Others\"]\n\npercentages = [30, 20, 15, 10, 10, 5, 5, 5]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10, 6), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, autopct='%1.1f%%', \n                                  pctdistance=0.85, labeldistance=1.1, \n                                  explode=[0.05]*8, shadow=True,\n                                  startangle=140)\n\n# Draw a white circle in the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Add a title\nplt.title('Percentage Distribution of Industries')\n\n# Add a legend\nplt.legend(wedges, industries, title=\"Industries\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color\nax.set_facecolor('gray')\n\n# Ensuring the figure is not cut off when saving\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Fill the slices that contain the center point of the bounding box with a wave-like pattern.",
        "Input_image": "./test_dataset/Pie/Pie_b5c349a4fe0c2266/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\nindustries = [\"Power Plants\", \"Transportation\", \"Residential and Commercial Buildings\",\n              \"Industrial Processes\", \"Agriculture\", \"Waste Management\", \"Deforestation\", \n              \"Others\"]\n\npercentages = [30, 20, 15, 10, 10, 5, 5, 5]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10, 6), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, autopct='%1.1f%%', \n                                  pctdistance=0.85, labeldistance=1.1, \n                                  explode=[0.05]*8, shadow=True,\n                                  startangle=140)\n\n# Draw a white circle in the centre\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Add a title\nplt.title('Percentage Distribution of Industries')\n\n# Add a legend\nplt.legend(wedges, industries, title=\"Industries\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color\nax.set_facecolor('gray')\n\n# Fill the segments corresponding to the Target_object of the pie chart with wave-like pattern\ntarget_object = [1, 3]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_hatch('o')\n\n# Ensuring the figure is not cut off when saving\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_b5c349a4fe0c2266/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_b5c349a4fe0c2266/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_b5c349a4fe0c2266/myplot.png"
    },
    {
        "id": "Pie_a907b6ae541293aa",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data preparation\nplatforms = [\"PlayStation\", \"Xbox\", \"PC\", \"Nintendo Switch\", \"Mobile\", \"Others\"]\npercentages = [20, 15, 30, 15, 15, 5]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to format the percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(percentages, \n                                  autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"),\n                                  explode=(0.1, 0, 0, 0, 0, 0),\n                                  shadow=True,\n                                  colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'])\n\n# Adding legend and title\nax.legend(wedges, platforms,\n          title=\"Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\nax.set_title(\"Percentage of Gaming Platforms Usage\")\n\n# Setting the background color\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the border thickness of the slices that contain the center point of the bounding box to 1.63 and change the line color to black.",
        "Input_image": "./test_dataset/Pie/Pie_a907b6ae541293aa/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data preparation\nplatforms = [\"PlayStation\", \"Xbox\", \"PC\", \"Nintendo Switch\", \"Mobile\", \"Others\"]\npercentages = [20, 15, 30, 15, 15, 5]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to format the percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(percentages, \n                                  autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"),\n                                  explode=(0.1, 0, 0, 0, 0, 0),\n                                  shadow=True,\n                                  colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'])\n\n# Adding legend and title\nax.legend(wedges, platforms,\n          title=\"Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\nax.set_title(\"Percentage of Gaming Platforms Usage\")\n\n# Setting the background color\nfig.set_facecolor('lightgray')\n\n# Set the border thickness and line color for selected segments\ntarget_object = [1, 3]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_linewidth(1.6297881785788932)\n        wedge.set_edgecolor('black')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_a907b6ae541293aa/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_a907b6ae541293aa/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_a907b6ae541293aa/myplot.png"
    },
    {
        "id": "Pie_c8d234972ffa2298",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data to plot\nlabels = ['Movies', 'Music', 'Sports', 'Video Games', 'Books', 'Theater', 'Art Exhibits']\nsizes = [20, 15, 10, 25, 15, 10, 5]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'purple', 'pink', 'orange']\nexplode = (0.1, 0, 0, 0.1, 0, 0, 0)  # Exploding 1st and 4th slice\n\n# Plotting the pie chart\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax.set_title(\"Percentage Distribution of Forms of Entertainment\")  # Set the title of the chart\nplt.tight_layout()  # Adjust the layout\nfig.patch.set_facecolor('gray')  # Set the background color to gray\nplt.savefig(\"myplot.png\")  # Save the figure",
        "Instruction": "Adjust the transparency of the slices that contain the center point of the bounding box to 0.93 and set their linewidth to 4.23.",
        "Input_image": "./test_dataset/Pie/Pie_c8d234972ffa2298/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data to plot\nlabels = ['Movies', 'Music', 'Sports', 'Video Games', 'Books', 'Theater', 'Art Exhibits']\nsizes = [20, 15, 10, 25, 15, 10, 5]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'purple', 'pink', 'orange']\nexplode = (0.1, 0, 0, 0.1, 0, 0, 0)  # Exploding 1st and 4th slice\n\n# Plotting the pie chart\nfig, ax = plt.subplots()\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [0, 3]:  # Index 0 for Movies, and Index 3 for Video Games\n        wedge.set_alpha(0.93)\n        wedge.set_linewidth(4.23)\n\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax.set_title(\"Percentage Distribution of Forms of Entertainment\")  # Set the title of the chart\nplt.tight_layout()  # Adjust the layout\nfig.patch.set_facecolor('gray')  # Set the background color to gray\nplt.savefig(\"Edit_figure.png\")  # Save the figure\n",
        "Target_object": "0,3",
        "Test_image": "./test_dataset/Pie/Pie_c8d234972ffa2298/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_c8d234972ffa2298/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_c8d234972ffa2298/myplot.png"
    },
    {
        "id": "Pie_0be0383b94c9613e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = ['1960s', '1970s', '1980s', '1990s']\nsizes = [25, 30, 20, 25]\n\nfig, ax = plt.subplots()\n\n# Make the pie chart\nexplode = (0.1, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. '1960s')\nax.pie(sizes, explode=explode, labels=labels, autopct='%.0f%%', shadow=True, startangle=90, pctdistance=0.85, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n\n# Draw a circle at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\nplt.title(\"Decade Distribution\") # Add title\nplt.legend(labels, title=\"Decades\", loc=\"upper right\") # Add legend\n\n# set the background color of the figure\nfig.set_facecolor(\"gray\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the snap state of the slice that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Pie/Pie_0be0383b94c9613e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = ['1960s', '1970s', '1980s', '1990s']\nsizes = [25, 30, 20, 25]\n\nfig, ax = plt.subplots()\n\n# Make the pie chart\nexplode = (0.1, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. '1960s')\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, autopct='%.0f%%', shadow=True, startangle=90, pctdistance=0.85, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for 1970s, and Index 3 for 1990s\n        wedge.set_snap(False)\n\n# Draw a circle at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\nplt.title(\"Decade Distribution\") # Add title\nplt.legend(labels, title=\"Decades\", loc=\"upper right\") # Add legend\n\n# set the background color of the figure\nfig.set_facecolor(\"gray\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_0be0383b94c9613e/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_0be0383b94c9613e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_0be0383b94c9613e/myplot.png"
    },
    {
        "id": "Pie_b14d9ff09508c245",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# CSV data\ndata_csv = [\n    [\"Electric Vehicle Components\",\"Percentage\"],\n    [\"Battery\",\"40%\"],\n    [\"Motor\",\"30%\"],\n    [\"Charging Infrastructure\",\"20%\"],\n    [\"Regenerative Braking System\",\"5%\"],\n    [\"Other Components\",\"5%\"]\n]\n\n# Extracting the components and their respective percentages\ncomponents = [row[0] for row in data_csv[1:]]\npercentages = [float(row[1].strip('%')) for row in data_csv[1:]]\n\n# Creating a pie chart\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, explode=(0.1, 0, 0, 0, 0), labels=components, autopct='%1.1f%%', shadow=True, startangle=90, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99', '#c2c2f0'])\n\n# Adding a legend\nax.legend(wedges, components, title=\"Electric Vehicle Components\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Adding title and labels\nax.set_title(\"Electric Vehicle Component Distribution\")\nplt.xlabel(\"Components\")\nplt.ylabel(\"Percentage\")\n\n# Setting background color to white\nfig.patch.set_facecolor('white')\n\n# Adjusting layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the slice that contains the center point of the bounding box to False, and update its label to 'A new Label'.",
        "Input_image": "./test_dataset/Pie/Pie_b14d9ff09508c245/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# CSV data\ndata_csv = [\n    [\"Electric Vehicle Components\",\"Percentage\"],\n    [\"Battery\",\"40%\"],\n    [\"Motor\",\"30%\"],\n    [\"Charging Infrastructure\",\"20%\"],\n    [\"Regenerative Braking System\",\"5%\"],\n    [\"Other Components\",\"5%\"]\n]\n\n# Extracting the components and their respective percentages\ncomponents = [row[0] for row in data_csv[1:]]\npercentages = [float(row[1].strip('%')) for row in data_csv[1:]]\n\n# Creating a pie chart\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, explode=(0.1, 0, 0, 0, 0), labels=components, autopct='%1.1f%%', shadow=True, startangle=90, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99', '#c2c2f0'])\n\n# Modifying the animated state and label of the target objects\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Motor, and Index 3 for Regenerative Braking System\n        wedge.set_animated(False)\n        texts[idx].set_text('A new Label')\n\n# Adding a legend\nax.legend(wedges, components, title=\"Electric Vehicle Components\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Adding title and labels\nax.set_title(\"Electric Vehicle Component Distribution\")\nplt.xlabel(\"Components\")\nplt.ylabel(\"Percentage\")\n\n# Setting background color to white\nfig.patch.set_facecolor('white')\n\n# Adjusting layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_b14d9ff09508c245/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_b14d9ff09508c245/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_b14d9ff09508c245/myplot.png"
    },
    {
        "id": "Pie_88c946380b5e8d9c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nage_groups = [\"Under 18\",\"18-24\",\"25-34\",\"35-44\",\"45-54\",\"55+\"]\npercentages = [12, 18, 30, 22, 10, 8]\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Under 18')\n\nfig, ax = plt.subplots() \n\nax.pie(percentages, explode=explode, labels=age_groups, autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title(\"Age Group Distribution\") # Add title\nplt.legend(age_groups, title=\"Age Groups\", loc=\"upper right\") # Add legend\n\n# Change the background color of the chart to white\nfig.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterized state of the slices that contain the center point of the bounding box to True. For these same slices, apply a stroke with a line width of 4.33 and a foreground color of #15fac8.",
        "Input_image": "./test_dataset/Pie/Pie_88c946380b5e8d9c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Given data\nage_groups = [\"Under 18\",\"18-24\",\"25-34\",\"35-44\",\"45-54\",\"55+\"]\npercentages = [12, 18, 30, 22, 10, 8]\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Under 18')\n\nfig, ax = plt.subplots() \n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, labels=age_groups, autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nstroke_effect = path_effects.withStroke(linewidth=4.33304769828416, foreground='#15fac8')\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for \"18-24\", and Index 3 for \"35-44\"\n        wedge.set_rasterized(True)\n        wedge.set_path_effects([stroke_effect])\n\nplt.title(\"Age Group Distribution\") # Add title\nplt.legend(age_groups, title=\"Age Groups\", loc=\"upper right\") # Add legend\n\n# Change the background color of the chart to white\nfig.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_88c946380b5e8d9c/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_88c946380b5e8d9c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_88c946380b5e8d9c/myplot.png"
    },
    {
        "id": "Pie_f46e9220b498e3c2",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# given data\nfields = [\"Hardware Development\", \"Software Development\", \"User Experience Design\", \"Market Adoption\"]\npercentage = [25, 35, 30, 10]\n\n# create figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# create pie chart\nwedges, texts, autotexts = ax.pie(percentage, labels=fields, autopct='%1.1f%%', startangle=-40, \n                                   explode=(0.1, 0, 0, 0), labeldistance=1.15, shadow=True, \n                                   pctdistance=0.8, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n\n# change background color\nfig.patch.set_facecolor('gray')\n\n# setting title\nax.set_title(\"Percentage of Different Fields\")\n\n# saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the clipping state of the slices that contain the center point of the bounding box to False. For those same slices, add a shadow effect with an offset of (3.61, 2.50) and set the shadow color to gray.",
        "Input_image": "./test_dataset/Pie/Pie_f46e9220b498e3c2/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# given data\nfields = [\"Hardware Development\", \"Software Development\", \"User Experience Design\", \"Market Adoption\"]\npercentage = [25, 35, 30, 10]\n\n# create figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# create pie chart\nwedges, texts, autotexts = ax.pie(percentage, labels=fields, autopct='%1.1f%%', startangle=-40, \n                                   explode=(0.1, 0, 0, 0), labeldistance=1.15, shadow=True, \n                                   pctdistance=0.8, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n\n# change background color\nfig.patch.set_facecolor('gray')\n\n# setting title\nax.set_title(\"Percentage of Different Fields\")\n\n# modify specific wedges\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:  # Index 1 for Software Development\n        wedge.set_clip_on(False)\n        wedge.set_path_effects([SimplePatchShadow(offset=(3.61,2.50), shadow_rgbFace='gray'), Normal()])\n\n# saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_f46e9220b498e3c2/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_f46e9220b498e3c2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_f46e9220b498e3c2/myplot.png"
    },
    {
        "id": "Pie_e8def68f432ec6b5",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\nindustries = [\"Power Plants\", \"Transportation\", \"Residential and Commercial Buildings\",\n              \"Industrial Processes\", \"Agriculture\", \"Waste Management\", \"Deforestation\", \n              \"Others\"]\n\npercentages = [30, 20, 15, 10, 10, 5, 5, 5]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10, 6), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, autopct='%1.1f%%', \n                                  pctdistance=0.85, labeldistance=1.1, \n                                  explode=[0.05]*8, shadow=True,\n                                  startangle=140)\n\n# Draw a white circle in the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Add a title\nplt.title('Percentage Distribution of Industries')\n\n# Add a legend\nplt.legend(wedges, industries, title=\"Industries\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color\nax.set_facecolor('gray')\n\n# Ensuring the figure is not cut off when saving\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Update the linewidth of the slices that contain the center point of the bounding box to 1.73, and ensure that their snap state is set to True as well.",
        "Input_image": "./test_dataset/Pie/Pie_e8def68f432ec6b5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given Data\nindustries = [\"Power Plants\", \"Transportation\", \"Residential and Commercial Buildings\",\n              \"Industrial Processes\", \"Agriculture\", \"Waste Management\", \"Deforestation\", \n              \"Others\"]\n\npercentages = [30, 20, 15, 10, 10, 5, 5, 5]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10, 6), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, autopct='%1.1f%%', \n                                  pctdistance=0.85, labeldistance=1.1, \n                                  explode=[0.05]*8, shadow=True,\n                                  startangle=140)\n\n# Draw a white circle in the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Add a title\nplt.title('Percentage Distribution of Industries')\n\n# Add a legend\nplt.legend(wedges, industries, title=\"Industries\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color\nax.set_facecolor('gray')\n\n# Modify specific wedges\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Transportation, and Index 3 for Industrial Processes\n        wedge.set_linewidth(1.73)\n        wedge.set_snap(True)\n\n# Ensuring the figure is not cut off when saving\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_e8def68f432ec6b5/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_e8def68f432ec6b5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_e8def68f432ec6b5/myplot.png"
    },
    {
        "id": "Pie_6ccebc1d9edd938c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# CSV data\ndata = {\n    \"Demographics\": [\"Youths (12-18)\", \"Adults (19-60)\", \"Seniors (61+)\"],\n    \"Percentage\": [30, 50, 20]\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nax.set_facecolor('gray')\n\n# Draw pie chart\nwedges, texts, autotexts = ax.pie(data[\"Percentage\"], explode=(0.1, 0, 0), labels=data[\"Demographics\"], autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Draw white circles at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Title\nplt.title('Demographic Distribution')\n\n# Legends\nplt.legend(wedges, data[\"Demographics\"],\n          title=\"Demographics\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Hide the slice that contains the center point of the bounding box.",
        "Input_image": "./test_dataset/Pie/Pie_6ccebc1d9edd938c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# CSV data\ndata = {\n    \"Demographics\": [\"Youths (12-18)\", \"Adults (19-60)\", \"Seniors (61+)\"],\n    \"Percentage\": [30, 50, 20]\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nax.set_facecolor('gray')\n\n# Draw pie chart\nwedges, texts, autotexts = ax.pie(data[\"Percentage\"], explode=(0.1, 0, 0), labels=data[\"Demographics\"], autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Set visibility of the selected wedge to False\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:  # Index 1 for Adults (19-60)\n        wedge.set_visible(False)\n\n# Draw white circles at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Title\nplt.title('Demographic Distribution')\n\n# Legends\nplt.legend(wedges, data[\"Demographics\"],\n          title=\"Demographics\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_6ccebc1d9edd938c/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_6ccebc1d9edd938c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_6ccebc1d9edd938c/myplot.png"
    },
    {
        "id": "Pie_2ba129cd2ee6a370",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Positive Impact', 'Negative Impact', 'No Impact'\nsizes = [30, 50, 20]\n\nfig, ax = plt.subplots()\n\n# Optional parameters\nexplode = (0.1, 0, 0)  # \"explode\" the 1st slice (i.e., 'Positive Impact')\n\n# New color scheme using hexadecimal values\ncolors = ['#99ff99', '#ff6666', '#66b3ff']  # Light green, light red, light blue\n\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nax.set_facecolor('white')  # Change the background color to white\nplt.title(\"Social Media Impact\")  # Add title\nplt.legend(labels, title=\"Impact Type\", loc=\"upper right\")  # Add legend\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Fill the segments in the pie chart that contain the center point of the bounding box with circles.",
        "Input_image": "./test_dataset/Pie/Pie_2ba129cd2ee6a370/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Positive Impact', 'Negative Impact', 'No Impact'\nsizes = [30, 50, 20]\n\nfig, ax = plt.subplots()\n\n# Optional parameters\nexplode = (0.1, 0, 0)  # \"explode\" the 1st slice (i.e., 'Positive Impact')\n\n# New color scheme using hexadecimal values\ncolors = ['#99ff99', '#ff6666', '#66b3ff']  # Light green, light red, light blue\n\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Fill the segments corresponding to the Target_object with concentric circles\ntarget_object = [0, 2]  # Randomly selected indices\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_hatch('o')\n\nax.set_facecolor('white')  # Change the background color to white\nplt.title(\"Social Media Impact\")  # Add title\nplt.legend(labels, title=\"Impact Type\", loc=\"upper right\")  # Add legend\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Pie/Pie_2ba129cd2ee6a370/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_2ba129cd2ee6a370/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_2ba129cd2ee6a370/myplot.png"
    },
    {
        "id": "Pie_cfb4d636d907dc6f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ninternet_access = [\"Mobile Internet\",\"Satellite Internet\",\"Dial-Up Internet\",\"Fixed Wireless Internet\",\"Cable Internet\",\"DSL Internet\",\"No Internet Access\"]\npercentage = [30, 15, 5, 15, 20, 10, 5]\n\n# Define new color palette\ncolors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#FFD700', '#C0C0C0', '#F08080']\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plot the pie chart with the new colors\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0, 0, 0, 0, 0), labels=internet_access, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors)\n\n# Draw white circle in the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set the background color\nax.set_facecolor('gray')\n\n# Set the title\nax.set_title('Internet Access Type Distribution')\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label of the slice that contains the center point of the bounding box to 'A new Label', and set the linewidth of that slice to 3.92.",
        "Input_image": "./test_dataset/Pie/Pie_cfb4d636d907dc6f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ninternet_access = [\"Mobile Internet\",\"Satellite Internet\",\"Dial-Up Internet\",\"Fixed Wireless Internet\",\"Cable Internet\",\"DSL Internet\",\"No Internet Access\"]\npercentage = [30, 15, 5, 15, 20, 10, 5]\n\n# Define new color palette\ncolors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#FFD700', '#C0C0C0', '#F08080']\n\n# Create figure and axes\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plot the pie chart with the new colors\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0, 0, 0, 0, 0), labels=internet_access, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors)\n\n# Modify the label and linewidth of the selected slices\nfor idx, text in enumerate(texts):\n    if idx in [1, 4]:  # Index 1 for Satellite Internet, and Index 4 for Cable Internet\n        text.set_text('A new Label')\n        wedges[idx].set_linewidth(3.92)\n\n# Draw white circle in the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Set the background color\nax.set_facecolor('gray')\n\n# Set the title\nax.set_title('Internet Access Type Distribution')\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_cfb4d636d907dc6f/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_cfb4d636d907dc6f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_cfb4d636d907dc6f/myplot.png"
    },
    {
        "id": "Pie_13784665c79ddffc",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nsectors = [\"Information Technology\", \"Financial Services\", \"Healthcare\", \"Education\",\n           \"Engineering\", \"Government\", \"Retail\", \"Unemployed\"]\npercentages = [20, 15, 15, 10, 10, 10, 10, 10]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, explode=(0.1, 0, 0, 0, 0, 0, 0, 0), labels=sectors, \n                                  autopct='%1.1f%%', shadow=True, startangle=90)\n\nax.set_title(\"Employment Sector Distribution\")\nax.set_facecolor('gray')\nfig.set_facecolor('lightgray')\n\nfor text in texts:\n    text.set_color('black')\nfor autotext in autotexts:\n    autotext.set_color('black')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterized state of the slices containing the center point of the bounding box to False. Additionally, for the same slices, enable the snap state by setting it to True.",
        "Input_image": "./test_dataset/Pie/Pie_13784665c79ddffc/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nsectors = [\"Information Technology\", \"Financial Services\", \"Healthcare\", \"Education\",\n           \"Engineering\", \"Government\", \"Retail\", \"Unemployed\"]\npercentages = [20, 15, 15, 10, 10, 10, 10, 10]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts, autotexts = ax.pie(percentages, explode=(0.1, 0, 0, 0, 0, 0, 0, 0), labels=sectors, \n                                  autopct='%1.1f%%', shadow=True, startangle=90)\n\nax.set_title(\"Employment Sector Distribution\")\nax.set_facecolor('gray')\nfig.set_facecolor('lightgray')\n\nfor text in texts:\n    text.set_color('black')\nfor autotext in autotexts:\n    autotext.set_color('black')\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Financial Services, and Index 3 for Education\n        wedge.set_rasterized(False)\n        wedge.set_snap(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_13784665c79ddffc/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_13784665c79ddffc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_13784665c79ddffc/myplot.png"
    },
    {
        "id": "Pie_29856b3abe164e3d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = [\"Anxiety\", \"Depression\", \"Bipolar Disorder\", \"Schizophrenia\",\n          \"Post-Traumatic Stress Disorder\", \"Eating Disorders\",\n          \"Attention Deficit Hyperactivity Disorder\", \"Obsessive-Compulsive Disorder\", \"Others\"]\nsizes = [25, 20, 15, 10, 10, 5, 7, 5, 3]\n\n# Create figure and axis\nfig, ax = plt.subplots()\n\n# Set background color\nfig.patch.set_facecolor('gray')\n\n# Plot pie chart\nax.pie(sizes, labels=labels, autopct='%1.1f%%', pctdistance=0.85, labeldistance=1.1, colors=plt.cm.Pastel1.colors)\n\n# Draw white circle at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add title, legend\nplt.title(\"Prevalence of Mental Health Disorders\") \nplt.legend(labels, title=\"Disorders\", loc=\"upper right\") \n\n# Tight layout and save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label of the slice that contains the center point of the bounding box to 'A new Label' and set its snap state to False.",
        "Input_image": "./test_dataset/Pie/Pie_29856b3abe164e3d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = [\"Anxiety\", \"Depression\", \"Bipolar Disorder\", \"Schizophrenia\",\n          \"Post-Traumatic Stress Disorder\", \"Eating Disorders\",\n          \"Attention Deficit Hyperactivity Disorder\", \"Obsessive-Compulsive Disorder\", \"Others\"]\nsizes = [25, 20, 15, 10, 10, 5, 7, 5, 3]\n\n# Create figure and axis\nfig, ax = plt.subplots()\n\n# Set background color\nfig.patch.set_facecolor('gray')\n\n# Plot pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', pctdistance=0.85, labeldistance=1.1, colors=plt.cm.Pastel1.colors)\n\n# Modify specific labels and snap state\nfor idx, text in enumerate(texts):\n    if idx in [1, 4]:  # Index 1 for Depression, and Index 4 for Post-Traumatic Stress Disorder\n        text.set_text('A new Label')\n        wedges[idx].set_snap(False)\n\n# Draw white circle at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add title, legend\nplt.title(\"Prevalence of Mental Health Disorders\") \nplt.legend(labels, title=\"Disorders\", loc=\"upper right\") \n\n# Tight layout and save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_29856b3abe164e3d/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_29856b3abe164e3d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_29856b3abe164e3d/myplot.png"
    },
    {
        "id": "Pie_27c64dc366044750",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nexercises = [\"Running\", \"Swimming\", \"Cycling\", \"Weightlifting\", \"Yoga\", \"Pilates\", \"CrossFit\", \"Dance\", \"Others\"]\ndata = [20, 15, 10, 15, 10, 10, 10, 5, 5]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to display percentage and absolute values\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Additional parameters for pie chart\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)  # explode 1st slice\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'red', 'purple', 'orange', 'cyan', 'brown']\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, labels=exercises, colors=colors, autopct=lambda pct: func(pct, data),\n                                  shadow=True, startangle=140, textprops=dict(color=\"w\"))\n\nax.legend(wedges, exercises,\n          title=\"Exercise Type\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Exercise Type Distribution\")\n\nfig.patch.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slices that contain the center point of the bounding box to 0.37, and ensure these slices are rasterized by setting their rasterized state to True.",
        "Input_image": "./test_dataset/Pie/Pie_27c64dc366044750/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nexercises = [\"Running\", \"Swimming\", \"Cycling\", \"Weightlifting\", \"Yoga\", \"Pilates\", \"CrossFit\", \"Dance\", \"Others\"]\ndata = [20, 15, 10, 15, 10, 10, 10, 5, 5]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to display percentage and absolute values\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Additional parameters for pie chart\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)  # explode 1st slice\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'red', 'purple', 'orange', 'cyan', 'brown']\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, labels=exercises, colors=colors, autopct=lambda pct: func(pct, data),\n                                  shadow=True, startangle=140, textprops=dict(color=\"w\"))\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Swimming, and Index 3 for Weightlifting\n        wedge.set_alpha(0.37)\n        wedge.set_rasterized(True)\n\nax.legend(wedges, exercises,\n          title=\"Exercise Type\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Exercise Type Distribution\")\n\nfig.patch.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_27c64dc366044750/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_27c64dc366044750/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_27c64dc366044750/myplot.png"
    },
    {
        "id": "Pie_6be900e45fc6e2a6",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nregion_percent = [\"North America,15%\",\n                  \"South America,10%\",\n                  \"Europe,20%\",\n                  \"Africa,15%\",\n                  \"Asia,25%\",\n                  \"Oceania,5%\",\n                  \"Middle East,5%\",\n                  \"Central America,4%\",\n                  \"Caribbean,1%\"]\n\ndata = [float(x.split(',')[1].replace(\"%\", \"\")) for x in region_percent]\nregions = [x.split(',')[0] for x in region_percent]\n\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # explode 1st slice\n\ndef func(pct, allvals):\n    absolute = int(pct)\n    return f\"{pct:.1f}%\\n({absolute:d}%)\"\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\nax.legend(wedges, regions,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage Distribution of Different Regions\")\n\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()  \nplt.savefig(\"myplot.png\")",
        "Instruction": "Rearrange the order of the slices that contain the center point of the bounding box, while keeping all their original settings intact. Additionally, set the label font size of those slices to 9.",
        "Input_image": "./test_dataset/Pie/Pie_6be900e45fc6e2a6/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nregion_percent = [\"North America,15%\",\n                  \"South America,10%\",\n                  \"Europe,20%\",\n                  \"Africa,15%\",\n                  \"Asia,25%\",\n                  \"Oceania,5%\",\n                  \"Middle East,5%\",\n                  \"Central America,4%\",\n                  \"Caribbean,1%\"]\n\ndata = [float(x.split(',')[1].replace(\"%\", \"\")) for x in region_percent]\nregions = [x.split(',')[0] for x in region_percent]\n\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # explode 1st slice\n\ntarget_object = [1, 4]\nnew_order = [0, 4, 2, 3, 1, 5, 6, 7, 8]\nnew_data = [data[i] for i in new_order]\nnew_regions = [regions[i] for i in new_order]\nnew_explode = [explode[i] for i in new_order]\n\ndef func(pct, allvals):\n    absolute = int(pct)\n    return f\"{pct:.1f}%\\n({absolute:d}%)\"\n\nwedges, texts, autotexts = ax.pie(new_data, explode=new_explode, autopct=lambda pct: func(pct, new_data),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\nfor idx, text in enumerate(texts):\n    if idx in target_object:\n        text.set_size(9)\n\nax.legend(wedges, new_regions,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage Distribution of Different Regions\")\n\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_6be900e45fc6e2a6/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_6be900e45fc6e2a6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_6be900e45fc6e2a6/myplot.png"
    },
    {
        "id": "Pie_b9e68d00444eeaa6",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data preparation\ndata = {\"Disease\": [\"Cancer\", \"Heart Disease\", \"Stroke\", \"Respiratory Diseases\", \"Diabetes\", \"Alzheimer's Disease\", \"Kidney Disease\"],\n        \"Percentage\": [20, 15, 10, 25, 15, 10, 5]}\ndf = pd.DataFrame(data)\n\n# Custom color palette for pie chart wedges\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6', '#c4e17f']\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the background color of the figure\nfig.set_facecolor('gray')\n\n# Create a pie chart with the custom colors\nwedges, texts, autotexts = ax.pie(df['Percentage'], autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = (0.05,0.05,0.05,0.05,0.05,0.05,0.05), colors=colors)\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Set the title of the chart\nplt.title('Percentage of Diseases')\n\n# Add labels to the pie chart\nlabels = df['Disease']\nplt.legend(wedges, labels, title =\"Diseases\", loc =\"center left\", bbox_to_anchor =(1, 0, 0.5, 1))\n\n# Adjust layout to make room for the legend, and save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply a stroke to the slices that contain the center point of the bounding box, using a linewidth of 3.04 and a foreground color of #2470b6.",
        "Input_image": "./test_dataset/Pie/Pie_b9e68d00444eeaa6/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\n\n# Data preparation\ndata = {\"Disease\": [\"Cancer\", \"Heart Disease\", \"Stroke\", \"Respiratory Diseases\", \"Diabetes\", \"Alzheimer's Disease\", \"Kidney Disease\"],\n        \"Percentage\": [20, 15, 10, 25, 15, 10, 5]}\ndf = pd.DataFrame(data)\n\n# Custom color palette for pie chart wedges\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6', '#c4e17f']\n\nstroke_effect = path_effects.withStroke(linewidth=3.0405732517325212, foreground='#2470b6')\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the background color of the figure\nfig.set_facecolor('gray')\n\n# Create a pie chart with the custom colors\nwedges, texts, autotexts = ax.pie(df['Percentage'], autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = (0.05,0.05,0.05,0.05,0.05,0.05,0.05), colors=colors)\n\n# Stroke the object corresponding to the Target_object with a linewidth of 3.0405732517325212 and a #2470b6 foreground color\nfor idx, wedge in enumerate(wedges):\n    if idx in [2]:\n        wedge.set_path_effects([stroke_effect])\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Set the title of the chart\nplt.title('Percentage of Diseases')\n\n# Add labels to the pie chart\nlabels = df['Disease']\nplt.legend(wedges, labels, title =\"Diseases\", loc =\"center left\", bbox_to_anchor =(1, 0, 0.5, 1))\n\n# Adjust layout to make room for the legend, and save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Pie/Pie_b9e68d00444eeaa6/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_b9e68d00444eeaa6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_b9e68d00444eeaa6/myplot.png"
    },
    {
        "id": "Pie_93351aaf4f522105",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# The given data\nregions = [\"North America\", \"South America\", \"Europe\", \"Africa\", \"Asia\", \"Australia\", \"Antarctica\"]\npercentages = [15, 10, 20, 25, 25, 3, 2]\n\n# The given code example\nfig, ax = plt.subplots()\n\n# Additional parameters for ax.pie\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'North America')\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink', 'red']\n\nax.pie(percentages, explode=explode, labels=regions, colors=colors, autopct='%.1f%%', \n       shadow=True, startangle=140, labeldistance=1.15, pctdistance=0.85)\n\nplt.title(\"Regional Population Distribution\")  # Add title\nplt.legend(regions, title=\"Regions\", loc=\"upper right\")  # Add legend\n\nfig.set_facecolor('white')  # Change the face color of the figure to white\nplt.tight_layout()  # Adjust the padding between and around the subplots.\nplt.savefig(\"myplot.png\")  # Save the final figure",
        "Instruction": "Change the rasterized state of the slices that contain the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Pie/Pie_93351aaf4f522105/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# The given data\nregions = [\"North America\", \"South America\", \"Europe\", \"Africa\", \"Asia\", \"Australia\", \"Antarctica\"]\npercentages = [15, 10, 20, 25, 25, 3, 2]\n\n# The given code example\nfig, ax = plt.subplots()\n\n# Additional parameters for ax.pie\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'North America')\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink', 'red']\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, labels=regions, colors=colors, autopct='%.1f%%', \n       shadow=True, startangle=140, labeldistance=1.15, pctdistance=0.85)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_rasterized(True)\n\nplt.title(\"Regional Population Distribution\")  # Add title\nplt.legend(regions, title=\"Regions\", loc=\"upper right\")  # Add legend\n\nfig.set_facecolor('white')  # Change the face color of the figure to white\nplt.tight_layout()  # Adjust the padding between and around the subplots.\nplt.savefig(\"Edit_figure.png\")  # Save the final figure\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_93351aaf4f522105/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_93351aaf4f522105/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_93351aaf4f522105/myplot.png"
    },
    {
        "id": "Pie_b8f2cd43fa9315fe",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ntypes_of_game = [\"Action\",\n                 \"Sports\",\n                 \"Adventure\",\n                 \"Role-playing\",\n                 \"Strategy\",\n                 \"Puzzle\"]\n\ndata = [20, 25, 15, 20, 10, 10]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0, 0.1, 0, 0, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Sports')\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nax.legend(wedges, types_of_game,\n          title=\"Types of Game\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Game Types: A Pie Chart\")\n\nfig.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow effect to the slices that contain the center point of the bounding box, with a shadow offset of (2.67, 3.28) and a shadow color of gray.",
        "Input_image": "./test_dataset/Pie/Pie_b8f2cd43fa9315fe/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ntypes_of_game = [\"Action\",\n                 \"Sports\",\n                 \"Adventure\",\n                 \"Role-playing\",\n                 \"Strategy\",\n                 \"Puzzle\"]\n\ndata = [20, 25, 15, 20, 10, 10]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0, 0.1, 0, 0, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Sports')\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Sports, and Index 3 for Role-playing\n        wedge.set_path_effects([SimplePatchShadow(offset=(2.67,3.28), shadow_rgbFace='gray'), Normal()])\n\nax.legend(wedges, types_of_game,\n          title=\"Types of Game\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Game Types: A Pie Chart\")\n\nfig.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_b8f2cd43fa9315fe/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_b8f2cd43fa9315fe/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_b8f2cd43fa9315fe/myplot.png"
    },
    {
        "id": "Pie_ea37a72e6cfa0254",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\ndata = {\n    \"Cactus\": 20,\n    \"Rose\": 25,\n    \"Succulent\": 15,\n    \"Orchid\": 10,\n    \"Bamboo\": 20,\n    \"Fern\": 10\n}\n\nlabels = list(data.keys())\nsizes = list(data.values())\n\nfig, ax = plt.subplots()\nfig.set_facecolor('gray')  # Set the background color of the chart figure to gray\n\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # only \"explode\" each slice for visibility\n\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n       textprops={'size': 'medium'}, radius=0.5, shadow=True, startangle=90)\n\nplt.title(\"Popularity of Different Types of Plants\", fontsize='medium')  # Add title with medium font size\nax.set_xlabel(\"Types of Plants\", fontsize='medium')  # Add x-axis label with medium font size\nax.set_ylabel(\"Percentage\", fontsize='medium')  # Add y-axis label with medium font size\n\nplt.legend(labels, title=\"Types of Plants\", loc=\"upper right\", fontsize='medium')  # Add legend with medium font size\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Hide the slice that contains the center point of the bounding box.",
        "Input_image": "./test_dataset/Pie/Pie_ea37a72e6cfa0254/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = {\n    \"Cactus\": 20,\n    \"Rose\": 25,\n    \"Succulent\": 15,\n    \"Orchid\": 10,\n    \"Bamboo\": 20,\n    \"Fern\": 10\n}\n\nlabels = list(data.keys())\nsizes = list(data.values())\n\nfig, ax = plt.subplots()\nfig.set_facecolor('gray')  # Set the background color of the chart figure to gray\n\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # only \"explode\" each slice for visibility\n\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n       textprops={'size': 'medium'}, radius=0.5, shadow=True, startangle=90)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_visible(False)\n        texts[idx].set_visible(False)\n        autotexts[idx].set_visible(False)\n\nplt.title(\"Popularity of Different Types of Plants\", fontsize='medium')  # Add title with medium font size\nax.set_xlabel(\"Types of Plants\", fontsize='medium')  # Add x-axis label with medium font size\nax.set_ylabel(\"Percentage\", fontsize='medium')  # Add y-axis label with medium font size\n\nplt.legend(labels, title=\"Types of Plants\", loc=\"upper right\", fontsize='medium')  # Add legend with medium font size\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_ea37a72e6cfa0254/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_ea37a72e6cfa0254/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_ea37a72e6cfa0254/myplot.png"
    },
    {
        "id": "Pie_7f23d53252251f76",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure object\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the background color of the figure\nfig.set_facecolor('gray')\n\n# Given data\nprofession_data = {\n    \"Healthcare Workers\": 15,\n    \"Teachers\": 14,\n    \"Engineers\": 13,\n    \"Lawyers\": 12,\n    \"Artists\": 16,\n    \"Retail Workers\": 10,\n    \"IT Professionals\": 10,\n    \"Unemployed\": 10\n}\n\nlabels = list(profession_data.keys())\ndata = list(profession_data.values())\n\n# Function to calculate the percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Define new colors for the wedges\ncolors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#CCE5FF', '#FF6666', '#FFD700', '#A0A0A0']\n\n# Create a pie chart with the new colors\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"),\n                                  colors=colors)  # <-- Add the 'colors' parameter here\n\n# Create a legend\nax.legend(wedges, labels,\n          title=\"Professions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title of the chart\nax.set_title(\"Professions Distribution\")\n\n# Set the font size and weight of the text inside the pie chart\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Layout adjustment\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the linestyle of the slices that contain the center point of the bounding box to 'solid'. For these slices, apply a shadow effect with a (3.13, 3.74) offset and set the shadow color to gray.",
        "Input_image": "./test_dataset/Pie/Pie_7f23d53252251f76/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Create a figure object\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the background color of the figure\nfig.set_facecolor('gray')\n\n# Given data\nprofession_data = {\n    \"Healthcare Workers\": 15,\n    \"Teachers\": 14,\n    \"Engineers\": 13,\n    \"Lawyers\": 12,\n    \"Artists\": 16,\n    \"Retail Workers\": 10,\n    \"IT Professionals\": 10,\n    \"Unemployed\": 10\n}\n\nlabels = list(profession_data.keys())\ndata = list(profession_data.values())\n\n# Function to calculate the percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Define new colors for the wedges\ncolors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#CCE5FF', '#FF6666', '#FFD700', '#A0A0A0']\n\n# Create a pie chart with the new colors\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"),\n                                  colors=colors)  # <-- Add the 'colors' parameter here\n\n# Modify the linestyle and shadow effect for the selected wedges\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 4]:  # Index 1 for Teachers, and Index 4 for Artists\n        wedge.set_linestyle('solid')\n        wedge.set_path_effects([SimplePatchShadow(offset=(3.13,3.74), shadow_rgbFace='gray'), Normal()])\n\n# Create a legend\nax.legend(wedges, labels,\n          title=\"Professions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title of the chart\nax.set_title(\"Professions Distribution\")\n\n# Set the font size and weight of the text inside the pie chart\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Layout adjustment\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_7f23d53252251f76/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_7f23d53252251f76/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_7f23d53252251f76/myplot.png"
    },
    {
        "id": "Pie_099a2db489e57060",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Define the data and labels\ndata = [30, 25, 20, 15, 7, 3]\nplatforms = [\"PlayStation\", \"Xbox\", \"PC\", \"Mobile\", \"Nintendo\", \"Others\"]\n\n# Function to calculate the absolute values\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\n# New pastel color scheme\npastel_colors = ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc']\n\n# Define the pie chart with the new color scheme\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), explode=(0, 0, 0.1, 0, 0, 0), \n                                  labeldistance=1.15, shadow=True, pctdistance=0.85, \n                                  colors=pastel_colors)  # Use pastel colors\n\n# Set the legend\nax.legend(wedges, platforms,\n          title=\"Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the autotexts\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Set the title\nax.set_title(\"Platform Usage: A pie\")\n\n# Set the background color\nfig.set_facecolor('gray')\n\n# Adjust layout to make room for the legend\nplt.tight_layout()\n\n# Save the plot\nplt.savefig(\"myplot_pastel.png\")  # Save the plot with a new filename to reflect the pastel color change",
        "Instruction": "Set the picker state of the slice that contains the center point of the bounding box to False. For the same slices, apply a shadow effect with an offset of (3.67, 3.92) and use gold as the shadow color.",
        "Input_image": "./test_dataset/Pie/Pie_099a2db489e57060/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Define the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Define the data and labels\ndata = [30, 25, 20, 15, 7, 3]\nplatforms = [\"PlayStation\", \"Xbox\", \"PC\", \"Mobile\", \"Nintendo\", \"Others\"]\n\n# Function to calculate the absolute values\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\n# New pastel color scheme\npastel_colors = ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc']\n\n# Define the pie chart with the new color scheme\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), explode=(0, 0, 0.1, 0, 0, 0), \n                                  labeldistance=1.15, shadow=True, pctdistance=0.85, \n                                  colors=pastel_colors)  # Use pastel colors\n\n# Set the legend\nax.legend(wedges, platforms,\n          title=\"Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the autotexts\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Set the title\nax.set_title(\"Platform Usage: A pie\")\n\n# Set the background color\nfig.set_facecolor('gray')\n\n# Adjust layout to make room for the legend\nplt.tight_layout()\n\n# Modify the picker state and shadow effect for the selected wedges\nfor idx, wedge in enumerate(wedges):\n    if idx in [2, 3]:  # Index 2 for PC, and Index 3 for Mobile\n        wedge.set_picker(False)\n        wedge.set_path_effects([SimplePatchShadow(offset=(3.67,3.92), shadow_rgbFace='gold'), Normal()])\n\n# Save the plot\nplt.savefig(\"Edit_figure.png\")  # Save the plot with a new filename to reflect the pastel color change\n",
        "Target_object": "2,3",
        "Test_image": "./test_dataset/Pie/Pie_099a2db489e57060/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_099a2db489e57060/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_099a2db489e57060/myplot_pastel.png"
    },
    {
        "id": "Pie_fbba760498c93650",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ndiseases = [\"Rheumatoid Arthritis\", \"Type 1 Diabetes\", \"Celiac Disease\"]\ndata = [40, 30, 30]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nexplode = (0.1, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Rheumatoid Arthritis')\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, labels=diseases, colors=colors, autopct=lambda pct: func(pct, data),\n                                  shadow=True, startangle=140, labeldistance=1.2, pctdistance=0.8)\n\nax.legend(wedges, diseases,\n          title=\"Diseases\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Disease Distribution\")\nfig.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the rasterized state of the slice that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Pie/Pie_fbba760498c93650/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ndiseases = [\"Rheumatoid Arthritis\", \"Type 1 Diabetes\", \"Celiac Disease\"]\ndata = [40, 30, 30]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nexplode = (0.1, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Rheumatoid Arthritis')\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, labels=diseases, colors=colors, autopct=lambda pct: func(pct, data),\n                                  shadow=True, startangle=140, labeldistance=1.2, pctdistance=0.8)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:\n        wedge.set_rasterized(False)\n\nax.legend(wedges, diseases,\n          title=\"Diseases\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Disease Distribution\")\nfig.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_fbba760498c93650/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_fbba760498c93650/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_fbba760498c93650/myplot.png"
    },
    {
        "id": "Pie_aeb67fa68d14e4ea",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\npet_types = [\"Dogs\", \"Cats\", \"Fish\", \"Birds\", \"Hamsters\", \"Rabbits\", \"Others\"]\npercentages = [35, 30, 15, 10, 5, 3, 2]  # Percentage values\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('gray')  # Set figure background color\n\ncolors = ['r', 'g', 'b', 'y', 'purple', 'orange', 'pink']  # Colors for each section\n\n# Pie chart\nwedges, texts, autotexts = ax.pie(percentages, explode=(0.1, 0, 0, 0, 0, 0, 0), labels=pet_types, \n                                  autopct='%1.1f%%', startangle=90, colors=colors, pctdistance=0.85)\n\n# Draw a circle at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.title('Distribution of Pet Types')\nplt.legend(pet_types, title=\"Pet Types\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the border thickness of the slices that contain the center point of the bounding box to 1.524, and change the border color to #111f0d. Additionally, set the label font size for those slices to 6.",
        "Input_image": "./test_dataset/Pie/Pie_aeb67fa68d14e4ea/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\npet_types = [\"Dogs\", \"Cats\", \"Fish\", \"Birds\", \"Hamsters\", \"Rabbits\", \"Others\"]\npercentages = [35, 30, 15, 10, 5, 3, 2]  # Percentage values\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('gray')  # Set figure background color\n\ncolors = ['r', 'g', 'b', 'y', 'purple', 'orange', 'pink']  # Colors for each section\n\n# Pie chart\nwedges, texts, autotexts = ax.pie(percentages, explode=(0.1, 0, 0, 0, 0, 0, 0), labels=pet_types, \n                                  autopct='%1.1f%%', startangle=90, colors=colors, pctdistance=0.85)\n\n# Draw a circle at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.title('Distribution of Pet Types')\nplt.legend(pet_types, title=\"Pet Types\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the border thickness and line color for the segments corresponding to the Target_object\ntarget_object = [1, 3]  # Indices for Cats and Birds\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_linewidth(1.5240342085449052)\n        wedge.set_edgecolor('#111f0d')\n\n# Change the label font size of the segments corresponding to the Target_object\nfor idx, text in enumerate(texts):\n    if idx in target_object:\n        text.set_fontsize(6)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_aeb67fa68d14e4ea/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_aeb67fa68d14e4ea/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_aeb67fa68d14e4ea/myplot.png"
    },
    {
        "id": "Pie_9455d305a4a7886b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ne_waste_types = [\"Small Equipment\", \"Large Equipment\", \"Temperature Exchange Equipment\", \"Screens and Monitors\", \"Small IT and Telecommunication Equipment\"]\ndata = [30, 25, 20, 15, 10]\n\n# Updated the colors here to a new color palette\ncolors = ['cyan', 'magenta', 'orange', 'green', 'blue'] \nexplode = (0.1, 0, 0, 0, 0) # only \"explode\" the 1st slice\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, labels=e_waste_types, colors=colors, autopct=lambda pct: func(pct, data), shadow=True, startangle=90)\n\nax.legend(wedges, e_waste_types, title=\"E-waste Types\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Distribution of E-waste Types\")\nfig.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the slice that contains the center point of the bounding box to #46cca4. Also, disable the picker state for that same slice by setting it to False.",
        "Input_image": "./test_dataset/Pie/Pie_9455d305a4a7886b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ne_waste_types = [\"Small Equipment\", \"Large Equipment\", \"Temperature Exchange Equipment\", \"Screens and Monitors\", \"Small IT and Telecommunication Equipment\"]\ndata = [30, 25, 20, 15, 10]\n\n# Updated the colors here to a new color palette\ncolors = ['cyan', 'magenta', 'orange', 'green', 'blue'] \nexplode = (0.1, 0, 0, 0, 0) # only \"explode\" the 1st slice\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, labels=e_waste_types, colors=colors, autopct=lambda pct: func(pct, data), shadow=True, startangle=90)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Large Equipment, and Index 3 for Screens and Monitors\n        wedge.set_color('#46cca4')\n        wedge.set_picker(False)\n\nax.legend(wedges, e_waste_types, title=\"E-waste Types\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Distribution of E-waste Types\")\nfig.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_9455d305a4a7886b/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_9455d305a4a7886b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_9455d305a4a7886b/myplot.png"
    },
    {
        "id": "Pie_20eebef1c6d269d0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nage_groups = [\"Under 18\", \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55+\"]\npercentages = [10, 15, 20, 25, 20, 10]\n\n# Create the figure and the axes\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(percentages, explode=(0, 0, 0, 0.1, 0, 0), labels=age_groups, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Set the title with a larger font size\nax.set_title(\"Distribution of Age Groups\", fontsize=14)\n\n# Set the color of the figure's background\nfig.set_facecolor('lightgrey')\n\n# Set properties of the legend with a larger font size\nplt.legend(wedges, age_groups,\n          title=\"Age Groups\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1),\n          fontsize=14)\n\n# Increase the font size of the labels and autotexts\nfor text in texts:\n    text.set_fontsize(14)\nfor autotext in autotexts:\n    autotext.set_fontsize(14)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the slice that contains the center point of the bounding box to True, and also make these slices invisible by setting their visibility to False.",
        "Input_image": "./test_dataset/Pie/Pie_20eebef1c6d269d0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nage_groups = [\"Under 18\", \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55+\"]\npercentages = [10, 15, 20, 25, 20, 10]\n\n# Create the figure and the axes\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(percentages, explode=(0, 0, 0, 0.1, 0, 0), labels=age_groups, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Set the title with a larger font size\nax.set_title(\"Distribution of Age Groups\", fontsize=14)\n\n# Set the color of the figure's background\nfig.set_facecolor('lightgrey')\n\n# Set properties of the legend with a larger font size\nplt.legend(wedges, age_groups,\n          title=\"Age Groups\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1),\n          fontsize=14)\n\n# Increase the font size of the labels and autotexts\nfor text in texts:\n    text.set_fontsize(14)\nfor autotext in autotexts:\n    autotext.set_fontsize(14)\n\n# Modify the clipping state and visibility of the target objects\nfor idx, wedge in enumerate(wedges):\n    if idx in [3]:  # Index 3 for \"35-44\"\n        wedge.set_clip_on(True)\n        wedge.set_visible(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "3",
        "Test_image": "./test_dataset/Pie/Pie_20eebef1c6d269d0/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_20eebef1c6d269d0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_20eebef1c6d269d0/myplot.png"
    },
    {
        "id": "Pie_1d8da16709eabd19",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    \"Religion\": [\"Christianity\", \"Islam\", \"Secular/Nonreligious/Agnostic/Atheist\", \"Hinduism\",\n                 \"Buddhism\", \"Chinese Traditional Religion\", \"Ethnic Religions excluding some in separate categories\", \"Other\"],\n    \"Percentage\": [31, 24, 16, 15, 7, 5, 1, 1]\n}\n\nlabels = data[\"Religion\"]\nsizes = data[\"Percentage\"]\n\nfig, ax = plt.subplots()\n\n# Use explode to highlight the first slice of the pie chart\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)\n\nax.pie(sizes, labels=labels, autopct='%1.1f%%', explode=explode, \n       textprops={'size': 'smaller'}, radius=1.0, shadow=True, \n       labeldistance=1.1, pctdistance=0.8, startangle=150, colors=plt.cm.Paired.colors)\n\nplt.title(\"Distribution of World Religions\") # Add title\nplt.legend(labels, title=\"Religions\", loc=\"upper right\") # Add legend\n\nfig.set_facecolor('lightgray') # Set the background color to light gray\nplt.tight_layout() # Adjust the layout\nplt.savefig(\"myplot.png\")",
        "Instruction": "Rearrange the order of the segments that contain the center point of the bounding box, while keeping all other settings the same. Additionally, set the border thickness of these segments to 1.7735 and change their line color to #590eb5.",
        "Input_image": "./test_dataset/Pie/Pie_1d8da16709eabd19/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    \"Religion\": [\"Christianity\", \"Islam\", \"Secular/Nonreligious/Agnostic/Atheist\", \"Hinduism\",\n                 \"Buddhism\", \"Chinese Traditional Religion\", \"Ethnic Religions excluding some in separate categories\", \"Other\"],\n    \"Percentage\": [31, 24, 16, 15, 7, 5, 1, 1]\n}\n\nlabels = data[\"Religion\"]\nsizes = data[\"Percentage\"]\n\nfig, ax = plt.subplots()\n\n# Use explode to highlight the first slice of the pie chart\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)\n\n# Randomly select two indices that are within the range of the sum of all objects\ntarget_object = [1, 3]\n\n# Create a new position(order) and update all the corresponding data\nnew_order = [0, 3, 2, 1, 4, 5, 6, 7]\nnew_labels = [labels[i] for i in new_order]\nnew_sizes = [sizes[i] for i in new_order]\nnew_explode = [explode[i] for i in new_order]\ncolors = plt.cm.Paired.colors\nnew_colors = [colors[i] for i in new_order]\n\nwedges, texts, autotexts = ax.pie(new_sizes, labels=new_labels, autopct='%1.1f%%', explode=new_explode, \n       textprops={'size': 'smaller'}, radius=1.0, shadow=True, \n       labeldistance=1.1, pctdistance=0.8, startangle=150, colors=new_colors)\n\n# Loop through all the wedges and find the corresponding segments that the index in target indices\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_linewidth(1.773507414966978)\n        wedge.set_edgecolor('#590eb5')\n\nplt.title(\"Distribution of World Religions\") # Add title\nplt.legend(new_labels, title=\"Religions\", loc=\"upper right\") # Add legend\n\nfig.set_facecolor('lightgray') # Set the background color to light gray\nplt.tight_layout() # Adjust the layout\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_1d8da16709eabd19/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_1d8da16709eabd19/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_1d8da16709eabd19/myplot.png"
    },
    {
        "id": "Pie_d312009ebafe9a4a",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The data\njobs = ['Doctors', 'Engineers', 'Teachers']\npercentage = [40, 30, 30]\n\n# Creating the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Setting the background color of the figure\nfig.patch.set_facecolor('gray')\n\n# Creating the pie chart\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0), labels=jobs, autopct='%1.1f%%', shadow=True, startangle=140, colors=['blue', 'orange', 'green'])\n\n# Title for the pie chart\nax.set_title('Percentage of Different Professions')\n\n# Adding the legend\nax.legend(wedges, jobs, title='Professions', loc='center left', bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight='bold')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Rearrange the order of the slices that contain the center point of the bounding box, keeping all their original settings intact. Also, set the border thickness of these slices to 1.6739803120152579 and change the line color to #8eee8b.",
        "Input_image": "./test_dataset/Pie/Pie_d312009ebafe9a4a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The data\njobs = ['Doctors', 'Engineers', 'Teachers']\npercentage = [40, 30, 30]\n\n# Creating the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Setting the background color of the figure\nfig.patch.set_facecolor('gray')\n\n# Target objects\ntarget_object = [1, 2]\n\n# New order\nnew_order = [0, 2, 1]\nnew_jobs = [jobs[i] for i in new_order]\nnew_percentage = [percentage[i] for i in new_order]\nnew_colors = ['blue', 'green', 'orange']\nnew_explode = [0.1, 0, 0]\n\n# Creating the pie chart\nwedges, texts, autotexts = ax.pie(new_percentage, explode=new_explode, labels=new_jobs, autopct='%1.1f%%', shadow=True, startangle=140, colors=new_colors)\n\n# Setting the border thickness and line color for target objects\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_linewidth(1.6739803120152579)\n        wedge.set_edgecolor('#8eee8b')\n\n# Title for the pie chart\nax.set_title('Percentage of Different Professions')\n\n# Adding the legend\nax.legend(wedges, new_jobs, title='Professions', loc='center left', bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight='bold')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,2",
        "Test_image": "./test_dataset/Pie/Pie_d312009ebafe9a4a/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_d312009ebafe9a4a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_d312009ebafe9a4a/myplot.png"
    },
    {
        "id": "Pie_1e1aa1afea943a02",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nimpact_areas = [\"Decreased Crop Yield\", \"Increased Pests and Diseases\", \"Altered Planting and Harvesting Schedule\", \"Shift in Suitable Cropland\"]\npercentages = [30, 25, 22, 23]\n\n# Figure creation\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function for displaying percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Pie chart creation with additional parameters\nwedges, texts, autotexts = ax.pie(percentages, autopct=lambda pct: func(pct, percentages),\n                                   textprops=dict(color=\"w\"), explode=(0.1, 0, 0, 0), \n                                   labeldistance=1.2, shadow=True, pctdistance=0.8, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n\n# Legend, title and labels\nax.legend(wedges, impact_areas, title=\"Impact Areas\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\nax.set_title(\"Impact of Climate Change on Agriculture\")\nax.set_xlabel(\"Impact Areas\")\nax.set_ylabel(\"Percentage\")\n\n# Set figure background color\nfig.patch.set_facecolor('gray')\n\n# Change the format of text in pie chart\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Layout adjustment and figure saving\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Rearrange the order of the two slices that contain the center point of the bounding box, keeping all their original settings intact. Additionally, apply an explode effect to these slices with a value of 0.20129008541936294.",
        "Input_image": "./test_dataset/Pie/Pie_1e1aa1afea943a02/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nimpact_areas = [\"Decreased Crop Yield\", \"Increased Pests and Diseases\", \"Altered Planting and Harvesting Schedule\", \"Shift in Suitable Cropland\"]\npercentages = [30, 25, 22, 23]\n\n# Figure creation\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function for displaying percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Target objects and new order\ntarget_object = [1, 3]\nnew_order = [0, 3, 2, 1]\nnew_impact_areas = [impact_areas[i] for i in new_order]\nnew_percentages = [percentages[i] for i in new_order]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nnew_colors = [colors[i] for i in new_order]\nexplode = [0.1, 0, 0, 0]\nnew_explode = [0.20129008541936294 if idx in target_object else explode[idx] for idx in new_order]\n\n# Pie chart creation with additional parameters\nwedges, texts, autotexts = ax.pie(new_percentages, autopct=lambda pct: func(pct, new_percentages),\n                                   textprops=dict(color=\"w\"), explode=new_explode, \n                                   labeldistance=1.2, shadow=True, pctdistance=0.8, colors=new_colors)\n\n# Legend, title and labels\nax.legend(wedges, new_impact_areas, title=\"Impact Areas\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\nax.set_title(\"Impact of Climate Change on Agriculture\")\nax.set_xlabel(\"Impact Areas\")\nax.set_ylabel(\"Percentage\")\n\n# Set figure background color\nfig.patch.set_facecolor('gray')\n\n# Change the format of text in pie chart\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Layout adjustment and figure saving\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_1e1aa1afea943a02/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_1e1aa1afea943a02/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_1e1aa1afea943a02/myplot.png"
    },
    {
        "id": "Pie_402abc31cedbd141",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define labels and sizes based on the given data\nlabels = 'Sofa', 'Bed', 'Dining Table', 'Coffee Table', 'Armchair', 'Wardrobe'\nsizes = [20, 25, 15, 10, 20, 10]\n\n# Create a new figure and axes\nfig, ax = plt.subplots()\n\n# Set the background color of the figure\nfig.set_facecolor('gray')\n\n# Create the pie chart\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0, 0.1, 0, 0, 0, 0), \n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, pctdistance=0.85,\n       colors=['red', 'blue', 'green', 'orange', 'purple', 'brown'])\n\n# Add title, x and y axis labels\nplt.title(\"Distribution of Furniture Type\") \nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Furniture Type\")\n\n# Add legend\nplt.legend(labels, title=\"Furniture Type\", loc=\"upper right\") \n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect to the slices that contain the center point of the bounding box, separating them from their original configuration with a value of 0.12379051983834842.",
        "Input_image": "./test_dataset/Pie/Pie_402abc31cedbd141/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define labels and sizes based on the given data\nlabels = 'Sofa', 'Bed', 'Dining Table', 'Coffee Table', 'Armchair', 'Wardrobe'\nsizes = [20, 25, 15, 10, 20, 10]\n\n# Create a new figure and axes\nfig, ax = plt.subplots()\n\n# Set the background color of the figure\nfig.set_facecolor('gray')\n\n# Define target objects\ntarget_object = [0, 4]\nexplode = [0.12379051983834842 if idx in target_object else 0 for idx in range(len(labels))]\n\n# Create the pie chart\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=explode, \n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, pctdistance=0.85,\n       colors=['red', 'blue', 'green', 'orange', 'purple', 'brown'])\n\n# Add title, x and y axis labels\nplt.title(\"Distribution of Furniture Type\") \nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Furniture Type\")\n\n# Add legend\nplt.legend(labels, title=\"Furniture Type\", loc=\"upper right\") \n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0,4",
        "Test_image": "./test_dataset/Pie/Pie_402abc31cedbd141/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_402abc31cedbd141/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_402abc31cedbd141/myplot.png"
    },
    {
        "id": "Pie_98a4db7240e2f417",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nprofessions = [\"Healthcare Workers\", \"Factory Workers\", \"Office Workers\"]\ndivorce_rates = [35, 45, 20]\n\n# Figure and Axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# New Colors\ncolors = ['gold', 'silver', 'darkorange']  # Updated color scheme\n\n# Function to display percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\nwedges, texts, autotexts = ax.pie(divorce_rates, explode=(0.1, 0, 0), labels=professions, colors=colors, \n                                  autopct=lambda pct: func(pct, divorce_rates), shadow=True, startangle=140, \n                                  textprops=dict(color=\"w\"))\n\n# Legend - No need to change the code here as colors are now linked with the wedges\nax.legend(wedges, professions,\n          title=\"Professions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Title\nax.set_title(\"Divorce Rates by Profession\")\n\n# Background color \nfig.patch.set_facecolor('gray')  # No change needed here as the instruction was only for wedge colors\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the snap state of the slice that contains the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Pie/Pie_98a4db7240e2f417/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nprofessions = [\"Healthcare Workers\", \"Factory Workers\", \"Office Workers\"]\ndivorce_rates = [35, 45, 20]\n\n# Figure and Axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# New Colors\ncolors = ['gold', 'silver', 'darkorange']  # Updated color scheme\n\n# Function to display percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\nwedges, texts, autotexts = ax.pie(divorce_rates, explode=(0.1, 0, 0), labels=professions, colors=colors, \n                                  autopct=lambda pct: func(pct, divorce_rates), shadow=True, startangle=140, \n                                  textprops=dict(color=\"w\"))\n\n# Set the snap state of the object corresponding to the Target_object to True\nfor idx, wedge in enumerate(wedges):\n    if idx in [0, 2]:\n        wedge.set_snap(True)\n\n# Legend - No need to change the code here as colors are now linked with the wedges\nax.legend(wedges, professions,\n          title=\"Professions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Title\nax.set_title(\"Divorce Rates by Profession\")\n\n# Background color \nfig.patch.set_facecolor('gray')  # No change needed here as the instruction was only for wedge colors\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Pie/Pie_98a4db7240e2f417/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_98a4db7240e2f417/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_98a4db7240e2f417/myplot.png"
    },
    {
        "id": "Pie_c8d1385f6092a1f0",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given Data\nlabels = 'Nanomaterial Synthesis', 'Nanoelectronics', 'Nanomedicine', 'Nanophotonics', 'Nanoenergy', 'Nanorobotics', 'Nanosensors', 'Nanoenvironment'\nsizes = [20, 15, 25, 10, 10, 10, 5, 5]\n\nfig, ax = plt.subplots()\n\n# Plotting pie chart with additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # Exploding first slice\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140, labeldistance=1.05, pctdistance=0.8)\n\n# Setting background color to light gray\nfig.patch.set_facecolor('lightgray')\n\nplt.title(\"Distribution of Nanotechnology Research\")  # Add title\nplt.legend(labels, title=\"Research Fields\", loc=\"upper right\")  # Add legend\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Fill the segments of the pie chart that contain the center point of the bounding box with circles, and set the label font size for those segments to 13.",
        "Input_image": "./test_dataset/Pie/Pie_c8d1385f6092a1f0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given Data\nlabels = 'Nanomaterial Synthesis', 'Nanoelectronics', 'Nanomedicine', 'Nanophotonics', 'Nanoenergy', 'Nanorobotics', 'Nanosensors', 'Nanoenvironment'\nsizes = [20, 15, 25, 10, 10, 10, 5, 5]\n\nfig, ax = plt.subplots()\n\n# Plotting pie chart with additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # Exploding first slice\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140, labeldistance=1.05, pctdistance=0.8)\n\n# Setting background color to light gray\nfig.patch.set_facecolor('lightgray')\n\n# Target objects\nfor idx, wedge in enumerate(wedges):\n    if idx in [2, 5]:\n        wedge.set_hatch('o')\n        texts[idx].set_fontsize(13)\n\nplt.title(\"Distribution of Nanotechnology Research\")  # Add title\nplt.legend(labels, title=\"Research Fields\", loc=\"upper right\")  # Add legend\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Pie/Pie_c8d1385f6092a1f0/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_c8d1385f6092a1f0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_c8d1385f6092a1f0/myplot.png"
    },
    {
        "id": "Pie_1e6c7860e9f1cb3b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = \"\"\"\nAge Group,Relaxation Habits Percentage\n\"Under 18\",\"15%\"\n\"18-24\",\"20%\"\n\"25-34\",\"25%\"\n\"35-44\",\"15%\"\n\"45-54\",\"10%\"\n\"55-64\",\"10%\"\n\"65+\",\"5%\"\n\"\"\"\n# Read the data into a pandas DataFrame\ndf = pd.read_csv(StringIO(data), quotechar='\"')\n\n# Extract labels and sizes for the pie chart\nlabels = df['Age Group']\nsizes = df['Relaxation Habits Percentage'].str.rstrip('%').astype('float')\n\n# Create a pie chart\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, autopct='%.0f%%', pctdistance=1.1, labeldistance=1.2, \n       textprops={'size': 'large'}, radius=0.5, explode=[0.05]*len(sizes), shadow=True,\n       colors=plt.get_cmap(\"tab20\").colors)\n\n# Set the title and legend\nplt.title('Distribution of Relaxation Habits by Age Group')\nplt.legend(labels, title=\"Age Group\", loc=\"upper right\")\n\n# Set background color\nax.set_facecolor('gray')\n\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slices that contain the center point of the bounding box to 0.43. Also, ensure that the picker state for these slices is disabled by setting it to False.",
        "Input_image": "./test_dataset/Pie/Pie_1e6c7860e9f1cb3b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = \"\"\"\nAge Group,Relaxation Habits Percentage\n\"Under 18\",\"15%\"\n\"18-24\",\"20%\"\n\"25-34\",\"25%\"\n\"35-44\",\"15%\"\n\"45-54\",\"10%\"\n\"55-64\",\"10%\"\n\"65+\",\"5%\"\n\"\"\"\n# Read the data into a pandas DataFrame\ndf = pd.read_csv(StringIO(data), quotechar='\"')\n\n# Extract labels and sizes for the pie chart\nlabels = df['Age Group']\nsizes = df['Relaxation Habits Percentage'].str.rstrip('%').astype('float')\n\n# Create a pie chart\nfig, ax = plt.subplots()\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%', pctdistance=1.1, labeldistance=1.2, \n       textprops={'size': 'large'}, radius=0.5, explode=[0.05]*len(sizes), shadow=True,\n       colors=plt.get_cmap(\"tab20\").colors)\n\n# Set transparency and picker state for selected slices\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for \"18-24\", and Index 3 for \"35-44\"\n        wedge.set_alpha(0.43)\n        wedge.set_picker(False)\n\n# Set the title and legend\nplt.title('Distribution of Relaxation Habits by Age Group')\nplt.legend(labels, title=\"Age Group\", loc=\"upper right\")\n\n# Set background color\nax.set_facecolor('gray')\n\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_1e6c7860e9f1cb3b/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_1e6c7860e9f1cb3b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_1e6c7860e9f1cb3b/myplot.png"
    },
    {
        "id": "Pie_e8c6ec26f27201d2",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data preparation\nplatforms = [\"PlayStation\", \"Xbox\", \"PC\", \"Nintendo Switch\", \"Mobile\", \"Others\"]\npercentages = [20, 15, 30, 15, 15, 5]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to format the percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(percentages, \n                                  autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"),\n                                  explode=(0.1, 0, 0, 0, 0, 0),\n                                  shadow=True,\n                                  colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'])\n\n# Adding legend and title\nax.legend(wedges, platforms,\n          title=\"Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\nax.set_title(\"Percentage of Gaming Platforms Usage\")\n\n# Setting the background color\nfig.set_facecolor('white')  # Changed from 'lightgray' to 'white'\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label for the slice that contains the center point of the bounding box to 'A new Label'.",
        "Input_image": "./test_dataset/Pie/Pie_e8c6ec26f27201d2/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data preparation\nplatforms = [\"PlayStation\", \"Xbox\", \"PC\", \"Nintendo Switch\", \"Mobile\", \"Others\"]\npercentages = [20, 15, 30, 15, 15, 5]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to format the percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(percentages, \n                                  autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"),\n                                  explode=(0.1, 0, 0, 0, 0, 0),\n                                  shadow=True,\n                                  colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'])\n\n# Modifying labels for selected slices\nfor idx, text in enumerate(texts):\n    if idx in [2]:  # Index 2 for PC\n        text.set_text('A new Label')\n\n# Adding legend and title\nax.legend(wedges, platforms,\n          title=\"Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\nax.set_title(\"Percentage of Gaming Platforms Usage\")\n\n# Setting the background color\nfig.set_facecolor('white')  # Changed from 'lightgray' to 'white'\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Pie/Pie_e8c6ec26f27201d2/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_e8c6ec26f27201d2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_e8c6ec26f27201d2/myplot.png"
    },
    {
        "id": "Pie_e1bb258d62954a59",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nprofessions = [\"Healthcare Professionals\", \"Engineers\", \"Teachers\", \"Artists\"]\npercentages = [30, 25, 20, 25]\n\n# Set up figure\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nax.set_facecolor('lightgray')\n\n# Function to calculate percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Create pie chart\nexplode = (0.1, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Healthcare')\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"black\"), shadow=True, startangle=90)\n\n# Add legend\nax.legend(wedges, professions,\n          title=\"Professions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set title\nax.set_title(\"Professions Pie Chart\")\n\n# Set autotexts size and weight\nplt.setp(autotexts, size=10, weight=\"bold\")\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Hide the slices that contain the center point of the bounding box. For those same slices, add a gray shadow effect with an offset of (2.07, 3.08).",
        "Input_image": "./test_dataset/Pie/Pie_e1bb258d62954a59/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Data\nprofessions = [\"Healthcare Professionals\", \"Engineers\", \"Teachers\", \"Artists\"]\npercentages = [30, 25, 20, 25]\n\n# Set up figure\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nax.set_facecolor('lightgray')\n\n# Function to calculate percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Create pie chart\nexplode = (0.1, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Healthcare')\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"black\"), shadow=True, startangle=90)\n\n# Modify visibility and shadow effect for specific slices\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Engineers, and Index 3 for Artists\n        wedge.set_visible(False)\n        wedge.set_path_effects([SimplePatchShadow(offset=(2.07,3.08), shadow_rgbFace='gray'), Normal()])\n\n# Add legend\nax.legend(wedges, professions,\n          title=\"Professions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set title\nax.set_title(\"Professions Pie Chart\")\n\n# Set autotexts size and weight\nplt.setp(autotexts, size=10, weight=\"bold\")\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_e1bb258d62954a59/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_e1bb258d62954a59/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_e1bb258d62954a59/myplot.png"
    },
    {
        "id": "Pie_825f7daa6784fabb",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ndebris = [\"Defunct satellites\",\n          \"Spent rocket stages\",\n          \"Fragmentation debris\",\n          \"Mission-related debris\",\n          \"Functional spacecraft\",\n          \"Anomalous debris\"]\n\ndata = [20, 25, 30, 15, 5, 5]\n\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nexplode = (0.1, 0, 0, 0, 0, 0) \n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), shadow=True, pctdistance=0.85, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6'])\n\nax.legend(wedges, debris,\n          title=\"Type of Debris\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Space Debris Distribution\")\n\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the slices that contain the center point of the bounding box to False, and also update their linewidth to 3.29.",
        "Input_image": "./test_dataset/Pie/Pie_825f7daa6784fabb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ndebris = [\"Defunct satellites\",\n          \"Spent rocket stages\",\n          \"Fragmentation debris\",\n          \"Mission-related debris\",\n          \"Functional spacecraft\",\n          \"Anomalous debris\"]\n\ndata = [20, 25, 30, 15, 5, 5]\n\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nexplode = (0.1, 0, 0, 0, 0, 0) \n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), shadow=True, pctdistance=0.85, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6'])\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Spent rocket stages, and Index 3 for Mission-related debris\n        wedge.set_animated(False)\n        wedge.set_linewidth(3.29)\n\nax.legend(wedges, debris,\n          title=\"Type of Debris\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Space Debris Distribution\")\n\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_825f7daa6784fabb/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_825f7daa6784fabb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_825f7daa6784fabb/myplot.png"
    },
    {
        "id": "Pie_2d8434890b546647",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nprofession = [\"Healthcare Professionals\", \"Teachers\", \"Engineers\"]\npercentage = [35, 40, 25]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Define explode values to offset each slice, and colors for each slice\nexplode = (0.1, 0.1, 0.1)\ncolors = ['lightblue', 'lightcoral', 'yellow']\n\n# Plot pie chart\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, labels=profession, colors=colors, \n                                  autopct='%1.1f%%', shadow=True, startangle=140, \n                                  labeldistance=1.05, pctdistance=0.6)\n\n# Set title, change background color and tweak layout\nax.set_title(\"Percentage of Different Professions\")\nax.set_facecolor(\"gray\")\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label for the slice that contains the center point of the bounding box to 'A new Label'.",
        "Input_image": "./test_dataset/Pie/Pie_2d8434890b546647/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nprofession = [\"Healthcare Professionals\", \"Teachers\", \"Engineers\"]\npercentage = [35, 40, 25]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Define explode values to offset each slice, and colors for each slice\nexplode = (0.1, 0.1, 0.1)\ncolors = ['lightblue', 'lightcoral', 'yellow']\n\n# Plot pie chart\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, labels=profession, colors=colors, \n                                  autopct='%1.1f%%', shadow=True, startangle=140, \n                                  labeldistance=1.05, pctdistance=0.6)\n\n# Set title, change background color and tweak layout\nax.set_title(\"Percentage of Different Professions\")\nax.set_facecolor(\"gray\")\nplt.tight_layout()\n\n# Modify labels\nfor idx, text in enumerate(texts):\n    if idx in [1]:\n        text.set_text('A new Label')\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_2d8434890b546647/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_2d8434890b546647/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_2d8434890b546647/myplot.png"
    },
    {
        "id": "Pie_f9666246a75a1fe3",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nprofessions = [\"Healthcare Workers\", \"Factory Workers\", \"Office Workers\"]\ndivorce_rates = [35, 45, 20]\n\n# Figure and Axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# New Colors\ncolors = ['gold', 'silver', 'darkorange']  # Updated color scheme\n\n# Function to display percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\nwedges, texts, autotexts = ax.pie(divorce_rates, explode=(0.1, 0, 0), labels=professions, colors=colors, \n                                  autopct=lambda pct: func(pct, divorce_rates), shadow=True, startangle=140, \n                                  textprops=dict(color=\"w\"))\n\n# Legend - No need to change the code here as colors are now linked with the wedges\nax.legend(wedges, professions,\n          title=\"Professions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Title\nax.set_title(\"Divorce Rates by Profession\")\n\n# Background color \nfig.patch.set_facecolor('gray')  # No change needed here as the instruction was only for wedge colors\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the linewidth of the slices that contain the center point of the bounding box to 4.53. Also, set the picker state for these slices to False.",
        "Input_image": "./test_dataset/Pie/Pie_f9666246a75a1fe3/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nprofessions = [\"Healthcare Workers\", \"Factory Workers\", \"Office Workers\"]\ndivorce_rates = [35, 45, 20]\n\n# Figure and Axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# New Colors\ncolors = ['gold', 'silver', 'darkorange']  # Updated color scheme\n\n# Function to display percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\nwedges, texts, autotexts = ax.pie(divorce_rates, explode=(0.1, 0, 0), labels=professions, colors=colors, \n                                  autopct=lambda pct: func(pct, divorce_rates), shadow=True, startangle=140, \n                                  textprops=dict(color=\"w\"))\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:\n        wedge.set_linewidth(4.53)\n        wedge.set_picker(False)\n\n# Legend - No need to change the code here as colors are now linked with the wedges\nax.legend(wedges, professions,\n          title=\"Professions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# Title\nax.set_title(\"Divorce Rates by Profession\")\n\n# Background color \nfig.patch.set_facecolor('gray')  # No change needed here as the instruction was only for wedge colors\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_f9666246a75a1fe3/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_f9666246a75a1fe3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_f9666246a75a1fe3/myplot.png"
    },
    {
        "id": "Pie_6dfafa645264c9b3",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ncountry = [\"USA\", \"China\", \"India\", \"Brazil\"]\npercentage = [30, 25, 20, 25]\n\ndef func(pct, allvals):\n    absolute = int(pct)\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\nexplode = (0.1, 0, 0, 0)\ncolors = ['red', 'blue', 'green', 'yellow']\n\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), colors=colors, shadow=True)\n\nax.legend(wedges, country,\n          title=\"Countries\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Country distribution\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Rearrange the order of the two slices that contain the center point of the bounding box, and apply an explode effect of 0.244 to those slices.",
        "Input_image": "./test_dataset/Pie/Pie_6dfafa645264c9b3/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ncountry = [\"USA\", \"China\", \"India\", \"Brazil\"]\npercentage = [30, 25, 20, 25]\n\ndef func(pct, allvals):\n    absolute = int(pct)\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\nexplode = (0.1, 0, 0, 0)\ncolors = ['red', 'blue', 'green', 'yellow']\n\ntarget_object = [1, 2]\nnew_order = [0, 2, 1, 3]\nnew_percentage = [percentage[i] for i in new_order]\nnew_country = [country[i] for i in new_order]\nnew_colors = [colors[i] for i in new_order]\nnew_explode = [0.24402123118110444 if i in target_object else explode[i] for i in new_order]\n\nwedges, texts, autotexts = ax.pie(new_percentage, explode=new_explode, autopct=lambda pct: func(pct, new_percentage),\n                                  textprops=dict(color=\"w\"), colors=new_colors, shadow=True)\n\nax.legend(wedges, new_country,\n          title=\"Countries\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Country distribution\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,2",
        "Test_image": "./test_dataset/Pie/Pie_6dfafa645264c9b3/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_6dfafa645264c9b3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_6dfafa645264c9b3/myplot.png"
    },
    {
        "id": "Pie_ce278833eb0b0a4c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nage_groups = ['Under 18', '18-24', '25-34', '35-44', '45-54', '55-64', '65+']\nstudy_hours_percentage = [20, 25, 15, 10, 15, 10, 5]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # Only \"explode\" the first slice (i.e. 'Under 18')\n\n# Updated color scheme\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\nax.pie(study_hours_percentage, explode=explode, labels=age_groups, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors)\n\n# Draw the pie chart such that the angles start and end vertically\nax.axis('equal')\n\nplt.title(\"Distribution of Study Hours by Age Group\") # Add title\nplt.legend(age_groups, title=\"Age Groups\", loc=\"upper right\") # Add legend\nfig.patch.set_facecolor('gray') # Change the background color of the chart figure\nplt.tight_layout() # Adjust the padding between and around the subplots\n\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label for the slice that contains the center point of the bounding box to 'A new Label', and also make this slice invisible by setting its visibility to False.",
        "Input_image": "./test_dataset/Pie/Pie_ce278833eb0b0a4c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nage_groups = ['Under 18', '18-24', '25-34', '35-44', '45-54', '55-64', '65+']\nstudy_hours_percentage = [20, 25, 15, 10, 15, 10, 5]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # Only \"explode\" the first slice (i.e. 'Under 18')\n\n# Updated color scheme\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\nwedges, texts, autotexts = ax.pie(study_hours_percentage, explode=explode, labels=age_groups, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors)\n\n# Modify the label and visibility of the selected slices\nfor idx in [1, 3]:  # Index 1 for '18-24', and Index 3 for '35-44'\n    texts[idx].set_text('A new Label')\n    wedges[idx].set_visible(False)\n\n# Draw the pie chart such that the angles start and end vertically\nax.axis('equal')\n\nplt.title(\"Distribution of Study Hours by Age Group\") # Add title\nplt.legend(age_groups, title=\"Age Groups\", loc=\"upper right\") # Add legend\nfig.patch.set_facecolor('gray') # Change the background color of the chart figure\nplt.tight_layout() # Adjust the padding between and around the subplots\n\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_ce278833eb0b0a4c/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_ce278833eb0b0a4c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_ce278833eb0b0a4c/myplot.png"
    },
    {
        "id": "Pie_b444194eaccad0e7",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data preparation\nplatforms = [\"PlayStation\", \"Xbox\", \"PC\", \"Nintendo Switch\", \"Mobile\", \"Others\"]\npercentages = [20, 15, 30, 15, 15, 5]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to format the percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(percentages, \n                                  autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"),\n                                  explode=(0.1, 0, 0, 0, 0, 0),\n                                  shadow=True,\n                                  colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'])\n\n# Adding legend and title\nax.legend(wedges, platforms,\n          title=\"Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\nax.set_title(\"Percentage of Gaming Platforms Usage\")\n\n# Setting the background color\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Fill the slices that contain the center point of the bounding box in the pie chart with diagonal stripes. Also, set the border thickness of these slices to 1.68 and change the line color to #e2461f.",
        "Input_image": "./test_dataset/Pie/Pie_b444194eaccad0e7/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data preparation\nplatforms = [\"PlayStation\", \"Xbox\", \"PC\", \"Nintendo Switch\", \"Mobile\", \"Others\"]\npercentages = [20, 15, 30, 15, 15, 5]\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to format the percentage and absolute value\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(percentages, \n                                  autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"),\n                                  explode=(0.1, 0, 0, 0, 0, 0),\n                                  shadow=True,\n                                  colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'])\n\n# Adding legend and title\nax.legend(wedges, platforms,\n          title=\"Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\nax.set_title(\"Percentage of Gaming Platforms Usage\")\n\n# Setting the background color\nfig.set_facecolor('lightgray')\n\n# Modifying the segments corresponding to the Target_object\ntarget_object = [1, 3]  # Example indices\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_hatch('////')\n        wedge.set_linewidth(1.6822541543542826)\n        wedge.set_edgecolor('#e2461f')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_b444194eaccad0e7/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_b444194eaccad0e7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_b444194eaccad0e7/myplot.png"
    },
    {
        "id": "Pie_c49288df861f27f5",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nregion_percentage = {\n    \"North America\": \"10%\",\n    \"South America\": \"12%\",\n    \"Europe\": \"20%\",\n    \"Africa\": \"17%\",\n    \"Asia\": \"28%\",\n    \"Middle East\": \"5%\",\n    \"Oceania\": \"5%\",\n    \"Polar Regions\": \"3%\",\n    \"International Waters\": \"0%\"\n}\n\ndata = [int(x[:-1]) for x in region_percentage.values()]\nregions = [x for x in region_percentage.keys()]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d}%)\"\n\n# Custom color palette for the wedges\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6', '#c4e17f', '#76d7c4', '#f7dc6f']\n\nwedges, texts, autotexts = ax.pie(data, explode=(0.1, 0, 0, 0, 0, 0, 0, 0, 0), autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True, colors=colors)\n\nax.legend(wedges, regions,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage of Data by Region\")\n\nfig.patch.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slices that contain the center point of the bounding box to 0.716, and apply a diagonal stripe fill to these slices.",
        "Input_image": "./test_dataset/Pie/Pie_c49288df861f27f5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nregion_percentage = {\n    \"North America\": \"10%\",\n    \"South America\": \"12%\",\n    \"Europe\": \"20%\",\n    \"Africa\": \"17%\",\n    \"Asia\": \"28%\",\n    \"Middle East\": \"5%\",\n    \"Oceania\": \"5%\",\n    \"Polar Regions\": \"3%\",\n    \"International Waters\": \"0%\"\n}\n\ndata = [int(x[:-1]) for x in region_percentage.values()]\nregions = [x for x in region_percentage.keys()]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d}%)\"\n\n# Custom color palette for the wedges\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6', '#c4e17f', '#76d7c4', '#f7dc6f']\n\nwedges, texts, autotexts = ax.pie(data, explode=(0.1, 0, 0, 0, 0, 0, 0, 0, 0), autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True, colors=colors)\n\ntarget_object = [1, 4]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_alpha(0.7162338509416744)\n        wedge.set_hatch('////')\n\nax.legend(wedges, regions,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Percentage of Data by Region\")\n\nfig.patch.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_c49288df861f27f5/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_c49288df861f27f5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_c49288df861f27f5/myplot.png"
    },
    {
        "id": "Pie_8ec7c844ca194e5a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(aspect=\"equal\"))\n\n# Data from csv\nregions = [\"North America\", \"Europe\", \"Asia\", \"Africa\", \"Australia\"]\npercentages = [20, 25, 30, 15, 10]\n\n# Function to format the autopct\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d}%)\"\n\n# Parameters for explode\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1)  # only \"explode\" the slices\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, autopct=lambda pct: func(pct, percentages), textprops=dict(color=\"w\"))\n\nax.legend(wedges, regions,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Regional Distribution\")\n\n# Set the facecolor\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Rearrange the order of the slices that contain the center point of the bounding box, keeping all their original settings intact, and adjust their transparency to 0.6927.",
        "Input_image": "./test_dataset/Pie/Pie_8ec7c844ca194e5a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(aspect=\"equal\"))\n\n# Data from csv\nregions = [\"North America\", \"Europe\", \"Asia\", \"Africa\", \"Australia\"]\npercentages = [20, 25, 30, 15, 10]\n\n# Function to format the autopct\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d}%)\"\n\n# Parameters for explode\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1)  # only \"explode\" the slices\n\n# Target objects\ntarget_object = [1, 3]\n\n# New order\nnew_order = [0, 3, 2, 1, 4]\nnew_regions = [regions[i] for i in new_order]\nnew_percentages = [percentages[i] for i in new_order]\nnew_explode = [explode[i] for i in new_order]\n\nwedges, texts, autotexts = ax.pie(new_percentages, explode=new_explode, autopct=lambda pct: func(pct, new_percentages), textprops=dict(color=\"w\"))\n\n# Change transparency of target objects\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_alpha(0.6926975475719948)\n\nax.legend(wedges, new_regions,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Regional Distribution\")\n\n# Set the facecolor\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_8ec7c844ca194e5a/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_8ec7c844ca194e5a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_8ec7c844ca194e5a/myplot.png"
    },
    {
        "id": "Pie_a50eeab02cfcf049",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Provided data\ndata = {\"Factors\": [\"Accessibility\", \"Cost Efficiency\", \"Flexibility\", \"Student Engagement\", \"Self-paced Learning\", \"Improved Technical Skills\", \"Others\"],\n        \"Percentage\": [15, 20, 25, 10, 15, 10, 5]}\n\nlabels = data[\"Factors\"]\nsizes = data[\"Percentage\"]\n\nfig, ax = plt.subplots()\n\n# New custom palette\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6', '#c4e17f']\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Accessibility')\n\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors)\n\n# Setting title, labels, and legend\nplt.title(\"Factors Influencing Online Learning\") # Add title\nplt.legend(labels, title=\"Factors\", loc=\"upper right\") # Add legend\n\n# Setting face color to white\nfig.patch.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the slices that contain the center point of the bounding box to #beed0a.",
        "Input_image": "./test_dataset/Pie/Pie_a50eeab02cfcf049/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Provided data\ndata = {\"Factors\": [\"Accessibility\", \"Cost Efficiency\", \"Flexibility\", \"Student Engagement\", \"Self-paced Learning\", \"Improved Technical Skills\", \"Others\"],\n        \"Percentage\": [15, 20, 25, 10, 15, 10, 5]}\n\nlabels = data[\"Factors\"]\nsizes = data[\"Percentage\"]\n\nfig, ax = plt.subplots()\n\n# New custom palette\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6', '#c4e17f']\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Accessibility')\n\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors)\n\n# Change the color of the segments corresponding to the Target_object to #beed0a\ntarget_object = [1, 4]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_color('#beed0a')\n\n# Setting title, labels, and legend\nplt.title(\"Factors Influencing Online Learning\") # Add title\nplt.legend(labels, title=\"Factors\", loc=\"upper right\") # Add legend\n\n# Setting face color to white\nfig.patch.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_a50eeab02cfcf049/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_a50eeab02cfcf049/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_a50eeab02cfcf049/myplot.png"
    },
    {
        "id": "Pie_d35b441a4024ab23",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the face color of the figure\nfig.patch.set_facecolor('gray')\n\n# Define the social media platforms and corresponding percentages\nsocial_media = [\"Facebook\", \"Instagram\", \"Snapchat\", \"Twitter\", \"YouTube\", \"LinkedIn\", \"WhatsApp\", \"Others\"]\npercentage = [20, 20, 15, 15, 10, 10, 5, 5]\n\n# Define the function for autopct\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\n# Define the explode parameter to emphasize the first wedge\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)\n\n# Plot the pie chart with autopct and explode parameters\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\n# Add the legend\nax.legend(wedges, social_media,\n          title=\"Social Media Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title\nax.set_title(\"Social Media Usage\")\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the visibility of the slice that contains the center point of the bounding box to False. For the same slice, apply a stroke with a linewidth of 2.83 and a foreground color of #631e45.",
        "Input_image": "./test_dataset/Pie/Pie_d35b441a4024ab23/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as path_effects\n\n# Define the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set the face color of the figure\nfig.patch.set_facecolor('gray')\n\n# Define the social media platforms and corresponding percentages\nsocial_media = [\"Facebook\", \"Instagram\", \"Snapchat\", \"Twitter\", \"YouTube\", \"LinkedIn\", \"WhatsApp\", \"Others\"]\npercentage = [20, 20, 15, 15, 10, 10, 5, 5]\n\n# Define the function for autopct\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\n# Define the explode parameter to emphasize the first wedge\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)\n\n# Plot the pie chart with autopct and explode parameters\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\n# Set the visibility of the object corresponding to the Target_object to False and stroke it\nstroke_effect = path_effects.withStroke(linewidth=2.8264713198945053, foreground='#631e45')\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 4]:  # Index 1 for Instagram, and Index 4 for YouTube\n        wedge.set_visible(False)\n        wedge.set_path_effects([stroke_effect])\n\n# Add the legend\nax.legend(wedges, social_media,\n          title=\"Social Media Platforms\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title\nax.set_title(\"Social Media Usage\")\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_d35b441a4024ab23/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_d35b441a4024ab23/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_d35b441a4024ab23/myplot.png"
    },
    {
        "id": "Pie_009f5517a0791562",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ntypes_of_game = [\"Action\",\n                 \"Sports\",\n                 \"Adventure\",\n                 \"Role-playing\",\n                 \"Strategy\",\n                 \"Puzzle\"]\n\ndata = [20, 25, 15, 20, 10, 10]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0, 0.1, 0, 0, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Sports')\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nax.legend(wedges, types_of_game,\n          title=\"Types of Game\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Game Types: A Pie Chart\")\n\nfig.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the border thickness of the slices that contain the center point of the bounding box to 1.71, and change the line color to black.",
        "Input_image": "./test_dataset/Pie/Pie_009f5517a0791562/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ntypes_of_game = [\"Action\",\n                 \"Sports\",\n                 \"Adventure\",\n                 \"Role-playing\",\n                 \"Strategy\",\n                 \"Puzzle\"]\n\ndata = [20, 25, 15, 20, 10, 10]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0, 0.1, 0, 0, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Sports')\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nax.legend(wedges, types_of_game,\n          title=\"Types of Game\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Game Types: A Pie Chart\")\n\nfig.set_facecolor('gray')\n\n# Set the border thickness and line color for the selected segments\ntarget_object = [1, 3]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_linewidth(1.7093203369775112)\n        wedge.set_edgecolor('black')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_009f5517a0791562/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_009f5517a0791562/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_009f5517a0791562/myplot.png"
    },
    {
        "id": "Pie_f53de355b27a10c6",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = '''Category,Percentage\n\"Enterprise Software\",\"30%\"\n\"Cloud Services\",\"20%\"\n\"Business Intelligence and Analytics\",\"15%\"\n\"Data Management and Software\",\"10%\"\n\"Security Software\",\"10%\"\n\"Software Development Tools\",\"10%\"\n\"Other Software\",\"5%\"'''\n\n# Creating DataFrame from given data\ndf = pd.read_csv(StringIO(data))\n\n# Converting percentage to float\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nfig, ax = plt.subplots()\n\n# Pie chart parameters\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink', 'lightgrey']\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # explode 1st slice\n\n# Pie chart creation\nax.pie(df['Percentage'], explode=explode, labels=df['Category'], colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.title(\"Software Category Distribution\") # Add title\nplt.legend(df['Category'], title=\"Categories\", loc=\"upper right\") # Add legend\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nfig.patch.set_facecolor('gray') # Set the background color to gray\nplt.tight_layout() # Adjust subplot parameters to give specified padding\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect of 0.165 to the slices that contain the center point of the bounding box, causing these slices to separate from the rest of the pie chart.",
        "Input_image": "./test_dataset/Pie/Pie_f53de355b27a10c6/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = '''Category,Percentage\n\"Enterprise Software\",\"30%\"\n\"Cloud Services\",\"20%\"\n\"Business Intelligence and Analytics\",\"15%\"\n\"Data Management and Software\",\"10%\"\n\"Security Software\",\"10%\"\n\"Software Development Tools\",\"10%\"\n\"Other Software\",\"5%\"'''\n\n# Creating DataFrame from given data\ndf = pd.read_csv(StringIO(data))\n\n# Converting percentage to float\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nfig, ax = plt.subplots()\n\n# Pie chart parameters\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink', 'lightgrey']\nexplode = [0.16518451497858969 if i in [1, 3] else 0 for i in range(len(df['Category']))]  # Set explode effect for selected indices\n\n# Pie chart creation\nax.pie(df['Percentage'], explode=explode, labels=df['Category'], colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.title(\"Software Category Distribution\") # Add title\nplt.legend(df['Category'], title=\"Categories\", loc=\"upper right\") # Add legend\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nfig.patch.set_facecolor('gray') # Set the background color to gray\nplt.tight_layout() # Adjust subplot parameters to give specified padding\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_f53de355b27a10c6/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_f53de355b27a10c6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_f53de355b27a10c6/myplot.png"
    },
    {
        "id": "Pie_be3e12a610b041db",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Prepare data\nlabels = 'Pop', 'Rock', 'Country', 'Jazz'\nsizes = [30, 25, 20, 25]\nexplode = (0.1, 0, 0, 0)  # \"Pop\" will be slightly exploded out from the center of the pie\n\n# Create pie chart\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', \n       shadow=True, startangle=90, labeldistance=1.2, pctdistance=0.6, \n       colors=['red', 'blue', 'green', 'yellow'])\n\n# Additional settings\nax.set_facecolor('lightblue')  # Change background color to light blue\nplt.title(\"Music Genre Distribution\")  # Set title\nplt.legend(labels, title=\"Music Genres\", loc=\"upper right\")  # Add legend\nplt.tight_layout()  # Tight layout\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the label font size of the slices that contain the center point of the bounding box to 13, and set their transparency to about 0.39.",
        "Input_image": "./test_dataset/Pie/Pie_be3e12a610b041db/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Prepare data\nlabels = 'Pop', 'Rock', 'Country', 'Jazz'\nsizes = [30, 25, 20, 25]\nexplode = (0.1, 0, 0, 0)  # \"Pop\" will be slightly exploded out from the center of the pie\n\n# Create pie chart\nfig, ax = plt.subplots()\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', \n       shadow=True, startangle=90, labeldistance=1.2, pctdistance=0.6, \n       colors=['red', 'blue', 'green', 'yellow'])\n\n# Additional settings\nax.set_facecolor('lightblue')  # Change background color to light blue\nplt.title(\"Music Genre Distribution\")  # Set title\nplt.legend(labels, title=\"Music Genres\", loc=\"upper right\")  # Add legend\nplt.tight_layout()  # Tight layout\n\n# Modify the label font size and transparency of the segments corresponding to the Target_object\ntarget_object = [1, 2]\nfor idx, text in enumerate(texts):\n    if idx in target_object:\n        text.set_fontsize(13)\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_alpha(0.3903052233855402)\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,2",
        "Test_image": "./test_dataset/Pie/Pie_be3e12a610b041db/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_be3e12a610b041db/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_be3e12a610b041db/myplot.png"
    },
    {
        "id": "Pie_152c399531a3dd68",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Provided data\ndata = {\"Factors\": [\"Accessibility\", \"Cost Efficiency\", \"Flexibility\", \"Student Engagement\", \"Self-paced Learning\", \"Improved Technical Skills\", \"Others\"],\n        \"Percentage\": [15, 20, 25, 10, 15, 10, 5]}\n\nlabels = data[\"Factors\"]\nsizes = data[\"Percentage\"]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Accessibility')\n\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Setting title, labels and legend\nplt.title(\"Factors Influencing Online Learning\") # Add title\nplt.legend(labels, title=\"Factors\", loc=\"upper right\") # Add legend\n\n# Setting face color to gray\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the slice that contains the center point of the bounding box to False. Additionally, apply a stroke to that slice with a linewidth of 2.74 and a foreground color of #228dd6.",
        "Input_image": "./test_dataset/Pie/Pie_152c399531a3dd68/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Provided data\ndata = {\"Factors\": [\"Accessibility\", \"Cost Efficiency\", \"Flexibility\", \"Student Engagement\", \"Self-paced Learning\", \"Improved Technical Skills\", \"Others\"],\n        \"Percentage\": [15, 20, 25, 10, 15, 10, 5]}\n\nlabels = data[\"Factors\"]\nsizes = data[\"Percentage\"]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Accessibility')\n\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\n\nstroke_effect = path_effects.withStroke(linewidth=2.7398815723579304, foreground='#228dd6')\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 4]:  # Index 1 for Cost Efficiency, and Index 4 for Self-paced Learning\n        wedge.set_animated(False)\n        wedge.set_path_effects([stroke_effect])\n\n# Setting title, labels and legend\nplt.title(\"Factors Influencing Online Learning\") # Add title\nplt.legend(labels, title=\"Factors\", loc=\"upper right\") # Add legend\n\n# Setting face color to gray\nfig.patch.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_152c399531a3dd68/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_152c399531a3dd68/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_152c399531a3dd68/myplot.png"
    },
    {
        "id": "Pie_2a2726ff347bdb3c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nCategory,Percentage\n\"Groceries\",\"30%\"\n\"Eating Out\",\"20%\"\n\"Entertainment\",\"15%\"\n\"Clothing\",\"25%\"\n\"Transportation\",\"5%\"\n\"Savings\",\"5%\"\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\ndf['Percentage'] = df['Percentage'].str.replace('%','').astype(float)\n\n# Create pie chart\nlabels = df['Category']\nsizes = df['Percentage']\n\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, autopct='%.0f%%', textprops={'size': 'smaller'}, radius=0.5, \n       explode=[0.1, 0, 0, 0, 0, 0], labeldistance=1.2, shadow=True, pctdistance=0.8, \n       colors=['#8B0000','#FFD700','#228B22','#00008B', '#FF4500','#6A5ACD']) # Modified colors\n\n# Set chart attributes\nplt.title(\"Distribution of Expenses\") # Add title\nplt.legend(labels, title=\"Categories\", loc=\"upper right\") # Add legend\nfig.patch.set_facecolor('lightgrey') # Change the background color\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the slice that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Pie/Pie_2a2726ff347bdb3c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nCategory,Percentage\n\"Groceries\",\"30%\"\n\"Eating Out\",\"20%\"\n\"Entertainment\",\"15%\"\n\"Clothing\",\"25%\"\n\"Transportation\",\"5%\"\n\"Savings\",\"5%\"\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\ndf['Percentage'] = df['Percentage'].str.replace('%','').astype(float)\n\n# Create pie chart\nlabels = df['Category']\nsizes = df['Percentage']\n\nfig, ax = plt.subplots()\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%', textprops={'size': 'smaller'}, radius=0.5, \n       explode=[0.1, 0, 0, 0, 0, 0], labeldistance=1.2, shadow=True, pctdistance=0.8, \n       colors=['#8B0000','#FFD700','#228B22','#00008B', '#FF4500','#6A5ACD']) # Modified colors\n\n# Set chart attributes\nplt.title(\"Distribution of Expenses\") # Add title\nplt.legend(labels, title=\"Categories\", loc=\"upper right\") # Add legend\nfig.patch.set_facecolor('lightgrey') # Change the background color\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_animated(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_2a2726ff347bdb3c/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_2a2726ff347bdb3c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_2a2726ff347bdb3c/myplot.png"
    },
    {
        "id": "Pie_6f9cfa7966fe539a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nCategory,Percentage\n\"Groceries\",\"30%\"\n\"Eating Out\",\"20%\"\n\"Entertainment\",\"15%\"\n\"Clothing\",\"25%\"\n\"Transportation\",\"5%\"\n\"Savings\",\"5%\"\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\ndf['Percentage'] = df['Percentage'].str.replace('%','').astype(float)\n\n# Create pie chart\nlabels = df['Category']\nsizes = df['Percentage']\n\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, autopct='%.0f%%', textprops={'size': 'smaller'}, radius=0.5, \n       explode=[0.1, 0, 0, 0, 0, 0], labeldistance=1.2, shadow=True, pctdistance=0.8, \n       colors=['#8B0000','#FFD700','#228B22','#00008B', '#FF4500','#6A5ACD']) # Modified colors\n\n# Set chart attributes\nplt.title(\"Distribution of Expenses\") # Add title\nplt.legend(labels, title=\"Categories\", loc=\"upper right\") # Add legend\nfig.patch.set_facecolor('lightgrey') # Change the background color\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add an explode effect to the slices that include the center point of the bounding box, with an explosion value of 0.29467. This effect will enhance the current look of the slices.",
        "Input_image": "./test_dataset/Pie/Pie_6f9cfa7966fe539a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nCategory,Percentage\n\"Groceries\",\"30%\"\n\"Eating Out\",\"20%\"\n\"Entertainment\",\"15%\"\n\"Clothing\",\"25%\"\n\"Transportation\",\"5%\"\n\"Savings\",\"5%\"\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\ndf['Percentage'] = df['Percentage'].str.replace('%','').astype(float)\n\n# Create pie chart\nlabels = df['Category']\nsizes = df['Percentage']\n\ntarget_object = [1, 3]\nexplode=[0.1, 0, 0, 0, 0, 0]\nexplode = [0.2946676907362323 if idx in target_object else explode[idx] for idx in range(len(labels))]\n\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, autopct='%.0f%%', textprops={'size': 'smaller'}, radius=0.5, \n       explode=explode, labeldistance=1.2, shadow=True, pctdistance=0.8, \n       colors=['#8B0000','#FFD700','#228B22','#00008B', '#FF4500','#6A5ACD']) # Modified colors\n\n# Set chart attributes\nplt.title(\"Distribution of Expenses\") # Add title\nplt.legend(labels, title=\"Categories\", loc=\"upper right\") # Add legend\nfig.patch.set_facecolor('lightgrey') # Change the background color\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_6f9cfa7966fe539a/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_6f9cfa7966fe539a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_6f9cfa7966fe539a/myplot.png"
    },
    {
        "id": "Pie_7ff98941d9a97632",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nprofession = [\"Healthcare Professionals\", \"Teachers\", \"Engineers\"]\npercentage = [35, 40, 25]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Define explode values to offset each slice, and colors for each slice\nexplode = (0.1, 0.1, 0.1)\ncolors = ['lightblue', 'lightcoral', 'yellow']\n\n# Plot pie chart\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, labels=profession, colors=colors, \n                                  autopct='%1.1f%%', shadow=True, startangle=140, \n                                  labeldistance=1.05, pctdistance=0.6)\n\n# Set title, change background color and tweak layout\nax.set_title(\"Percentage of Different Professions\")\nax.set_facecolor(\"gray\")\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the linestyle of the slices that contain the center point of the bounding box to 'dotted', and set their picker state to False as well.",
        "Input_image": "./test_dataset/Pie/Pie_7ff98941d9a97632/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nprofession = [\"Healthcare Professionals\", \"Teachers\", \"Engineers\"]\npercentage = [35, 40, 25]\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Define explode values to offset each slice, and colors for each slice\nexplode = (0.1, 0.1, 0.1)\ncolors = ['lightblue', 'lightcoral', 'yellow']\n\n# Plot pie chart\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, labels=profession, colors=colors, \n                                  autopct='%1.1f%%', shadow=True, startangle=140, \n                                  labeldistance=1.05, pctdistance=0.6)\n\n# Set title, change background color and tweak layout\nax.set_title(\"Percentage of Different Professions\")\nax.set_facecolor(\"gray\")\n\n# Modify the linestyle and picker state for the selected slices\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:  # Index 1 for Teachers\n        wedge.set_linestyle('dotted')\n        wedge.set_picker(False)\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_7ff98941d9a97632/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_7ff98941d9a97632/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_7ff98941d9a97632/myplot.png"
    },
    {
        "id": "Pie_8b8736bbfd917815",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Consumer Adoption', 'Government Fleet Adoption', 'Commercial Fleet Adoption', 'Public Transport Adoption'\nsizes = [30, 25, 35, 10]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0) # Explode 1st slice\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n\n# Plotting the pie chart\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140, \n       labeldistance=1.15, pctdistance=0.85)\n\n# Setting title and legend\nplt.title(\"Electric Vehicle Adoption Trend\")\nplt.legend(labels, title=\"Adoption Types\", loc=\"upper right\")\n\n# Changing the background color\nfig.patch.set_facecolor('grey')\n\n# Ensuring a tight layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect of 0.2023156213781463 to the slices that contain the center point of the bounding box. This targets only those specific segments.",
        "Input_image": "./test_dataset/Pie/Pie_8b8736bbfd917815/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Consumer Adoption', 'Government Fleet Adoption', 'Commercial Fleet Adoption', 'Public Transport Adoption'\nsizes = [30, 25, 35, 10]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\ntarget_object = [1, 3]\nexplode = [0.2023156213781463 if idx in target_object else 0 for idx in range(len(labels))]  # Set explode effect for selected indices\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n\n# Plotting the pie chart\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140, \n       labeldistance=1.15, pctdistance=0.85)\n\n# Setting title and legend\nplt.title(\"Electric Vehicle Adoption Trend\")\nplt.legend(labels, title=\"Adoption Types\", loc=\"upper right\")\n\n# Changing the background color\nfig.patch.set_facecolor('grey')\n\n# Ensuring a tight layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_8b8736bbfd917815/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_8b8736bbfd917815/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_8b8736bbfd917815/myplot.png"
    },
    {
        "id": "Pie_3aec6a1fa63bfd65",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nNewspaper,Percentage\n\"The New York Times\",\"20%\"\n\"The Washington Post\",\"15%\"\n\"The Wall Street Journal\",\"25%\"\n\"USA Today\",\"10%\"\n\"The Los Angeles Times\",\"10%\"\n\"Chicago Tribune\",\"5%\"\n\"The Boston Globe\",\"5%\"\n\"San Francisco Chronicle\",\"5%\"\n\"Others\",\"5%\"\n\"\"\")\n\ndf = pd.read_csv(data, sep =\",\")\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nlabels = df['Newspaper'].values\nsizes = df['Percentage'].values\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  \ncolor = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6', '#c2f0c2']\n\nax.pie(sizes, labels=labels, autopct='%.0f%%', startangle=90, explode=explode, colors=color, pctdistance=0.85, shadow=True)\n\n#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \nplt.tight_layout()\n\nplt.title(\"Readership Distribution of Newspapers\") # Add title\nplt.legend(labels, title=\"Newspapers\", loc=\"upper right\") # Add legend\n\nfig.patch.set_facecolor('#ADD8E6') # Change the background color of the chart figure to light blue (hex color code #ADD8E6)\n\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the clipping state of the slice that contains the center point of the bounding box to False. Also, update the label of that same slice to 'A new Label'.",
        "Input_image": "./test_dataset/Pie/Pie_3aec6a1fa63bfd65/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nNewspaper,Percentage\n\"The New York Times\",\"20%\"\n\"The Washington Post\",\"15%\"\n\"The Wall Street Journal\",\"25%\"\n\"USA Today\",\"10%\"\n\"The Los Angeles Times\",\"10%\"\n\"Chicago Tribune\",\"5%\"\n\"The Boston Globe\",\"5%\"\n\"San Francisco Chronicle\",\"5%\"\n\"Others\",\"5%\"\n\"\"\")\n\ndf = pd.read_csv(data, sep =\",\")\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nlabels = df['Newspaper'].values\nsizes = df['Percentage'].values\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  \ncolor = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6', '#c2f0c2']\n\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%', startangle=90, explode=explode, colors=color, pctdistance=0.85, shadow=True)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_clip_on(False)\n        texts[idx].set_text('A new Label')\n\n#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \nplt.tight_layout()\n\nplt.title(\"Readership Distribution of Newspapers\") # Add title\nplt.legend(labels, title=\"Newspapers\", loc=\"upper right\") # Add legend\n\nfig.patch.set_facecolor('#ADD8E6') # Change the background color of the chart figure to light blue (hex color code #ADD8E6)\n\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_3aec6a1fa63bfd65/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_3aec6a1fa63bfd65/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_3aec6a1fa63bfd65/myplot.png"
    },
    {
        "id": "Pie_4d7bbffe63a8325b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nworkout = [\"Yoga\", \"Weightlifting\", \"Cardio\", \"HIIT\", \"Pilates\"]\npercentage = [\"30%\", \"25%\", \"20%\", \"15%\", \"10%\"]\n\n# Convert the percentage into float for pie chart\ndata = [float(p.strip('%')) for p in percentage]\n\n# Figure and axis setup\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nax.set_facecolor('lightgray')\n\n# Function to format the percentage on the pie chart\ndef func(pct, allvals):\n    absolute = int(round(pct))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\n# Explode parameter for pie chart\nexplode = (0.1, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Yoga')\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\n# Draw a circle at the center (for 'donut' style)\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Legend, title and labels\nax.legend(wedges, workout, title=\"Workout Regime\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\nax.set_title(\"Distribution of Workout Regimes\")\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slices that contain the center point of the bounding box to 0.56, and change the linestyle of those slices to 'dashed'.",
        "Input_image": "./test_dataset/Pie/Pie_4d7bbffe63a8325b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nworkout = [\"Yoga\", \"Weightlifting\", \"Cardio\", \"HIIT\", \"Pilates\"]\npercentage = [\"30%\", \"25%\", \"20%\", \"15%\", \"10%\"]\n\n# Convert the percentage into float for pie chart\ndata = [float(p.strip('%')) for p in percentage]\n\n# Figure and axis setup\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nax.set_facecolor('lightgray')\n\n# Function to format the percentage on the pie chart\ndef func(pct, allvals):\n    absolute = int(round(pct))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\n# Explode parameter for pie chart\nexplode = (0.1, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Yoga')\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\n# Modify the transparency and linestyle of the selected slices\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Weightlifting, and Index 3 for HIIT\n        wedge.set_alpha(0.56)\n        wedge.set_linestyle('dashed')\n\n# Draw a circle at the center (for 'donut' style)\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Legend, title and labels\nax.legend(wedges, workout, title=\"Workout Regime\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\nax.set_title(\"Distribution of Workout Regimes\")\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_4d7bbffe63a8325b/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_4d7bbffe63a8325b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_4d7bbffe63a8325b/myplot.png"
    },
    {
        "id": "Pie_332312b25c92b590",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ntypes_of_game = [\"Action\",\n                 \"Sports\",\n                 \"Adventure\",\n                 \"Role-playing\",\n                 \"Strategy\",\n                 \"Puzzle\"]\n\ndata = [20, 25, 15, 20, 10, 10]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0, 0.1, 0, 0, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Sports')\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nax.legend(wedges, types_of_game,\n          title=\"Types of Game\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Game Types: A Pie Chart\")\n\nfig.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Fill the segments of the pie chart that contain the center point of the bounding box with horizontal dashed lines, and set the label font size for those segments to 12.",
        "Input_image": "./test_dataset/Pie/Pie_332312b25c92b590/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ntypes_of_game = [\"Action\",\n                 \"Sports\",\n                 \"Adventure\",\n                 \"Role-playing\",\n                 \"Strategy\",\n                 \"Puzzle\"]\n\ndata = [20, 25, 15, 20, 10, 10]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0, 0.1, 0, 0, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Sports')\n\nwedges, texts, autotexts = ax.pie(data, explode=explode, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nax.legend(wedges, types_of_game,\n          title=\"Types of Game\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Game Types: A Pie Chart\")\n\nfig.set_facecolor('gray')\n\n# Target objects\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_hatch('//')\n        texts[idx].set_fontsize(12)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_332312b25c92b590/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_332312b25c92b590/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_332312b25c92b590/myplot.png"
    },
    {
        "id": "Pie_0ad5fdf0e48272c5",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('lightgray')\n\nmeat_types = [\"Poultry\",\"Beef\",\"Pork\",\"Lamb\",\"Fish\",\"Shellfish\",\"Game\",\"Other Meats\"]\npercentages = [25,20,30,10,5,2,3,5]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0, 0, 0.1, 0, 0, 0, 0, 0)\nwedges, texts, autotexts = ax.pie(percentages, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), explode=explode)\n\nax.legend(wedges, meat_types,\n          title=\"Meat Types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Meat Consumption\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Disable the snap state for the slice that contains the center point of the bounding box. Additionally, apply a stroke to the same slice with a linewidth of 4.5 and a foreground color of #13be4e.",
        "Input_image": "./test_dataset/Pie/Pie_0ad5fdf0e48272c5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as path_effects\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('lightgray')\n\nmeat_types = [\"Poultry\",\"Beef\",\"Pork\",\"Lamb\",\"Fish\",\"Shellfish\",\"Game\",\"Other Meats\"]\npercentages = [25,20,30,10,5,2,3,5]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0, 0, 0.1, 0, 0, 0, 0, 0)\nwedges, texts, autotexts = ax.pie(percentages, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), explode=explode)\n\nstroke_effect = path_effects.withStroke(linewidth=4.502355558017349, foreground='#13be4e')\nfor idx, wedge in enumerate(wedges):\n    if idx in [2]:\n        wedge.set_snap(False)\n        wedge.set_path_effects([stroke_effect])\n\nax.legend(wedges, meat_types,\n          title=\"Meat Types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Meat Consumption\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Pie/Pie_0ad5fdf0e48272c5/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_0ad5fdf0e48272c5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_0ad5fdf0e48272c5/myplot.png"
    },
    {
        "id": "Pie_6a519376dc9cd32e",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define labels and sizes based on the given data\nlabels = 'Sofa', 'Bed', 'Dining Table', 'Coffee Table', 'Armchair', 'Wardrobe'\nsizes = [20, 25, 15, 10, 20, 10]\n\n# Create a new figure and axes\nfig, ax = plt.subplots()\n\n# Set the background color of the figure to white\nfig.set_facecolor('white')  # Changed from 'gray' to 'white'\n\n# Create the pie chart\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0, 0.1, 0, 0, 0, 0), \n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, pctdistance=0.85,\n       colors=['red', 'blue', 'green', 'orange', 'purple', 'brown'])\n\n# Add title, x and y axis labels\nplt.title(\"Distribution of Furniture Type\") \nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Furniture Type\")\n\n# Add legend\nplt.legend(labels, title=\"Furniture Type\", loc=\"upper right\") \n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply a shadow effect to the slices that contain the center point of the bounding box, with a shadow offset of (3.23, 2.78) and a shadow color of gold.",
        "Input_image": "./test_dataset/Pie/Pie_6a519376dc9cd32e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Define labels and sizes based on the given data\nlabels = 'Sofa', 'Bed', 'Dining Table', 'Coffee Table', 'Armchair', 'Wardrobe'\nsizes = [20, 25, 15, 10, 20, 10]\n\n# Create a new figure and axes\nfig, ax = plt.subplots()\n\n# Set the background color of the figure to white\nfig.set_facecolor('white')  # Changed from 'gray' to 'white'\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0, 0.1, 0, 0, 0, 0), \n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, pctdistance=0.85,\n       colors=['red', 'blue', 'green', 'orange', 'purple', 'brown'])\n\n# Set shadow effect for selected wedges (Bed and Armchair in this case)\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 4]:  # Index 1 for Bed, and Index 4 for Armchair\n        wedge.set_path_effects([SimplePatchShadow(offset=(3.23,2.78), shadow_rgbFace='gold'), Normal()])\n\n# Add title, x and y axis labels\nplt.title(\"Distribution of Furniture Type\") \nplt.xlabel(\"Percentage\")\nplt.ylabel(\"Furniture Type\")\n\n# Add legend\nplt.legend(labels, title=\"Furniture Type\", loc=\"upper right\") \n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_6a519376dc9cd32e/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_6a519376dc9cd32e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_6a519376dc9cd32e/myplot.png"
    },
    {
        "id": "Pie_e21c40677c72852e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# The given data\nage_groups = [\"Under 18\", \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\"]\npercentage = [10, 20, 30, 20, 10, 5, 5]  # converted the percentage into integer\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(percentage, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"),\n                                  explode=(0, 0.1, 0, 0, 0, 0, 0),  # only \"explode\" the 1st slice (i.e. 'Under 18')\n                                  labeldistance=1.15,\n                                  shadow=True,\n                                  pctdistance=0.6,\n                                  colors=['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'])\n\nax.legend(wedges, age_groups,\n          title=\"Age Groups\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Age Group Distribution\")\nfig.set_facecolor('gray')  # set background color to gray\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Rearrange the order of the two slices that contain the center point of the bounding box while keeping all other settings the same. Also, set the border thickness of these slices to 1.68 and the line color to #90b598.",
        "Input_image": "./test_dataset/Pie/Pie_e21c40677c72852e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# The given data\nage_groups = [\"Under 18\", \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\"]\npercentage = [10, 20, 30, 20, 10, 5, 5]  # converted the percentage into integer\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\ntarget_object = [1, 3]\nnew_order = [0, 3, 2, 1, 4, 5, 6]\nnew_age_groups = [age_groups[i] for i in new_order]\nnew_percentage = [percentage[i] for i in new_order]\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\nnew_colors = [colors[i] for i in new_order]\nexplode=(0, 0.1, 0, 0, 0, 0, 0)\nnew_explode = [explode[i] for i in new_order]\n\n\nwedges, texts, autotexts = ax.pie(new_percentage, autopct=lambda pct: func(pct, new_percentage),\n                                  textprops=dict(color=\"w\"),\n                                  explode=new_explode,\n                                  labeldistance=1.15,\n                                  shadow=True,\n                                  pctdistance=0.6,\n                                  colors=new_colors)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_linewidth(1.6803946923742483)\n        wedge.set_edgecolor('#90b598')\n\nax.legend(wedges, new_age_groups,\n          title=\"Age Groups\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Age Group Distribution\")\nfig.set_facecolor('gray')  # set background color to gray\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_e21c40677c72852e/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_e21c40677c72852e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_e21c40677c72852e/myplot.png"
    },
    {
        "id": "Pie_362c9a85282474cf",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nprofessions = [\"Doctors\", \"Lawyers\", \"Teachers\", \"Engineers\", \"Artists\", \"Others\"]\nrates = [15, 20, 10, 25, 20, 10]\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(rates, labels=professions, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Set up properties for the legend and title\nax.set_title(\"Divorce Rates in Different Professions\")\nax.legend(wedges, professions, title=\"Professions\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color of the figure\nfig.set_facecolor('gray')\n\n# Set layout to tight to minimize the amount of empty space on the figure\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the slices that contain the center point of the bounding box to #2fd9cf.",
        "Input_image": "./test_dataset/Pie/Pie_362c9a85282474cf/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nprofessions = [\"Doctors\", \"Lawyers\", \"Teachers\", \"Engineers\", \"Artists\", \"Others\"]\nrates = [15, 20, 10, 25, 20, 10]\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(rates, labels=professions, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Change the color of the segments that are corresponding to the Target_object to #2fd9cf\ntarget_object = [1, 4]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_color('#2fd9cf')\n\n# Set up properties for the legend and title\nax.set_title(\"Divorce Rates in Different Professions\")\nax.legend(wedges, professions, title=\"Professions\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Change the background color of the figure\nfig.set_facecolor('gray')\n\n# Set layout to tight to minimize the amount of empty space on the figure\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_362c9a85282474cf/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_362c9a85282474cf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_362c9a85282474cf/myplot.png"
    },
    {
        "id": "Pie_c66fec73cc41ca26",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    \"Year\": [\"2017\", \"2018\", \"2019\", \"2020\"],\n    \"Percentage Change\": [25, 30, 35, 10]\n}\n\n# Extract labels and sizes from the data\nlabels = data[\"Year\"]\nsizes = data[\"Percentage Change\"]\n\nfig, ax = plt.subplots()\n\nax.pie(sizes, labels=labels, autopct='%.0f%%',\n       textprops={'size': 'smaller'}, radius=0.5,\n       explode=(0.1, 0, 0, 0), labeldistance=1.2,\n       shadow=True, pctdistance=0.8, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n\nplt.title(\"Yearly Percentage Change\") # Add title\nplt.legend(labels, title=\"Year\", loc=\"upper right\") # Add legend\n\n# Change the background color of the chart figure\nfig.patch.set_facecolor('lightgray')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Fill the segments of the pie chart that contain the center point of the bounding box with a wave-like pattern.",
        "Input_image": "./test_dataset/Pie/Pie_c66fec73cc41ca26/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    \"Year\": [\"2017\", \"2018\", \"2019\", \"2020\"],\n    \"Percentage Change\": [25, 30, 35, 10]\n}\n\n# Extract labels and sizes from the data\nlabels = data[\"Year\"]\nsizes = data[\"Percentage Change\"]\n\nfig, ax = plt.subplots()\n\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%',\n       textprops={'size': 'smaller'}, radius=0.5,\n       explode=(0.1, 0, 0, 0), labeldistance=1.2,\n       shadow=True, pctdistance=0.8, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n\n# Fill the segments corresponding to the Target_object with wave-like pattern\ntarget_object = [1, 3]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_hatch('///')\n\nplt.title(\"Yearly Percentage Change\") # Add title\nplt.legend(labels, title=\"Year\", loc=\"upper right\") # Add legend\n\n# Change the background color of the chart figure\nfig.patch.set_facecolor('lightgray')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_c66fec73cc41ca26/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_c66fec73cc41ca26/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_c66fec73cc41ca26/myplot.png"
    },
    {
        "id": "Pie_32106c903b91744b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    'Type of Media': ['Television', 'Radio', 'Newspaper', 'Social Media', 'Books', 'Magazines'],\n    'Percentage': [30, 20, 15, 25, 5, 5]\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to calculate the absolute values\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\n# Use the 'explode' parameter to slightly separate each piece of the pie\nexplode = (0.1, 0, 0, 0, 0, 0)\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(data['Percentage'], explode=explode, autopct=lambda pct: func(pct, data['Percentage']),\n                                  textprops=dict(color=\"w\"))\n\n# Add a legend\nax.legend(wedges, data['Type of Media'],\n          title=\"Type of Media\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title\nax.set_title(\"Distribution of Media Types\")\n\n# Set the background color\nax.set_facecolor(\"lightgray\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the line width of the slice that contains the center point of the bounding box to 2.40, and ensure that the rasterized state of the same slice is set to False.",
        "Input_image": "./test_dataset/Pie/Pie_32106c903b91744b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    'Type of Media': ['Television', 'Radio', 'Newspaper', 'Social Media', 'Books', 'Magazines'],\n    'Percentage': [30, 20, 15, 25, 5, 5]\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Function to calculate the absolute values\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\n# Use the 'explode' parameter to slightly separate each piece of the pie\nexplode = (0.1, 0, 0, 0, 0, 0)\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(data['Percentage'], explode=explode, autopct=lambda pct: func(pct, data['Percentage']),\n                                  textprops=dict(color=\"w\"))\n\n# Modify the linewidth and rasterized state of the target objects\nfor idx, wedge in enumerate(wedges):\n    if idx in [0, 3]:  # Index 0 for Television, and Index 3 for Social Media\n        wedge.set_linewidth(2.40)\n        wedge.set_rasterized(False)\n\n# Add a legend\nax.legend(wedges, data['Type of Media'],\n          title=\"Type of Media\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the title\nax.set_title(\"Distribution of Media Types\")\n\n# Set the background color\nax.set_facecolor(\"lightgray\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,3",
        "Test_image": "./test_dataset/Pie/Pie_32106c903b91744b/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_32106c903b91744b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_32106c903b91744b/myplot.png"
    },
    {
        "id": "Pie_12224d9a47ed4170",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    \"Meat Type\": [\"Beef\", \"Poultry\", \"Pork\", \"Lamb and Goat\", \"Fish and Seafood\", \"Other Meats\"],\n    \"Percentage\": [20, 30, 25, 10, 10, 5]\n}\n\n# Extracting labels and sizes from the data\nlabels = data[\"Meat Type\"]\nsizes = data[\"Percentage\"]\n\nfig, ax = plt.subplots()\n\n# Additional parameters for pie chart\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # To highlight each section\ncolors = ['red', 'yellow', 'blue', 'green', 'purple', 'orange']  # Different colors for each section\n\n# Plotting the pie chart\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', colors=colors,\n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, labeldistance=1.2, pctdistance=0.7)\n\n# Setting the title and legend\nplt.title(\"Distribution of Meat Consumption\") \nplt.legend(labels, title=\"Meat Types\", loc=\"upper right\") \n\n# Changing the figure background color\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Rearrange the order of the two slices that contain the center point of the bounding box, while keeping all other settings the same. Additionally, apply an explode effect with a value of 0.1875 to these slices, adding this effect to their original configuration.",
        "Input_image": "./test_dataset/Pie/Pie_12224d9a47ed4170/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    \"Meat Type\": [\"Beef\", \"Poultry\", \"Pork\", \"Lamb and Goat\", \"Fish and Seafood\", \"Other Meats\"],\n    \"Percentage\": [20, 30, 25, 10, 10, 5]\n}\n\n# Extracting labels and sizes from the data\nlabels = data[\"Meat Type\"]\nsizes = data[\"Percentage\"]\n\nfig, ax = plt.subplots()\n\n# Additional parameters for pie chart\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # To highlight each section\ncolors = ['red', 'yellow', 'blue', 'green', 'purple', 'orange']  # Different colors for each section\n\n# Randomly select two indices\ntarget_object = [1, 3]\n\n# Create a new order\nnew_order = [0, 3, 2, 1, 4, 5]\nnew_labels = [labels[i] for i in new_order]\nnew_sizes = [sizes[i] for i in new_order]\nnew_colors = [colors[i] for i in new_order]\nnew_explode = [0.18752989629936345 if idx in target_object else explode[idx] for idx in new_order]\n\n# Plotting the pie chart\nax.pie(new_sizes, explode=new_explode, labels=new_labels, autopct='%1.1f%%', colors=new_colors,\n       textprops={'size': 'smaller'}, radius=0.5, shadow=True, labeldistance=1.2, pctdistance=0.7)\n\n# Setting the title and legend\nplt.title(\"Distribution of Meat Consumption\")\nplt.legend(new_labels, title=\"Meat Types\", loc=\"upper right\")\n\n# Changing the figure background color\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_12224d9a47ed4170/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_12224d9a47ed4170/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_12224d9a47ed4170/myplot.png"
    },
    {
        "id": "Pie_bd5f7e525472729e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\"Year\": [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"],\n        \"Population Growth Percentage\": [12, 15, 13, 10, 9, 14, 11, 16]}\n\ndf = pd.DataFrame(data)\n\nlabels = df['Year']\nsizes = df['Population Growth Percentage']\n\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. '2010')\n\nfig, ax = plt.subplots()\n\nax.pie(sizes, labels=labels, autopct='%1.1f%%', explode=explode, shadow=True, startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title(\"Population Growth Percentage per Year\")  # Add title\nplt.legend(labels, title=\"Year\", loc=\"upper right\")  # Add legend\nfig.patch.set_facecolor('gray')  # set the background color to gray\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the slices that contain the center point of the bounding box to #fc9ef4.",
        "Input_image": "./test_dataset/Pie/Pie_bd5f7e525472729e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\"Year\": [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"],\n        \"Population Growth Percentage\": [12, 15, 13, 10, 9, 14, 11, 16]}\n\ndf = pd.DataFrame(data)\n\nlabels = df['Year']\nsizes = df['Population Growth Percentage']\n\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. '2010')\n\nfig, ax = plt.subplots()\n\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', explode=explode, shadow=True, startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [2, 5]:\n        wedge.set_color('#fc9ef4')\n\nplt.title(\"Population Growth Percentage per Year\")  # Add title\nplt.legend(labels, title=\"Year\", loc=\"upper right\")  # Add legend\nfig.patch.set_facecolor('gray')  # set the background color to gray\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Pie/Pie_bd5f7e525472729e/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_bd5f7e525472729e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_bd5f7e525472729e/myplot.png"
    },
    {
        "id": "Pie_82f54ab1800c19af",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = [\"Residential Property\", \"Commercial Property\", \"Industrial Property\", \n              \"Rural Property\", \"Rental Rates\", \"Property Taxes\", \n              \"Interest Rates\", \"Construction Costs\", \"Property Insurance\"]\n\npercentages = [20, 15, 15, 10, 10, 10, 10, 5, 5]\n\n# Figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set background color\nfig.patch.set_facecolor('#f2f2f2')  # Light grey background\nax.set_facecolor('#f2f2f2')\n\n# Pie chart\nwedges, texts, autotexts = ax.pie(percentages, explode=(0.1, 0, 0, 0, 0, 0, 0, 0, 0), \n                                   labels=categories, autopct='%1.1f%%', \n                                   shadow=True, startangle=90)\n\n# Adding gridlines - not typically done for pie charts, but adding for instruction\n# Since pie charts do not have gridlines, this step does nothing\n# If you want to add lines, you'd need to draw them manually or change the chart type\n\n# Draw white circle at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Title\nplt.title(\"Distribution of Property-Related Costs\")\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the linewidth of the slice that contains the center point of the bounding box to 4.93.",
        "Input_image": "./test_dataset/Pie/Pie_82f54ab1800c19af/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = [\"Residential Property\", \"Commercial Property\", \"Industrial Property\", \n              \"Rural Property\", \"Rental Rates\", \"Property Taxes\", \n              \"Interest Rates\", \"Construction Costs\", \"Property Insurance\"]\n\npercentages = [20, 15, 15, 10, 10, 10, 10, 5, 5]\n\n# Figure and axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set background color\nfig.patch.set_facecolor('#f2f2f2')  # Light grey background\nax.set_facecolor('#f2f2f2')\n\n# Pie chart\nwedges, texts, autotexts = ax.pie(percentages, explode=(0.1, 0, 0, 0, 0, 0, 0, 0, 0), \n                                   labels=categories, autopct='%1.1f%%', \n                                   shadow=True, startangle=90)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [0, 3]:  # Index 0 for Residential Property, and Index 3 for Rural Property\n        wedge.set_linewidth(4.93)\n\n# Draw white circle at the center\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Title\nplt.title(\"Distribution of Property-Related Costs\")\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,3",
        "Test_image": "./test_dataset/Pie/Pie_82f54ab1800c19af/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_82f54ab1800c19af/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_82f54ab1800c19af/myplot.png"
    },
    {
        "id": "Pie_de41041e0babdfc8",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nlabels = [\"Movies\", \"Music\", \"Books\"]\nsizes = [40, 30, 30]\nexplode = (0.1, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Movies')\n\nfig, ax = plt.subplots()\n\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90, labeldistance=1.15, pctdistance=0.6)\n\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title(\"Entertainment Preferences\") # Add title\nplt.legend(labels, title=\"Entertainment Forms\", loc=\"upper right\") # Add legend\n\nfig.patch.set_facecolor('lightgray') # Set the background color to light gray\n\nplt.tight_layout() # Fit the figure into the tight layout\n\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the transparency of the slices that contain the center point of the bounding box to 0.65. Also, update the label for these slices to 'A new Label'.",
        "Input_image": "./test_dataset/Pie/Pie_de41041e0babdfc8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlabels = [\"Movies\", \"Music\", \"Books\"]\nsizes = [40, 30, 30]\nexplode = (0.1, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Movies')\n\nfig, ax = plt.subplots()\n\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90, labeldistance=1.15, pctdistance=0.6)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [0]:\n        wedge.set_alpha(0.65)\n        texts[idx].set_text('A new Label')\n\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title(\"Entertainment Preferences\") # Add title\nplt.legend(labels, title=\"Entertainment Forms\", loc=\"upper right\") # Add legend\n\nfig.patch.set_facecolor('lightgray') # Set the background color to light gray\n\nplt.tight_layout() # Fit the figure into the tight layout\n\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Pie/Pie_de41041e0babdfc8/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_de41041e0babdfc8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_de41041e0babdfc8/myplot.png"
    },
    {
        "id": "Pie_d682edffebd16352",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = 'Malware', 'Phishing', 'Password Attacks', 'Denial of Service', 'Man in the Middle', 'Advanced Persistent Threats'\nsizes = [30, 25, 15, 10, 10, 10]  # Convert the percentages to integers\n\n# Plot\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0.1, 0, 0, 0, 0, 0), labeldistance=1.05, shadow=True, pctdistance=0.85, colors=['red', 'green', 'blue', 'yellow', 'purple', 'orange'])\n\n# Set title, legend, and face color\nplt.title(\"Distribution of Cybersecurity Threats\") \nplt.legend(labels, title=\"Threats\", loc=\"upper right\") \nfig.set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add an explode effect to the slices that contain the center point of the bounding box, using a value of 0.243. Additionally, change their color to #7304f7. Remember that \"add\" means to apply the explode effect without altering the original settings.",
        "Input_image": "./test_dataset/Pie/Pie_d682edffebd16352/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = 'Malware', 'Phishing', 'Password Attacks', 'Denial of Service', 'Man in the Middle', 'Advanced Persistent Threats'\nsizes = [30, 25, 15, 10, 10, 10]  # Convert the percentages to integers\n\n# Plot\nfig, ax = plt.subplots()\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0.1, 0, 0, 0, 0, 0), labeldistance=1.05, shadow=True, pctdistance=0.85, colors=['red', 'green', 'blue', 'yellow', 'purple', 'orange'])\n\n# Modify explode effect and color for selected segments\ntarget_object = [1, 4]\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_color('#7304f7')\n        wedge.set_alpha(1)\n\n# Adjust explode effect\nexplode = list((0.1, 0, 0, 0, 0, 0))\nfor idx in target_object:\n    explode[idx] = 0.24302766278270002\n\n# Re-plot with modified explode effect\nax.clear()\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=explode, labeldistance=1.05, shadow=True, pctdistance=0.85, colors=['red', '#7304f7', 'blue', 'yellow', '#7304f7', 'orange'])\n\n# Set title, legend, and face color\nplt.title(\"Distribution of Cybersecurity Threats\")\nplt.legend(labels, title=\"Threats\", loc=\"upper right\")\nfig.set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_d682edffebd16352/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_d682edffebd16352/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_d682edffebd16352/myplot.png"
    },
    {
        "id": "Pie_1aaedfd6f69afbe0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ncountry = [\"USA\", \"China\", \"India\", \"Brazil\"]\npercentage = [30, 25, 20, 25]\n\ndef func(pct, allvals):\n    absolute = int(pct)\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\nexplode = (0.1, 0, 0, 0)\ncolors = ['red', 'blue', 'green', 'yellow']\n\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), colors=colors, shadow=True)\n\nax.legend(wedges, country,\n          title=\"Countries\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Country distribution\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the slices that contain the center point of the bounding box to True, and also make those slices invisible by setting their visibility to False.",
        "Input_image": "./test_dataset/Pie/Pie_1aaedfd6f69afbe0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\ncountry = [\"USA\", \"China\", \"India\", \"Brazil\"]\npercentage = [30, 25, 20, 25]\n\ndef func(pct, allvals):\n    absolute = int(pct)\n    return f\"{pct:.1f}%\\n({absolute:d})\"\n\nexplode = (0.1, 0, 0, 0)\ncolors = ['red', 'blue', 'green', 'yellow']\n\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, autopct=lambda pct: func(pct, percentage),\n                                  textprops=dict(color=\"w\"), colors=colors, shadow=True)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for China, and Index 3 for Brazil\n        wedge.set_animated(True)\n        wedge.set_visible(False)\n\nax.legend(wedges, country,\n          title=\"Countries\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Country distribution\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_1aaedfd6f69afbe0/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_1aaedfd6f69afbe0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_1aaedfd6f69afbe0/myplot.png"
    },
    {
        "id": "Pie_8606c311227c5e12",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('lightgray')\n\ndata = {\"America\": 35, \"Europe\": 45, \"Asia\": 20}\ncolors = ['blue', 'green', 'red']  # Define colors for each region\nregions = list(data.keys())\nvalues = list(data.values())\n\nwedges, texts, autotexts = ax.pie(values, explode=(0.1, 0, 0), labels=regions, autopct='%1.1f%%',\n                                   shadow=True, startangle=90, colors=colors)  # Add colors parameter\n\nax.legend(wedges, regions,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nax.set_title(\"Regions by Percentage\")\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the linewidth of the slices that contain the center point of the bounding box to 1.69. Also, make these slices invisible by setting their visibility to False.",
        "Input_image": "./test_dataset/Pie/Pie_8606c311227c5e12/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('lightgray')\n\ndata = {\"America\": 35, \"Europe\": 45, \"Asia\": 20}\ncolors = ['blue', 'green', 'red']  # Define colors for each region\nregions = list(data.keys())\nvalues = list(data.values())\n\nwedges, texts, autotexts = ax.pie(values, explode=(0.1, 0, 0), labels=regions, autopct='%1.1f%%',\n                                   shadow=True, startangle=90, colors=colors)  # Add colors parameter\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:\n        wedge.set_linewidth(1.69)\n        wedge.set_visible(False)\n\nax.legend(wedges, regions,\n          title=\"Regions\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nax.set_title(\"Regions by Percentage\")\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_8606c311227c5e12/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_8606c311227c5e12/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_8606c311227c5e12/myplot.png"
    },
    {
        "id": "Pie_ec4330c1c980447e",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [\"2001-2003\", \"2004-2006\", \"2007-2010\"]\npercentage = [30, 35, 35]\n\n# Figure and Axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Pie chart with new color scheme\nshades_of_blue = ['#add8e6', '#87cefa', '#4169e1']  # Lightest to darkest blue\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0), labels=years, autopct='%1.1f%%',\n                                   shadow=True, startangle=90, colors=shades_of_blue)\n\n# Draw white circle in the middle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Title\nax.set_title(\"Percentage Distribution Over Years\")\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the slice that contains the center point of the bounding box to 0.52, and then make that same slice invisible by setting its visibility to False.",
        "Input_image": "./test_dataset/Pie/Pie_ec4330c1c980447e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [\"2001-2003\", \"2004-2006\", \"2007-2010\"]\npercentage = [30, 35, 35]\n\n# Figure and Axis\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Pie chart with new color scheme\nshades_of_blue = ['#add8e6', '#87cefa', '#4169e1']  # Lightest to darkest blue\nwedges, texts, autotexts = ax.pie(percentage, explode=(0.1, 0, 0), labels=years, autopct='%1.1f%%',\n                                   shadow=True, startangle=90, colors=shades_of_blue)\n\n# Set transparency and visibility for selected slices\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:\n        wedge.set_alpha(0.52)\n        wedge.set_visible(False)\n\n# Draw white circle in the middle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Title\nax.set_title(\"Percentage Distribution Over Years\")\n\n# Save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_ec4330c1c980447e/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_ec4330c1c980447e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_ec4330c1c980447e/myplot.png"
    },
    {
        "id": "Pie_a6578c16a52045b0",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('lightgrey')\n\nhouseholds = [\"Single Person\", \"Couple without children\", \"Couple with children\", \"Single Parent\", \"Multi-generational\", \"Shared Accommodation\", \"Elderly Living Alone\", \"Other\"]\npercentages = [15, 20, 25, 15, 15, 5, 3, 2]\n\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Single Person')\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\nax.legend(wedges, households, title=\"Household Types\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Food Waste Percentage by Household Type\")\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect of 0.2093 to the slices that contain the center point of the bounding box.",
        "Input_image": "./test_dataset/Pie/Pie_a6578c16a52045b0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\nfig.set_facecolor('lightgrey')\n\nhouseholds = [\"Single Person\", \"Couple without children\", \"Couple with children\", \"Single Parent\", \"Multi-generational\", \"Shared Accommodation\", \"Elderly Living Alone\", \"Other\"]\npercentages = [15, 20, 25, 15, 15, 5, 3, 2]\n\nexplode = [0.20932237770083606 if i in [1, 3] else 0 for i in range(len(households))]  # Set explode effect for selected indices\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), pctdistance=0.85, shadow=True)\n\nax.legend(wedges, households, title=\"Household Types\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Food Waste Percentage by Household Type\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_a6578c16a52045b0/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_a6578c16a52045b0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_a6578c16a52045b0/myplot.png"
    },
    {
        "id": "Pie_d76de9608f66f01c",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data\ndata = StringIO('''\"Region\",\"Percentage\"\n\"Amazon Rainforest\",\"30%\"\n\"African Forests\",\"25%\"\n\"South East Asian Rainforests\",\"20%\"\n\"Congo Rainforest\",\"10%\"\n\"Central American Rainforests\",\"5%\"\n\"Siberian Forests\",\"4%\"\n\"Australian Forests\",\"3%\"\n\"North American Forests\",\"2%\"\n\"European Forests\",\"1%\"''')\n\ndf = pd.read_csv(data, sep=\",\")\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nfig, ax = plt.subplots()\n\n# Exploding the largest segment for emphasis\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)\n\nax.pie(df['Percentage'], labels=df['Region'], autopct='%.0f%%', explode=explode, shadow=True, textprops={'size': 'smaller'}, pctdistance=1.1, labeldistance=1.2)\n\nplt.title(\"Distribution of Forests by Region\") # Add title\nplt.legend(df['Region'], title=\"Regions\", loc=\"upper right\") # Add legend\n\n# Set the background color to white\nfig.patch.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the linestyle of the slices that contain the center point of the bounding box  to 'dashdot' and color to red. and for the same points: Set the snap state of the object corresponding to the Target_object to True.",
        "Input_image": "./test_dataset/Pie/Pie_d76de9608f66f01c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data\ndata = StringIO('''\"Region\",\"Percentage\"\n\"Amazon Rainforest\",\"30%\"\n\"African Forests\",\"25%\"\n\"South East Asian Rainforests\",\"20%\"\n\"Congo Rainforest\",\"10%\"\n\"Central American Rainforests\",\"5%\"\n\"Siberian Forests\",\"4%\"\n\"Australian Forests\",\"3%\"\n\"North American Forests\",\"2%\"\n\"European Forests\",\"1%\"''')\n\ndf = pd.read_csv(data, sep=\",\")\ndf['Percentage'] = df['Percentage'].str.rstrip('%').astype('float')\n\nfig, ax = plt.subplots()\n\n# Exploding the largest segment for emphasis\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)\n\nwedges, texts, autotexts = ax.pie(df['Percentage'], labels=df['Region'], autopct='%.0f%%', explode=explode, shadow=True, textprops={'size': 'smaller'}, pctdistance=1.1, labeldistance=1.2)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for African Forests, and Index 3 for Congo Rainforest\n        wedge.set_linestyle('dashdot')\n        wedge.set_edgecolor('red')\n        wedge.set_snap(True)\n\nplt.title(\"Distribution of Forests by Region\") # Add title\nplt.legend(df['Region'], title=\"Regions\", loc=\"upper right\") # Add legend\n\n# Set the background color to white\nfig.patch.set_facecolor('white')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_d76de9608f66f01c/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_d76de9608f66f01c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_d76de9608f66f01c/myplot.png"
    },
    {
        "id": "Pie_3a9832f236aa2d17",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nreligions = [\"Christianity\", \"Islam\", \"Unaffiliated\", \"Hinduism\", \"Buddhism\", \"Folk Religion\", \"Other Religions\"]\ndata = [31, 24, 16, 15, 7, 6, 1]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), explode=(0.1, 0, 0, 0, 0, 0, 0), labeldistance=1.1, shadow=True, pctdistance=0.8, colors=['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n\nax.legend(wedges, religions, title=\"Religions\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Religion Percentages\")\n\nfig.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterized state of the slices that contain the center point of the bounding box to True. Also, apply a shadow effect to these slices with an offset of (3.10, 2.77) and change the shadow color to gray.",
        "Input_image": "./test_dataset/Pie/Pie_3a9832f236aa2d17/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nreligions = [\"Christianity\", \"Islam\", \"Unaffiliated\", \"Hinduism\", \"Buddhism\", \"Folk Religion\", \"Other Religions\"]\ndata = [31, 24, 16, 15, 7, 6, 1]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), explode=(0.1, 0, 0, 0, 0, 0, 0), labeldistance=1.1, shadow=True, pctdistance=0.8, colors=['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Islam, and Index 3 for Hinduism\n        wedge.set_rasterized(True)\n        wedge.set_path_effects([SimplePatchShadow(offset=(3.10,2.77), shadow_rgbFace='gray'), Normal()])\n\nax.legend(wedges, religions, title=\"Religions\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Religion Percentages\")\n\nfig.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_3a9832f236aa2d17/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_3a9832f236aa2d17/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_3a9832f236aa2d17/myplot.png"
    },
    {
        "id": "Pie_a43061a221866a80",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nreligions = [\"Christianity\", \"Islam\", \"Unaffiliated\", \"Hinduism\", \"Buddhism\", \"Folk Religion\", \"Other Religions\"]\ndata = [31, 24, 16, 15, 7, 6, 1]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), explode=(0.1, 0, 0, 0, 0, 0, 0), labeldistance=1.1, shadow=True, pctdistance=0.8, colors=['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n\nax.legend(wedges, religions, title=\"Religions\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Religion Percentages\")\n\nfig.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect to the pie segments that contain the center point of the bounding box, expanding them from their original positions by a value of 0.1905.",
        "Input_image": "./test_dataset/Pie/Pie_a43061a221866a80/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nreligions = [\"Christianity\", \"Islam\", \"Unaffiliated\", \"Hinduism\", \"Buddhism\", \"Folk Religion\", \"Other Religions\"]\ndata = [31, 24, 16, 15, 7, 6, 1]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\ntarget_object = [1, 3]\nexplode = [0.19049493573106935 if idx in target_object else 0 for idx in range(len(religions))]\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), explode=explode, labeldistance=1.1, shadow=True, pctdistance=0.8, colors=['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n\nax.legend(wedges, religions, title=\"Religions\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Religion Percentages\")\n\nfig.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_a43061a221866a80/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_a43061a221866a80/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_a43061a221866a80/myplot.png"
    },
    {
        "id": "Pie_60141a38d9d04248",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\ndata = {\n    \"Genre\": [\"Action\", \"Comedy\", \"Drama\"],\n    \"Percentage\": [40, 35, 25]\n}\n\n# create figure\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# set background color\nfig.set_facecolor('gray')\n\n# explode\nexplode = (0.1, 0, 0)\n\n# autopct function\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\n# plot pie chart\nwedges, texts, autotexts = ax.pie(data['Percentage'], explode=explode, labels=data['Genre'], autopct=lambda pct: func(pct, data['Percentage']),\n                                  textprops=dict(color=\"w\"), labeldistance=1.1, shadow=True, pctdistance=0.6)\n\n# legend\nax.legend(wedges, data['Genre'],\n          title=\"Genre\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# set title\nax.set_title(\"Genre Distribution\")\n\n# set autotexts size and weight\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# layout\nplt.tight_layout()\n\n# save figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Rearrange the order of the two slices that contain the center point of the bounding box, while keeping all their original settings intact. Additionally, apply an explode effect to these slices with a value of 0.1577.",
        "Input_image": "./test_dataset/Pie/Pie_60141a38d9d04248/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\ndata = {\n    \"Genre\": [\"Action\", \"Comedy\", \"Drama\"],\n    \"Percentage\": [40, 35, 25]\n}\n\n# create figure\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# set background color\nfig.set_facecolor('gray')\n\n# explode\nexplode = (0.1, 0, 0)\n\ntarget_object = [1, 2]\nnew_order = [0, 2, 1]\nnew_Genre = [data['Genre'][i] for i in new_order]\nnew_Percentage = [data['Percentage'][i] for i in new_order]\nnew_explode = [0.15772299548863097 if i in target_object else explode[i] for i in new_order]\n\n# autopct function\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\n# plot pie chart\nwedges, texts, autotexts = ax.pie(new_Percentage, explode=new_explode, labels=new_Genre, autopct=lambda pct: func(pct, new_Percentage),\n                                  textprops=dict(color=\"w\"), labeldistance=1.1, shadow=True, pctdistance=0.6)\n\n# legend\nax.legend(wedges, new_Genre,\n          title=\"Genre\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# set title\nax.set_title(\"Genre Distribution\")\n\n# set autotexts size and weight\nplt.setp(autotexts, size=8, weight=\"bold\")\n\n# layout\nplt.tight_layout()\n\n# save figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,2",
        "Test_image": "./test_dataset/Pie/Pie_60141a38d9d04248/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_60141a38d9d04248/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_60141a38d9d04248/myplot.png"
    },
    {
        "id": "Pie_d11a1c8a88947286",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating a figure\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Setting data\ndrone_types = [\"Consumer Drones\", \"Military Drones\", \"Commercial Drones\"]\ndata = [40, 40, 20]\n\n# Changing the background color of the figure\nfig.set_facecolor('lightgray')\n\n# Define a monochromatic color scheme in shades of blue\ncolors = ['#1f77b4', '#aec7e8', '#c6dbef']\n\n# Creating pie chart with new color scheme\nwedges, texts, autotexts = ax.pie(data, labels=drone_types, colors=colors, wedgeprops=dict(width=0.5), startangle=-40, autopct='%1.1f%%', pctdistance=0.8, explode = (0.1, 0.1, 0.1), shadow=True)\n\n# Setting title\nax.set_title(\"Distribution of Drone Technologies\")\n\n# Setting properties for labels box\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"), bbox=bbox_props, zorder=0, va=\"center\")\n\n# Adding labels to each wedge\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = f\"angle,angleA=0,angleB={ang}\"\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(drone_types[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                horizontalalignment=horizontalalignment, **kw)\n\n# Tight layout\nplt.tight_layout()\n\n# Saving figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the slice that contains the center point of the bounding box to False. Also, apply a stroke to the same slice with a linewidth of 2.36 and a foreground color of #b88b93.",
        "Input_image": "./test_dataset/Pie/Pie_d11a1c8a88947286/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Creating a figure\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Setting data\ndrone_types = [\"Consumer Drones\", \"Military Drones\", \"Commercial Drones\"]\ndata = [40, 40, 20]\n\n# Changing the background color of the figure\nfig.set_facecolor('lightgray')\n\n# Define a monochromatic color scheme in shades of blue\ncolors = ['#1f77b4', '#aec7e8', '#c6dbef']\n\n# Creating pie chart with new color scheme\nwedges, texts, autotexts = ax.pie(data, labels=drone_types, colors=colors, wedgeprops=dict(width=0.5), startangle=-40, autopct='%1.1f%%', pctdistance=0.8, explode = (0.1, 0.1, 0.1), shadow=True)\n\n# Setting title\nax.set_title(\"Distribution of Drone Technologies\")\n\n# Setting properties for labels box\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"), bbox=bbox_props, zorder=0, va=\"center\")\n\n# Adding labels to each wedge\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = f\"angle,angleA=0,angleB={ang}\"\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(drone_types[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                horizontalalignment=horizontalalignment, **kw)\n\n# Modifying the clipping state and adding stroke effect to the selected wedge\nstroke_effect = path_effects.withStroke(linewidth=2.355304070318891, foreground='#b88b93')\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:\n        wedge.set_clip_on(False)\n        wedge.set_path_effects([stroke_effect])\n\n# Tight layout\nplt.tight_layout()\n\n# Saving figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_d11a1c8a88947286/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_d11a1c8a88947286/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_d11a1c8a88947286/myplot.png"
    },
    {
        "id": "Pie_6610cc76ca687e41",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Positive Impact', 'Negative Impact', 'No Impact'\nsizes = [30, 50, 20]\n\nfig, ax = plt.subplots()\n\n# Optional parameters\nexplode = (0.1, 0, 0)  # \"explode\" the 1st slice (i.e., 'Positive Impact')\ncolors = ['yellowgreen', 'lightcoral', 'lightskyblue']\n\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\nax.set_facecolor('gray')  # Set the chart background color\nplt.title(\"Social Media Impact\")  # Add title\nplt.legend(labels, title=\"Impact Type\", loc=\"upper right\")  # Add legend\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect to the pie slices that contain the center point of the bounding box, using a value of 0.243. Additionally, fill these slices with a grid pattern. Keep in mind that \"add\" means to enhance the existing explode effect.",
        "Input_image": "./test_dataset/Pie/Pie_6610cc76ca687e41/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Positive Impact', 'Negative Impact', 'No Impact'\nsizes = [30, 50, 20]\n\nfig, ax = plt.subplots()\n\n# Optional parameters\nexplode = (0.1, 0, 0)\nnew_explode = [0.2430234902278853 if idx == 1 else explode[idx] for idx in range(len(labels))]  # Add explode effect for selected index\ncolors = ['yellowgreen', 'lightcoral', 'lightskyblue']\n\nwedges, texts, autotexts = ax.pie(sizes, explode=new_explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Fill the segments corresponding to the Target_object with grid pattern\nfor idx, wedge in enumerate(wedges):\n    if idx == 1:\n        wedge.set_hatch('////')\n\nax.set_facecolor('gray')  # Set the chart background color\nplt.title(\"Social Media Impact\")  # Add title\nplt.legend(labels, title=\"Impact Type\", loc=\"upper right\")  # Add legend\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_6610cc76ca687e41/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_6610cc76ca687e41/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_6610cc76ca687e41/myplot.png"
    },
    {
        "id": "Pie_7d45408847a366a5",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Consumer Adoption', 'Government Fleet Adoption', 'Commercial Fleet Adoption', 'Public Transport Adoption'\nsizes = [30, 25, 35, 10]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0) # Explode 1st slice\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n\n# Plotting the pie chart\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140, \n       labeldistance=1.15, pctdistance=0.85)\n\n# Setting title and legend\nplt.title(\"Electric Vehicle Adoption Trend\")\nplt.legend(labels, title=\"Adoption Types\", loc=\"upper right\")\n\n# Changing the background color\nfig.patch.set_facecolor('grey')\n\n# Ensuring a tight layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the slice that contains the center point of the bounding box to #18cc75 and set its snap state to False.",
        "Input_image": "./test_dataset/Pie/Pie_7d45408847a366a5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = 'Consumer Adoption', 'Government Fleet Adoption', 'Commercial Fleet Adoption', 'Public Transport Adoption'\nsizes = [30, 25, 35, 10]\n\nfig, ax = plt.subplots()\n\n# Additional parameters\nexplode = (0.1, 0, 0, 0) # Explode 1st slice\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n\n# Plotting the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140, \n       labeldistance=1.15, pctdistance=0.85)\n\n# Setting title and legend\nplt.title(\"Electric Vehicle Adoption Trend\")\nplt.legend(labels, title=\"Adoption Types\", loc=\"upper right\")\n\n# Changing the background color\nfig.patch.set_facecolor('grey')\n\n# Modifying the color and snap state of the target objects\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 2]:\n        wedge.set_color('#18cc75')\n        wedge.set_snap(False)\n\n# Ensuring a tight layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,2",
        "Test_image": "./test_dataset/Pie/Pie_7d45408847a366a5/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_7d45408847a366a5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_7d45408847a366a5/myplot.png"
    },
    {
        "id": "Pie_09eeb4ee7bd532fb",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\npets = [\"Dogs\", \"Cats\", \"Fish\", \"Birds\", \"Small mammals\", \"Reptiles\"]\ndata = [35, 30, 15, 10, 7, 3]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), colors=colors)\n\nax.legend(wedges, pets, title=\"Pets\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Pets Ownership by Percentage\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Fill the segments in the pie chart that contain the center point of the bounding box with circles.",
        "Input_image": "./test_dataset/Pie/Pie_09eeb4ee7bd532fb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\npets = [\"Dogs\", \"Cats\", \"Fish\", \"Birds\", \"Small mammals\", \"Reptiles\"]\ndata = [35, 30, 15, 10, 7, 3]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"), colors=colors)\n\n# Adding concentric circles to selected segments\ntarget_object = [0, 2]  # Randomly selected indices for Dogs and Fish\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_hatch('o')\nax.legend(wedges, pets, title=\"Pets\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Pets Ownership by Percentage\")\n\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Pie/Pie_09eeb4ee7bd532fb/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_09eeb4ee7bd532fb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_09eeb4ee7bd532fb/myplot.png"
    },
    {
        "id": "Pie_31d09eb88d4ac77f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndata = {\n    \"Year\": [\"1990\", \"1995\", \"2000\", \"2005\", \"2010\", \"2015\", \"2020\", \"2025\", \"2030\"],\n    \"Percentage\": [10, 12, 15, 17, 14, 16, 10, 4, 2]\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set color for the chart figure\nax.set_facecolor(\"lightgray\")\n\n# Explode settings\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0) \n\n# Pie chart\nwedges, texts, autotexts = ax.pie(data[\"Percentage\"], explode=explode, labels=data[\"Year\"], \n                                  autopct='%1.1f%%', shadow=True, startangle=90, \n                                  pctdistance=0.85, colors=plt.cm.Pastel1.colors)\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Set the title, legend\nax.set_title(\"Yearly Percentage Distribution\")\nax.legend(wedges, data[\"Year\"],\n          title=\"Years\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the label of the slice that contains the center point of the bounding box to 'A new Label'. For the same slice, add a shadow effect with an offset of (2.12, 3.76) units, and set the shadow color to gray.",
        "Input_image": "./test_dataset/Pie/Pie_31d09eb88d4ac77f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Given data\ndata = {\n    \"Year\": [\"1990\", \"1995\", \"2000\", \"2005\", \"2010\", \"2015\", \"2020\", \"2025\", \"2030\"],\n    \"Percentage\": [10, 12, 15, 17, 14, 16, 10, 4, 2]\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\n# Set color for the chart figure\nax.set_facecolor(\"lightgray\")\n\n# Explode settings\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0) \n\n# Pie chart\nwedges, texts, autotexts = ax.pie(data[\"Percentage\"], explode=explode, labels=data[\"Year\"], \n                                  autopct='%1.1f%%', shadow=True, startangle=90, \n                                  pctdistance=0.85, colors=plt.cm.Pastel1.colors)\n\n# Modify specific slices\nfor idx, (wedge, text) in enumerate(zip(wedges, texts)):\n    if idx in [1, 4]:  # Index 1 for 1995, and Index 4 for 2010\n        text.set_text('A new Label')\n        wedge.set_path_effects([SimplePatchShadow(offset=(2.12,3.76), shadow_rgbFace='gray'), Normal()])\n\n# Draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax.axis('equal')  \n\n# Set the title, legend\nax.set_title(\"Yearly Percentage Distribution\")\nax.legend(wedges, data[\"Year\"],\n          title=\"Years\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,4",
        "Test_image": "./test_dataset/Pie/Pie_31d09eb88d4ac77f/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_31d09eb88d4ac77f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_31d09eb88d4ac77f/myplot.png"
    },
    {
        "id": "Pie_8b4a7d176608687f",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given Data\nlabels = 'Nanomaterial Synthesis', 'Nanoelectronics', 'Nanomedicine', 'Nanophotonics', 'Nanoenergy', 'Nanorobotics', 'Nanosensors', 'Nanoenvironment'\nsizes = [20, 15, 25, 10, 10, 10, 5, 5]\n\nfig, ax = plt.subplots()\n\n# Plotting pie chart with additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # Exploding first slice\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140, labeldistance=1.05, pctdistance=0.8)\n\n# Setting background color to light gray\nfig.patch.set_facecolor('lightgray')\n\nplt.title(\"Distribution of Nanotechnology Research\")  # Add title\nplt.legend(labels, title=\"Research Fields\", loc=\"upper right\")  # Add legend\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the slices that contain the center point of the bounding box to False. Additionally, change their color to #39fa27.",
        "Input_image": "./test_dataset/Pie/Pie_8b4a7d176608687f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given Data\nlabels = 'Nanomaterial Synthesis', 'Nanoelectronics', 'Nanomedicine', 'Nanophotonics', 'Nanoenergy', 'Nanorobotics', 'Nanosensors', 'Nanoenvironment'\nsizes = [20, 15, 25, 10, 10, 10, 5, 5]\n\nfig, ax = plt.subplots()\n\n# Plotting pie chart with additional parameters\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # Exploding first slice\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140, labeldistance=1.05, pctdistance=0.8)\n\n# Setting background color to light gray\nfig.patch.set_facecolor('lightgray')\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_animated(False)\n        wedge.set_color('#39fa27')\n\nplt.title(\"Distribution of Nanotechnology Research\")  # Add title\nplt.legend(labels, title=\"Research Fields\", loc=\"upper right\")  # Add legend\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_8b4a7d176608687f/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_8b4a7d176608687f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_8b4a7d176608687f/myplot.png"
    },
    {
        "id": "Pie_fbdaae720ef2fba0",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8, 5), subplot_kw=dict(aspect=\"equal\"))\nax.set_facecolor('lightblue')  # Changing background color to light blue\n\nmusic_types = [\"Rock\",\"Pop\",\"Classical\",\"Country\",\"Jazz\",\"Rap\",\"Reggae\",\"R&B\",\"Others\"]\npercentages = [20,25,15,10,10,5,5,5,5]\n\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Rock')\n\n# Shades of blue for monochromatic theme\ncolors = ['#003f5c', '#2f4b7c', '#665191', '#a05195', '#d45087', '#f95d6a', '#ff7c43', '#ffa600', '#ff6361']\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, labels=music_types, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors, pctdistance=0.85)\n\n# Draw white circle in the middle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Adding legend\nax.legend(wedges, music_types,\n          title=\"Music Types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Adding title and labels\nax.set_title(\"Percentage of Music Types\")\nplt.xlabel('Music Types')\nplt.ylabel('Percentage')\n\nplt.tight_layout()\nplt.savefig(\"myplot_blue_theme.png\")  # Saving the figure with a new name to reflect the theme change",
        "Instruction": "Disable clipping for the slices that contain the center point of the bounding box, and change their color to #a24222.",
        "Input_image": "./test_dataset/Pie/Pie_fbdaae720ef2fba0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8, 5), subplot_kw=dict(aspect=\"equal\"))\nax.set_facecolor('lightblue')  # Changing background color to light blue\n\nmusic_types = [\"Rock\",\"Pop\",\"Classical\",\"Country\",\"Jazz\",\"Rap\",\"Reggae\",\"R&B\",\"Others\"]\npercentages = [20,25,15,10,10,5,5,5,5]\n\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0)  # only \"explode\" the 1st slice (i.e. 'Rock')\n\n# Shades of blue for monochromatic theme\ncolors = ['#003f5c', '#2f4b7c', '#665191', '#a05195', '#d45087', '#f95d6a', '#ff7c43', '#ffa600', '#ff6361']\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, labels=music_types, autopct='%1.1f%%', shadow=True, startangle=90, colors=colors, pctdistance=0.85)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Pop, and Index 3 for Country\n        wedge.set_clip_on(False)\n        wedge.set_color('#a24222')\n\n# Draw white circle in the middle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Adding legend\nax.legend(wedges, music_types,\n          title=\"Music Types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Adding title and labels\nax.set_title(\"Percentage of Music Types\")\nplt.xlabel('Music Types')\nplt.ylabel('Percentage')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")  # Saving the figure with a new name to reflect the theme change\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_fbdaae720ef2fba0/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_fbdaae720ef2fba0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_fbdaae720ef2fba0/myplot_blue_theme.png"
    },
    {
        "id": "Pie_a85141860032730b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nage_group = [\"Under 18\",\"18-34\",\"35-64\",\"65+\"]\npercentages = [15, 35, 40, 10]\n\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\n# Updated color scheme for the pie chart\nnew_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\nwedges, texts, autotexts = ax.pie(percentages, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), explode=[0.1,0,0,0], shadow=True, pctdistance=0.85, colors=new_colors)\n\nax.legend(wedges, age_group,\n          title=\"Age Group\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Age Distribution\")\n\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Apply an explode effect of 0.18275819909865954 to the slices that contain the center point of the bounding box, and adjust their transparency to 0.5357144732600929. Note that this \"Add\" means the explode effect should be layered on top of the existing settings.",
        "Input_image": "./test_dataset/Pie/Pie_a85141860032730b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nage_group = [\"Under 18\",\"18-34\",\"35-64\",\"65+\"]\npercentages = [15, 35, 40, 10]\n\ndef func(pct, allvals):\n    absolute = int(pct/100.*np.sum(allvals))\n    return f\"{pct:.1f}%\\n({absolute:d} %)\"\n\n# Updated color scheme for the pie chart\nnew_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\ntarget_object = [1, 2]\nexplode=[0.1,0,0,0]\nnew_explode = [0.18275819909865954 if idx in target_object else explode[idx] for idx in range(len(age_group))]\n\nwedges, texts, autotexts = ax.pie(percentages, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), explode=new_explode, shadow=True, pctdistance=0.85, colors=new_colors)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_alpha(0.5357144732600929)\n\nax.legend(wedges, age_group,\n          title=\"Age Group\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Age Distribution\")\n\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,2",
        "Test_image": "./test_dataset/Pie/Pie_a85141860032730b/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_a85141860032730b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_a85141860032730b/myplot.png"
    },
    {
        "id": "Pie_76b5164f716795e4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nfood_types = [\"Vegetables\", \"Fruits\", \"Meat\", \"Seafood\", \"Dairy\", \"Grains\", \"Sweets\", \"Beverages\"]\npercentages = [20, 15, 30, 10, 10, 10, 5, 0]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)\ncolors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange', 'pink', 'brown']\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, labels=food_types, colors=colors, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), shadow=True, labeldistance=1.2, pctdistance=0.6)\n\nax.legend(wedges, food_types,\n          title=\"Food Types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Food consumption by type\")\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the clipping state of the slices that contain the center point of the bounding box to False, and set the snap state for those same slices to True.",
        "Input_image": "./test_dataset/Pie/Pie_76b5164f716795e4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nfood_types = [\"Vegetables\", \"Fruits\", \"Meat\", \"Seafood\", \"Dairy\", \"Grains\", \"Sweets\", \"Beverages\"]\npercentages = [20, 15, 30, 10, 10, 10, 5, 0]\n\ndef func(pct, allvals):\n    absolute = int(np.round(pct/100.*np.sum(allvals)))\n    return f\"{pct:.1f}%\\n({absolute:d} g)\"\n\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)\ncolors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange', 'pink', 'brown']\n\nwedges, texts, autotexts = ax.pie(percentages, explode=explode, labels=food_types, colors=colors, autopct=lambda pct: func(pct, percentages),\n                                  textprops=dict(color=\"w\"), shadow=True, labeldistance=1.2, pctdistance=0.6)\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:  # Index 1 for Fruits, and Index 3 for Seafood\n        wedge.set_clip_on(False)\n        wedge.set_snap(True)\n\nax.legend(wedges, food_types,\n          title=\"Food Types\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Food consumption by type\")\nfig.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_76b5164f716795e4/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_76b5164f716795e4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_76b5164f716795e4/myplot.png"
    },
    {
        "id": "Pie_4fdddf42ce5e914d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nlabels = ['Satellite Launches', 'Space Probes', 'Telescope Technology', 'International Space Station', \n          'Manned Space Missions', 'Space Research & Development']\nsizes = [25, 20, 15, 20, 15, 5]\n\nfig, ax = plt.subplots()\n\nax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0, 0, 0, 0.1, 0, 0), \n       shadow=True, startangle=90, colors=('blue', 'orange', 'green', 'red', 'purple', 'brown'))\n\nplt.title(\"Distribution of Space Technology/Exploration\") \nplt.legend(labels, title=\"Space Technology/Exploration\", loc=\"upper right\")\n\nfig.patch.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the linestyle of the slices containing the center point of the bounding box to 'dashdot'. Also, add a stroke to these slices with a linewidth of 2.36 and a foreground color of #f18178.",
        "Input_image": "./test_dataset/Pie/Pie_4fdddf42ce5e914d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Given data\nlabels = ['Satellite Launches', 'Space Probes', 'Telescope Technology', 'International Space Station', \n          'Manned Space Missions', 'Space Research & Development']\nsizes = [25, 20, 15, 20, 15, 5]\n\nfig, ax = plt.subplots()\n\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%', explode=(0, 0, 0, 0.1, 0, 0), \n       shadow=True, startangle=90, colors=('blue', 'orange', 'green', 'red', 'purple', 'brown'))\n\nstroke_effect = path_effects.withStroke(linewidth=2.355146100794963, foreground='#f18178')\nfor idx, wedge in enumerate(wedges):\n    if idx in [3]:\n        wedge.set_linestyle('dashdot')\n        wedge.set_path_effects([stroke_effect])\n\nplt.title(\"Distribution of Space Technology/Exploration\") \nplt.legend(labels, title=\"Space Technology/Exploration\", loc=\"upper right\")\n\nfig.patch.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "3",
        "Test_image": "./test_dataset/Pie/Pie_4fdddf42ce5e914d/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_4fdddf42ce5e914d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_4fdddf42ce5e914d/myplot.png"
    },
    {
        "id": "Pie_919cb44029b47cae",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare the data with updated values\ndata = {\n    \"Year\": [\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\"],\n    \"Percentage\": [9, 10, 13, 14, 15, 17, 18, 10, 9]  # Updated data values\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\ncolors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral', 'red', 'purple', 'pink', 'yellow', 'orange']\nexplode = np.zeros_like(data[\"Percentage\"])  # explode 1st slice\nexplode[0] = 0.1  \n\n# Plot with updated data\nax.pie(data[\"Percentage\"], explode=explode, labels=data[\"Year\"], colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\nax.set_title(\"Yearly Percentage Change\")\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nfig.set_facecolor('grey')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping for the slices that contain the center point of the bounding box to False, and also enable the picker state for those slices by setting it to True.",
        "Input_image": "./test_dataset/Pie/Pie_919cb44029b47cae/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Prepare the data with updated values\ndata = {\n    \"Year\": [\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\"],\n    \"Percentage\": [9, 10, 13, 14, 15, 17, 18, 10, 9]  # Updated data values\n}\n\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\ncolors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral', 'red', 'purple', 'pink', 'yellow', 'orange']\nexplode = np.zeros_like(data[\"Percentage\"])  # explode 1st slice\nexplode[0] = 0.1  \n\n# Plot with updated data\nwedges, texts, autotexts = ax.pie(data[\"Percentage\"], explode=explode, labels=data[\"Year\"], colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\nax.set_title(\"Yearly Percentage Change\")\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nfig.set_facecolor('grey')\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [2, 5]:  # Index 2 for 2012, and Index 5 for 2015\n        wedge.set_clip_on(False)\n        wedge.set_picker(True)\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Pie/Pie_919cb44029b47cae/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_919cb44029b47cae/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_919cb44029b47cae/myplot.png"
    },
    {
        "id": "Pie_de60099fc43ca8b8",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\ngame_type = [\"Action\", \"Adventure\", \"Role-Playing\", \"Sports\", \"Strategy\", \"Simulation\", \"Puzzle\", \"Others\"]\npercentage = [25, 15, 20, 10, 10, 10, 5, 5]\n\nfig, ax = plt.subplots()\nfig.set_facecolor('lightgray') # Set the background color\n\n# Define the explode parameter\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # Only \"explode\" the 1st slice (i.e. 'Action')\n\n# Here we set the fontsize for the labels and the autopct\nax.pie(percentage, explode=explode, labels=game_type, autopct='%1.1f%%',\n       shadow=True, startangle=90, pctdistance=0.85, textprops={'fontsize': 14})\n\n#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Here we set the fontsize for the title\nplt.title(\"Distribution of Game Types\", fontsize=14) # Add title\n\n# Here we set the fontsize for the legend\nplt.legend(game_type, title=\"Game Types\", loc=\"upper right\", title_fontsize=14) # Add legend\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the slice that contains the center point of the bounding box to #5c24a0, and ensure that its rasterized state is set to False.",
        "Input_image": "./test_dataset/Pie/Pie_de60099fc43ca8b8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\ngame_type = [\"Action\", \"Adventure\", \"Role-Playing\", \"Sports\", \"Strategy\", \"Simulation\", \"Puzzle\", \"Others\"]\npercentage = [25, 15, 20, 10, 10, 10, 5, 5]\n\nfig, ax = plt.subplots()\nfig.set_facecolor('lightgray') # Set the background color\n\n# Define the explode parameter\nexplode = (0.1, 0, 0, 0, 0, 0, 0, 0)  # Only \"explode\" the 1st slice (i.e. 'Action')\n\n# Here we set the fontsize for the labels and the autopct\nwedges, texts, autotexts = ax.pie(percentage, explode=explode, labels=game_type, autopct='%1.1f%%',\n       shadow=True, startangle=90, pctdistance=0.85, textprops={'fontsize': 14})\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1, 3]:\n        wedge.set_color('#5c24a0')\n        wedge.set_rasterized(False)\n\n#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Here we set the fontsize for the title\nplt.title(\"Distribution of Game Types\", fontsize=14) # Add title\n\n# Here we set the fontsize for the legend\nplt.legend(game_type, title=\"Game Types\", loc=\"upper right\", title_fontsize=14) # Add legend\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Pie/Pie_de60099fc43ca8b8/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_de60099fc43ca8b8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_de60099fc43ca8b8/myplot.png"
    },
    {
        "id": "Pie_660275fdf4970569",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given csv data\ndata = [\n    [\"Wind Energy\", \"35%\"],\n    [\"Solar Energy\", \"45%\"],\n    [\"Hydropower\", \"20%\"]\n]\n\n# Converting percentage strings to float numbers\ndata = [[source, float(percent.strip('%'))] for source, percent in data]\n\n# Splitting data into labels and sizes\nlabels = [source for source, _ in data]\nsizes = [percent for _, percent in data]\n\n# Creating a new figure\nfig, ax = plt.subplots()\n\n# Creating the pie chart without shadow\nax.pie(sizes, labels=labels, autopct='%.0f%%',\n       textprops={'size': 'smaller'}, pctdistance=1.1, colors=['#1f77b4', '#ff7f0e', '#2ca02c'])\n\n# Adding a title\nplt.title(\"Distribution of Renewable Energy Sources\")\n\n# Adding a legend\nplt.legend(labels, title=\"Energy Sources\", loc=\"upper right\")\n\n# Setting the background color of the chart figure to white\nfig.set_facecolor('white')\n\n# Adjusting layout\nplt.tight_layout()\n\n# Saving the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Make the slices that contain the center point of the bounding box animated by setting their animated state to True. Also, ensure that the clipping state for these slices is set to True.",
        "Input_image": "./test_dataset/Pie/Pie_660275fdf4970569/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given csv data\ndata = [\n    [\"Wind Energy\", \"35%\"],\n    [\"Solar Energy\", \"45%\"],\n    [\"Hydropower\", \"20%\"]\n]\n\n# Converting percentage strings to float numbers\ndata = [[source, float(percent.strip('%'))] for source, percent in data]\n\n# Splitting data into labels and sizes\nlabels = [source for source, _ in data]\nsizes = [percent for _, percent in data]\n\n# Creating a new figure\nfig, ax = plt.subplots()\n\n# Creating the pie chart without shadow\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%.0f%%',\n       textprops={'size': 'smaller'}, pctdistance=1.1, colors=['#1f77b4', '#ff7f0e', '#2ca02c'])\n\nfor idx, wedge in enumerate(wedges):\n    if idx in [1]:  # Index 1 for Solar Energy\n        wedge.set_animated(True)\n        wedge.set_clip_on(True)\n\n# Adding a title\nplt.title(\"Distribution of Renewable Energy Sources\")\n\n# Adding a legend\nplt.legend(labels, title=\"Energy Sources\", loc=\"upper right\")\n\n# Setting the background color of the chart figure to white\nfig.set_facecolor('white')\n\n# Adjusting layout\nplt.tight_layout()\n\n# Saving the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Pie/Pie_660275fdf4970569/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_660275fdf4970569/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_660275fdf4970569/myplot.png"
    },
    {
        "id": "Pie_5caf4435b17dcaa0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = [\"South Asia\", \"Sub-Saharan Africa\", \"Latin America & Caribbean\", \"East Asia & Pacific\"]\nsizes = [35, 25, 20, 20]\n\nfig, ax = plt.subplots()\n\n# Plotting\nax.pie(sizes, labels=labels, autopct='%1.1f%%', labeldistance=1.05, shadow=True, pctdistance=0.8, colors=['red', 'green', 'blue', 'yellow'])\nfig.set_facecolor(\"lightgrey\")\n\n# Adding title, legend\nplt.title(\"Child Mortality Rate Reduction by Region\") \nplt.legend(labels, title=\"Regions\", loc=\"upper right\") \n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Fill the segments of the pie chart that contain the center point of the bounding box with a pattern of alternating dashed and solid lines.",
        "Input_image": "./test_dataset/Pie/Pie_5caf4435b17dcaa0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = [\"South Asia\", \"Sub-Saharan Africa\", \"Latin America & Caribbean\", \"East Asia & Pacific\"]\nsizes = [35, 25, 20, 20]\n\nfig, ax = plt.subplots()\n\n# Plotting\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', labeldistance=1.05, shadow=True, pctdistance=0.8, colors=['red', 'green', 'blue', 'yellow'])\nfig.set_facecolor(\"lightgrey\")\n\n# Adding title, legend\nplt.title(\"Child Mortality Rate Reduction by Region\") \nplt.legend(labels, title=\"Regions\", loc=\"upper right\") \n\n# Fill the segments corresponding to the Target_object of the pie chart with alternating dashed and solid lines\ntarget_object = [0, 2]  # Randomly selected indices\nfor idx, wedge in enumerate(wedges):\n    if idx in target_object:\n        wedge.set_hatch('//')\n    else:\n        wedge.set_hatch('')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Pie/Pie_5caf4435b17dcaa0/Edit_figure.png",
        "Masked_image": "./test_dataset/Pie/Pie_5caf4435b17dcaa0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Pie/Pie_5caf4435b17dcaa0/myplot.png"
    },
    {
        "id": "Stack_4fbcc36f8ac870bb",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data for pre-lockdown and lockdown\ndata = {\n    \"pre-lockdown\": {\n        \"CO2\": [1000, 1500, 800, 1200],\n        \"NO2\": [100, 150, 80, 120],\n        \"PM2.5\": [50, 70, 40, 60],\n        \"SO2\": [20, 30, 15, 35]\n    },\n    \"lockdown\": {\n        \"CO2\": [600, 900, 500, 800],\n        \"NO2\": [70, 120, 50, 90],\n        \"PM2.5\": [30, 60, 20, 50],\n        \"SO2\": [15, 25, 10, 30]\n    }\n}\n\npollutants = [\"CO2\", \"NO2\", \"PM2.5\", \"SO2\"]\n\nfig, ax = plt.subplots()\n\n# Create a stackplot\nfor period in ['pre-lockdown', 'lockdown']:\n    ax.stackplot(['Country A', 'Country B', 'Country C', 'Country D'],\n                 [data[period][pollutant] for pollutant in pollutants], labels=pollutants)\n\nax.set_xlabel('Countries')\nax.set_ylabel('Emissions in metric tons')\nax.set_title('Impact of COVID-19 Lockdowns on Global Emissions')\nax.legend(loc='upper right')\n\n# Set the x-axis limits\nax.set_xlim('Country A', 'Country D')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the clipping state of the areas that contain the center point of the bounding box to False, and set their color to #613f0e.",
        "Input_image": "./test_dataset/Stack/Stack_4fbcc36f8ac870bb/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data for pre-lockdown and lockdown\ndata = {\n    \"pre-lockdown\": {\n        \"CO2\": [1000, 1500, 800, 1200],\n        \"NO2\": [100, 150, 80, 120],\n        \"PM2.5\": [50, 70, 40, 60],\n        \"SO2\": [20, 30, 15, 35]\n    },\n    \"lockdown\": {\n        \"CO2\": [600, 900, 500, 800],\n        \"NO2\": [70, 120, 50, 90],\n        \"PM2.5\": [30, 60, 20, 50],\n        \"SO2\": [15, 25, 10, 30]\n    }\n}\n\npollutants = [\"CO2\", \"NO2\", \"PM2.5\", \"SO2\"]\n\nfig, ax = plt.subplots()\n\n# Create a stackplot\nfor period in ['pre-lockdown', 'lockdown']:\n    stack = ax.stackplot(['Country A', 'Country B', 'Country C', 'Country D'],\n                 [data[period][pollutant] for pollutant in pollutants], labels=pollutants)\n    if period == 'lockdown':  # Apply modifications to the lockdown period\n        for i, area in enumerate(stack):\n            if i == 2:  # PM2.5's stack\n                area.set_clip_on(False)\n                area.set_facecolor('#613f0e')\n\nax.set_xlabel('Countries')\nax.set_ylabel('Emissions in metric tons')\nax.set_title('Impact of COVID-19 Lockdowns on Global Emissions')\nax.legend(loc='upper right')\n\n# Set the x-axis limits\nax.set_xlim('Country A', 'Country D')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "6",
        "Test_image": "./test_dataset/Stack/Stack_4fbcc36f8ac870bb/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_4fbcc36f8ac870bb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_4fbcc36f8ac870bb/figure.png"
    },
    {
        "id": "Stack_596d9b49d88981f1",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time periods of the day\ntime_periods = ['Morning', 'Afternoon', 'Evening']\n\n# Vehicle type counts for each time period\ncars = [50, 80, 60]\nbuses = [5, 10, 8]\nbicycles = [15, 20, 25]\n\n# Stack plot for the vehicle distribution\nplt.figure(figsize=(7, 5))\nplt.stackplot(time_periods, cars, buses, bicycles, labels=['Cars', 'Buses', 'Bicycles'], alpha=0.7)\n\n# Aesthetics for plot\nplt.legend(loc='upper left')\nplt.title(\"City Traffic Flow Analysis at Intersections\")\nplt.xlabel(\"Time of the day\")\nplt.ylabel(\"Count of vehicles\")\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the area that contains the center point of the bounding box to #fece31. Also, ensure that the snap state of this area is set to True.",
        "Input_image": "./test_dataset/Stack/Stack_596d9b49d88981f1/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Time periods of the day\ntime_periods = ['Morning', 'Afternoon', 'Evening']\n\n# Vehicle type counts for each time period\ncars = [50, 80, 60]\nbuses = [5, 10, 8]\nbicycles = [15, 20, 25]\n\n# Stack plot for the vehicle distribution\nplt.figure(figsize=(7, 5))\nplt.stackplot(time_periods, cars, buses, bicycles, labels=['Cars', 'Buses', 'Bicycles'], alpha=0.7)\n\n# Modify the color and snap state of the target object\nfor i, area in enumerate(plt.gca().collections):\n    if i == 0:  # Cars' stack\n        area.set_facecolor('#fece31')\n        area.set_snap(True)\n\n# Aesthetics for plot\nplt.legend(loc='upper left')\nplt.title(\"City Traffic Flow Analysis at Intersections\")\nplt.xlabel(\"Time of the day\")\nplt.ylabel(\"Count of vehicles\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_596d9b49d88981f1/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_596d9b49d88981f1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_596d9b49d88981f1/figure.png"
    },
    {
        "id": "Stack_c7b4a92dfa37b6d5",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Ocean depths\ndepths = ['0-200m', '200-500m', '500-1000m', '1000-2000m', 'Below 2000m']\n\n# Oceanic currents at different depths\ncurrent1 = [0.8, 0.5, 0.2, 0.4, 0.1]\ncurrent2 = [0.7, 0.4, 0.3, 0.2, 0.2]\ncurrent3 = [0.6, 0.3, 0.1, 0.3, 0.1]\n\n# Creating stack plot\nplt.figure(figsize=(10,6))\nplt.stackplot(depths, current1, current2, current3, labels=['Current 1','Current 2','Current 3'])\n\nplt.legend(loc='upper right')\nplt.title('Oceanic Currents at Different Depths')\nplt.xlabel('Ocean Depths')\nplt.ylabel('Oceanic Current Speed (m/s)')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the areas that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Stack/Stack_c7b4a92dfa37b6d5/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Ocean depths\ndepths = ['0-200m', '200-500m', '500-1000m', '1000-2000m', 'Below 2000m']\n\n# Oceanic currents at different depths\ncurrent1 = [0.8, 0.5, 0.2, 0.4, 0.1]\ncurrent2 = [0.7, 0.4, 0.3, 0.2, 0.2]\ncurrent3 = [0.6, 0.3, 0.1, 0.3, 0.1]\n\n# Creating stack plot\nplt.figure(figsize=(10,6))\nplt.stackplot(depths, current1, current2, current3, labels=['Current 1','Current 2','Current 3'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Current 2's stack\n        area.set_clip_on(False)\n\nplt.legend(loc='upper right')\nplt.title('Oceanic Currents at Different Depths')\nplt.xlabel('Ocean Depths')\nplt.ylabel('Oceanic Current Speed (m/s)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_c7b4a92dfa37b6d5/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_c7b4a92dfa37b6d5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_c7b4a92dfa37b6d5/figure.png"
    },
    {
        "id": "Stack_45d184abaf3aa7b8",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define data for emojis\nemojis = ['\ud83d\ude02 (Laughing Face)', '\u2764\ufe0f (Red Heart)', '\ud83d\ude2d (Loudly Crying Face)']\ntime_intervals = ['12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM', '7 PM', '8 PM', '9 PM', '10 PM', '11 PM', '12 AM']\nemoji_data = {\n    '\ud83d\ude02 (Laughing Face)': [40, 35, 30, 25, 20, 25, 30, 35, 40, 45, 50, 45, 40],\n    '\u2764\ufe0f (Red Heart)': [25, 30, 35, 40, 45, 40, 35, 30, 25, 20, 15, 20, 25],\n    '\ud83d\ude2d (Loudly Crying Face)': [15, 20, 25, 30, 35, 40, 45, 40, 35, 30, 25, 20, 15]\n}\n\n# Define colors for emojis\nemoji_colors = ['lightyellow',  'lightcoral', 'lightblue']\n\n# Create stack plot with custom colors\nplt.figure(figsize=(10, 6))\nplt.stackplot(time_intervals, [emoji_data[emoji] for emoji in emojis], labels=emojis, colors=emoji_colors)\n\n# Customize plot\nplt.title(\"Emoji Frequency in Text Messages (Teenagers)\")\nplt.xlabel(\"Time (12 PM - 12 AM)\")\nplt.ylabel(\"Percentage of Text Messages with Emoji\")\nplt.legend(loc='upper left')\n\n# Show plot\nplt.xticks(rotation=45)\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Modify the hatch pattern of the filled area that contains the center point of the bounding box to 'o'. Also, change the edge's linestyle to 'dashed' and set its color to #b9b64c for that same area.",
        "Input_image": "./test_dataset/Stack/Stack_45d184abaf3aa7b8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Define data for emojis\nemojis = ['\ud83d\ude02 (Laughing Face)', '\u2764\ufe0f (Red Heart)', '\ud83d\ude2d (Loudly Crying Face)']\ntime_intervals = ['12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM', '6 PM', '7 PM', '8 PM', '9 PM', '10 PM', '11 PM', '12 AM']\nemoji_data = {\n    '\ud83d\ude02 (Laughing Face)': [40, 35, 30, 25, 20, 25, 30, 35, 40, 45, 50, 45, 40],\n    '\u2764\ufe0f (Red Heart)': [25, 30, 35, 40, 45, 40, 35, 30, 25, 20, 15, 20, 25],\n    '\ud83d\ude2d (Loudly Crying Face)': [15, 20, 25, 30, 35, 40, 45, 40, 35, 30, 25, 20, 15]\n}\n\n# Define colors for emojis\nemoji_colors = ['lightyellow',  'lightcoral', 'lightblue']\n\n# Create stack plot with custom colors\nplt.figure(figsize=(10, 6))\nstacks=plt.stackplot(time_intervals, [emoji_data[emoji] for emoji in emojis], labels=emojis, colors=emoji_colors)\nfor idx,stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_hatch('o')\n        stack.set_linestyle('dashed')\n        stack.set_edgecolor('#b9b64c')\n# Customize plot\nplt.title(\"Emoji Frequency in Text Messages (Teenagers)\")\nplt.xlabel(\"Time (12 PM - 12 AM)\")\nplt.ylabel(\"Percentage of Text Messages with Emoji\")\nplt.legend(loc='upper left')\n\n# Show plot\nplt.xticks(rotation=45)\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_45d184abaf3aa7b8/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_45d184abaf3aa7b8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_45d184abaf3aa7b8/figure.png"
    },
    {
        "id": "Stack_ae590ba4b8f0bb76",
        "Input_code": "import matplotlib.pyplot as plt\n\ndecades = ['1950s', '1960s', '1970s', '1980s', '1990s', '2000s']\n\nvintage = [30, 20, 10, 5, 10, 15]\nglamorous = [20, 40, 30, 30, 40, 30]\ncasual = [10, 30, 40, 10, 20, 20]\nchic = [40, 10, 20, 55, 30, 35]\n\nplt.figure(figsize=(10,6))\n\nplt.stackplot(decades, vintage, glamorous, casual, chic,\n              labels=['Vintage', 'Glamorous', 'Casual', 'Chic'],\n              colors=['#6d904f', '#fc4f30', '#008fd5', '#e5ae38'], alpha=0.7)\n\nplt.legend(loc='upper left')\n\nplt.title('Fashion Trends over Six Decades')\nplt.xlabel('Decade')\nplt.ylabel('Percentage')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the area that contains the center point of the bounding box to #498b69. For this same area, apply a stroke with a linewidth of 3.32 and a foreground color of #07765a.",
        "Input_image": "./test_dataset/Stack/Stack_ae590ba4b8f0bb76/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\ndecades = ['1950s', '1960s', '1970s', '1980s', '1990s', '2000s']\n\nvintage = [30, 20, 10, 5, 10, 15]\nglamorous = [20, 40, 30, 30, 40, 30]\ncasual = [10, 30, 40, 10, 20, 20]\nchic = [40, 10, 20, 55, 30, 35]\n\nplt.figure(figsize=(10,6))\n\ncolors = ['#6d904f', '#498b69', '#008fd5', '#e5ae38']\nstroke_effect = path_effects.withStroke(linewidth=3.3236634836325507, foreground='#07765a')\nplt.stackplot(decades, vintage, glamorous, casual, chic,\n              labels=['Vintage', 'Glamorous', 'Casual', 'Chic'],\n              colors=colors, alpha=0.7)\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Glamorous's stack\n        area.set_edgecolor('#498b69')\n        area.set_path_effects([stroke_effect])\n\nplt.legend(loc='upper left')\n\nplt.title('Fashion Trends over Six Decades')\nplt.xlabel('Decade')\nplt.ylabel('Percentage')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_ae590ba4b8f0bb76/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_ae590ba4b8f0bb76/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_ae590ba4b8f0bb76/figure.png"
    },
    {
        "id": "Stack_230fbf79f0226228",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Age Group\nage_group = ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70']\n\n# Males %\nmales = [40, 45, 55, 48, 51, 46, 43]\n\n# Females %\nfemales = [60, 55, 45, 52, 49, 54, 57]\n\nplt.figure(figsize=(10,7))\n\n# Stackplot\nplt.stackplot(age_group, males, females, colors=['blue', 'pink'], labels=['Males', 'Females'])\n\nplt.legend(loc='upper left')\n\nplt.title('Gender Distribution in Different Age Groups')\nplt.xlabel('Age Group')\nplt.ylabel('Percentage (%)')\n\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the transparency of the area that contains the center point of the bounding box to 0.97. Also, change the line color of that area to #e953a7.",
        "Input_image": "./test_dataset/Stack/Stack_230fbf79f0226228/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Age Group\nage_group = ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70']\n\n# Males %\nmales = [40, 45, 55, 48, 51, 46, 43]\n\n# Females %\nfemales = [60, 55, 45, 52, 49, 54, 57]\n\nplt.figure(figsize=(10,7))\n\n# Stackplot\nplt.stackplot(age_group, males, females, colors=['blue', 'pink'], labels=['Males', 'Females'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Females' stack\n        area.set_alpha(0.97)\n        area.set_edgecolor('#e953a7')\n\nplt.legend(loc='upper left')\n\nplt.title('Gender Distribution in Different Age Groups')\nplt.xlabel('Age Group')\nplt.ylabel('Percentage (%)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_230fbf79f0226228/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_230fbf79f0226228/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_230fbf79f0226228/figure.png"
    },
    {
        "id": "Stack_5750da459dcf7e34",
        "Input_code": "# Import necessary library\nimport matplotlib.pyplot as plt\n\n# Specify the growth stages\ngrowth_stages = ['Seedling', 'Sapling', 'Mature', 'Old']\n\n# Provide the heights for each tree at different growth stages\noak_heights = [0.5, 1.5, 5.0, 10.0]\nwillow_heights = [0.3, 1.0, 4.0, 8.5]\npine_heights = [0.2, 0.8, 3.0, 7.0]\n\n# Create a stack plot\nplt.stackplot(growth_stages, oak_heights, willow_heights, pine_heights, labels=['Oak', 'Willow', 'Pine'])\n\n# Add labels and title\nplt.xlabel('Growth Stages')\nplt.ylabel('Tree Heights (m)')\nplt.title('Mystical Forest Growth Exploration')\n\n# Add a legend\nplt.legend(loc='upper left')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the area that contains the center point of the bounding box to #ebe1d8, and set its alpha blending mode to 0.8244.",
        "Input_image": "./test_dataset/Stack/Stack_5750da459dcf7e34/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Specify the growth stages\ngrowth_stages = ['Seedling', 'Sapling', 'Mature', 'Old']\n\n# Provide the heights for each tree at different growth stages\noak_heights = [0.5, 1.5, 5.0, 10.0]\nwillow_heights = [0.3, 1.0, 4.0, 8.5]\npine_heights = [0.2, 0.8, 3.0, 7.0]\n\n# Create a stack plot\nstacks = plt.stackplot(growth_stages, oak_heights, willow_heights, pine_heights, labels=['Oak', 'Willow', 'Pine'])\n\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_edgecolor('#ebe1d8')\n        stack.set_alpha(0.8244185822375443)\n\n# Add labels and title\nplt.xlabel('Growth Stages')\nplt.ylabel('Tree Heights (m)')\nplt.title('Mystical Forest Growth Exploration')\n\n# Add a legend\nplt.legend(loc='upper left')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_5750da459dcf7e34/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_5750da459dcf7e34/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_5750da459dcf7e34/figure.png"
    },
    {
        "id": "Stack_0052474dd86db65d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Defining the data for the years\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]\n\n# Defining the data for the annual growth of renewable energy consumption in developing countries\ndev_countries = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n# Defining the data for the annual growth of renewable energy consumption in developed countries\ndeveloped_countries = [3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8]\n\n# Plotting the stack plot\nplt.stackplot(years,[dev_countries, developed_countries], labels=['Developing Countries','Developed Countries'], colors=['blue', 'orange'])\n\n# Setting the title, x-label and y-label\nplt.title(\"Annual Growth of Renewable Energy Consumption (2010-2020)\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Annual Growth (%)\")\n\n# Locating the legend\nplt.legend(loc='upper left')\n\n# Enabling the grid\nplt.grid(True)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the area that contains the center point of the bounding box to False. Also, change the face color of that area to #ceba8a.",
        "Input_image": "./test_dataset/Stack/Stack_0052474dd86db65d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Defining the data for the years\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]\n\n# Defining the data for the annual growth of renewable energy consumption in developing countries\ndev_countries = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n# Defining the data for the annual growth of renewable energy consumption in developed countries\ndeveloped_countries = [3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8]\n\n# Plotting the stack plot\nplt.stackplot(years,[dev_countries, developed_countries], labels=['Developing Countries','Developed Countries'], colors=['blue', 'orange'])\n\n# Setting the title, x-label and y-label\nplt.title(\"Annual Growth of Renewable Energy Consumption (2010-2020)\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Annual Growth (%)\")\n\n# Locating the legend\nplt.legend(loc='upper left')\n\n# Enabling the grid\nplt.grid(True)\n\n# Modifying the animated state and face color of the target object\nfor i, area in enumerate(plt.gca().collections):\n    if i == 0:  # Developing Countries' stack\n        area.set_animated(False)\n        area.set_facecolor('#ceba8a')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_0052474dd86db65d/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_0052474dd86db65d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_0052474dd86db65d/figure.png"
    },
    {
        "id": "Stack_3e1a480eaa7282e9",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Sleep Quality Levels\nquality_levels = ['Poor', 'Fair', 'Good', 'Excellent']\n\n# Daily Caffeine Consumption\nlow_consumption = [10, 20, 30, 15]  # Low\nmoderate_consumption = [15, 25, 40, 20] # Moderate\nhigh_consumption = [5, 15, 25, 10]  # High\n\n# Define the colors for different consumption levels \ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"]\n\n# Create the stackplot\nplt.figure(figsize=(10, 7))\nplt.stackplot(quality_levels, low_consumption, moderate_consumption, high_consumption, labels=['Low','Moderate','High'], colors=colors)\n\n# Define labels and title\nplt.xlabel('Sleep Quality Level')\nplt.ylabel('Number of Students')\nplt.title('Sleep Quality and Daily Caffeine Consumption among College students')\n\n# Display the legend\nplt.legend(loc='upper left')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the areas that contain the center point of the bounding box to True. Also, ensure that the clipping state for these areas is set to True as well.",
        "Input_image": "./test_dataset/Stack/Stack_3e1a480eaa7282e9/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Sleep Quality Levels\nquality_levels = ['Poor', 'Fair', 'Good', 'Excellent']\n\n# Daily Caffeine Consumption\nlow_consumption = [10, 20, 30, 15]  # Low\nmoderate_consumption = [15, 25, 40, 20] # Moderate\nhigh_consumption = [5, 15, 25, 10]  # High\n\n# Define the colors for different consumption levels \ncolors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\"]\n\n# Create the stackplot\nplt.figure(figsize=(10, 7))\nplt.stackplot(quality_levels, low_consumption, moderate_consumption, high_consumption, labels=['Low','Moderate','High'], colors=colors)\n\n# Apply modifications to the target object\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Moderate consumption stack\n        area.set_animated(True)\n        area.set_clip_on(True)\n\n# Define labels and title\nplt.xlabel('Sleep Quality Level')\nplt.ylabel('Number of Students')\nplt.title('Sleep Quality and Daily Caffeine Consumption among College students')\n\n# Display the legend\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_3e1a480eaa7282e9/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_3e1a480eaa7282e9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_3e1a480eaa7282e9/figure.png"
    },
    {
        "id": "Stack_2385c9b56ac61c0d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nmonths = [1, 2, 3, 4, 5, 6]\nfacebook_users = [120, 110, 105, 95, 90, 85]\ntwitter_users = [80, 85, 90, 95, 100, 105]\ninstagram_users = [100, 105, 110, 115, 120, 125]\n\n# Stack plot\nplt.stackplot(months, facebook_users, twitter_users, instagram_users, \n              labels=['Facebook', 'Twitter', 'Instagram'], \n              colors=['blue', 'green', 'purple'], alpha=0.6)\n\n# X and Y labels\nplt.xlabel('Month')\nplt.ylabel('Number of Users (in millions)')\n\n# Title\nplt.title('User Trends of Social Media Platforms over Six Months')\n\n# Legend\nplt.legend(loc='upper left')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the z-order of the area that contains the center point of the bounding box to 18. Add a shadow effect to this area with an offset of (2.83, 3.52) and shadow color purple. Also, adjust the transformation of the area containing the center point of the bounding box to use the data coordinate system.",
        "Input_image": "./test_dataset/Stack/Stack_2385c9b56ac61c0d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Data\nmonths = [1, 2, 3, 4, 5, 6]\nfacebook_users = [120, 110, 105, 95, 90, 85]\ntwitter_users = [80, 85, 90, 95, 100, 105]\ninstagram_users = [100, 105, 110, 115, 120, 125]\n\n# Stack plot\nplt.stackplot(months, facebook_users, twitter_users, instagram_users, \n              labels=['Facebook', 'Twitter', 'Instagram'], \n              colors=['blue', 'green', 'purple'], alpha=0.6)\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Twitter's stack\n        area.set_zorder(18)\n        shadow_color = 'purple'\n        area.set_path_effects([SimplePatchShadow(offset=(2.83, 3.52), shadow_rgbFace=shadow_color), Normal()])\n        area.set_transform(plt.gca().transData)\n\n# X and Y labels\nplt.xlabel('Month')\nplt.ylabel('Number of Users (in millions)')\n\n# Title\nplt.title('User Trends of Social Media Platforms over Six Months')\n\n# Legend\nplt.legend(loc='upper left')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_2385c9b56ac61c0d/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_2385c9b56ac61c0d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_2385c9b56ac61c0d/figure.png"
    },
    {
        "id": "Stack_512e066d3efb650d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n# Pollution levels for all Cities\ncity_A = [42, 35, 48, 51, 55, 62, 68, 70, 63, 58, 47, 40]\ncity_B = [38, 31, 44, 48, 52, 60, 66, 68, 60, 55, 45, 36]\ncity_C = [46, 39, 52, 56, 60, 68, 74, 76, 70, 64, 53, 44]\ncity_D = [40, 33, 46, 49, 53, 61, 66, 68, 62, 56, 45, 38]\n\n# Create a stack plot \nplt.figure(figsize=(10,7)) \nplt.stackplot(months, city_A, city_B, city_C, city_D, labels=['City A','City B','City C','City D'])\nplt.legend(loc='upper left')\nplt.title('City Pollution Levels Over a Year')\nplt.xlabel('Months')\nplt.ylabel('Pollution Index')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Hide the filled area of the areas that contain the center point of the bounding box.",
        "Input_image": "./test_dataset/Stack/Stack_512e066d3efb650d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n# Pollution levels for all Cities\ncity_A = [42, 35, 48, 51, 55, 62, 68, 70, 63, 58, 47, 40]\ncity_B = [38, 31, 44, 48, 52, 60, 66, 68, 60, 55, 45, 36]\ncity_C = [46, 39, 52, 56, 60, 68, 74, 76, 70, 64, 53, 44]\ncity_D = [40, 33, 46, 49, 53, 61, 66, 68, 62, 56, 45, 38]\n\n# Create a stack plot \nplt.figure(figsize=(10,7)) \nstacks=plt.stackplot(months, city_A, city_B, city_C, city_D, labels=['City A','City B','City C','City D'])\nfor idx,stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_visible(False)\nplt.legend(loc='upper left')\nplt.title('City Pollution Levels Over a Year')\nplt.xlabel('Months')\nplt.ylabel('Pollution Index')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_512e066d3efb650d/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_512e066d3efb650d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_512e066d3efb650d/figure.png"
    },
    {
        "id": "Stack_d80f1abe55959d93",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nyears = ['2017', '2018', '2019', '2020']\nairlines = ['Airline A', 'Airline B', 'Airline C', 'Airline D']\n\n# Ratings data\non_time = np.array([[3.5, 4.1, 3.8, 4.3],\n                    [4.2, 3.9, 4.0, 4.1],\n                    [4.0, 4.3, 3.9, 4.0],\n                    [3.9, 3.7, 4.2, 4.4]])\n\ncust_service = np.array([[4.0, 3.8, 4.3, 4.2],\n                         [3.5, 4.1, 4.0, 4.4],\n                         [4.2, 3.9, 3.8, 4.1],\n                         [4.1, 4.2, 4.1, 4.3]])\n\nbag_handling = np.array([[3.9, 4.0, 3.8, 4.2],\n                         [3.7, 4.1, 4.0, 4.3],\n                         [4.2, 4.3, 3.9, 4.0],\n                         [3.6, 4.2, 4.1, 4.4]])\n\n# Plotting\nfig, ax = plt.subplots()\n\nax.stackplot(years, on_time, cust_service, bag_handling, labels=airlines)\nax.legend(loc='upper left')\nplt.xlabel(\"Years\")\nplt.ylabel(\"Customer Satisfaction Ratings\")\nplt.title(\"Customer Satisfaction Ratings for different airlines\")\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the area that contains the center point of the bounding box to #b94a2e, and update the label of that area to 'A new Label'.",
        "Input_image": "./test_dataset/Stack/Stack_d80f1abe55959d93/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nyears = ['2017', '2018', '2019', '2020']\nairlines = ['Airline A', 'Airline B', 'Airline C', 'Airline D']\n\n# Ratings data\non_time = np.array([[3.5, 4.1, 3.8, 4.3],\n                    [4.2, 3.9, 4.0, 4.1],\n                    [4.0, 4.3, 3.9, 4.0],\n                    [3.9, 3.7, 4.2, 4.4]])\n\ncust_service = np.array([[4.0, 3.8, 4.3, 4.2],\n                         [3.5, 4.1, 4.0, 4.4],\n                         [4.2, 3.9, 3.8, 4.1],\n                         [4.1, 4.2, 4.1, 4.3]])\n\nbag_handling = np.array([[3.9, 4.0, 3.8, 4.2],\n                         [3.7, 4.1, 4.0, 4.3],\n                         [4.2, 4.3, 3.9, 4.0],\n                         [3.6, 4.2, 4.1, 4.4]])\n\n# Plotting\nfig, ax = plt.subplots()\n\n\nlabels = ['A new Label', 'Airline B', 'Airline C', 'Airline D']\nstacks=ax.stackplot(years, on_time, cust_service, bag_handling, labels=labels)\nfor idx,area in enumerate(stacks):\n    if idx==0:\n        area.set_color('#b94a2e')\nax.legend(loc='upper left')\nplt.xlabel(\"Years\")\nplt.ylabel(\"Customer Satisfaction Ratings\")\nplt.title(\"Customer Satisfaction Ratings for different airlines\")\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_d80f1abe55959d93/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_d80f1abe55959d93/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_d80f1abe55959d93/figure.png"
    },
    {
        "id": "Stack_6a999d91ff608ed6",
        "Input_code": "import matplotlib.pyplot as plt\n\ncelebrities = ['Celebrity 1', 'Celebrity 2', 'Celebrity 3', 'Celebrity 4', 'Celebrity 5']\nInstagram_followers = [10, 25, 30, 15, 20]\nTwitter_followers = [5, 12, 18, 8, 10]\nYouTube_subscribers = [3, 8, 10, 5, 7]\n\nplt.figure(figsize=(10, 6))\n\nplt.stackplot(celebrities, Instagram_followers, Twitter_followers, YouTube_subscribers, \n              colors=['blue', 'orange', 'green'], labels=['Instagram','Twitter','YouTube'])\n\nplt.legend(loc='upper left')\n\nplt.ylabel('No. of followers/subscribers (M)')\nplt.title('Social media following of top celebrities')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #9c381f. Additionally, set the line width of that area to 1.28.",
        "Input_image": "./test_dataset/Stack/Stack_6a999d91ff608ed6/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\ncelebrities = ['Celebrity 1', 'Celebrity 2', 'Celebrity 3', 'Celebrity 4', 'Celebrity 5']\nInstagram_followers = [10, 25, 30, 15, 20]\nTwitter_followers = [5, 12, 18, 8, 10]\nYouTube_subscribers = [3, 8, 10, 5, 7]\n\nplt.figure(figsize=(10, 6))\n\nplt.stackplot(celebrities, Instagram_followers, Twitter_followers, YouTube_subscribers, \n              colors=['blue', 'orange', 'green'], labels=['Instagram','Twitter','YouTube'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Twitter's stack\n        area.set_facecolor('#9c381f')\n        area.set_linewidth(1.28)\n\nplt.legend(loc='upper left')\n\nplt.ylabel('No. of followers/subscribers (M)')\nplt.title('Social media following of top celebrities')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_6a999d91ff608ed6/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_6a999d91ff608ed6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_6a999d91ff608ed6/figure.png"
    },
    {
        "id": "Stack_b794bc8566a34c08",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Depths\ndepths = ['0-200', '200-400', '400-600', '600-800', '800-1000']\n\n# Water temperatures in Celsius\ntemperatures = [25, 22, 20, 18, 15]\n\n# Current speeds in m/s\ncurrent_speeds = [1.5, 1.2, 0.8, 0.6, 0.4]\n\nfig, ax = plt.subplots()\n\nax.stackplot(depths, temperatures, current_speeds, labels=['Temperature (\u00b0C)', 'Current Speed (m/s)'], colors=['blue', 'orange'])\nax.legend(loc='upper right')\nplt.xlabel('Ocean Depth (m)')\nplt.ylim([0, max(temperatures + current_speeds)*1.1])\nax.title.set_text('Dynamics of Ocean Currents across different Depths')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the area that contains the center point of the bounding box to #4c9747. Additionally, set the edge linewidth for this area to approximately 1.33 and update the edge color to #df4d5b.",
        "Input_image": "./test_dataset/Stack/Stack_b794bc8566a34c08/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Depths\ndepths = ['0-200', '200-400', '400-600', '600-800', '800-1000']\n\n# Water temperatures in Celsius\ntemperatures = [25, 22, 20, 18, 15]\n\n# Current speeds in m/s\ncurrent_speeds = [1.5, 1.2, 0.8, 0.6, 0.4]\n\nfig, ax = plt.subplots()\n\nstacks = ax.stackplot(depths, temperatures, current_speeds, labels=['Temperature (\u00b0C)', 'Current Speed (m/s)'], colors=['blue', 'orange'])\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_edgecolor('#4c9747')\n        stack.set_linewidth(1.3311769782209388)\n        stack.set_color('#df4d5b')\nax.legend(loc='upper right')\nplt.xlabel('Ocean Depth (m)')\nplt.ylim([0, max(temperatures + current_speeds)*1.1])\nax.title.set_text('Dynamics of Ocean Currents across different Depths')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_b794bc8566a34c08/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b794bc8566a34c08/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b794bc8566a34c08/figure.png"
    },
    {
        "id": "Stack_dbc943b5f8f1bab2",
        "Input_code": "import matplotlib.pyplot as plt\n\nsectors = [1, 2, 3, 4]\nAlien1 = [10, 12, 8, 15]\nAlien2 = [5, 7, 10, 3]\nAlien3 = [8, 6, 4, 12]\n\nplt.stackplot(sectors, Alien1, Alien2, Alien3, labels=['Alien1','Alien2','Alien3'])\nplt.xlabel(\"Sectors\")\nplt.ylabel(\"Number of Aliens\")\nplt.title(\"Distribution of Alien Life Forms Across Sectors\")\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the filled area that contains the center point of the bounding box to #2252c9. Also, set the edge linestyle of this area to 'solid' and update its color to #74621f.",
        "Input_image": "./test_dataset/Stack/Stack_dbc943b5f8f1bab2/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nsectors = [1, 2, 3, 4]\nAlien1 = [10, 12, 8, 15]\nAlien2 = [5, 7, 10, 3]\nAlien3 = [8, 6, 4, 12]\n\nstacks = plt.stackplot(sectors, Alien1, Alien2, Alien3, labels=['Alien1','Alien2','Alien3'])\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_edgecolor('#2252c9')\n        stack.set_linestyle('solid')\n        stack.set_linewidth(2)\n        stack.set_edgecolor('#74621f')\nplt.xlabel(\"Sectors\")\nplt.ylabel(\"Number of Aliens\")\nplt.title(\"Distribution of Alien Life Forms Across Sectors\")\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_dbc943b5f8f1bab2/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_dbc943b5f8f1bab2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_dbc943b5f8f1bab2/figure.png"
    },
    {
        "id": "Stack_3cbda7e4b2195995",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]\nusers = [250, 500, 800, 1000, 1300, 1600, 2000, 2300, 2600, 3000, 3500]\nengagement = [30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130]\n\n# Create stack plot\nplt.figure(figsize=(10, 7))\nplt.stackplot(years, users, engagement, labels=['Number of Users', 'User Engagement'], colors=['blue', 'orange'])\n\n# Configure legend and labels\nplt.legend(loc = 'upper left')\nplt.title('User Growth and Engagement in Social Media Over 2010-2020')\nplt.xlabel('Year')\nplt.ylabel('Users (Million) / Engagement (Minutes/Day)')\nplt.grid()\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the hatch pattern of the filled area that contains the center point of the bounding box to '*'. Also, set the edge's linestyle to 'solid' and update the edge color to #123b4f for that same area.",
        "Input_image": "./test_dataset/Stack/Stack_3cbda7e4b2195995/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]\nusers = [250, 500, 800, 1000, 1300, 1600, 2000, 2300, 2600, 3000, 3500]\nengagement = [30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130]\n\n# Create stack plot\nplt.figure(figsize=(10, 7))\nstacks = plt.stackplot(years, users, engagement, labels=['Number of Users', 'User Engagement'], colors=['blue', 'orange'])\n\n# Modify the stack corresponding to the Target_object\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_hatch('*')\n        stack.set_edgecolor('#123b4f')\n        stack.set_linestyle('solid')\n\n# Configure legend and labels\nplt.legend(loc = 'upper left')\nplt.title('User Growth and Engagement in Social Media Over 2010-2020')\nplt.xlabel('Year')\nplt.ylabel('Users (Million) / Engagement (Minutes/Day)')\nplt.grid()\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_3cbda7e4b2195995/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_3cbda7e4b2195995/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_3cbda7e4b2195995/figure.png"
    },
    {
        "id": "Stack_77e0e083d952d27f",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Age groups\nage_18_24 = [1000, 1200, 800, 1500, 1100]\nage_25_34 = [1500, 1800, 900, 2000, 1300]\nage_35_44 = [900, 1000, 700, 1200, 800]\nage_45_54 = [500, 600, 300, 700, 400]\n\n# The labels for the viral videos\nlabels = ['Video 1', 'Video 2', 'Video 3', 'Video 4', 'Video 5']\n\n# Plot the data using a stack plot\nfig, ax = plt.subplots()\n\nax.stackplot(labels, age_18_24, age_25_34, age_35_44, age_45_54, labels=['18-24','25-34','35-44','45-54'], colors=['blue', 'orange', 'green', 'purple'])\n\n# Set the x and y labels\nax.set_xlabel('Viral Videos')\nax.set_ylabel('Number of Views')\n\n# Add a title\nax.set_title('Distribution of Viral Video Views by Demographics')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #ae2778. Set the z-order for this area to 12. Also, add a shadow effect to the area with an offset of (2.97, 2.84) using a shadow color 'gold'.",
        "Input_image": "./test_dataset/Stack/Stack_77e0e083d952d27f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\nimport random\n\n# Age groups\nage_18_24 = [1000, 1200, 800, 1500, 1100]\nage_25_34 = [1500, 1800, 900, 2000, 1300]\nage_35_44 = [900, 1000, 700, 1200, 800]\nage_45_54 = [500, 600, 300, 700, 400]\n\n# The labels for the viral videos\nlabels = ['Video 1', 'Video 2', 'Video 3', 'Video 4', 'Video 5']\n\n# Plot the data using a stack plot\nfig, ax = plt.subplots()\n\nax.stackplot(labels, age_18_24, age_25_34, age_35_44, age_45_54, labels=['18-24','25-34','35-44','45-54'], colors=['blue', 'orange', 'green', 'purple'])\n\nfor i, area in enumerate(ax.collections):\n    if i == 2:  # 35-44 age group\n        area.set_facecolor('#ae2778')\n        area.set_zorder(12)\n        shadow_color = 'gold'\n        area.set_path_effects([SimplePatchShadow(offset=(2.97, 2.84), shadow_rgbFace=shadow_color), Normal()])\n\n# Set the x and y labels\nax.set_xlabel('Viral Videos')\nax.set_ylabel('Number of Views')\n\n# Add a title\nax.set_title('Distribution of Viral Video Views by Demographics')\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_77e0e083d952d27f/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_77e0e083d952d27f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_77e0e083d952d27f/figure.png"
    },
    {
        "id": "Stack_cfe3299019a9e6bc",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Galactic Longitudes (degrees)\ngalactic_longitudes = np.array([0, 30, 60, 90, 120, 150])\n\n# Velocity Data (km/s)\nopen_clusters_velocity = np.array([20, 25, 30, 35, 40, 45])\nglobular_clusters_velocity = np.array([15, 20, 25, 30, 35, 40])\nsupernova_remnants_velocity = np.array([10, 15, 20, 25, 30, 35])\n\n# Density Data\nopen_clusters_density = np.array([0.1, 0.15, 0.2, 0.25, 0.3, 0.35])\nglobular_clusters_density = np.array([0.3, 0.25, 0.2, 0.15, 0.1, 0.05])\nsupernova_remnants_density = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3])\n\nfig, ax = plt.subplots(2)\n\n# Creating velocity stackplot\nax[0].stackplot(galactic_longitudes, open_clusters_velocity, globular_clusters_velocity, supernova_remnants_velocity, \n                labels=['Open Clusters', 'Globular Clusters', 'Supernova Remnants'],\n                alpha=0.7)\nax[0].set_title('Galactic Clusters Velocity')\nax[0].legend(loc='upper left')\n\n# Creating density stackplot\nax[1].stackplot(galactic_longitudes, open_clusters_density, globular_clusters_density, supernova_remnants_density, \n                labels=['Open Clusters', 'Globular Clusters', 'Supernova Remnants'],\n                alpha=0.7)\nax[1].set_title('Galactic Clusters Density')\nax[1].legend(loc='upper right')\n\n# Set Labels and Title for the plots\nfig.suptitle('Galactic Clusters Dynamics and Density Analysis')\nplt.xlabel('Galactic Longitudes (degrees)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the areas that contain the center point of the bounding box to #204495.",
        "Input_image": "./test_dataset/Stack/Stack_cfe3299019a9e6bc/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Galactic Longitudes (degrees)\ngalactic_longitudes = np.array([0, 30, 60, 90, 120, 150])\n\n# Velocity Data (km/s)\nopen_clusters_velocity = np.array([20, 25, 30, 35, 40, 45])\nglobular_clusters_velocity = np.array([15, 20, 25, 30, 35, 40])\nsupernova_remnants_velocity = np.array([10, 15, 20, 25, 30, 35])\n\n# Density Data\nopen_clusters_density = np.array([0.1, 0.15, 0.2, 0.25, 0.3, 0.35])\nglobular_clusters_density = np.array([0.3, 0.25, 0.2, 0.15, 0.1, 0.05])\nsupernova_remnants_density = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3])\n\nfig, ax = plt.subplots(2)\n\n# Creating velocity stackplot\nvelocity_stacks = ax[0].stackplot(galactic_longitudes, open_clusters_velocity, globular_clusters_velocity, supernova_remnants_velocity, \n                labels=['Open Clusters', 'Globular Clusters', 'Supernova Remnants'],\n                alpha=0.7)\nax[0].set_title('Galactic Clusters Velocity')\n# Modifying the edge color of the fill corresponding to the Target_object\nfor idx, stack in enumerate(velocity_stacks):\n    if idx in [1]:\n        stack.set_edgecolor('#204495')\nax[0].legend(loc='upper left')\n\n# Creating density stackplot\ndensity_stacks = ax[1].stackplot(galactic_longitudes, open_clusters_density, globular_clusters_density, supernova_remnants_density, \n                labels=['Open Clusters', 'Globular Clusters', 'Supernova Remnants'],\n                alpha=0.7)\nax[1].set_title('Galactic Clusters Density')\nfor idx, stack in enumerate(density_stacks):\n    if idx in [1]:\n        stack.set_edgecolor('#204495')\nax[1].legend(loc='upper right')\n\n# Set Labels and Title for the plots\nfig.suptitle('Galactic Clusters Dynamics and Density Analysis')\nplt.xlabel('Galactic Longitudes (degrees)')\n\n\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_cfe3299019a9e6bc/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_cfe3299019a9e6bc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_cfe3299019a9e6bc/figure.png"
    },
    {
        "id": "Stack_ba9a9ef526c87a25",
        "Input_code": "import matplotlib.pyplot as plt\n\n# defining the checkpoints\ncheckpoints = [\"Checkpoint 1\", \"Checkpoint 2\", \"Checkpoint 3\", \"Checkpoint 4\", \"Checkpoint 5\"]\n\n# defining the elevation data\nelevation = [50, 75, 45, 60, 80]\n\n# defining the water flow data\nwater_flow = [10, 15, 8, 12, 18]\n\n# plotting the elevation and water flow stackplot\nplt.figure(figsize=(10, 7))\nplt.stackplot(checkpoints, elevation, water_flow, labels=['Elevation (m)','Water Flow (m\u00b3/s)'], colors=['#6d904f', '#fc4f30'], alpha=0.7 )\n\n# adding the additional details like legend, title and labels\nplt.legend(loc='upper left')\nplt.title('Elevation and Water Flow along a River', fontsize=18)\nplt.xlabel('Checkpoints', fontsize=12)\nplt.ylabel('Height (m) / Water Flow (m\u00b3/s)',fontsize=12)\n\n# displaying the plot\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #323ad4, and update the label for this area to 'A new Label'.",
        "Input_image": "./test_dataset/Stack/Stack_ba9a9ef526c87a25/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# defining the checkpoints\ncheckpoints = [\"Checkpoint 1\", \"Checkpoint 2\", \"Checkpoint 3\", \"Checkpoint 4\", \"Checkpoint 5\"]\n\n# defining the elevation data\nelevation = [50, 75, 45, 60, 80]\n\n# defining the water flow data\nwater_flow = [10, 15, 8, 12, 18]\n\n# plotting the elevation and water flow stackplot\nplt.figure(figsize=(10, 7))\nplt.stackplot(checkpoints, elevation, water_flow, labels=['A new Label','Water Flow (m\u00b3/s)'], colors=['#323ad4', '#fc4f30'], alpha=0.7 )\n\n# adding the additional details like legend, title and labels\nplt.legend(loc='upper left')\nplt.title('Elevation and Water Flow along a River', fontsize=18)\nplt.xlabel('Checkpoints', fontsize=12)\nplt.ylabel('Height (m) / Water Flow (m\u00b3/s)',fontsize=12)\n\n# displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_ba9a9ef526c87a25/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_ba9a9ef526c87a25/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_ba9a9ef526c87a25/figure.png"
    },
    {
        "id": "Stack_b4a7246fe0305df3",
        "Input_code": "import matplotlib.pyplot as plt\n\nyears = [2015, 2016, 2017, 2018, 2019, 2020]\n\nNAmerica = [2000, 2100, 2300, 2400, 2500, 2600]\nEurope = [2500, 2600, 2700, 2800, 2900, 3000]\nAsia = [1500, 1600, 1800, 1900, 2100, 2300]\nSAmerica = [3000, 3100, 3300, 3500, 3700, 3900]\n\nplt.figure(figsize=[10, 6])\n\nplt.stackplot(years, NAmerica, Europe, Asia, SAmerica, colors=['blue', 'green', 'yellow', 'red'], labels=['North America','Europe','Asia','South America'])\n\nplt.title('Coffee consumption patterns worldwide')\nplt.xlabel('Year')\nplt.ylabel('Coffee consumption (in million kg)')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the areas that contain the center point of the bounding box to 0.97, and enable animation for these areas by setting the animated state to True.",
        "Input_image": "./test_dataset/Stack/Stack_b4a7246fe0305df3/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nyears = [2015, 2016, 2017, 2018, 2019, 2020]\n\nNAmerica = [2000, 2100, 2300, 2400, 2500, 2600]\nEurope = [2500, 2600, 2700, 2800, 2900, 3000]\nAsia = [1500, 1600, 1800, 1900, 2100, 2300]\nSAmerica = [3000, 3100, 3300, 3500, 3700, 3900]\n\nplt.figure(figsize=[10, 6])\n\nplt.stackplot(years, NAmerica, Europe, Asia, SAmerica, colors=['blue', 'green', 'yellow', 'red'], labels=['North America','Europe','Asia','South America'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Asia's stack\n        area.set_alpha(0.97)\n        area.set_animated(True)\n\nplt.title('Coffee consumption patterns worldwide')\nplt.xlabel('Year')\nplt.ylabel('Coffee consumption (in million kg)')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_b4a7246fe0305df3/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b4a7246fe0305df3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b4a7246fe0305df3/figure.png"
    },
    {
        "id": "Stack_d5e3d1a05e2b8fb8",
        "Input_code": "import matplotlib.pyplot as plt\n\n# The layers\nlayers = ['Upper Canopy', 'Middle Canopy', 'Lower Canopy']\n\n# The different species\nspecies = ['Birds', 'Insects', 'Primates', 'Reptiles', 'Others']\n\n# The data\nbirds = [120, 80, 40]\ninsects = [180, 120, 60]\nprimates = [60, 40, 20]\nreptiles = [40, 30, 10]\nothers = [50, 30, 10]\n\n# The stackplot\nplt.figure(figsize=(10, 6))\nplt.stackplot(layers, birds, insects, primates, reptiles, others, labels=species)\n\n# Formatting the plot\nplt.legend(loc='upper right')\nplt.title('Biome Diversity in Rainforest Canopy')\nplt.xlabel('Layers of Rainforest Canopy')\nplt.ylabel('Total Number of Species')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the area that contains the center point of the bounding box to #a7b726. Set the z-order of that area to 16. Also, add a shadow effect with an offset of (2.61, 3.03) and select a shadow color 'gold'.",
        "Input_image": "./test_dataset/Stack/Stack_d5e3d1a05e2b8fb8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# The layers\nlayers = ['Upper Canopy', 'Middle Canopy', 'Lower Canopy']\n\n# The different species\nspecies = ['Birds', 'Insects', 'Primates', 'Reptiles', 'Others']\n\n# The data\nbirds = [120, 80, 40]\ninsects = [180, 120, 60]\nprimates = [60, 40, 20]\nreptiles = [40, 30, 10]\nothers = [50, 30, 10]\n\n# The stackplot\nplt.figure(figsize=(10, 6))\nplt.stackplot(layers, birds, insects, primates, reptiles, others, labels=species)\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Insects' stack\n        area.set_facecolor('#a7b726')\n        area.set_zorder(16)\n        shadow_color = 'gold'\n        area.set_path_effects([SimplePatchShadow(offset=(2.61, 3.03), shadow_rgbFace=shadow_color), Normal()])\n\n# Formatting the plot\nplt.legend(loc='upper right')\nplt.title('Biome Diversity in Rainforest Canopy')\nplt.xlabel('Layers of Rainforest Canopy')\nplt.ylabel('Total Number of Species')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_d5e3d1a05e2b8fb8/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_d5e3d1a05e2b8fb8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_d5e3d1a05e2b8fb8/figure.png"
    },
    {
        "id": "Stack_10f522ef3e43ebe6",
        "Input_code": "import matplotlib.pyplot as plt\n\n# x-axis values - the epochs\nepochs = [1, 2, 3, 4, 5]\n\n# y-axis values - the distributions\ndark_matter = [200, 190, 180, 175, 170]\ngalaxies = [100, 110, 120, 125, 130]\nhot_gas = [50, 55, 60, 65, 70]\n\n# start with a basic figure\nplt.figure()\n\n# stacked plot\nplt.stackplot(epochs, dark_matter, galaxies, hot_gas, labels=['Dark Matter','Galaxies','Hot Gas'])\n\n# labels\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Units\")\n\n# title\nplt.title(\"Distributions of Dark Matter, Galaxies and Hot Gas over different Epochs\")\n\n# legend\nplt.legend(loc='upper right')\n\n# display plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the transparency of the area that contains the center point of the bounding box to 0.01. Also, enable the rasterized state for this area by setting it to True.",
        "Input_image": "./test_dataset/Stack/Stack_10f522ef3e43ebe6/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# x-axis values - the epochs\nepochs = [1, 2, 3, 4, 5]\n\n# y-axis values - the distributions\ndark_matter = [200, 190, 180, 175, 170]\ngalaxies = [100, 110, 120, 125, 130]\nhot_gas = [50, 55, 60, 65, 70]\n\n# start with a basic figure\nplt.figure()\n\n# stacked plot\nplt.stackplot(epochs, dark_matter, galaxies, hot_gas, labels=['Dark Matter','Galaxies','Hot Gas'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Galaxies' stack\n        area.set_alpha(0.01)\n        area.set_rasterized(True)\n\n# labels\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Units\")\n\n# title\nplt.title(\"Distributions of Dark Matter, Galaxies and Hot Gas over different Epochs\")\n\n# legend\nplt.legend(loc='upper right')\n\n# display plot\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_10f522ef3e43ebe6/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_10f522ef3e43ebe6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_10f522ef3e43ebe6/figure.png"
    },
    {
        "id": "Stack_2c252d83aae1d62e",
        "Input_code": "import matplotlib.pyplot as plt\n\nsectors = [1, 2, 3, 4]\nAlien1 = [10, 12, 8, 15]\nAlien2 = [5, 7, 10, 3]\nAlien3 = [8, 6, 4, 12]\n\nplt.stackplot(sectors, Alien1, Alien2, Alien3, labels=['Alien1','Alien2','Alien3'])\nplt.xlabel(\"Sectors\")\nplt.ylabel(\"Number of Aliens\")\nplt.title(\"Distribution of Alien Life Forms Across Sectors\")\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the areas that contain the center point of the bounding box to #efb927, and enable the snap state for these areas by setting it to True.",
        "Input_image": "./test_dataset/Stack/Stack_2c252d83aae1d62e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nsectors = [1, 2, 3, 4]\nAlien1 = [10, 12, 8, 15]\nAlien2 = [5, 7, 10, 3]\nAlien3 = [8, 6, 4, 12]\n\nplt.stackplot(sectors, Alien1, Alien2, Alien3, labels=['Alien1','Alien2','Alien3'])\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Alien2's stack\n        area.set_facecolor('#efb927')\n        area.set_snap(True)\nplt.xlabel(\"Sectors\")\nplt.ylabel(\"Number of Aliens\")\nplt.title(\"Distribution of Alien Life Forms Across Sectors\")\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_2c252d83aae1d62e/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_2c252d83aae1d62e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_2c252d83aae1d62e/figure.png"
    },
    {
        "id": "Stack_dee46f29f800f151",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Depth zones for the x-axis\ndepth_zones = ['Shallow', 'Mid', 'Deep']\n\n# Number of species for different depth zones in different regions\natlantic = [500, 300, 100]\npacific = [450, 250, 80]\nindian = [400, 200, 70]\narctic = [350, 150, 50]\n\n# Initial plot\nplt.figure(figsize=(10, 7))\n\n# Adding the values to the stack plot\nplt.stackplot(depth_zones, atlantic, pacific, indian, arctic, labels=['Atlantic','Pacific', 'Indian', 'Arctic'], alpha=0.8)\n\n# Adding legend at the upper left corner\nplt.legend(loc='upper left')\n\n# Labels for x-axis and y-axis\nplt.xlabel(\"Depth Zones\")\nplt.ylabel(\"Number of Species\")\n\n# Title of the plot\nplt.title(\"Oceanic Biodiversity Stack Plot\")\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the visibility of the area that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Stack/Stack_dee46f29f800f151/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Depth zones for the x-axis\ndepth_zones = ['Shallow', 'Mid', 'Deep']\n\n# Number of species for different depth zones in different regions\natlantic = [500, 300, 100]\npacific = [450, 250, 80]\nindian = [400, 200, 70]\narctic = [350, 150, 50]\n\n# Initial plot\nplt.figure(figsize=(10, 7))\n\n# Adding the values to the stack plot\nplt.stackplot(depth_zones, atlantic, pacific, indian, arctic, labels=['Atlantic','Pacific', 'Indian', 'Arctic'], alpha=0.8)\n\n# Set visibility of the object corresponding to the Target_object to False\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Pacific's stack\n        area.set_visible(False)\n\n# Adding legend at the upper left corner\nplt.legend(loc='upper left')\n\n# Labels for x-axis and y-axis\nplt.xlabel(\"Depth Zones\")\nplt.ylabel(\"Number of Species\")\n\n# Title of the plot\nplt.title(\"Oceanic Biodiversity Stack Plot\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_dee46f29f800f151/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_dee46f29f800f151/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_dee46f29f800f151/figure.png"
    },
    {
        "id": "Stack_ad06e33c06c9e1a3",
        "Input_code": "import matplotlib.pyplot as plt\n\nyears      = [2015, 2016, 2017, 2018, 2019, 2020]\n\nsocial_media_usage = [45, 50, 52, 55, 60, 65]\nmental_health_issues = [30, 32, 35, 37, 41, 45]\n\nlabels = ['Social Media Usage (%)', 'Mental Health Issues (%)']\n\nplt.stackplot(years, social_media_usage, mental_health_issues, labels = labels)\nplt.legend(loc = 'upper left')\n\nplt.title('Relation between Social media usage and Mental health issues')\nplt.xlabel('Years')\nplt.ylabel('Percentage (%)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the area that contains the center point of the bounding box to 1.05.",
        "Input_image": "./test_dataset/Stack/Stack_ad06e33c06c9e1a3/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nyears      = [2015, 2016, 2017, 2018, 2019, 2020]\n\nsocial_media_usage = [45, 50, 52, 55, 60, 65]\nmental_health_issues = [30, 32, 35, 37, 41, 45]\n\nlabels = ['Social Media Usage (%)', 'Mental Health Issues (%)']\n\nplt.stackplot(years, social_media_usage, mental_health_issues, labels = labels)\nfor i, area in enumerate(plt.gca().collections):\n    if i == 0:  # Social Media Usage stack\n        area.set_linewidth(1.05)\nplt.legend(loc = 'upper left')\n\nplt.title('Relation between Social media usage and Mental health issues')\nplt.xlabel('Years')\nplt.ylabel('Percentage (%)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_ad06e33c06c9e1a3/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_ad06e33c06c9e1a3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_ad06e33c06c9e1a3/figure.png"
    },
    {
        "id": "Stack_5a8d6522122e9abf",
        "Input_code": "import matplotlib.pyplot as plt\n\ncountries = ['Country A', 'Country B', 'Country C', 'Country D', 'Country E']\nsoccer = [20, 15, 10, 12, 8]\nbasketball = [8, 10, 5, 6, 7]\ncricket = [5, 3, 6, 8, 4]\ntennis = [2, 3, 4, 1, 5]\nbaseball = [3, 2, 1, 4, 1.5]\n\nplt.figure(figsize=(10,7))\n\nplt.stackplot(countries, soccer, basketball, cricket, tennis, baseball, \n              colors=['blue', 'orange', 'green', 'red', 'purple'], \n              labels=['Soccer', 'Basketball', 'Cricket', 'Tennis', 'Baseball'])\n\nplt.legend(loc='upper left')\nplt.title('Number of sports fanatics by country')\nplt.xlabel('Country')\nplt.ylabel('Number of sports fanatics (in millions)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge linewidth of the area that contains the center point of the bounding box to 2.21, and set its color to #2de614. Additionally, update the edge's linestyle to 'dashdot' and change its color to #0a14ac.",
        "Input_image": "./test_dataset/Stack/Stack_5a8d6522122e9abf/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\ncountries = ['Country A', 'Country B', 'Country C', 'Country D', 'Country E']\nsoccer = [20, 15, 10, 12, 8]\nbasketball = [8, 10, 5, 6, 7]\ncricket = [5, 3, 6, 8, 4]\ntennis = [2, 3, 4, 1, 5]\nbaseball = [3, 2, 1, 4, 1.5]\n\nplt.figure(figsize=(10,7))\n\nstacks=plt.stackplot(countries, soccer, basketball, cricket, tennis, baseball, \n              colors=['blue', 'orange', 'green', 'red', 'purple'], \n              labels=['Soccer', 'Basketball', 'Cricket', 'Tennis', 'Baseball'])\n\nfor idx,stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_linewidth(2.208110215281476)\n        stack.set_edgecolor('#2de614')\n        stack.set_linestyle('dashdot')\n        stack.set_edgecolor('#0a14ac')\n\nplt.legend(loc='upper left')\nplt.title('Number of sports fanatics by country')\nplt.xlabel('Country')\nplt.ylabel('Number of sports fanatics (in millions)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_5a8d6522122e9abf/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_5a8d6522122e9abf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_5a8d6522122e9abf/figure.png"
    },
    {
        "id": "Stack_aa5b8c6ede9a3b26",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Given data\nyears = ['2015', '2016', '2017', '2018', '2019']\nonline_sales = [1.2, 1.5, 1.8, 2.2, 2.8]\ninstore_sales = [3.0, 3.1, 3.2, 3.3, 3.5]\n\nplt.figure(figsize=(10,7))\n\n# Plot the data\nplt.stackplot(years, online_sales, instore_sales, labels=['Online sales', 'In-store sales'], colors=['blue', 'orange'])\n\n# Adding legends, title and labels\nplt.title('Online Sales vs In-Store Sales (2015-2019)')\nplt.xlabel('Year')\nplt.ylabel('Sales in millions of dollars')\nplt.legend()\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the linestyle of the edges that contain the center point of the bounding box to 'dotted' and set their color to #413196.",
        "Input_image": "./test_dataset/Stack/Stack_aa5b8c6ede9a3b26/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Given data\nyears = ['2015', '2016', '2017', '2018', '2019']\nonline_sales = [1.2, 1.5, 1.8, 2.2, 2.8]\ninstore_sales = [3.0, 3.1, 3.2, 3.3, 3.5]\n\nplt.figure(figsize=(10,7))\n\n# Plot the data\nstacks = plt.stackplot(years, online_sales, instore_sales, labels=['Online sales', 'In-store sales'], colors=['blue', 'orange'])\n\n# Modify the linestyle and edge color of the target object\nfor idx, stack in enumerate(stacks):\n    if idx in [0]:\n        stack.set_linestyle('dotted')\n        stack.set_edgecolor('#413196')\n\n# Adding legends, title and labels\nplt.title('Online Sales vs In-Store Sales (2015-2019)')\nplt.xlabel('Year')\nplt.ylabel('Sales in millions of dollars')\nplt.legend()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_aa5b8c6ede9a3b26/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_aa5b8c6ede9a3b26/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_aa5b8c6ede9a3b26/figure.png"
    },
    {
        "id": "Stack_b631202f505880d1",
        "Input_code": "import matplotlib.pyplot as plt\n\n# years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# Carbon emissions from traditional vehicles\nemission_traditional = [500, 490, 480, 470, 460, 450, 440, 430, 420, 410, 400]\n\n# Carbon emissions from electric vehicles\nemission_electric = [20, 35, 50, 65, 80, 95, 110, 125, 140, 155, 170]\n\nplt.stackplot(years, emission_traditional, emission_electric, labels=['Traditional Vehicles','Electric Vehicles'])\n\nplt.legend(loc='upper right')\nplt.title('Carbon Emissions from Traditional and Electric Vehicles in a city (2010 - 2020)')\nplt.xlabel('Years')\nplt.ylabel('Carbon Emissions in metric tons')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the edge color of the filled area that contains the center point of the bounding box to #b40c8f, and set its z-order to 4.",
        "Input_image": "./test_dataset/Stack/Stack_b631202f505880d1/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# Carbon emissions from traditional vehicles\nemission_traditional = [500, 490, 480, 470, 460, 450, 440, 430, 420, 410, 400]\n\n# Carbon emissions from electric vehicles\nemission_electric = [20, 35, 50, 65, 80, 95, 110, 125, 140, 155, 170]\n\nstacks = plt.stackplot(years, emission_traditional, emission_electric, labels=['Traditional Vehicles','Electric Vehicles'])\n\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_edgecolor('#b40c8f')\n        stack.set_zorder(4)\n\nplt.legend(loc='upper right')\nplt.title('Carbon Emissions from Traditional and Electric Vehicles in a city (2010 - 2020)')\nplt.xlabel('Years')\nplt.ylabel('Carbon Emissions in metric tons')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_b631202f505880d1/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b631202f505880d1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b631202f505880d1/figure.png"
    },
    {
        "id": "Stack_45c27eed57d9a0c7",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time intervals\ntime_intervals = [0, 100, 200, 300, 400, 500]\n\n# Neural activity intensities for each brain region\nfrontal_cortex = [0.5, 1.2, 2.0, 2.5, 2.8, 3.0]\nhippocampus = [0.3, 1.0, 1.8, 2.2, 2.6, 3.2]\namygdala = [0.2, 0.8, 1.5, 2.0, 2.3, 2.7]\n\n# Preparing the stack plot\nplt.stackplot(time_intervals, frontal_cortex, hippocampus, amygdala,\n              labels=['Frontal Cortex','Hippocampus','Amygdala'],\n              colors=['#6d904f','#fc4f30','#008fd5'])\n\n# Assigning labels and title\nplt.xlabel('Time Intervals (ms)')\nplt.ylabel('Neural Activity Intensity')\nplt.title('Neural Activity Mapping During Memory Recall Task')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Display plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #b0ddb5.",
        "Input_image": "./test_dataset/Stack/Stack_45c27eed57d9a0c7/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Time intervals\ntime_intervals = [0, 100, 200, 300, 400, 500]\n\n# Neural activity intensities for each brain region\nfrontal_cortex = [0.5, 1.2, 2.0, 2.5, 2.8, 3.0]\nhippocampus = [0.3, 1.0, 1.8, 2.2, 2.6, 3.2]\namygdala = [0.2, 0.8, 1.5, 2.0, 2.3, 2.7]\n\n# Preparing the stack plot\nplt.stackplot(time_intervals, frontal_cortex, hippocampus, amygdala,\n              labels=['Frontal Cortex','Hippocampus','Amygdala'],\n              colors=['#6d904f','#fc4f30','#008fd5'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Hippocampus's stack\n        area.set_facecolor('#b0ddb5')\n\n# Assigning labels and title\nplt.xlabel('Time Intervals (ms)')\nplt.ylabel('Neural Activity Intensity')\nplt.title('Neural Activity Mapping During Memory Recall Task')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_45c27eed57d9a0c7/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_45c27eed57d9a0c7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_45c27eed57d9a0c7/figure.png"
    },
    {
        "id": "Stack_613c7faea75bd073",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time intervals\ntime = [1, 2, 3, 4, 5]\n\n# Tumor sizes\ngroup_A = [10, 15, 20, 25, 30]\ngroup_B = [12, 18, 22, 28, 35]\ngroup_C = [8, 14, 19, 23, 29]\n\nfig, ax = plt.subplots()\n\nax.stackplot(time, group_A, group_B, group_C, labels=['Group A', 'Group B', 'Group C'])\nax.legend(loc='upper left')\n\nplt.xlabel('Time Intervals')\nplt.ylabel('Tumor Size (in mm)')\nplt.title('Tumor Growth Progression in Different Treatment Groups')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the hatch pattern of the areas that contain the center point of the bounding box to '|'.",
        "Input_image": "./test_dataset/Stack/Stack_613c7faea75bd073/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Time intervals\ntime = [1, 2, 3, 4, 5]\n\n# Tumor sizes\ngroup_A = [10, 15, 20, 25, 30]\ngroup_B = [12, 18, 22, 28, 35]\ngroup_C = [8, 14, 19, 23, 29]\n\nfig, ax = plt.subplots()\n\nstacks = ax.stackplot(time, group_A, group_B, group_C, labels=['Group A', 'Group B', 'Group C'])\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_hatch('|')\nax.legend(loc='upper left')\n\nplt.xlabel('Time Intervals')\nplt.ylabel('Tumor Size (in mm)')\nplt.title('Tumor Growth Progression in Different Treatment Groups')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_613c7faea75bd073/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_613c7faea75bd073/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_613c7faea75bd073/figure.png"
    },
    {
        "id": "Stack_6fce78878991eabb",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ndays = [i for i in range(1, 8)]\nvalley = [10, 8, 6, 12, 9, 7, 11]\ncrater = [5, 3, 7, 4, 5, 2, 6]\nmountain = [2, 4, 1, 6, 3, 8, 1]\n\n# Plotting\nplt.stackplot(days, valley, crater, mountain, labels=['Valley', 'Crater', 'Mountain'])\nplt.legend(loc='upper left')\n\n# Labels and Title\nplt.xlabel('Days')\nplt.ylabel('Number of Rock Samples')\nplt.title('Terrain Mapping Data Collected by Mars Rover')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the color of the area that contains the center point of the bounding box to #d734d4. Additionally, adjust the transform of this area to align with the axis coordinate system for the same points.",
        "Input_image": "./test_dataset/Stack/Stack_6fce78878991eabb/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ndays = [i for i in range(1, 8)]\nvalley = [10, 8, 6, 12, 9, 7, 11]\ncrater = [5, 3, 7, 4, 5, 2, 6]\nmountain = [2, 4, 1, 6, 3, 8, 1]\n\n# Plotting\nplt.stackplot(days, valley, crater, mountain, labels=['Valley', 'Crater', 'Mountain'])\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Crater's stack\n        area.set_facecolor('#d734d4')\n        area.set_transform(plt.gca().transAxes)\nplt.legend(loc='upper left')\n\n# Labels and Title\nplt.xlabel('Days')\nplt.ylabel('Number of Rock Samples')\nplt.title('Terrain Mapping Data Collected by Mars Rover')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_6fce78878991eabb/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_6fce78878991eabb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_6fce78878991eabb/figure.png"
    },
    {
        "id": "Stack_32ae96b905c5b00e",
        "Input_code": "import matplotlib.pyplot as plt\n\n# years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# average lifetimes data \ngreen_turtles = [75, 70, 78, 80, 72, 76, 74, 77, 75, 79, 71]\nloggerhead_turtles = [63, 61, 58, 64, 61, 59, 62, 65, 60, 63, 58]\nhawksbill_turtles = [55, 57, 54, 52, 56, 53, 50, 51, 55, 52, 48]\nleatherback_turtles = [90, 88, 87, 85, 89, 92, 86, 91, 88, 84, 90]\nolive_ridley_turtles = [50, 47, 48, 51, 49, 52, 46, 50, 47, 49, 45]\n\n# plot the data using stackplot function\nplt.stackplot(years, green_turtles, loggerhead_turtles, hawksbill_turtles, \n              leatherback_turtles, olive_ridley_turtles, \n              labels=['Green Turtles - Atlantic Ocean','Loggerhead Turtles - Pacific Ocean',\n                      'Hawksbill Turtles - Indian Ocean','Leatherback Turtles - Southern Ocean',\n                      'Olive Ridley Turtles - Mediterranean Sea'])\n\n# labels for x and y axis\nplt.xlabel('Years')\nplt.ylabel('Average Lifetimes')\n\n# title of the plot\nplt.title('Average Lifetimes of Different Species of Sea Turtles in Various Oceans (2010-2020)')\n\n# legend in the upper left corner\nplt.legend(loc='upper left')\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the area that contains the center point of the bounding box to #7a725e, and set the picker state for this area to False.",
        "Input_image": "./test_dataset/Stack/Stack_32ae96b905c5b00e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# average lifetimes data \ngreen_turtles = [75, 70, 78, 80, 72, 76, 74, 77, 75, 79, 71]\nloggerhead_turtles = [63, 61, 58, 64, 61, 59, 62, 65, 60, 63, 58]\nhawksbill_turtles = [55, 57, 54, 52, 56, 53, 50, 51, 55, 52, 48]\nleatherback_turtles = [90, 88, 87, 85, 89, 92, 86, 91, 88, 84, 90]\nolive_ridley_turtles = [50, 47, 48, 51, 49, 52, 46, 50, 47, 49, 45]\n\n# plot the data using stackplot function\nplt.stackplot(years, green_turtles, loggerhead_turtles, hawksbill_turtles, \n              leatherback_turtles, olive_ridley_turtles, \n              labels=['Green Turtles - Atlantic Ocean','Loggerhead Turtles - Pacific Ocean',\n                      'Hawksbill Turtles - Indian Ocean','Leatherback Turtles - Southern Ocean',\n                      'Olive Ridley Turtles - Mediterranean Sea'])\n\n# labels for x and y axis\nplt.xlabel('Years')\nplt.ylabel('Average Lifetimes')\n\n# title of the plot\nplt.title('Average Lifetimes of Different Species of Sea Turtles in Various Oceans (2010-2020)')\n\n# Modify the line color and picker state for the target object\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Hawksbill Turtles' stack\n        area.set_edgecolor('#7a725e')\n        area.set_picker(False)\n# legend in the upper left corner\nplt.legend(loc='upper left')\n\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_32ae96b905c5b00e/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_32ae96b905c5b00e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_32ae96b905c5b00e/figure.png"
    },
    {
        "id": "Stack_d52d4da45873d626",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Times of the day\ntimes = ['6:00 AM', '12:00 PM', '6:00 PM', '12:00 AM']\n\n# Temperatures at various depths\ntemp_0_200 = [10, 14, 16, 12]\ntemp_200_500 = [8, 10, 12, 9]\ntemp_500_1000 = [6, 8, 9, 7]\n\n# Create a stack plot\nplt.stackplot(times, temp_0_200, temp_200_500, temp_500_1000, labels=['0-200m', '200-500m', '500-1000m'])\n\n# Labeling the plot and the axes\nplt.title('Ocean Temperatures at Different Depths Throughout the Day') \nplt.xlabel('Time of Day')\nplt.ylabel('Temperature (\u00b0C)')\n\n# Locate the legend on the upper left\nplt.legend(loc='upper left')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the area that contains the center point of the bounding box to 4.58 and line style to '--' and line color to 'black'. Additionally, change the transformation of this area to use the pixel coordinate system.",
        "Input_image": "./test_dataset/Stack/Stack_d52d4da45873d626/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Times of the day\ntimes = ['6:00 AM', '12:00 PM', '6:00 PM', '12:00 AM']\n\n# Temperatures at various depths\ntemp_0_200 = [10, 14, 16, 12]\ntemp_200_500 = [8, 10, 12, 9]\ntemp_500_1000 = [6, 8, 9, 7]\n\n# Create a stack plot\nplt.stackplot(times, temp_0_200, temp_200_500, temp_500_1000, labels=['0-200m', '200-500m', '500-1000m'])\n\n# Labeling the plot and the axes\nplt.title('Ocean Temperatures at Different Depths Throughout the Day') \nplt.xlabel('Time of Day')\nplt.ylabel('Temperature (\u00b0C)')\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # 200-500m stack\n        area.set_linewidth(4.58)\n        area.set_transform(plt.gca().transData)\n        area.set_edgecolor('black')\n        area.set_linestyle('--')\n# Locate the legend on the upper left\nplt.legend(loc='upper left')\n\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_d52d4da45873d626/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_d52d4da45873d626/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_d52d4da45873d626/figure.png"
    },
    {
        "id": "Stack_6f6e057a82df4c71",
        "Input_code": "import matplotlib.pyplot as plt \n\n# Age groups\nage_groups = ['15-25', '26-35', '36-45', '46-55', '56 and above']\n\n# Floral fragrances data\nrose = [45, 30, 20, 15, 5]\nlavender = [30, 40, 35, 20, 25]\njasmine = [10, 15, 30, 40, 40]\nlily = [15, 15, 15, 25, 30]\n\n# Create a stackplot\nplt.figure(figsize=[10,6])\nplt.stackplot(age_groups, rose, lavender, jasmine, lily, labels=['Rose','Lavender','Jasmine','Lily'], alpha=0.8)\n\nplt.title('Floral Fragrance Popularity by Age')\nplt.xlabel('Age Groups')\nplt.ylabel('Percentage of Individuals')\n\n# Add a legend\nplt.legend(loc='upper right')\n\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the fill in the area that contains the center point of the bounding box to 0.635, and set the edge color of that same area to #2c7d94.",
        "Input_image": "./test_dataset/Stack/Stack_6f6e057a82df4c71/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Age groups\nage_groups = ['15-25', '26-35', '36-45', '46-55', '56 and above']\n\n# Floral fragrances data\nrose = [45, 30, 20, 15, 5]\nlavender = [30, 40, 35, 20, 25]\njasmine = [10, 15, 30, 40, 40]\nlily = [15, 15, 15, 25, 30]\n\n# Create a stackplot\nplt.figure(figsize=[10,6])\nstacks = plt.stackplot(age_groups, rose, lavender, jasmine, lily, labels=['Rose','Lavender','Jasmine','Lily'], alpha=0.8)\n\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_alpha(0.6350432547952334)\n        stack.set_edgecolor('#2c7d94')\n\nplt.title('Floral Fragrance Popularity by Age')\nplt.xlabel('Age Groups')\nplt.ylabel('Percentage of Individuals')\n\n# Add a legend\nplt.legend(loc='upper right')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_6f6e057a82df4c71/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_6f6e057a82df4c71/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_6f6e057a82df4c71/figure.png"
    },
    {
        "id": "Stack_b1cd38d055d59be8",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata_points = np.array([1, 2, 3, 4, 5])\ndata1 = np.array([10, 20, 30, 40, 50])\ndata2 = np.array([5, 10, 15, 20, 25])\ndata3 = np.array([15, 25, 35, 45, 55])\n\n# Create a Figure and an Axes with matplotlib.pyplot\nfig, ax = plt.subplots()\n\n# Stack plot\nax.stackplot(data_points, data1, data2, data3, labels=['Data1', 'Data2', 'Data3'], alpha=0.5)\nax.legend(loc='upper left')\n\n# To convert y axis to percentage\ntotals = [i+j+k for i,j,k in zip(data1, data2, data3)]\ndata1_stacked = [i / j * 100 for i,j in zip(data1, totals)]\ndata2_stacked = [i / j * 100 for i,j in zip(data2, totals)]\ndata3_stacked = [i / j * 100 for i,j in zip(data3, totals)]\nax.stackplot(data_points, data1_stacked, data2_stacked, data3_stacked, labels=['Data1', 'Data2', 'Data3'], alpha=0.5)\n\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the area that contains the center point of the bounding box. Use matplotlib.transforms.Bbox to define the bounding box starting at the point (4, 3) with a width of 501 and a height of 424. Also, ensure that the clipping state for this area is enabled by setting it to True.",
        "Input_image": "./test_dataset/Stack/Stack_b1cd38d055d59be8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.transforms import Bbox\n\n# Data\ndata_points = np.array([1, 2, 3, 4, 5])\ndata1 = np.array([10, 20, 30, 40, 50])\ndata2 = np.array([5, 10, 15, 20, 25])\ndata3 = np.array([15, 25, 35, 45, 55])\n\n# Create a Figure and an Axes with matplotlib.pyplot\nfig, ax = plt.subplots()\n\n# Stack plot\nax.stackplot(data_points, data1, data2, data3, labels=['Data1', 'Data2', 'Data3'], alpha=0.5)\nax.legend(loc='upper left')\n\n# To convert y axis to percentage\ntotals = [i+j+k for i,j,k in zip(data1, data2, data3)]\ndata1_stacked = [i / j * 100 for i,j in zip(data1, totals)]\ndata2_stacked = [i / j * 100 for i,j in zip(data2, totals)]\ndata3_stacked = [i / j * 100 for i,j in zip(data3, totals)]\nclip_box = Bbox.from_bounds(4, 3, 501, 424)\nfor i, area in enumerate(ax.collections):\n    if i == 1:  # Data2's stack\n        area.set_clip_box(clip_box)\n        area.set_clip_on(True)\nax.stackplot(data_points, data1_stacked, data2_stacked, data3_stacked, labels=['Data1', 'Data2', 'Data3'], alpha=0.5)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_b1cd38d055d59be8/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b1cd38d055d59be8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b1cd38d055d59be8/figure.png"
    },
    {
        "id": "Stack_e8c8d441293fc867",
        "Input_code": "import matplotlib.pyplot as plt\n\n# List of months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September']\n\n# Lists of vaccination rates for each country\ncountry_a = [5, 12, 20, 33, 48, 60, 68, 75, 80]\ncountry_b = [3, 6, 10, 18, 24, 38, 52, 65, 72]\ncountry_c = [12, 22, 30, 40, 55, 65, 75, 80, 85]\n\nplt.stackplot(months, country_a, country_b, country_c, labels=['Country A','Country B','Country C'])\n\n# Adding plot title and labels\nplt.title('COVID-19 Vaccination Rates by Country')\nplt.xlabel('Months')\nplt.ylabel('Vaccination Rate')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Showing the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the filled area that contains the center point of the bounding box to #8e6f56, and set the hatch pattern for that area to '*'.",
        "Input_image": "./test_dataset/Stack/Stack_e8c8d441293fc867/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# List of months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September']\n\n# Lists of vaccination rates for each country\ncountry_a = [5, 12, 20, 33, 48, 60, 68, 75, 80]\ncountry_b = [3, 6, 10, 18, 24, 38, 52, 65, 72]\ncountry_c = [12, 22, 30, 40, 55, 65, 75, 80, 85]\n\nstacks=plt.stackplot(months, country_a, country_b, country_c, labels=['Country A','Country B','Country C'])\n\nfor idx,stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_edgecolor('#8e6f56')\n        stack.set_hatch('*')\n\n# Adding plot title and labels\nplt.title('COVID-19 Vaccination Rates by Country')\nplt.xlabel('Months')\nplt.ylabel('Vaccination Rate')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Showing the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_e8c8d441293fc867/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_e8c8d441293fc867/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_e8c8d441293fc867/figure.png"
    },
    {
        "id": "Stack_6e6a8e1be3af86ca",
        "Input_code": "import matplotlib.pyplot as plt\n\nyears = list(range(2010, 2020))\ngermany_rates = [1.4, 1.5, 1.6, 1.4, 1.3, 1.5, 1.7, 1.6, 1.5, 1.4]\njapan_rates = [1.2, 1.1, 1.0, 0.9, 0.8, 0.8, 0.9, 0.9, 0.9, 0.8]\nusa_rates = [2.0, 2.1, 2.3, 2.2, 2.0, 2.1, 2.0, 1.9, 1.8, 1.7]\nbrazil_rates = [1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.3, 1.2, 1.2, 1.1]\nindia_rates = [2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 2.0, 1.9, 1.8, 1.7]\n\nplt.figure(figsize=(10, 7))\nplt.stackplot(years, germany_rates, japan_rates, usa_rates, brazil_rates, india_rates, labels=['Germany', 'Japan', 'USA', 'Brazil', 'India'])\nplt.legend(loc='upper right')\nplt.title('Fertility Rate Comparison')\nplt.xlabel('Years')\nplt.ylabel('Fertility Rates')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the linestyle of the edges of the areas that contain the center point of the bounding box to 'dotted' and set their color to #5f322c.",
        "Input_image": "./test_dataset/Stack/Stack_6e6a8e1be3af86ca/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nyears = list(range(2010, 2020))\ngermany_rates = [1.4, 1.5, 1.6, 1.4, 1.3, 1.5, 1.7, 1.6, 1.5, 1.4]\njapan_rates = [1.2, 1.1, 1.0, 0.9, 0.8, 0.8, 0.9, 0.9, 0.9, 0.8]\nusa_rates = [2.0, 2.1, 2.3, 2.2, 2.0, 2.1, 2.0, 1.9, 1.8, 1.7]\nbrazil_rates = [1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.3, 1.2, 1.2, 1.1]\nindia_rates = [2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 2.0, 1.9, 1.8, 1.7]\n\nplt.figure(figsize=(10, 7))\nstacks = plt.stackplot(years, germany_rates, japan_rates, usa_rates, brazil_rates, india_rates, labels=['Germany', 'Japan', 'USA', 'Brazil', 'India'])\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_linestyle('dotted')\n        stack.set_edgecolor('#5f322c')\nplt.legend(loc='upper right')\nplt.title('Fertility Rate Comparison')\nplt.xlabel('Years')\nplt.ylabel('Fertility Rates')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_6e6a8e1be3af86ca/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_6e6a8e1be3af86ca/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_6e6a8e1be3af86ca/figure.png"
    },
    {
        "id": "Stack_ff46e1c5633bc2c8",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Years for X-axis\nyears = [2020, 2021, 2022]\n\n# Popularity Percentages for Y-axis\nclassic = [20, 18, 15]\nstreetwear = [25, 30, 35]\nbohemian = [15, 13, 15]\nminimalist = [10, 12, 15]\nsporty = [8, 10, 8]\nglamorous = [7, 6, 5]\nretro = [5, 4, 4]\neclectic = [5, 4, 3]\nethnic = [5, 3, 3]\nothers = [0, 0, 2]\n\n# Plotting stack plot\nplt.figure(figsize=(10,8))\nplt.stackplot(years, classic, streetwear, bohemian, minimalist, sporty, glamorous, retro, eclectic, ethnic, others, \n              labels=['Classic','Streetwear','Bohemian','Minimalist','Sporty','Glamorous','Retro','Eclectic','Ethnic','Other'])\n\n# Legends, titles and labels\nplt.legend(loc='upper left')\nplt.title('Trending Fashion Styles Worldwide (2020-2022)')\nplt.xlabel('Year')\nplt.ylabel('Popularity (%)')\n\n# Display the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the area that contains the center point of the bounding box to #293b32. Also, set the face color of this area to #07365b.",
        "Input_image": "./test_dataset/Stack/Stack_ff46e1c5633bc2c8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Years for X-axis\nyears = [2020, 2021, 2022]\n\n# Popularity Percentages for Y-axis\nclassic = [20, 18, 15]\nstreetwear = [25, 30, 35]\nbohemian = [15, 13, 15]\nminimalist = [10, 12, 15]\nsporty = [8, 10, 8]\nglamorous = [7, 6, 5]\nretro = [5, 4, 4]\neclectic = [5, 4, 3]\nethnic = [5, 3, 3]\nothers = [0, 0, 2]\n\n# Plotting stack plot\nplt.figure(figsize=(10,8))\nplt.stackplot(years, classic, streetwear, bohemian, minimalist, sporty, glamorous, retro, eclectic, ethnic, others, \n              labels=['Classic','Streetwear','Bohemian','Minimalist','Sporty','Glamorous','Retro','Eclectic','Ethnic','Other'])\n\n# Legends, titles and labels\nplt.legend(loc='upper left')\nplt.title('Trending Fashion Styles Worldwide (2020-2022)')\nplt.xlabel('Year')\nplt.ylabel('Popularity (%)')\n\n# Modify the target object\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Bohemian's stack\n        area.set_edgecolor('#293b32')\n        area.set_facecolor('#07365b')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_ff46e1c5633bc2c8/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_ff46e1c5633bc2c8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_ff46e1c5633bc2c8/figure.png"
    },
    {
        "id": "Stack_14f1f322983c9359",
        "Input_code": "import matplotlib.pyplot as plt\n\n# time intervals\ntime_intervals = ['1', '2', '3', '4', '5']\n\n# values for gas, stars, dust in each time interval\ngas =   [100, 90, 85, 80, 75]\nstars = [50, 60, 55, 65, 70]\ndust =  [20, 25, 30, 35, 40]\n\nplt.figure(figsize=(10,7))\n\n# create stackplot\nplt.stackplot(time_intervals, gas, stars, dust, labels=['Gas','Stars','Dust'], colors=['blue','orange','green'])\nplt.legend(loc='upper right')\n\n# labeling the axes\nplt.xlabel('Time Intervals')\nplt.ylabel('Units')\n\n# adding title to the plot\nplt.title('Dynamics of a Galactic Collision across Time Intervals')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the area that contains the center point of the bounding box to a rectangle defined by the bottom-left corner at (71, 50), a width of 132, and a height of 161. Also, update the face color of the same area to #51dddd.",
        "Input_image": "./test_dataset/Stack/Stack_14f1f322983c9359/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# time intervals\ntime_intervals = ['1', '2', '3', '4', '5']\n\n# values for gas, stars, dust in each time interval\ngas =   [100, 90, 85, 80, 75]\nstars = [50, 60, 55, 65, 70]\ndust =  [20, 25, 30, 35, 40]\n\nplt.figure(figsize=(10,7))\n\n# create stackplot\nplt.stackplot(time_intervals, gas, stars, dust, labels=['Gas','Stars','Dust'], colors=['blue','orange','green'])\n\n# Apply modifications to the 'Stars' stack\nclip_box = Bbox.from_bounds(121, 70, 232, 361)\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Stars' stack\n        area.set_clip_box(clip_box)\n        area.set_facecolor('#51dddd')\n\nplt.legend(loc='upper right')\n\n# labeling the axes\nplt.xlabel('Time Intervals')\nplt.ylabel('Units')\n\n# adding title to the plot\nplt.title('Dynamics of a Galactic Collision across Time Intervals')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_14f1f322983c9359/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_14f1f322983c9359/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_14f1f322983c9359/figure.png"
    },
    {
        "id": "Stack_a7ccca453fab874c",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Initialize data\nyears = np.array(range(2010, 2020))\ntemperature = np.array([-20, -19, -18, -17, -16, -15, -14, -13, -12, -11])\nspecies_a = np.array([50, 50, 49, 48, 47, 46, 45, 44, 43, 42])\nspecies_b = np.array([80, 78, 75, 73, 70, 68, 65, 63, 60, 57])\n\n# Create a figure and a set of subplots\nfig, ax1 = plt.subplots()\n\n# Plotting temperature\nax1.plot(years, temperature, color=\"black\", label=\"Temperature\")\nax1.set_xlabel(\"Year\")\nax1.set_ylabel(\"Temperature (\u00b0C)\")\nax1.tick_params('y')\n\n# Instantiate a second axes that shares the same x-axis\nax2 = ax1.twinx()\n\n# Plotting populations\nax2.stackplot(years, [species_a, species_b], labels=['Species A', 'Species B'], alpha=0.6)\nax2.set_ylabel(\"Population (in thousands)\")\nax2.tick_params('y')\n\n# Adding a legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the rasterized state of the areas that contain the center point of the bounding box to True. Additionally, apply a stroke to these areas with a line width of 3.84 and a foreground color of #66a1eb.",
        "Input_image": "./test_dataset/Stack/Stack_a7ccca453fab874c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import withStroke\n\n# Initialize data\nyears = np.array(range(2010, 2020))\ntemperature = np.array([-20, -19, -18, -17, -16, -15, -14, -13, -12, -11])\nspecies_a = np.array([50, 50, 49, 48, 47, 46, 45, 44, 43, 42])\nspecies_b = np.array([80, 78, 75, 73, 70, 68, 65, 63, 60, 57])\n\n# Create a figure and a set of subplots\nfig, ax1 = plt.subplots()\n\n# Plotting temperature\nax1.plot(years, temperature, color=\"black\", label=\"Temperature\")\nax1.set_xlabel(\"Year\")\nax1.set_ylabel(\"Temperature (\u00b0C)\")\nax1.tick_params('y')\n\n# Instantiate a second axes that shares the same x-axis\nax2 = ax1.twinx()\n\n# Plotting populations\nax2.stackplot(years, [species_a, species_b], labels=['Species A', 'Species B'], alpha=0.6)\nfor i, area in enumerate(ax2.collections):\n    if i == 0:  # Species A's stack\n        area.set_rasterized(True)\n        area.set_path_effects([withStroke(linewidth=3.846087785672069, foreground='#66a1eb')])\nax2.set_ylabel(\"Population (in thousands)\")\nax2.tick_params('y')\n\n# Adding a legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_a7ccca453fab874c/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_a7ccca453fab874c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_a7ccca453fab874c/figure.png"
    },
    {
        "id": "Stack_08e9b50503338edb",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data points\nmonths = ['January', 'February', 'March', 'April', 'May']\nvideo1 = [10, 15, 20, 8, 12]\nvideo2 = [7, 9, 14, 6, 10]\nvideo3 = [5, 6, 8, 3, 4]\nvideo4 = [3, 5, 7, 2, 3]\nvideo5 = [2, 3, 5, 1, 2]\n\n# Create a stack plot\nplt.stackplot(months, video1, video2, video3, video4, video5, labels=['Video 1', 'Video 2', 'Video 3', 'Video 4', 'Video 5'])\n\n# Add labels and title\nplt.xlabel('Months')\nplt.ylabel('Cumulative Number of Views (millions)')\nplt.title('Viral Video Sensations Over Time')\n\n# Show the legend\nplt.legend(loc='upper left')\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #38210c, and update the edge color in that same area to #8b867e.",
        "Input_image": "./test_dataset/Stack/Stack_08e9b50503338edb/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data points\nmonths = ['January', 'February', 'March', 'April', 'May']\nvideo1 = [10, 15, 20, 8, 12]\nvideo2 = [7, 9, 14, 6, 10]\nvideo3 = [5, 6, 8, 3, 4]\nvideo4 = [3, 5, 7, 2, 3]\nvideo5 = [2, 3, 5, 1, 2]\n\n# Create a stack plot\nstacks = plt.stackplot(months, video1, video2, video3, video4, video5, labels=['Video 1', 'Video 2', 'Video 3', 'Video 4', 'Video 5'])\n\n# Modify the face color and edge color of the fill corresponding to the Target_object\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_facecolor('#38210c')\n        stack.set_edgecolor('#8b867e')\n\n# Add labels and title\nplt.xlabel('Months')\nplt.ylabel('Cumulative Number of Views (millions)')\nplt.title('Viral Video Sensations Over Time')\n\n# Show the legend\nplt.legend(loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_08e9b50503338edb/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_08e9b50503338edb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_08e9b50503338edb/figure.png"
    },
    {
        "id": "Stack_749344c90c795248",
        "Input_code": "import matplotlib.pyplot as plt\n\n# The x values are the names of the plant species\nplant_species = ['Epiphytes', 'Orchids', 'Bromeliads', 'Ferns']\n\n# The y values are the quantities of each plant species in each canopy layer \ncanopy_layer_1 = [20, 10, 15, 25]\ncanopy_layer_2 = [15, 8, 12, 20]\ncanopy_layer_3 = [10, 5, 8, 15]\ncanopy_layer_4 = [5, 3, 4, 10]\n\n# Stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(plant_species, canopy_layer_1, canopy_layer_2, canopy_layer_3, canopy_layer_4, \n              colors=['green', 'purple', 'red', 'blue'])\n\n# Adding the necessary labels\nplt.xlabel('Plant Species')\nplt.ylabel('Quantities in Canopy Layers')\n\n# Title of the plot\nplt.title('Organic Growth Patterns in Rainforest')\n\n# Adding the legend\nplt.legend(['Canopy Layer 1', 'Canopy Layer 2', 'Canopy Layer 3', 'Canopy Layer 4'], loc='upper right')\n\n# Display\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the picker state of the areas that contain the center point of the bounding box to True. For the same points, update the z-order of these areas to 14. Additionally, apply a shadow effect to the areas associated with the center point of the bounding box, using a shadow offset of (3.24, 3.08) and a shadow color 'gray'.",
        "Input_image": "./test_dataset/Stack/Stack_749344c90c795248/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\nfrom random import choice\n\n# The x values are the names of the plant species\nplant_species = ['Epiphytes', 'Orchids', 'Bromeliads', 'Ferns']\n\n# The y values are the quantities of each plant species in each canopy layer \ncanopy_layer_1 = [20, 10, 15, 25]\ncanopy_layer_2 = [15, 8, 12, 20]\ncanopy_layer_3 = [10, 5, 8, 15]\ncanopy_layer_4 = [5, 3, 4, 10]\n\n# Stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(plant_species, canopy_layer_1, canopy_layer_2, canopy_layer_3, canopy_layer_4, \n              colors=['green', 'purple', 'red', 'blue'])\n\n# Adding the necessary labels\nplt.xlabel('Plant Species')\nplt.ylabel('Quantities in Canopy Layers')\n\n# Title of the plot\nplt.title('Organic Growth Patterns in Rainforest')\n\n# Adding the legend\nplt.legend(['Canopy Layer 1', 'Canopy Layer 2', 'Canopy Layer 3', 'Canopy Layer 4'], loc='upper right')\n\n# Modifications\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Targeting the third stack (Bromeliads)\n        area.set_picker(True)\n        area.set_zorder(14)\n        shadow_color = 'gray'\n        area.set_path_effects([path_effects.SimplePatchShadow(offset=(3.24, 3.08), shadow_rgbFace=shadow_color), path_effects.Normal()])\n\n# Display\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_749344c90c795248/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_749344c90c795248/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_749344c90c795248/figure.png"
    },
    {
        "id": "Stack_e7e39bdc9eb876e0",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Seasons\nseasons = [\"Spring\", \"Summer\", \"Fall\", \"Winter\"]\n\n# Temperature data for each coral reef\ngreat_barrier_reef = [28, 30, 29, 27]\ncaribbean_coral_reef = [29, 31, 30, 28]\nred_sea_coral_reef = [30, 32, 31, 29]\n\n# Plotting data\nplt.stackplot(seasons, great_barrier_reef, caribbean_coral_reef, red_sea_coral_reef, labels=['Great Barrier Reef','Caribbean Coral Reef','Red Sea Coral Reef'])\n\n# Adding labels and title\nplt.xlabel(\"Seasons\")\nplt.ylabel(\"Temperature (\u00b0C)\")\nplt.title(\"Temperature Variability in Coral Reef Ecosystems\")\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Displaying plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the area that contains the center point of the bounding box to #93e3af and set its z-order to 18. Also, add a shadow effect to this area with an offset of (3.57, 2.08) and the shadow color 'gray'.",
        "Input_image": "./test_dataset/Stack/Stack_e7e39bdc9eb876e0/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Seasons\nseasons = [\"Spring\", \"Summer\", \"Fall\", \"Winter\"]\n\n# Temperature data for each coral reef\ngreat_barrier_reef = [28, 30, 29, 27]\ncaribbean_coral_reef = [29, 31, 30, 28]\nred_sea_coral_reef = [30, 32, 31, 29]\n\n# Plotting data\nplt.stackplot(seasons, great_barrier_reef, caribbean_coral_reef, red_sea_coral_reef, labels=['Great Barrier Reef','Caribbean Coral Reef','Red Sea Coral Reef'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Caribbean Coral Reef's stack\n        area.set_facecolor('#93e3af')\n        area.set_zorder(18)\n        shadow_color = 'gray'\n        area.set_path_effects([SimplePatchShadow(offset=(3.57, 2.08), shadow_rgbFace=shadow_color), Normal()])\n\n# Adding labels and title\nplt.xlabel(\"Seasons\")\nplt.ylabel(\"Temperature (\u00b0C)\")\nplt.title(\"Temperature Variability in Coral Reef Ecosystems\")\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Displaying plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_e7e39bdc9eb876e0/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_e7e39bdc9eb876e0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_e7e39bdc9eb876e0/figure.png"
    },
    {
        "id": "Stack_b5e612a89929879a",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time Intervals\ntime = [1, 2, 3, 4, 5]\n\n# Galactic Nebula Formation Stages\ngas_accumulation   = [10, 15, 20, 25, 30]\ncompression       = [5, 10, 15, 20, 25]\nigniting_stars    = [2, 5, 10, 15, 20]\n\n# Create a stackplot\nplt.stackplot(time, gas_accumulation, compression, igniting_stars, labels=['Gas Accumulation','Compression','Igniting Stars'], colors=['r','g','b'])\n\nplt.xlabel('Time Intervals')\nplt.ylabel('Units')\nplt.title('Stages of Galactic Nebula Formation Simulation')\n\n# Add a legend\nplt.legend(loc='upper left')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the area that contains the center point of the bounding box to #d8352e, and set the alpha blending mode for that same area to 0.442.",
        "Input_image": "./test_dataset/Stack/Stack_b5e612a89929879a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Time Intervals\ntime = [1, 2, 3, 4, 5]\n\n# Galactic Nebula Formation Stages\ngas_accumulation   = [10, 15, 20, 25, 30]\ncompression       = [5, 10, 15, 20, 25]\nigniting_stars    = [2, 5, 10, 15, 20]\n\n# Create a stackplot\nstacks = plt.stackplot(time, gas_accumulation, compression, igniting_stars, labels=['Gas Accumulation','Compression','Igniting Stars'], colors=['r','g','b'])\n\nfor idx, stack in enumerate(stacks):\n    if idx in [0]:\n        stack.set_edgecolor('#d8352e')\n        stack.set_alpha(0.44220508659999835)\n\nplt.xlabel('Time Intervals')\nplt.ylabel('Units')\nplt.title('Stages of Galactic Nebula Formation Simulation')\n\n# Add a legend\nplt.legend(loc='upper left')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_b5e612a89929879a/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b5e612a89929879a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b5e612a89929879a/figure.png"
    },
    {
        "id": "Stack_530e79e1b8ad8fe9",
        "Input_code": "import matplotlib.pyplot as plt\n\nlocations = ['Point A', 'Point B', 'Point C', 'Point D', 'Point E']\n\n# Water Flow Velocities\nsurface_velocity = [10, 12, 9, 11, 13]\nmid_velocity = [8, 10, 7, 9, 11]\nseabed_velocity = [6, 8, 5, 7, 9]\n\n# Temperature Gradients\nsurface_temps = [0.5, 0.6, 0.4, 0.7, 0.8]\nmid_temps = [0.3, 0.4, 0.2, 0.5, 0.6]\nseabed_temps = [0.2, 0.3, 0.1, 0.4, 0.5]\n\nplt.figure(figsize=(10,6))\n\n# Stack plot for Water Flow Velocities\nplt.subplot(2, 1, 1)\nplt.stackplot(locations, surface_velocity, mid_velocity, seabed_velocity, labels=['Surface','Mid-Depth','Seabed'])\nplt.title(\"Ocean Currents Around Barrier Reef\")\nplt.xlabel(\"Locations\")\nplt.ylabel(\"Water Flow Velocity (cm/s)\")\nplt.legend(loc='upper left')\n\n# Stack plot for Temperature Gradients\nplt.subplot(2, 1, 2)\nplt.stackplot(locations, surface_temps, mid_temps, seabed_temps, labels=['Surface','Mid-Depth','Seabed'])\nplt.title(\"Temperature Gradients Around Barrier Reef\")\nplt.xlabel(\"Locations\")\nplt.ylabel(\"Temperature Gradient (\u00b0C/m)\")\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the areas that share the same legend with the area that contains the center point of the bounding box to #c1eb40. Also, update the edge's linestyle to 'dotted' and set the edge color to #525dee for that same areas.",
        "Input_image": "./test_dataset/Stack/Stack_530e79e1b8ad8fe9/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nlocations = ['Point A', 'Point B', 'Point C', 'Point D', 'Point E']\n\n# Water Flow Velocities\nsurface_velocity = [10, 12, 9, 11, 13]\nmid_velocity = [8, 10, 7, 9, 11]\nseabed_velocity = [6, 8, 5, 7, 9]\n\n# Temperature Gradients\nsurface_temps = [0.5, 0.6, 0.4, 0.7, 0.8]\nmid_temps = [0.3, 0.4, 0.2, 0.5, 0.6]\nseabed_temps = [0.2, 0.3, 0.1, 0.4, 0.5]\n\nplt.figure(figsize=(10,6))\n\n# Stack plot for Water Flow Velocities\nplt.subplot(2, 1, 1)\nstacks1 = plt.stackplot(locations, surface_velocity, mid_velocity, seabed_velocity, labels=['Surface','Mid-Depth','Seabed'])\nplt.title(\"Ocean Currents Around Barrier Reef\")\nplt.xlabel(\"Locations\")\nplt.ylabel(\"Water Flow Velocity (cm/s)\")\n# Modifying the first stack plot\nfor idx, stack in enumerate(stacks1):\n    if idx in [1]:\n        stack.set_facecolor('#c1eb40')\n        stack.set_edgecolor('#525dee')\n        stack.set_linestyle('dotted')\nplt.legend(loc='upper left')\n\n# Stack plot for Temperature Gradients\nplt.subplot(2, 1, 2)\nstacks2 = plt.stackplot(locations, surface_temps, mid_temps, seabed_temps, labels=['Surface','Mid-Depth','Seabed'])\nplt.title(\"Temperature Gradients Around Barrier Reef\")\nplt.xlabel(\"Locations\")\nplt.ylabel(\"Temperature Gradient (\u00b0C/m)\")\n# Modifying the second stack plot\nfor idx, stack in enumerate(stacks2):\n    if idx in [1]:\n        stack.set_facecolor('#c1eb40')\n        stack.set_edgecolor('#525dee')\n        stack.set_linestyle('dotted')\nplt.legend(loc='upper left')\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_530e79e1b8ad8fe9/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_530e79e1b8ad8fe9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_530e79e1b8ad8fe9/figure.png"
    },
    {
        "id": "Stack_183cf4ef960d492d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Days\ndays = [1, 2, 3, 4, 5, 6, 7]\n\n# Facebook activity level\nfacebook_activity = [60, 72, 80, 55, 90, 63, 70]\n\n# Reported anxiety level\nanxiety_level = [4, 5, 6, 3, 7, 4, 5]\n\n# Plot stack plot\nplt.stackplot(days, facebook_activity, anxiety_level, colors=['blue', 'green'], labels=['Facebook Activity', 'Anxiety Level'])\n\nplt.legend(loc='upper left')\n\nplt.title('Facebook Activity and Anxiety Level Over Time')\nplt.xlabel('Day')\nplt.ylabel('Minutes/Level')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the z-order of the filled areas that contain the center point of the bounding box to 14. For the same areas, update the edge's linestyle to 'dashdot' and change the color to #73e97e.",
        "Input_image": "./test_dataset/Stack/Stack_183cf4ef960d492d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Days\ndays = [1, 2, 3, 4, 5, 6, 7]\n\n# Facebook activity level\nfacebook_activity = [60, 72, 80, 55, 90, 63, 70]\n\n# Reported anxiety level\nanxiety_level = [4, 5, 6, 3, 7, 4, 5]\n\n# Plot stack plot\nstacks = plt.stackplot(days, facebook_activity, anxiety_level, colors=['blue', 'green'], labels=['Facebook Activity', 'Anxiety Level'])\n\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_zorder(14)\n        stack.set_linestyle('dashdot')\n        stack.set_edgecolor('#73e97e')\n\nplt.legend(loc='upper left')\n\nplt.title('Facebook Activity and Anxiety Level Over Time')\nplt.xlabel('Day')\nplt.ylabel('Minutes/Level')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_183cf4ef960d492d/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_183cf4ef960d492d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_183cf4ef960d492d/figure.png"
    },
    {
        "id": "Stack_5ec895ec0e1c75dd",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time Intervals\ntime = [1, 2, 3, 4, 5]\n\n# Galactic Nebula Formation Stages\ngas_accumulation   = [10, 15, 20, 25, 30]\ncompression       = [5, 10, 15, 20, 25]\nigniting_stars    = [2, 5, 10, 15, 20]\n\n# Create a stackplot\nplt.stackplot(time, gas_accumulation, compression, igniting_stars, labels=['Gas Accumulation','Compression','Igniting Stars'], colors=['r','g','b'])\n\nplt.xlabel('Time Intervals')\nplt.ylabel('Units')\nplt.title('Stages of Galactic Nebula Formation Simulation')\n\n# Add a legend\nplt.legend(loc='upper left')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Define the clipping box for the area that contains the center point of the bounding box using the coordinates (x0, y0) = (190, 174), a width of 187, and a height of 188, following the pattern from `matplotlib.transforms.Bbox`. Also, adjust the transformation of this area to align with the pixel coordinate system for the same coordinates.",
        "Input_image": "./test_dataset/Stack/Stack_5ec895ec0e1c75dd/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Time Intervals\ntime = [1, 2, 3, 4, 5]\n\n# Galactic Nebula Formation Stages\ngas_accumulation   = [10, 15, 20, 25, 30]\ncompression       = [5, 10, 15, 20, 25]\nigniting_stars    = [2, 5, 10, 15, 20]\n\n# Create a stackplot\nplt.stackplot(time, gas_accumulation, compression, igniting_stars, labels=['Gas Accumulation','Compression','Igniting Stars'], colors=['r','g','b'])\n\nclip_box = Bbox.from_bounds(190, 174, 187, 188)\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Compression's stack\n        area.set_clip_box(clip_box)\n        area.set_transform(plt.gca().transData)\n\nplt.xlabel('Time Intervals')\nplt.ylabel('Units')\nplt.title('Stages of Galactic Nebula Formation Simulation')\n\n# Add a legend\nplt.legend(loc='upper left')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_5ec895ec0e1c75dd/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_5ec895ec0e1c75dd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_5ec895ec0e1c75dd/figure.png"
    },
    {
        "id": "Stack_e844d82e4a8b5deb",
        "Input_code": "import matplotlib.pyplot as plt\n\n# number of days\ndays = range(1, 31)\n\n# coffee consumption data\ncoffee = [3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2]\n\n# productivity levels data\nproductivity = [5, 4, 7, 3, 6, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4]\n\n# create the stackplot\nplt.stackplot(days, coffee, productivity, labels=['Coffee', 'Productivity'], colors=['#ff7f0e', '#1f77b4'])\n\nplt.legend(loc='upper left')\n\nplt.title(\"Coffee Consumption vs Productivity\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Number of Cups/ Productivity Level\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the area that contains the center point of the bounding box to 0.5686, and set the edge color of that area to #976fef.",
        "Input_image": "./test_dataset/Stack/Stack_e844d82e4a8b5deb/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# number of days\ndays = range(1, 31)\n\n# coffee consumption data\ncoffee = [3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2]\n\n# productivity levels data\nproductivity = [5, 4, 7, 3, 6, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4]\n\n# create the stackplot\nstacks = plt.stackplot(days, coffee, productivity, labels=['Coffee', 'Productivity'], colors=['#ff7f0e', '#1f77b4'])\n\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_alpha(0.5685967410358477)\n        stack.set_edgecolor('#976fef')\n\nplt.legend(loc='upper left')\n\nplt.title(\"Coffee Consumption vs Productivity\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Number of Cups/ Productivity Level\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_e844d82e4a8b5deb/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_e844d82e4a8b5deb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_e844d82e4a8b5deb/figure.png"
    },
    {
        "id": "Stack_152661b0be9fa918",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Artifacts Volume\npottery = [1500, 1200, 1300, 1100, 1000]\nmetal_artifacts = [800, 700, 750, 600, 500]\nstone_tools = [600, 500, 550, 450, 400]\nceramics = [300, 250, 270, 200, 180]\n\n# Names of Sites\nsites = ['Site A', 'Site B', 'Site C', 'Site D', 'Site E']\n\n# Creating stackplot\nplt.stackplot(sites, pottery, metal_artifacts, stone_tools, ceramics, labels=['Pottery','Metal Artifacts','Stone Tools','Ceramics'])\n\n# Adding Labels and Title\nplt.xlabel('Archaeological Sites')\nplt.ylabel('Volume of Artifacts (cubic meters)')\nplt.title('Volumetric Distribution of Artifacts at Underwater Archaeological Sites')\n\n# Adding Legend\nplt.legend(loc='upper right')\n\n# Displaying Plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #3eee95, and adjust the alpha blending mode for that area to 0.3986.",
        "Input_image": "./test_dataset/Stack/Stack_152661b0be9fa918/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Artifacts Volume\npottery = [1500, 1200, 1300, 1100, 1000]\nmetal_artifacts = [800, 700, 750, 600, 500]\nstone_tools = [600, 500, 550, 450, 400]\nceramics = [300, 250, 270, 200, 180]\n\n# Names of Sites\nsites = ['Site A', 'Site B', 'Site C', 'Site D', 'Site E']\n\n# Creating stackplot\nstacks=plt.stackplot(sites, pottery, metal_artifacts, stone_tools, ceramics, labels=['Pottery','Metal Artifacts','Stone Tools','Ceramics'])\nfor idx,stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_facecolor('#3eee95')\n        stack.set_alpha(0.3985620007711062)\n\n# Adding Labels and Title\nplt.xlabel('Archaeological Sites')\nplt.ylabel('Volume of Artifacts (cubic meters)')\nplt.title('Volumetric Distribution of Artifacts at Underwater Archaeological Sites')\n\n# Adding Legend\nplt.legend(loc='upper right')\n\n# Displaying Plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_152661b0be9fa918/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_152661b0be9fa918/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_152661b0be9fa918/figure.png"
    },
    {
        "id": "Stack_4a9f7debce768a42",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Months\nmonths = [1, 2, 3, 4, 5, 6]\n\n# Sales data\nstrategyA = [50000, 55000, 60000, 65000, 70000, 75000]\nstrategyB = [45000, 50000, 55000, 60000, 65000, 70000]\nstrategyC = [35000, 40000, 45000, 50000, 55000, 60000]\n\nplt.figure(figsize=(10,7)) \nplt.stackplot(months, strategyA, strategyB, strategyC, colors=['blue', 'green', 'purple'], labels=['Strategy A','Strategy B', 'Strategy C'])\n\nplt.title('Effectiveness of Different Marketing Strategies')\nplt.xlabel('Months') \nplt.ylabel('Sales in $') \n\n# Adding legend\nplt.legend(loc='upper left')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the line color of the area that contains the center point of the bounding box to #423941. Also, ensure that rasterization for this area is set to False.",
        "Input_image": "./test_dataset/Stack/Stack_4a9f7debce768a42/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Months\nmonths = [1, 2, 3, 4, 5, 6]\n\n# Sales data\nstrategyA = [50000, 55000, 60000, 65000, 70000, 75000]\nstrategyB = [45000, 50000, 55000, 60000, 65000, 70000]\nstrategyC = [35000, 40000, 45000, 50000, 55000, 60000]\n\nplt.figure(figsize=(10,7)) \nplt.stackplot(months, strategyA, strategyB, strategyC, colors=['blue', 'green', 'purple'], labels=['Strategy A','Strategy B', 'Strategy C'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Strategy B's stack\n        area.set_edgecolor('#423941')\n        area.set_rasterized(False)\n\nplt.title('Effectiveness of Different Marketing Strategies')\nplt.xlabel('Months') \nplt.ylabel('Sales in $') \n\n# Adding legend\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_4a9f7debce768a42/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_4a9f7debce768a42/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_4a9f7debce768a42/figure.png"
    },
    {
        "id": "Stack_c0f5a707f159746d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Depth levels\ndepth_levels = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n# Volumes of different architectural elements\ntemple_ruins_vol = [100, 250, 300, 200, 150, 100, 50, 25, 10, 5]\npalace_halls_vol = [150, 200, 180, 130, 100, 80, 60, 40, 20, 10]\ncoral_garden_vol = [50, 80, 100, 110, 120, 100, 80, 60, 40, 20]\n\n# Plot the stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(depth_levels, temple_ruins_vol, palace_halls_vol, coral_garden_vol, \n              labels=['Ancient Temple Ruins', 'Sunken Palace Halls', 'Coral Garden Structures'], \n              colors=['sienna', 'coral', 'skyblue'], alpha=0.7)\n\n# Set the labels and title\nplt.xlabel('Depth Levels (meters)')\nplt.ylabel('Volume of Structures (cubic meters)')\nplt.title('Volumetric Analysis of Architectural Elements in a Mystical Underwater City')\nplt.legend(loc='upper right')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the label for the area containing the center point of the bounding box to 'A new Label'. Also, apply a stroke to this area with a linewidth of 2.35 and use #e192b2 for the foreground color.",
        "Input_image": "./test_dataset/Stack/Stack_c0f5a707f159746d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Depth levels\ndepth_levels = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n# Volumes of different architectural elements\ntemple_ruins_vol = [100, 250, 300, 200, 150, 100, 50, 25, 10, 5]\npalace_halls_vol = [150, 200, 180, 130, 100, 80, 60, 40, 20, 10]\ncoral_garden_vol = [50, 80, 100, 110, 120, 100, 80, 60, 40, 20]\n\n# Plot the stack plot\nplt.figure(figsize=(10,7))\nstroke_effect = path_effects.withStroke(linewidth=2.3475445355166773, foreground='#e192b2')\nplt.stackplot(depth_levels, temple_ruins_vol, palace_halls_vol, coral_garden_vol, \n              labels=['Ancient Temple Ruins', 'A new Label', 'Coral Garden Structures'], \n              colors=['sienna', 'coral', 'skyblue'], alpha=0.7)\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Sunken Palace Halls\n        area.set_path_effects([stroke_effect])\n\n# Set the labels and title\nplt.xlabel('Depth Levels (meters)')\nplt.ylabel('Volume of Structures (cubic meters)')\nplt.title('Volumetric Analysis of Architectural Elements in a Mystical Underwater City')\nplt.legend(loc='upper right')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_c0f5a707f159746d/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_c0f5a707f159746d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_c0f5a707f159746d/figure.png"
    },
    {
        "id": "Stack_d35aebe9918705c2",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data for Tyrannosaurus Rex\ntyrannosaurus_rex_years = [500, 400, 300, 200, 100]\ntyrannosaurus_rex_population = [100000, 90000, 80000, 60000, 50000]\n\n# Data for Stegosaurus\nstegosaurus_years = [500, 400, 300, 200, 100]\nstegosaurus_population = [50000, 60000, 70000, 80000, 90000]\n\n# Data for Triceratops\ntriceratops_years = [500, 400, 300, 200, 100]\ntriceratops_population = [80000, 70000, 60000, 50000, 40000]\n\n# Data for Velociraptor\nvelociraptor_years = [500, 400, 300, 200, 100]\nvelociraptor_population = [30000, 40000, 50000, 60000, 70000]\n\n# Plotting\nplt.figure(figsize=(10, 6))\n\nplt.stackplot(tyrannosaurus_rex_years, tyrannosaurus_rex_population, stegosaurus_population, triceratops_population, velociraptor_population,\n              labels=['Tyrannosaurus Rex', 'Stegosaurus', 'Triceratops', 'Velociraptor'],\n              colors=['blue', 'orange', 'green', 'purple'])\n\nplt.xlabel('Millions of Years Ago')\nplt.ylabel('Population Count')\nplt.title('Population Progression of Dinosaur Species')\nplt.legend(loc='upper left')\n\n\nplt.savefig('figure.png')\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the area that contains the center point of the bounding box to #df71ba.",
        "Input_image": "./test_dataset/Stack/Stack_d35aebe9918705c2/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data for Tyrannosaurus Rex\ntyrannosaurus_rex_years = [500, 400, 300, 200, 100]\ntyrannosaurus_rex_population = [100000, 90000, 80000, 60000, 50000]\n\n# Data for Stegosaurus\nstegosaurus_years = [500, 400, 300, 200, 100]\nstegosaurus_population = [50000, 60000, 70000, 80000, 90000]\n\n# Data for Triceratops\ntriceratops_years = [500, 400, 300, 200, 100]\ntriceratops_population = [80000, 70000, 60000, 50000, 40000]\n\n# Data for Velociraptor\nvelociraptor_years = [500, 400, 300, 200, 100]\nvelociraptor_population = [30000, 40000, 50000, 60000, 70000]\n\n# Plotting\nplt.figure(figsize=(10, 6))\n\nstacks=plt.stackplot(tyrannosaurus_rex_years, tyrannosaurus_rex_population, stegosaurus_population, triceratops_population, velociraptor_population,\n              labels=['Tyrannosaurus Rex', 'Stegosaurus', 'Triceratops', 'Velociraptor'],\n              colors=['blue', 'orange', 'green', 'purple'])\n\nfor idx,stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_edgecolor('#df71ba')\n\nplt.xlabel('Millions of Years Ago')\nplt.ylabel('Population Count')\nplt.title('Population Progression of Dinosaur Species')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_d35aebe9918705c2/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_d35aebe9918705c2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_d35aebe9918705c2/figure.png"
    },
    {
        "id": "Stack_3c55a592202bedb1",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Weekly data for different age groups\nweeks = [i for i in range(1, 27)]\nage_groups = ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '80+']\ncases = [np.linspace(25, 50, 26),\n         np.linspace(50, 70, 26),\n         np.linspace(70, 100, 26),\n         np.linspace(90, 120, 26),\n         np.linspace(120, 150, 26),\n         np.linspace(100, 70, 26),\n         np.linspace(80, 60, 26),\n         np.linspace(60, 40, 26),\n         np.linspace(40, 25, 26)]\n\n# Stack plot\nplt.figure(figsize=(10, 7))\nplt.stackplot(weeks, cases, labels=age_groups)\n\n# Customize plot \nplt.xlabel('Weeks')\nplt.ylabel('Number of Cases')\nplt.title('Distribution of COVID-19 Cases Among Various Age Groups Over 6 Months')\nplt.legend(loc='upper left')\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Hide the areas that contain the center point of the bounding box related to the target.",
        "Input_image": "./test_dataset/Stack/Stack_3c55a592202bedb1/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as path_effects\n\n# Weekly data for different age groups\nweeks = [i for i in range(1, 27)]\nage_groups = ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '80+']\ncases = [np.linspace(25, 50, 26),\n         np.linspace(50, 70, 26),\n         np.linspace(70, 100, 26),\n         np.linspace(90, 120, 26),\n         np.linspace(120, 150, 26),\n         np.linspace(100, 70, 26),\n         np.linspace(80, 60, 26),\n         np.linspace(60, 40, 26),\n         np.linspace(40, 25, 26)]\n\n# Stack plot\nplt.figure(figsize=(10, 7))\nplt.stackplot(weeks, cases, labels=age_groups)\n\n# Customize plot \nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Target object\n        area.set_visible(False)\n        \nplt.xlabel('Weeks')\nplt.ylabel('Number of Cases')\nplt.title('Distribution of COVID-19 Cases Among Various Age Groups Over 6 Months')\nplt.legend(loc='upper left')\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_3c55a592202bedb1/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_3c55a592202bedb1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_3c55a592202bedb1/figure.png"
    },
    {
        "id": "Stack_a8a439ea8493c716",
        "Input_code": "import matplotlib.pyplot as plt\n\nstages = ['Stage 1', 'Stage 2', 'Stage 3', 'Stage 4', 'Stage 5']\n\nengine_block_defects = [10, 8, 6, 4, 2]\ntransmission_system_defects = [5, 4, 3, 2, 1]\nbrake_assembly_defects = [8, 10, 12, 14, 16]\n\nplt.figure(figsize=(10,7))\n\nplt.stackplot(stages, engine_block_defects, transmission_system_defects, brake_assembly_defects, \n              colors=['#ff9999','#66b3ff','#99ff99'], labels=['Engine Block','Transmission System','Brake Assembly'])\n\nplt.legend(loc='upper right')\nplt.title('Defects in Automotive Parts Across Production Stages')\nplt.xlabel('Production Stages')\nplt.ylabel('Number of Defects')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the area that contains the center point of the bounding box to 0.54. For the same area, change the linestyle to 'dashdot'.",
        "Input_image": "./test_dataset/Stack/Stack_a8a439ea8493c716/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nstages = ['Stage 1', 'Stage 2', 'Stage 3', 'Stage 4', 'Stage 5']\n\nengine_block_defects = [10, 8, 6, 4, 2]\ntransmission_system_defects = [5, 4, 3, 2, 1]\nbrake_assembly_defects = [8, 10, 12, 14, 16]\n\nplt.figure(figsize=(10,7))\n\nplt.stackplot(stages, engine_block_defects, transmission_system_defects, brake_assembly_defects, \n              colors=['#ff9999','#66b3ff','#99ff99'], labels=['Engine Block','Transmission System','Brake Assembly'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Transmission System's stack\n        area.set_alpha(0.54)\n        area.set_linestyle('dashdot')\n\nplt.legend(loc='upper right')\nplt.title('Defects in Automotive Parts Across Production Stages')\nplt.xlabel('Production Stages')\nplt.ylabel('Number of Defects')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_a8a439ea8493c716/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_a8a439ea8493c716/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_a8a439ea8493c716/figure.png"
    },
    {
        "id": "Stack_0e71294f8aa0fe4f",
        "Input_code": "import matplotlib.pyplot as plt\n\n# specify depth levels\ndepth_levels = ['10m', '20m', '30m', '40m']\n\n# specify the abundance of each coral species at each depth level\ncoral_species_A = [15, 10, 5, 2]\ncoral_species_B = [8, 12, 6, 4]\ncoral_species_C = [5, 3, 2, 1]\n\n# create a stackplot\nplt.stackplot(depth_levels, coral_species_A, coral_species_B, coral_species_C, labels=['Coral Species A','Coral Species B','Coral Species C'])\n\n# define the plot title, x-label, and y-label\nplt.title('Biodiversity Distribution of Different Coral Species')\nplt.xlabel('Depth Levels')\nplt.ylabel('Abundance')\n\n# add a legend\nplt.legend(loc='upper right')\n\n# display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the area that contains the center point of the bounding box to #2b5595, ensuring that the edge is clearly visible around it.",
        "Input_image": "./test_dataset/Stack/Stack_0e71294f8aa0fe4f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# specify depth levels\ndepth_levels = ['10m', '20m', '30m', '40m']\n\n# specify the abundance of each coral species at each depth level\ncoral_species_A = [15, 10, 5, 2]\ncoral_species_B = [8, 12, 6, 4]\ncoral_species_C = [5, 3, 2, 1]\n\n# create a stackplot\nstacks=plt.stackplot(depth_levels, coral_species_A, coral_species_B, coral_species_C, labels=['Coral Species A','Coral Species B','Coral Species C'])\n\nfor idx,stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_edgecolor('#2b5595')\n        stack.set_linewidth(1)\n\n# define the plot title, x-label, and y-label\nplt.title('Biodiversity Distribution of Different Coral Species')\nplt.xlabel('Depth Levels')\nplt.ylabel('Abundance')\n\n# add a legend\nplt.legend(loc='upper right')\n\n# display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_0e71294f8aa0fe4f/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_0e71294f8aa0fe4f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_0e71294f8aa0fe4f/figure.png"
    },
    {
        "id": "Stack_14757c3eab69eea6",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nphases = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4']\ntremors = [15, 0, 0, 0]\nash = [0, 25, 0, 0]\nlava = [0, 0, 20, 0]\npyroclastic = [0, 0, 0, 30]\n\n# Create stack plot\nplt.figure(figsize=(10, 6))\nplt.stackplot(phases, tremors, ash, lava, pyroclastic, labels=['Initial Tremors', 'Ash Emissions', 'Lava Flow', 'Pyroclastic Flow'])\n\n# Add legend and labels\nplt.legend(loc='upper left')\nplt.xlabel('Volcanic Phases')\nplt.ylabel('Number of Eruptions')\nplt.title('Volcano Eruption Simulation - Eruption Intensity Levels')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the areas that contain the center point of the bounding box to cover a rectangle with the bottom-left corner at (91, 103), a width of 433, and a height of 356. Also, update the linewidth of these areas to 4.09.",
        "Input_image": "./test_dataset/Stack/Stack_14757c3eab69eea6/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Data\nphases = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4']\ntremors = [15, 0, 0, 0]\nash = [0, 25, 0, 0]\nlava = [0, 0, 20, 0]\npyroclastic = [0, 0, 0, 30]\n\n# Create stack plot\nplt.figure(figsize=(10, 6))\nclip_box = Bbox.from_bounds(91, 103, 433, 356)\nstack = plt.stackplot(phases, tremors, ash, lava, pyroclastic, labels=['Initial Tremors', 'Ash Emissions', 'Lava Flow', 'Pyroclastic Flow'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Lava Flow's stack\n        area.set_clip_box(clip_box)\n        area.set_linewidth(4.09)\n\n# Add legend and labels\nplt.legend(loc='upper left')\nplt.xlabel('Volcanic Phases')\nplt.ylabel('Number of Eruptions')\nplt.title('Volcano Eruption Simulation - Eruption Intensity Levels')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_14757c3eab69eea6/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_14757c3eab69eea6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_14757c3eab69eea6/figure.png"
    },
    {
        "id": "Stack_910c3f124863c3de",
        "Input_code": "import matplotlib.pyplot as plt\n\nyears = list(range(2010, 2020))\nregion1 = [800, 850, 900, 950, 1000, 1100, 1050, 1000, 950, 900]\nregion2 = [600, 650, 700, 750, 800, 900, 850, 800, 750, 700]\nregion3 = [500, 550, 600, 650, 700, 800, 750, 700, 650, 600]\nregion4 = [400, 450, 500, 550, 600, 700, 650, 600, 550, 500]\n\nplt.stackplot(years, region1, region2, region3, region4, labels=['Region1', 'Region2', 'Region3', 'Region4'])\nplt.legend(loc='upper left')\nplt.title('Average Rainfall (2010-2019)')\nplt.xlabel('Year')\nplt.ylabel('Average Rainfall (mm)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the area that contains the center point of the bounding box to #f0841f, and modify the line style to 'dashed' for the same area.",
        "Input_image": "./test_dataset/Stack/Stack_910c3f124863c3de/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nyears = list(range(2010, 2020))\nregion1 = [800, 850, 900, 950, 1000, 1100, 1050, 1000, 950, 900]\nregion2 = [600, 650, 700, 750, 800, 900, 850, 800, 750, 700]\nregion3 = [500, 550, 600, 650, 700, 800, 750, 700, 650, 600]\nregion4 = [400, 450, 500, 550, 600, 700, 650, 600, 550, 500]\n\nplt.stackplot(years, region1, region2, region3, region4, labels=['Region1', 'Region2', 'Region3', 'Region4'])\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Region3's stack\n        area.set_edgecolor('#f0841f')\n        area.set_linestyle('dashed')\nplt.legend(loc='upper left')\nplt.title('Average Rainfall (2010-2019)')\nplt.xlabel('Year')\nplt.ylabel('Average Rainfall (mm)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_910c3f124863c3de/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_910c3f124863c3de/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_910c3f124863c3de/figure.png"
    },
    {
        "id": "Stack_7fff42e5845eaa1e",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Age Groups\nage_groups = [\"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\"]\n\n# Internet Data Usage in GB\ndata_18_24 = [10, 15, 20, 25, 30]\ndata_25_34 = [20, 25, 30, 35, 40]\ndata_35_44 = [30, 35, 40, 45, 50]\ndata_45_54 = [40, 45, 50, 55, 60]\ndata_55_64 = [50, 55, 60, 65, 70]\ndata_65_plus = [10, 15, 20, 25, 30]\n\n# Stack Plot\nplt.figure(figsize=[10,6])\nplt.stackplot(range(1, 6), data_18_24, data_25_34, data_35_44, data_45_54, data_55_64, data_65_plus, labels=age_groups)\nplt.legend(loc=\"upper left\")\nplt.title('Internet Data Usage by Age Group',fontsize=16,fontweight='bold')\nplt.xlabel('Time Duration',fontsize=14)\nplt.ylabel('Internet Data Usage (in GB)',fontsize=14)\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the areas that contain the center point of the bounding box to a defined area starting at (491, 127) with a width of 214 and a height of 341, following the matplotlib.transforms.Bbox specification. Additionally, enable the picker state for these areas by setting it to True.",
        "Input_image": "./test_dataset/Stack/Stack_7fff42e5845eaa1e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Age Groups\nage_groups = [\"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\"]\n\n# Internet Data Usage in GB\ndata_18_24 = [10, 15, 20, 25, 30]\ndata_25_34 = [20, 25, 30, 35, 40]\ndata_35_44 = [30, 35, 40, 45, 50]\ndata_45_54 = [40, 45, 50, 55, 60]\ndata_55_64 = [50, 55, 60, 65, 70]\ndata_65_plus = [10, 15, 20, 25, 30]\n\n# Stack Plot\nplt.figure(figsize=[10,6])\nclip_box = Bbox.from_bounds(491, 127, 214, 341)\nstack = plt.stackplot(range(1, 6), data_18_24, data_25_34, data_35_44, data_45_54, data_55_64, data_65_plus, labels=age_groups)\nfor i, area in enumerate(stack):\n    if i == 2:  # Target the 35-44 age group stack\n        area.set_clip_box(clip_box)\n        area.set_picker(True)\nplt.legend(loc=\"upper left\")\nplt.title('Internet Data Usage by Age Group',fontsize=16,fontweight='bold')\nplt.xlabel('Time Duration',fontsize=14)\nplt.ylabel('Internet Data Usage (in GB)',fontsize=14)\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_7fff42e5845eaa1e/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_7fff42e5845eaa1e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_7fff42e5845eaa1e/figure.png"
    },
    {
        "id": "Stack_e78530aaa1a500d6",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define the months\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\n# Define the product categories\ncategories = [\"Electronics\", \"Apparel\", \"Home & Garden\", \"Beauty & Personal Care\", \"Sports & Outdoors\"]\n\n# Define sales data for each region \n\nNorth_America = [\n[100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210],\n[90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145],\n[80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135],\n[70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125],\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115]\n]\n\nEurope = [\n[90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145],\n[80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135],\n[70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125],\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115],\n[50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105]\n]\n\nAsia = [\n[80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135],\n[70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125],\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115],\n[50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105],\n[40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n]\n\nSouth_America = [\n[70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125],\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115],\n[50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105],\n[40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95],\n[30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85]\n]\n\nAfrica = [\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115],\n[50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105],\n[40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95],\n[30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85],\n[20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75]\n]\n\n# Function to create stack plots for given data and labels.\ndef create_stackplot(data, labels, ax, title):\n    ax.stackplot(months, data, labels=labels)\n    ax.set_title(title)\n    ax.set_ylabel('Sales (in thousands of dollars)')\n    ax.legend(loc='upper left')\n\n# Create subplots\nfig, axs = plt.subplots(5, 1, figsize=(15,25))\n\ncreate_stackplot(North_America, categories, axs[0], 'North America')\ncreate_stackplot(Europe, categories, axs[1], 'Europe')\ncreate_stackplot(Asia, categories, axs[2], 'Asia')\ncreate_stackplot(South_America, categories, axs[3], 'South America')\ncreate_stackplot(Africa, categories, axs[4], 'Africa')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for all the areas that share the same legend with the area that contains the center point of the bounding box to the coordinates (11, 950) with a width of 580 and a height of 750, following the matplotlib.transforms.Bbox pattern. Additionally, change the line color of these areas to #1ba268.",
        "Input_image": "./test_dataset/Stack/Stack_e78530aaa1a500d6/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Define the months\nmonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\n# Define the product categories\ncategories = [\"Electronics\", \"Apparel\", \"Home & Garden\", \"Beauty & Personal Care\", \"Sports & Outdoors\"]\n\n# Define sales data for each region \n\nNorth_America = [\n[100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210],\n[90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145],\n[80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135],\n[70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125],\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115]\n]\n\nEurope = [\n[90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145],\n[80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135],\n[70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125],\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115],\n[50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105]\n]\n\nAsia = [\n[80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135],\n[70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125],\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115],\n[50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105],\n[40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n]\n\nSouth_America = [\n[70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125],\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115],\n[50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105],\n[40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95],\n[30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85]\n]\n\nAfrica = [\n[60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115],\n[50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105],\n[40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95],\n[30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85],\n[20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75]\n]\n\n# Function to create stack plots for given data and labels.\ndef create_stackplot(data, labels, ax, title):\n    clip_box = Bbox.from_bounds(11, 950, 580, 750)\n    stacks = ax.stackplot(months, data, labels=labels)\n    for i, stack in enumerate(stacks):\n        if i == 2:  # Targeting the third stack\n            stack.set_clip_box(clip_box)\n            stack.set_edgecolor('#1ba268')\n    ax.set_title(title)\n    ax.set_ylabel('Sales (in thousands of dollars)')\n    ax.legend(loc='upper left')\n\n# Create subplots\nfig, axs = plt.subplots(5, 1, figsize=(15,25))\n\ncreate_stackplot(North_America, categories, axs[0], 'North America')\ncreate_stackplot(Europe, categories, axs[1], 'Europe')\ncreate_stackplot(Asia, categories, axs[2], 'Asia')\ncreate_stackplot(South_America, categories, axs[3], 'South America')\ncreate_stackplot(Africa, categories, axs[4], 'Africa')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_e78530aaa1a500d6/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_e78530aaa1a500d6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_e78530aaa1a500d6/figure.png"
    },
    {
        "id": "Stack_cfcd6e350e385967",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define years\nyears = list(range(2010, 2021))\n\n# Define data for each dog breed\nbreed_1_data = [10, 9, 8, 7, 5, 6, 5, 4, 3, 4, 5]\nbreed_2_data = [8, 7, 6, 7, 8, 9, 10, 9, 8, 7, 6]\nbreed_3_data = [6, 7, 8, 8, 9, 8, 8, 8, 9, 10, 11]\nbreed_4_data = [9, 9, 8, 8, 7, 7, 6, 7, 7, 6, 5]\nbreed_5_data = [12, 13, 14, 15, 17, 18, 18, 19, 20, 20, 19]\n\n# Plot data\nplt.stackplot(years, breed_1_data, breed_2_data, breed_3_data, breed_4_data, breed_5_data, labels=['Breed 1', 'Breed 2', 'Breed 3', 'Breed 4', 'Breed 5'])\nplt.legend(loc='upper left')\n\n# Customize plot\nplt.title('Popularity of Top 5 Dog Breeds Over the Years')\nplt.xlabel('Years')\nplt.ylabel('Popularity Percentage')\n\n# Show plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the hatch pattern of the area that contains the center point of the bounding box to 'O', and remove the edge surrounding this area.",
        "Input_image": "./test_dataset/Stack/Stack_cfcd6e350e385967/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Define years\nyears = list(range(2010, 2021))\n\n# Define data for each dog breed\nbreed_1_data = [10, 9, 8, 7, 5, 6, 5, 4, 3, 4, 5]\nbreed_2_data = [8, 7, 6, 7, 8, 9, 10, 9, 8, 7, 6]\nbreed_3_data = [6, 7, 8, 8, 9, 8, 8, 8, 9, 10, 11]\nbreed_4_data = [9, 9, 8, 8, 7, 7, 6, 7, 7, 6, 5]\nbreed_5_data = [12, 13, 14, 15, 17, 18, 18, 19, 20, 20, 19]\n\n# Plot data\nstacks = plt.stackplot(years, breed_1_data, breed_2_data, breed_3_data, breed_4_data, breed_5_data, labels=['Breed 1', 'Breed 2', 'Breed 3', 'Breed 4', 'Breed 5'])\nfor idx, stack in enumerate(stacks):\n    if idx in [2, 4]:\n        stack.set_hatch('O')\n        stack.set_edgecolor('none')\nplt.legend(loc='upper left')\n\n# Customize plot\nplt.title('Popularity of Top 5 Dog Breeds Over the Years')\nplt.xlabel('Years')\nplt.ylabel('Popularity Percentage')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,4",
        "Test_image": "./test_dataset/Stack/Stack_cfcd6e350e385967/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_cfcd6e350e385967/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_cfcd6e350e385967/figure.png"
    },
    {
        "id": "Stack_f09fffcde4daa262",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2016, 2017, 2018, 2019, 2020]\nevs = [30, 28, 26, 24, 22]\ngps = [3, 3.5, 3.2, 2.8, 2.5]\n\nplt.figure(figsize=(10,7))\n\n# Creating the stack plot\nplt.stackplot(years, evs, gps, labels=['EVs (KWh/100 Miles)', 'GPs (Gallons/100 Miles)'])\n\n# Adding additional details  \nplt.title('Comparison of Energy Consumption between EVs and GPs (2016-2020)')\nplt.xlabel('Years')\nplt.ylabel('Energy Consumption')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the areas that contain the center point of the bounding box, using a bounding box defined by (x0, y0) at (121, 140), with a width of 338 and a height of 297, in accordance with matplotlib.transforms.Bbox. Also, change the face color of those areas to #3be6b5.",
        "Input_image": "./test_dataset/Stack/Stack_f09fffcde4daa262/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Data\nyears = [2016, 2017, 2018, 2019, 2020]\nevs = [30, 28, 26, 24, 22]\ngps = [3, 3.5, 3.2, 2.8, 2.5]\n\nplt.figure(figsize=(10,7))\n\n# Creating the stack plot\nplt.stackplot(years, evs, gps, labels=['EVs (KWh/100 Miles)', 'GPs (Gallons/100 Miles)'])\n\n# Applying modifications\nclip_box = Bbox.from_bounds(121, 140, 338, 297)\nfor i, area in enumerate(plt.gca().collections):\n    if i == 0:  # EVs stack\n        area.set_clip_box(clip_box)\n        area.set_facecolor('#3be6b5')\n\n# Adding additional details  \nplt.title('Comparison of Energy Consumption between EVs and GPs (2016-2020)')\nplt.xlabel('Years')\nplt.ylabel('Energy Consumption')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_f09fffcde4daa262/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_f09fffcde4daa262/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_f09fffcde4daa262/figure.png"
    },
    {
        "id": "Stack_c15d177459e4e803",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Depth ranges\ndepth_ranges = ['1000-2000m', '2000-3000m', '3000-4000m', '4000-5000m']\n\n# Abundance of species at different depth\ngiant_squid = [15, 20, 18, 22]\nanglerfish = [10, 12, 15, 18]\nvampire_squid = [5, 8, 6, 7]\n\n# Graph plotting\nplt.figure(figsize=(10, 6))\n\nplt.stackplot(depth_ranges, giant_squid, anglerfish, vampire_squid, labels=['Giant Squid', 'Anglerfish', 'Vampire Squid'])\n\nplt.legend(loc='upper left')\n\nplt.title('Deep Sea Creature Distribution Mapping')\nplt.xlabel('Depth Range')\nplt.ylabel('Total Counts')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the areas that contain the center point of the bounding box to #1e7d3d, and set the linestyle for those areas to 'dashdot'.",
        "Input_image": "./test_dataset/Stack/Stack_c15d177459e4e803/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Depth ranges\ndepth_ranges = ['1000-2000m', '2000-3000m', '3000-4000m', '4000-5000m']\n\n# Abundance of species at different depth\ngiant_squid = [15, 20, 18, 22]\nanglerfish = [10, 12, 15, 18]\nvampire_squid = [5, 8, 6, 7]\n\n# Graph plotting\nplt.figure(figsize=(10, 6))\n\nplt.stackplot(depth_ranges, giant_squid, anglerfish, vampire_squid, labels=['Giant Squid', 'Anglerfish', 'Vampire Squid'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Anglerfish's stack\n        area.set_facecolor('#1e7d3d')\n        area.set_linestyle('dashdot')\n\nplt.legend(loc='upper left')\n\nplt.title('Deep Sea Creature Distribution Mapping')\nplt.xlabel('Depth Range')\nplt.ylabel('Total Counts')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_c15d177459e4e803/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_c15d177459e4e803/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_c15d177459e4e803/figure.png"
    },
    {
        "id": "Stack_6b18631a5a4cf29b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Years from 1920 to 2020\nyears = list(range(1920, 2021, 10))\n\n# Lists holding percentage of songs of each genre on charts for each year\njazz = [5, 12, 16, 8, 4, 2, 1, 2, 1, 2, 3]\nblues = [3, 7, 10, 5, 3, 2, 1, 2, 1, 1, 1]\ncountry = [2, 3, 8, 20, 18, 15, 10, 8, 6, 5, 4]\nclassical = [8, 5, 3, 2, 1, 1, 1, 4, 5, 8, 10]\npop = [1, 2, 5, 15, 25, 30, 40, 45, 50, 60, 70]\n\n# Plotting\nplt.figure(figsize=(10, 7))\nplt.stackplot(years, jazz, blues, country, classical, pop, labels=['Jazz', 'Blues', 'Country', 'Classical', 'Pop'])\n\n# Adding legend and labels\nplt.legend(loc='upper left')\nplt.xlabel('Years')\nplt.ylabel('Percentage of Songs on Charts')\nplt.title('Evolution of Music Genres 1920-2020')\n\n# Displaying plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the area that contains the center point of the bounding box to 0.316, and set the edge color of that area to #e5e49d.",
        "Input_image": "./test_dataset/Stack/Stack_6b18631a5a4cf29b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Years from 1920 to 2020\nyears = list(range(1920, 2021, 10))\n\n# Lists holding percentage of songs of each genre on charts for each year\njazz = [5, 12, 16, 8, 4, 2, 1, 2, 1, 2, 3]\nblues = [3, 7, 10, 5, 3, 2, 1, 2, 1, 1, 1]\ncountry = [2, 3, 8, 20, 18, 15, 10, 8, 6, 5, 4]\nclassical = [8, 5, 3, 2, 1, 1, 1, 4, 5, 8, 10]\npop = [1, 2, 5, 15, 25, 30, 40, 45, 50, 60, 70]\n\n# Plotting\nplt.figure(figsize=(10, 7))\nstacks = plt.stackplot(years, jazz, blues, country, classical, pop, labels=['Jazz', 'Blues', 'Country', 'Classical', 'Pop'])\n\n# Modifying the target objects\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_alpha(0.3163186328428496)\n        stack.set_edgecolor('#e5e49d')\n\n# Adding legend and labels\nplt.legend(loc='upper left')\nplt.xlabel('Years')\nplt.ylabel('Percentage of Songs on Charts')\nplt.title('Evolution of Music Genres 1920-2020')\n\n# Displaying plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_6b18631a5a4cf29b/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_6b18631a5a4cf29b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_6b18631a5a4cf29b/figure.png"
    },
    {
        "id": "Stack_4e9e3e42d7c0149b",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data points\nmonths = ['January', 'February', 'March', 'April', 'May']\nvideo1 = [10, 15, 20, 8, 12]\nvideo2 = [7, 9, 14, 6, 10]\nvideo3 = [5, 6, 8, 3, 4]\nvideo4 = [3, 5, 7, 2, 3]\nvideo5 = [2, 3, 5, 1, 2]\n\n# Create a stack plot\nplt.stackplot(months, video1, video2, video3, video4, video5, labels=['Video 1', 'Video 2', 'Video 3', 'Video 4', 'Video 5'])\n\n# Add labels and title\nplt.xlabel('Months')\nplt.ylabel('Cumulative Number of Views (millions)')\nplt.title('Viral Video Sensations Over Time')\n\n# Show the legend\nplt.legend(loc='upper left')\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the area that contains the center point of the bounding box to 0.93, and also disable the picker state for that area.",
        "Input_image": "./test_dataset/Stack/Stack_4e9e3e42d7c0149b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data points\nmonths = ['January', 'February', 'March', 'April', 'May']\nvideo1 = [10, 15, 20, 8, 12]\nvideo2 = [7, 9, 14, 6, 10]\nvideo3 = [5, 6, 8, 3, 4]\nvideo4 = [3, 5, 7, 2, 3]\nvideo5 = [2, 3, 5, 1, 2]\n\n# Create a stack plot\nplt.stackplot(months, video1, video2, video3, video4, video5, labels=['Video 1', 'Video 2', 'Video 3', 'Video 4', 'Video 5'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Video 3's stack\n        area.set_linewidth(0.93)\n        area.set_picker(False)\n\n# Add labels and title\nplt.xlabel('Months')\nplt.ylabel('Cumulative Number of Views (millions)')\nplt.title('Viral Video Sensations Over Time')\n\n# Show the legend\nplt.legend(loc='upper left')\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_4e9e3e42d7c0149b/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_4e9e3e42d7c0149b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_4e9e3e42d7c0149b/figure.png"
    },
    {
        "id": "Stack_6a0ace8e8e7f3f13",
        "Input_code": "import matplotlib.pyplot as plt\n\nyears = list(range(2010, 2020))\n\ncountry_a = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\ncountry_b = [15, 18, 20, 25, 30, 35, 40, 45, 50, 55]\ncountry_c = [10, 12, 15, 20, 25, 30, 35, 40, 45, 50]\ncountry_d = [30, 32, 34, 36, 38, 40, 42, 44, 46, 48]\ncountry_e = [25, 28, 30, 33, 35, 38, 40, 43, 45, 48]\n\nplt.stackplot(years, country_a, country_b, country_c, country_d, country_e, labels=['Country A','Country B', 'Country C' , 'Country D', 'Country E'])\n\nplt.legend(loc='upper left')\nplt.ylabel('Percentage of renewable energy consumption')\nplt.xlabel('Years')\nplt.title('Renewable energy consumption: 2010-2019')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the area that contains the center point of the bounding box to 0.25.",
        "Input_image": "./test_dataset/Stack/Stack_6a0ace8e8e7f3f13/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nyears = list(range(2010, 2020))\n\ncountry_a = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\ncountry_b = [15, 18, 20, 25, 30, 35, 40, 45, 50, 55]\ncountry_c = [10, 12, 15, 20, 25, 30, 35, 40, 45, 50]\ncountry_d = [30, 32, 34, 36, 38, 40, 42, 44, 46, 48]\ncountry_e = [25, 28, 30, 33, 35, 38, 40, 43, 45, 48]\n\nplt.stackplot(years, country_a, country_b, country_c, country_d, country_e, labels=['Country A','Country B', 'Country C' , 'Country D', 'Country E'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Country C's stack\n        area.set_alpha(0.25)\n\nplt.legend(loc='upper left')\nplt.ylabel('Percentage of renewable energy consumption')\nplt.xlabel('Years')\nplt.title('Renewable energy consumption: 2010-2019')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_6a0ace8e8e7f3f13/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_6a0ace8e8e7f3f13/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_6a0ace8e8e7f3f13/figure.png"
    },
    {
        "id": "Stack_bc19a48de79ba162",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Academic years\nyears = [1, 2, 3, 4, 5, 6, 7]\n\ngryffindor = [5000, 7000, 6000, 8000, 9000, 7500, 6500]\nhufflepuff = [3000, 4500, 3500, 5500, 4000, 5000, 4200]\nravenclaw = [4000, 5500, 4800, 6000, 7000, 5900, 6300]\nslytherin = [2000, 3000, 2500, 4000, 3500, 3200, 3800]\n\n# Create the stack plot\nplt.stackplot(years, gryffindor, hufflepuff, ravenclaw, slytherin, colors=[\"r\", \"y\", \"b\", \"g\"])\n\n# Adding legend\nplt.legend([\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"], loc=\"upper left\")\n\nplt.xlabel(\"Academic Years\")\nplt.ylabel(\"Amount of Magical Ingredients Consumed (in grams)\")\n\nplt.title(\"Magical ingredient consumption of different houses over the years\")\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the label of the area that contains the center point of the bounding box to 'A new Label'. Additionally, change the snap state of this area to False.",
        "Input_image": "./test_dataset/Stack/Stack_bc19a48de79ba162/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Academic years\nyears = [1, 2, 3, 4, 5, 6, 7]\n\ngryffindor = [5000, 7000, 6000, 8000, 9000, 7500, 6500]\nhufflepuff = [3000, 4500, 3500, 5500, 4000, 5000, 4200]\nravenclaw = [4000, 5500, 4800, 6000, 7000, 5900, 6300]\nslytherin = [2000, 3000, 2500, 4000, 3500, 3200, 3800]\n\n# Create the stack plot\nplt.stackplot(years, gryffindor, hufflepuff, ravenclaw, slytherin, colors=[\"r\", \"y\", \"b\", \"g\"])\n\n# Adding legend\nplt.legend([\"Gryffindor\", \"Hufflepuff\", \"A new Label\", \"Slytherin\"], loc=\"upper left\")\n\nplt.xlabel(\"Academic Years\")\nplt.ylabel(\"Amount of Magical Ingredients Consumed (in grams)\")\n\nplt.title(\"Magical ingredient consumption of different houses over the years\")\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Ravenclaw's stack\n        area.set_snap(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_bc19a48de79ba162/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_bc19a48de79ba162/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_bc19a48de79ba162/figure.png"
    },
    {
        "id": "Stack_8b7b4d3555b4083c",
        "Input_code": "import matplotlib.pyplot as plt\n\n# X-axis Cities\ncities = ['City 1', 'City 2', 'City 3']\n\n# Y-axis Temperature\nnorth_hem = [-2, 0, -5]  # As all temperatures are negative\nsouth_hem = [25, 20, 15] \n\n# Since there are negative values in North Hemisphere and stack plot doesn't allow negative values, let's convert to positive for visualization\nnorth_hem_positive = [abs(temp) for temp in north_hem]\n\n# Stacked plot \nfig, ax = plt.subplots()\n\nax.stackplot(cities, north_hem_positive, south_hem, labels=['Northern Hemisphere','Southern Hemisphere'], colors = ['skyblue', 'coral'])\nplt.legend(loc='upper left')\n\nplt.xlabel(\"Cities\")\nplt.ylabel(\"Average Winter Temperature (\u00b0C)\") \nplt.title(\"Weather Patterns in Different Hemisphere Winters\")\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the filled area that contains the center point of the bounding box to 0.3068. Additionally, set the edge linewidth of that area to 2.11 and change the color to #bfd0b0.",
        "Input_image": "./test_dataset/Stack/Stack_8b7b4d3555b4083c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# X-axis Cities\ncities = ['City 1', 'City 2', 'City 3']\n\n# Y-axis Temperature\nnorth_hem = [-2, 0, -5]  # As all temperatures are negative\nsouth_hem = [25, 20, 15] \n\n# Since there are negative values in North Hemisphere and stack plot doesn't allow negative values, let's convert to positive for visualization\nnorth_hem_positive = [abs(temp) for temp in north_hem]\n\n# Stacked plot \nfig, ax = plt.subplots()\n\nstacks = ax.stackplot(cities, north_hem_positive, south_hem, labels=['Northern Hemisphere','Southern Hemisphere'], colors = ['skyblue', 'coral'])\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_alpha(0.30677024106707923)\n        stack.set_edgecolor('#bfd0b0')\n        stack.set_linewidth(2.110158768188641)\nplt.legend(loc='upper left')\n\nplt.xlabel(\"Cities\")\nplt.ylabel(\"Average Winter Temperature (\u00b0C)\") \nplt.title(\"Weather Patterns in Different Hemisphere Winters\")\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_8b7b4d3555b4083c/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_8b7b4d3555b4083c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_8b7b4d3555b4083c/figure.png"
    },
    {
        "id": "Stack_e3442733f9eacf3c",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nage_groups = ['Teens', 'Young Adults', 'Adults', 'Seniors']\npop = [45, 30, 20, 10]\nhip_hop = [30, 20, 15, 5]\nedm = [10, 15, 10, 5]\nrnb = [5, 10, 20, 30]\nrock = [5, 15, 25, 40]\nother = [5, 10, 10, 10]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Make the stack plot\nax.stackplot(age_groups, pop, hip_hop, edm, rnb, rock, other, labels=['Pop','Hip Hop/Rap','EDM','R&B','Rock','Other'])\n\n# Add legend, title, and labels\nax.legend(loc='upper left')\nplt.title('Musical Preferences of Different Age Groups')\nplt.xlabel('Age Groups')\nplt.ylabel('Percentage of Listeners (%)')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area containing the center point of the bounding box to #664caf. Additionally, add a stroke to this area with a line width of 2.01 and a foreground color of #80d5b8.",
        "Input_image": "./test_dataset/Stack/Stack_e3442733f9eacf3c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as path_effects\n\n# Define the data\nage_groups = ['Teens', 'Young Adults', 'Adults', 'Seniors']\npop = [45, 30, 20, 10]\nhip_hop = [30, 20, 15, 5]\nedm = [10, 15, 10, 5]\nrnb = [5, 10, 20, 30]\nrock = [5, 15, 25, 40]\nother = [5, 10, 10, 10]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Make the stack plot\nax.stackplot(age_groups, pop, hip_hop, edm, rnb, rock, other, labels=['Pop','Hip Hop/Rap','EDM','R&B','Rock','Other'])\n\n# Apply modifications to the target object\nstroke_effect = path_effects.withStroke(linewidth=2.00993600353677, foreground='#80d5b8')\nfor i, area in enumerate(ax.collections):\n    if i == 2:  # EDM's stack\n        area.set_facecolor('#664caf')\n        area.set_path_effects([stroke_effect])\n\n# Add legend, title, and labels\nax.legend(loc='upper left')\nplt.title('Musical Preferences of Different Age Groups')\nplt.xlabel('Age Groups')\nplt.ylabel('Percentage of Listeners (%)')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_e3442733f9eacf3c/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_e3442733f9eacf3c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_e3442733f9eacf3c/figure.png"
    },
    {
        "id": "Stack_6abce3605396dd7a",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2016, 2017, 2018, 2019, 2020]\nevs = [30, 28, 26, 24, 22]\ngps = [3, 3.5, 3.2, 2.8, 2.5]\n\nplt.figure(figsize=(10,7))\n\n# Creating the stack plot\nplt.stackplot(years, evs, gps, labels=['EVs (KWh/100 Miles)', 'GPs (Gallons/100 Miles)'])\n\n# Adding additional details  \nplt.title('Comparison of Energy Consumption between EVs and GPs (2016-2020)')\nplt.xlabel('Years')\nplt.ylabel('Energy Consumption')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the alpha blending mode of the area that includes the center point of the bounding box to 0.4375.",
        "Input_image": "./test_dataset/Stack/Stack_6abce3605396dd7a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2016, 2017, 2018, 2019, 2020]\nevs = [30, 28, 26, 24, 22]\ngps = [3, 3.5, 3.2, 2.8, 2.5]\n\nplt.figure(figsize=(10,7))\n\n# Creating the stack plot\nstacks = plt.stackplot(years, evs, gps, labels=['EVs (KWh/100 Miles)', 'GPs (Gallons/100 Miles)'])\n\n# Modifying the alpha blending mode of the fill corresponding to the Target_object\nfor idx, stack in enumerate(stacks):\n    if idx in [0]:\n        stack.set_alpha(0.4374629011141389)\n\n# Adding additional details\nplt.title('Comparison of Energy Consumption between EVs and GPs (2016-2020)')\nplt.xlabel('Years')\nplt.ylabel('Energy Consumption')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_6abce3605396dd7a/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_6abce3605396dd7a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_6abce3605396dd7a/figure.png"
    },
    {
        "id": "Stack_2cb88e5f9ef910ee",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time Intervals\ntime_intervals = ['T1', 'T2', 'T3', 'T4', 'T5']\n\n# Concentrations in ppm\ncarbon_dioxide = [200, 180, 150, 130, 100]\nwater_vapor = [120, 110, 100, 90, 80]\nnitrogen_oxides = [30, 35, 40, 45, 50]\nsulfur_dioxide = [10, 8, 6, 4, 2]\n\n# Create stackplot\nplt.figure(figsize=(10,6))\nplt.stackplot(time_intervals, carbon_dioxide, water_vapor, nitrogen_oxides, sulfur_dioxide, labels=['Carbon Dioxide','Water Vapor','Nitrogen Oxides','Sulfur Dioxide'])\n\n# Customize the plot\nplt.legend(loc='upper right')\nplt.title('Vibrant Flame Dynamics in Combustion Processes')\nplt.xlabel('Time Intervals')\nplt.ylabel('Concentrations (ppm)')\n\n# Show plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the area that contains the center point of the bounding box to False. Additionally, change the linestyle of this area to '-.' and color to red.",
        "Input_image": "./test_dataset/Stack/Stack_2cb88e5f9ef910ee/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Time Intervals\ntime_intervals = ['T1', 'T2', 'T3', 'T4', 'T5']\n\n# Concentrations in ppm\ncarbon_dioxide = [200, 180, 150, 130, 100]\nwater_vapor = [120, 110, 100, 90, 80]\nnitrogen_oxides = [30, 35, 40, 45, 50]\nsulfur_dioxide = [10, 8, 6, 4, 2]\n\n# Create stackplot\nplt.figure(figsize=(10,6))\nplt.stackplot(time_intervals, carbon_dioxide, water_vapor, nitrogen_oxides, sulfur_dioxide, labels=['Carbon Dioxide','Water Vapor','Nitrogen Oxides','Sulfur Dioxide'])\n\n# Customize the plot\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Nitrogen Oxides's stack\n        area.set_animated(False)\n        area.set_linestyle('-.')\n        area.set_edgecolor('red')\n\nplt.legend(loc='upper right')\nplt.title('Vibrant Flame Dynamics in Combustion Processes')\nplt.xlabel('Time Intervals')\nplt.ylabel('Concentrations (ppm)')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_2cb88e5f9ef910ee/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_2cb88e5f9ef910ee/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_2cb88e5f9ef910ee/figure.png"
    },
    {
        "id": "Stack_ad092351df5891b8",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Stacking the 'x' values for each ocean layer\nocean_layers = ('Surface Layer', 'Thermocline', 'Deep Ocean', 'Seafloor')\n\n# Stacking the 'y' values for temperature values\nsurface_layer = np.array([25, 24, 23, 22])\nthermocline = np.array([20, 18, 16, 14])\ndeep_ocean = np.array([8, 6, 4, 2])\nseafloor = np.array([3, 2, 1, 0])\n\n# Aggregate values for stacking bars\naggregate = np.row_stack((surface_layer, thermocline, deep_ocean, seafloor))\n\n# Creating the stackplot\nfig, ax = plt.subplots()\n\nax.stackplot(ocean_layers, aggregate, labels=['Surface Layer', 'Thermocline','Deep Ocean','Seafloor'])\nax.legend(loc='upper right')\n\nplt.ylabel('Temperature (\u00b0C)')\nplt.title('Temperature Distribution in Ocean Layers')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the area that contains the center point of the bounding box to have its lower-left corner at (79, 151), with a width of 269 and height of 257, following the matplotlib.transforms.Bbox pattern. Also, change the color of that same area to #5fd5ff.",
        "Input_image": "./test_dataset/Stack/Stack_ad092351df5891b8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.transforms import Bbox\n\n# Stacking the 'x' values for each ocean layer\nocean_layers = ('Surface Layer', 'Thermocline', 'Deep Ocean', 'Seafloor')\n\n# Stacking the 'y' values for temperature values\nsurface_layer = np.array([25, 24, 23, 22])\nthermocline = np.array([20, 18, 16, 14])\ndeep_ocean = np.array([8, 6, 4, 2])\nseafloor = np.array([3, 2, 1, 0])\n\n# Aggregate values for stacking bars\naggregate = np.row_stack((surface_layer, thermocline, deep_ocean, seafloor))\n\n# Creating the stackplot\nfig, ax = plt.subplots()\n\nclip_box = Bbox.from_bounds(79, 151, 269, 257)\ncolors = ['#5fd5ff', '#ff7f50', '#20b2aa', '#9370db']\nax.stackplot(ocean_layers, aggregate, labels=['Surface Layer', 'Thermocline','Deep Ocean','Seafloor'], colors=colors)\nfor i, area in enumerate(ax.collections):\n    if i == 0:  # Surface Layer's stack\n        area.set_clip_box(clip_box)\nax.legend(loc='upper right')\n\nplt.ylabel('Temperature (\u00b0C)')\nplt.title('Temperature Distribution in Ocean Layers')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_ad092351df5891b8/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_ad092351df5891b8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_ad092351df5891b8/figure.png"
    },
    {
        "id": "Stack_d70ea407d3958f69",
        "Input_code": "import matplotlib.pyplot as plt \n\n# x-axis values - spatial coordinates within the cluster \nx = [i for i in range(0, 10)]\n\n# y-axis values - number of Type A, B and C galaxies \ny1 = [3, 5, 8, 7, 6, 4, 3, 2, 1, 1] # Type A\ny2 = [1, 2, 4, 6, 7, 6, 4, 3, 2, 1] # Type B\ny3 = [0, 1, 3, 5, 5, 4, 3, 2, 1, 0] # Type C\n\n# Create stack plot\nplt.stackplot(x, y1, y2, y3, colors=['blue', 'green', 'red'])\n\n# Adding legend\nplt.legend(['Type A galaxies', 'Type B galaxies', 'Type C galaxies'], loc='upper right')\n\n# Adding title and labels \nplt.title(\"Spatial Distribution of Galaxies within a Cluster\")\nplt.xlabel(\"Spatial coordinates within the cluster\")\nplt.ylabel(\"Number of galaxies\")\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Make the area that contains the center point of the bounding box rasterized by setting its state to True. Also, adjust its z-order to 8. Furthermore, apply a shadow effect to this area with an offset of (2.23, 2.30), and shadow color blue.",
        "Input_image": "./test_dataset/Stack/Stack_d70ea407d3958f69/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# x-axis values - spatial coordinates within the cluster \nx = [i for i in range(0, 10)]\n\n# y-axis values - number of Type A, B and C galaxies \ny1 = [3, 5, 8, 7, 6, 4, 3, 2, 1, 1] # Type A\ny2 = [1, 2, 4, 6, 7, 6, 4, 3, 2, 1] # Type B\ny3 = [0, 1, 3, 5, 5, 4, 3, 2, 1, 0] # Type C\n\n# Create stack plot\nplt.stackplot(x, y1, y2, y3, colors=['blue', 'green', 'red'])\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Type B galaxies\n        area.set_rasterized(True)\n        area.set_zorder(8)\n        shadow_color = 'blue'\n        area.set_path_effects([SimplePatchShadow(offset=(2.23, 2.30), shadow_rgbFace=shadow_color), Normal()])\n\n# Adding legend\nplt.legend(['Type A galaxies', 'Type B galaxies', 'Type C galaxies'], loc='upper right')\n\n# Adding title and labels \nplt.title(\"Spatial Distribution of Galaxies within a Cluster\")\nplt.xlabel(\"Spatial coordinates within the cluster\")\nplt.ylabel(\"Number of galaxies\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_d70ea407d3958f69/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_d70ea407d3958f69/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_d70ea407d3958f69/figure.png"
    },
    {
        "id": "Stack_e875b38437e31ed1",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Given data\ndepth_labels = ['Surface', 'Epipelagic', 'Mesopelagic', 'Bathypelagic']\nplankton = [20, 15, 30, 10]\nfish = [30, 20, 25, 5]\ncephalopods = [10, 5, 15, 2]\ncorals = [5, 2, 5, 1]\nmammals = [0, 1, 2, 0]\n\n# plot\nplt.figure(figsize=(10,7))\nplt.stackplot(depth_labels, plankton, fish, cephalopods, corals, mammals, labels=['Plankton','Fish','Cephalopods','Corals','Mammals'], alpha=0.8)\nplt.legend(loc='upper right')\nplt.title('Evolution of marine life at different ocean depths over the ages')\nplt.xlabel('Ocean Depths')\nplt.ylabel('Percentage Distribution of Marine Life Forms')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the edge linewidth of the filled area that contains the center point of the bounding box to 1.2257 and change its color to #80da6d.",
        "Input_image": "./test_dataset/Stack/Stack_e875b38437e31ed1/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Given data\ndepth_labels = ['Surface', 'Epipelagic', 'Mesopelagic', 'Bathypelagic']\nplankton = [20, 15, 30, 10]\nfish = [30, 20, 25, 5]\ncephalopods = [10, 5, 15, 2]\ncorals = [5, 2, 5, 1]\nmammals = [0, 1, 2, 0]\n\n# plot\nplt.figure(figsize=(10,7))\nstacks = plt.stackplot(depth_labels, plankton, fish, cephalopods, corals, mammals, labels=['Plankton','Fish','Cephalopods','Corals','Mammals'], alpha=0.8)\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_linewidth(1.2257386010382212)\n        stack.set_edgecolor('#80da6d')\nplt.legend(loc='upper right')\nplt.title('Evolution of marine life at different ocean depths over the ages')\nplt.xlabel('Ocean Depths')\nplt.ylabel('Percentage Distribution of Marine Life Forms')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_e875b38437e31ed1/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_e875b38437e31ed1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_e875b38437e31ed1/figure.png"
    },
    {
        "id": "Stack_f3c73a4794c4aff9",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Years\nyears = list(range(1, 11))\n\n# Successful launches data\nCompany_X = [10, 15, 20, 18, 25, 30, 35, 40, 45, 50]\nCompany_Y = [15, 10, 12, 14, 18, 20, 23, 25, 28, 30]\nCompany_Z = [5, 8, 10, 9, 12, 15, 18, 20, 22, 25]\n\n# Creating the stack plot\nplt.stackplot(years, Company_X, Company_Y, Company_Z, \n              labels=['Company X', 'Company Y', 'Company Z'],\n              colors=['blue', 'orange', 'green'])\n\n# Providing other details\nplt.title(\"Journey of Commercial Spaceflight over a decade\")\nplt.ylabel('Number of Successful Launches')\nplt.xlabel('Years')\nplt.legend(loc='upper left')\n\n# Displaying the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the areas that contain the center point of the bounding box to #61a887, and update their label to 'A new Label'.",
        "Input_image": "./test_dataset/Stack/Stack_f3c73a4794c4aff9/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Years\nyears = list(range(1, 11))\n\n# Successful launches data\nCompany_X = [10, 15, 20, 18, 25, 30, 35, 40, 45, 50]\nCompany_Y = [15, 10, 12, 14, 18, 20, 23, 25, 28, 30]\nCompany_Z = [5, 8, 10, 9, 12, 15, 18, 20, 22, 25]\n\n# Creating the stack plot\nplt.stackplot(years, Company_X, Company_Y, Company_Z, \n              labels=['Company X', 'A new Label', 'Company Z'],\n              colors=['blue', '#61a887', 'green'])\n\n# Providing other details\nplt.title(\"Journey of Commercial Spaceflight over a decade\")\nplt.ylabel('Number of Successful Launches')\nplt.xlabel('Years')\nplt.legend(loc='upper left')\n\n# Displaying the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_f3c73a4794c4aff9/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_f3c73a4794c4aff9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_f3c73a4794c4aff9/figure.png"
    },
    {
        "id": "Stack_8d5aea99a794e648",
        "Input_code": "import matplotlib.pyplot as plt\n\n# number of days\ndays = range(1, 31)\n\n# coffee consumption data\ncoffee = [3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2]\n\n# productivity levels data\nproductivity = [5, 4, 7, 3, 6, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4]\n\n# create the stackplot\nplt.stackplot(days, coffee, productivity, labels=['Coffee', 'Productivity'], colors=['#ff7f0e', '#1f77b4'])\n\nplt.legend(loc='upper left')\n\nplt.title(\"Coffee Consumption vs Productivity\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Number of Cups/ Productivity Level\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Hide the edge around the filled area that contains the center point of the bounding box, and set the alpha blending mode of that fill to 0.3536.",
        "Input_image": "./test_dataset/Stack/Stack_8d5aea99a794e648/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# number of days\ndays = range(1, 31)\n\n# coffee consumption data\ncoffee = [3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2]\n\n# productivity levels data\nproductivity = [5, 4, 7, 3, 6, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4]\n\n# create the stackplot\nstacks = plt.stackplot(days, coffee, productivity, labels=['Coffee', 'Productivity'], colors=['#ff7f0e', '#1f77b4'])\n\nfor idx, stack in enumerate(stacks):\n    if idx in [0]:\n        stack.set_edgecolor('none')\n        stack.set_alpha(0.35362602914976304)\n\nplt.legend(loc='upper left')\n\nplt.title(\"Coffee Consumption vs Productivity\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Number of Cups/ Productivity Level\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_8d5aea99a794e648/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_8d5aea99a794e648/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_8d5aea99a794e648/figure.png"
    },
    {
        "id": "Stack_11c05dd0610d987c",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Ocean regions\noceans = ['Atlantic', 'Pacific', 'Indian', 'Southern']\n\n# Volumetric data in Cubic M/s\nsurface_current_A = [1000, 1200, 950, 1100]\nsurface_current_B = [800, 900, 750, 850]\nsubsurface_current_X = [600, 700, 550, 650]\n\n# Plot\nfig, ax = plt.subplots()\n\nax.stackplot(oceans, surface_current_A, surface_current_B, subsurface_current_X, \nlabels=['Surface Current A','Surface Current B', 'Subsurface Current X'])\n\nax.legend(loc='upper left')\nplt.title('Oceanic Currents Analysis using Volumetric Data')\nplt.xlabel('Ocean Region')\nplt.ylabel('Volumetric Flow Rate (m\u00b3/s)')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the areas that contain the center point of the bounding box to 0.61, and update the label for these areas to 'A new Label'.",
        "Input_image": "./test_dataset/Stack/Stack_11c05dd0610d987c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Ocean regions\noceans = ['Atlantic', 'Pacific', 'Indian', 'Southern']\n\n# Volumetric data in Cubic M/s\nsurface_current_A = [1000, 1200, 950, 1100]\nsurface_current_B = [800, 900, 750, 850]\nsubsurface_current_X = [600, 700, 550, 650]\n\n# Plot\nfig, ax = plt.subplots()\n\nax.stackplot(oceans, surface_current_A, surface_current_B, subsurface_current_X, \nlabels=['Surface Current A','Surface Current B', 'Subsurface Current X'])\n\nfor i, area in enumerate(ax.collections):\n    if i == 1:  # Surface Current B\n        area.set_alpha(0.61)\n        area.set_label('A new Label')\n\nax.legend(loc='upper left')\nplt.title('Oceanic Currents Analysis using Volumetric Data')\nplt.xlabel('Ocean Region')\nplt.ylabel('Volumetric Flow Rate (m\u00b3/s)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_11c05dd0610d987c/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_11c05dd0610d987c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_11c05dd0610d987c/figure.png"
    },
    {
        "id": "Stack_c261832050d1c101",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define the data for the plot\nseasons = ['Spring', 'Summer', 'Autumn', 'Winter']\ndepth_0_200 = [20, 22, 19, 18]\ndepth_200_500 = [15, 17, 14, 13]\ndepth_500_1000 = [10, 12, 9, 8]\ndepth_1000_2000 = [5, 7, 4, 3]\ndepth_2000_4000 = [3, 4, 2, 1]\n\n# Create the stackplot\nplt.figure(figsize=(10, 6))\nplt.stackplot(seasons, depth_0_200, depth_200_500, depth_500_1000, depth_1000_2000, depth_2000_4000, labels=['0-200m','200-500m','500-1000m','1000-2000m','2000-4000m'])\nplt.legend(loc='upper left')\nplt.title('Seasonal variations in ocean temperature across different depths in the Pacific Ocean')\nplt.xlabel('Seasons')\nplt.ylabel('Temperature (\u00b0C)')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the areas that contain the center point of the bounding box to 0.97. Additionally, set the snap state to False for those same areas.",
        "Input_image": "./test_dataset/Stack/Stack_c261832050d1c101/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Define the data for the plot\nseasons = ['Spring', 'Summer', 'Autumn', 'Winter']\ndepth_0_200 = [20, 22, 19, 18]\ndepth_200_500 = [15, 17, 14, 13]\ndepth_500_1000 = [10, 12, 9, 8]\ndepth_1000_2000 = [5, 7, 4, 3]\ndepth_2000_4000 = [3, 4, 2, 1]\n\n# Create the stackplot\nplt.figure(figsize=(10, 6))\nplt.stackplot(seasons, depth_0_200, depth_200_500, depth_500_1000, depth_1000_2000, depth_2000_4000, labels=['0-200m','200-500m','500-1000m','1000-2000m','2000-4000m'])\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # 500-1000m depth\n        area.set_alpha(0.97)\n        area.set_snap(False)\nplt.legend(loc='upper left')\nplt.title('Seasonal variations in ocean temperature across different depths in the Pacific Ocean')\nplt.xlabel('Seasons')\nplt.ylabel('Temperature (\u00b0C)')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_c261832050d1c101/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_c261832050d1c101/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_c261832050d1c101/figure.png"
    },
    {
        "id": "Stack_365ff98a69a1841a",
        "Input_code": "import matplotlib.pyplot as plt\n\n# List of industries\nindustries = ['Education', 'Healthcare', 'Technology', 'Manufacturing', 'Retail']\n\n# Corresponding unemployment rate values\nunemployment_rate = [6.5, 5.8, 4.2, 7.3, 8.1]\n\n# Corresponding income inequality index values\nincome_inequality_index = [0.15, 0.25, 0.45, 0.35, 0.6]\n\n# Creating stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(industries, unemployment_rate, income_inequality_index, labels=['Unemployment Rate', 'Income Inequality Index'], colors=['blue', 'orange'])\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Setting labels for the axes\nplt.xlabel('Industries')\nplt.ylabel('Percentage/Index')\n\n# Setting title for the plot\nplt.title('Stack Plot of Unemployment Rate and Income Inequality Index Across Different Industries')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "For the area that contains the center point of the bounding box, set its visibility to False. For the same points, adjust the z-order of the area to 9.",
        "Input_image": "./test_dataset/Stack/Stack_365ff98a69a1841a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\nfrom random import choice\n\n# List of industries\nindustries = ['Education', 'Healthcare', 'Technology', 'Manufacturing', 'Retail']\n\n# Corresponding unemployment rate values\nunemployment_rate = [6.5, 5.8, 4.2, 7.3, 8.1]\n\n# Corresponding income inequality index values\nincome_inequality_index = [0.15, 0.25, 0.45, 0.35, 0.6]\n\n# Creating stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(industries, unemployment_rate, income_inequality_index, labels=['Unemployment Rate', 'Income Inequality Index'], colors=['blue', 'orange'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Income Inequality Index's stack\n        area.set_visible(False)\n        area.set_zorder(9)\n        \n# Adding legend\nplt.legend(loc='upper left')\n\n# Setting labels for the axes\nplt.xlabel('Industries')\nplt.ylabel('Percentage/Index')\n\n# Setting title for the plot\nplt.title('Stack Plot of Unemployment Rate and Income Inequality Index Across Different Industries')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_365ff98a69a1841a/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_365ff98a69a1841a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_365ff98a69a1841a/figure.png"
    },
    {
        "id": "Stack_dc5a7c90a221431c",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ngalactic_longitude = [30, 60, 90, 120, 150]\nspiral_arms = [2.5, 3.0, 3.5, 4.0, 4.5]\ngalactic_center = [5.5, 6.0, 6.5, 7.0, 7.5]\ninterstellar_space = [1.0, 1.5, 2.0, 2.5, 3.0]\n\nlabels = ['Spiral Arms', 'Galactic Center', 'Interstellar Space']\n\n# Create the stackplot\nplt.figure(figsize=(10,7)) \nplt.stackplot(galactic_longitude, spiral_arms, galactic_center, interstellar_space, labels=labels)\n\nplt.xlabel('Galactic Longitude (degrees)')\nplt.ylabel('Gas Amount (10^6 solar masses)')\nplt.title('Galactic Gas Cloud Formation Analysis')\nplt.legend(loc='upper left')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the z-order of the area that contains the center point of the bounding box to 6, and add an edge whose color is black around that area.",
        "Input_image": "./test_dataset/Stack/Stack_dc5a7c90a221431c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ngalactic_longitude = [30, 60, 90, 120, 150]\nspiral_arms = [2.5, 3.0, 3.5, 4.0, 4.5]\ngalactic_center = [5.5, 6.0, 6.5, 7.0, 7.5]\ninterstellar_space = [1.0, 1.5, 2.0, 2.5, 3.0]\n\nlabels = ['Spiral Arms', 'Galactic Center', 'Interstellar Space']\n\n# Create the stackplot\nplt.figure(figsize=(10,7)) \nstacks=plt.stackplot(galactic_longitude, spiral_arms, galactic_center, interstellar_space, labels=labels)\nfor idx,stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_zorder(6)\n        stack.set_edgecolor('black')\nplt.xlabel('Galactic Longitude (degrees)')\nplt.ylabel('Gas Amount (10^6 solar masses)')\nplt.title('Galactic Gas Cloud Formation Analysis')\nplt.legend(loc='upper left')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_dc5a7c90a221431c/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_dc5a7c90a221431c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_dc5a7c90a221431c/figure.png"
    },
    {
        "id": "Stack_b3c33a9d011879bb",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\n\n# Define distance ranges and number of clusters\ndistance_ranges = ['0-100', '100-300', '300-600', '600-1000', '1000-1500']\nnum_clusters = [120, 80, 60, 40, 20]\n\n# Convert number of clusters list to 2D list for stackplot function\nnum_clusters = [[i] for i in num_clusters]\n\n# Define colors for each distance range\ncolors = ['purple', 'blue', 'green', 'yellow', 'red']\n\n# Generate the stack plot\nplt.stackplot(distance_ranges, num_clusters, labels=distance_ranges, colors=colors)\n\n# Define labels and title\nplt.xlabel('Distance from Earth (Mpc)')\nplt.ylabel('Number of Galaxy Clusters')\nplt.title('Galaxy Clusters Distribution in the Observable Universe')\n\n# Display the legend\nplt.legend(loc='upper right')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the filled area that contains the center point of the bounding box to #d358f5, and set the hatch pattern for that area to '|'.",
        "Input_image": "./test_dataset/Stack/Stack_b3c33a9d011879bb/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Define distance ranges and number of clusters\ndistance_ranges = ['0-100', '100-300', '300-600', '600-1000', '1000-1500']\nnum_clusters = [120, 80, 60, 40, 20]\n\n# Convert number of clusters list to 2D list for stackplot function\nnum_clusters = [[i] for i in num_clusters]\n\n# Define colors for each distance range\ncolors = ['purple', 'blue', 'green', 'yellow', 'red']\n\n# Generate the stack plot\nstacks = plt.stackplot(distance_ranges, num_clusters, labels=distance_ranges, colors=colors)\n\n# Modify the selected stacks\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_facecolor('#d358f5')\n        stack.set_hatch('|')\n\n# Define labels and title\nplt.xlabel('Distance from Earth (Mpc)')\nplt.ylabel('Number of Galaxy Clusters')\nplt.title('Galaxy Clusters Distribution in the Observable Universe')\n\n# Display the legend\nplt.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_b3c33a9d011879bb/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b3c33a9d011879bb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b3c33a9d011879bb/figure.png"
    },
    {
        "id": "Stack_1d8ac0c4089cfef4",
        "Input_code": "import matplotlib.pyplot as plt\n\n# specify depth levels\ndepth_levels = ['10m', '20m', '30m', '40m']\n\n# specify the abundance of each coral species at each depth level\ncoral_species_A = [15, 10, 5, 2]\ncoral_species_B = [8, 12, 6, 4]\ncoral_species_C = [5, 3, 2, 1]\n\n# create a stackplot\nplt.stackplot(depth_levels, coral_species_A, coral_species_B, coral_species_C, labels=['Coral Species A','Coral Species B','Coral Species C'])\n\n# define the plot title, x-label, and y-label\nplt.title('Biodiversity Distribution of Different Coral Species')\nplt.xlabel('Depth Levels')\nplt.ylabel('Abundance')\n\n# add a legend\nplt.legend(loc='upper right')\n\n# display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the rasterization setting of the areas that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Stack/Stack_1d8ac0c4089cfef4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# specify depth levels\ndepth_levels = ['10m', '20m', '30m', '40m']\n\n# specify the abundance of each coral species at each depth level\ncoral_species_A = [15, 10, 5, 2]\ncoral_species_B = [8, 12, 6, 4]\ncoral_species_C = [5, 3, 2, 1]\n\n# create a stackplot\nplt.stackplot(depth_levels, coral_species_A, coral_species_B, coral_species_C, labels=['Coral Species A','Coral Species B','Coral Species C'])\n\n# define the plot title, x-label, and y-label\nplt.title('Biodiversity Distribution of Different Coral Species')\nplt.xlabel('Depth Levels')\nplt.ylabel('Abundance')\n\n# add a legend\nplt.legend(loc='upper right')\n\n# set rasterized state of the object corresponding to the Target_object to False\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Coral Species B's stack\n        area.set_rasterized(False)\n\n# display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_1d8ac0c4089cfef4/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_1d8ac0c4089cfef4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_1d8ac0c4089cfef4/figure.png"
    },
    {
        "id": "Stack_f96e183a1dfad221",
        "Input_code": "import matplotlib.pyplot as plt\n\ndays = [1, 2, 3, 4, 5]\nstudy_hours = [7, 8, 6, 11, 7]\nplaying_hours = [8, 5, 7, 8, 13]\n\nplt.stackplot(days, study_hours, playing_hours, labels=['Study Hours', 'Playing Hours'])\nplt.legend(loc='upper left')\n\nplt.title('Distribution of Study and Playing Hours Over Five Days')\nplt.xlabel('Days')\nplt.ylabel('Hours')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the area that contains the center point of the bounding box to True, and change the line color of that area to #7b4156.",
        "Input_image": "./test_dataset/Stack/Stack_f96e183a1dfad221/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\ndays = [1, 2, 3, 4, 5]\nstudy_hours = [7, 8, 6, 11, 7]\nplaying_hours = [8, 5, 7, 8, 13]\n\nplt.stackplot(days, study_hours, playing_hours, labels=['Study Hours', 'Playing Hours'])\nfor i, area in enumerate(plt.gca().collections):\n    if i == 0:  # Study Hours' stack\n        area.set_clip_on(True)\n        area.set_edgecolor('#7b4156')\nplt.legend(loc='upper left')\n\nplt.title('Distribution of Study and Playing Hours Over Five Days')\nplt.xlabel('Days')\nplt.ylabel('Hours')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_f96e183a1dfad221/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_f96e183a1dfad221/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_f96e183a1dfad221/figure.png"
    },
    {
        "id": "Stack_53445ad8dbb6ffdb",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Clusters\nclusters = [1, 2, 3]\n\n# Data Points\nblue_giants = [45, 60, 30]\nred_giants = [35, 25, 45]\nwhite_dwarfs = [20, 15, 25]\n\n# Plot\nfig, ax = plt.subplots()\n\nax.stackplot(clusters, blue_giants, red_giants, white_dwarfs, labels=['Blue Giants','Red Giants','White Dwarfs'], alpha=0.7)\n\n# Labeling\nplt.title('Density mapping of Galactic Clusters based on stellar types')\nplt.xlabel('Clusters (1, 2, 3)')\nplt.ylabel('Density of Clusters')\n\n# Set the legend\nplt.legend(loc='upper left')\n\n# Display the stack plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the label of the areas that contain the center point of the bounding box to 'A new Label'. Additionally, adjust the transform of these areas to align with the data coordinate system.",
        "Input_image": "./test_dataset/Stack/Stack_53445ad8dbb6ffdb/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Clusters\nclusters = [1, 2, 3]\n\n# Data Points\nblue_giants = [45, 60, 30]\nred_giants = [35, 25, 45]\nwhite_dwarfs = [20, 15, 25]\n\n# Plot\nfig, ax = plt.subplots()\n\nax.stackplot(clusters, blue_giants, red_giants, white_dwarfs, labels=['Blue Giants','A new Label','White Dwarfs'], alpha=0.7)\n\n# Labeling\nplt.title('Density mapping of Galactic Clusters based on stellar types')\nplt.xlabel('Clusters (1, 2, 3)')\nplt.ylabel('Density of Clusters')\n\n# Set the legend\nplt.legend(loc='upper left')\n\n# Apply transform to the specific stack\nfor i, area in enumerate(ax.collections):\n    if i == 1:  # Red Giants' stack\n        area.set_transform(ax.transData)\n\n# Display the stack plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_53445ad8dbb6ffdb/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_53445ad8dbb6ffdb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_53445ad8dbb6ffdb/figure.png"
    },
    {
        "id": "Stack_9ae5a17d50220d06",
        "Input_code": "import matplotlib.pyplot as plt\n\ndays = [\"Day1\", \"Day2\", \"Day3\", \"Day4\", \"Day5\"]\nstudy_hours = [7, 8, 6, 11, 7]\nplaying_hours = [8, 5, 7, 8, 13]\n\n# Create stackplot\nplt.stackplot(days, study_hours, playing_hours, labels=['Study_hours','Playing_hours'])\n\nplt.legend(loc='upper left')\nplt.title('Distribution of Study and Playing Hours Over Five Days')\nplt.xlabel('Days')\nplt.ylabel('Hours')\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the areas containing the center point of the bounding box to the defined region starting from the top-left corner at (34, 117), with a width of 388 and a height of 175, using `matplotlib.transforms.Bbox`. Also, apply a 'dashdot' linestyle to these areas.",
        "Input_image": "./test_dataset/Stack/Stack_9ae5a17d50220d06/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\ndays = [\"Day1\", \"Day2\", \"Day3\", \"Day4\", \"Day5\"]\nstudy_hours = [7, 8, 6, 11, 7]\nplaying_hours = [8, 5, 7, 8, 13]\n\n# Create stackplot\nplt.stackplot(days, study_hours, playing_hours, labels=['Study_hours','Playing_hours'])\n\nclip_box = Bbox.from_bounds(34, 117, 388, 175)\nfor i, area in enumerate(plt.gca().collections):\n    if i == 0:  # Study_hours stack\n        area.set_clip_box(clip_box)\n        area.set_linestyle('dashdot')\n\nplt.legend(loc='upper left')\nplt.title('Distribution of Study and Playing Hours Over Five Days')\nplt.xlabel('Days')\nplt.ylabel('Hours')\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_9ae5a17d50220d06/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_9ae5a17d50220d06/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_9ae5a17d50220d06/figure.png"
    },
    {
        "id": "Stack_42a68039396529e4",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Survey Participants\nparticipants = ['Participant 1', 'Participant 2', 'Participant 3', 'Participant 4', 'Participant 5']\n# Cat owners' happiness levels\ncat_owners_happiness = [7, 5, 8, 6, 7]\n# Dog owners' happiness levels\ndog_owners_happiness = [9, 8, 7, 6, 8]\n\nfig, ax = plt.subplots()\n\nax.stackplot(participants, cat_owners_happiness, dog_owners_happiness, labels=['Cat Owners','Dog Owners'], colors=['blue', 'orange'])\nax.legend(loc='upper left')\nplt.xlabel(\"Survey Participants\")\nplt.ylabel(\"Happiness Levels\")\nplt.title(\"Happiness stack plot of Cat owners vs Dog owners\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the filled area that contains the center point of the bounding box to 0.5399. Additionally, set the edge linewidth of this area to 2.27 and change its color to #68f83d.",
        "Input_image": "./test_dataset/Stack/Stack_42a68039396529e4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Survey Participants\nparticipants = ['Participant 1', 'Participant 2', 'Participant 3', 'Participant 4', 'Participant 5']\n# Cat owners' happiness levels\ncat_owners_happiness = [7, 5, 8, 6, 7]\n# Dog owners' happiness levels\ndog_owners_happiness = [9, 8, 7, 6, 8]\n\nfig, ax = plt.subplots()\n\nstacks = ax.stackplot(participants, cat_owners_happiness, dog_owners_happiness, labels=['Cat Owners','Dog Owners'], colors=['blue', 'orange'])\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_alpha(0.5398669002263616)\n        stack.set_edgecolor('#68f83d')\n        stack.set_linewidth(2.26575186492379)\nax.legend(loc='upper left')\nplt.xlabel(\"Survey Participants\")\nplt.ylabel(\"Happiness Levels\")\nplt.title(\"Happiness stack plot of Cat owners vs Dog owners\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_42a68039396529e4/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_42a68039396529e4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_42a68039396529e4/figure.png"
    },
    {
        "id": "Stack_ce155e7a826c3305",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\ndistances = ['0 km', '5 km', '10 km']\n\npeak_A = {\n    \"Fine Ash\": [100000, 50000, 20000],\n    \"Medium Ash\": [75000, 40000, 15000],\n    \"Coarse Ash\": [50000, 25000, 10000]\n}\npeak_B = {\n    \"Fine Ash\": [120000, 60000, 25000],\n    \"Medium Ash\": [80000, 45000, 18000],\n    \"Coarse Ash\": [60000, 30000, 37000]\n}\npeak_C = {\n    \"Fine Ash\": [90000, 45000, 18000],\n    \"Medium Ash\": [70000, 35000, 14000],\n    \"Coarse Ash\": [40000, 20000, 8000]\n}\n\nfig, ax = plt.subplots()\n\nax.stackplot(distances, peak_A.values(), labels=peak_A.keys(), alpha=0.5)\nax.legend(title='Peak A - Ash size', loc='upper left')\n\nax.stackplot(distances, peak_B.values(), labels=peak_B.keys(), alpha=0.5)\nax.legend(title='Peak B - Ash size', loc='upper left')\n\nax.stackplot(distances, peak_C.values(), labels=peak_C.keys(), alpha=0.5)\nax.legend(title='Peak C - Ash size', loc='upper left')\n\nax.set_title('Distribution of Volcanic Ash Particles')\nax.set_xlabel('Distance from Eruption Center (km)')\nax.set_ylabel('Cumulative Volume of Ash Particles (cubic meters)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #98465a, and update the hatch pattern for that area to 'x'.",
        "Input_image": "./test_dataset/Stack/Stack_ce155e7a826c3305/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\ndistances = ['0 km', '5 km', '10 km']\n\npeak_A = {\n    \"Fine Ash\": [100000, 50000, 20000],\n    \"Medium Ash\": [75000, 40000, 15000],\n    \"Coarse Ash\": [50000, 25000, 10000]\n}\npeak_B = {\n    \"Fine Ash\": [120000, 60000, 25000],\n    \"Medium Ash\": [80000, 45000, 18000],\n    \"Coarse Ash\": [60000, 30000, 37000]\n}\npeak_C = {\n    \"Fine Ash\": [90000, 45000, 18000],\n    \"Medium Ash\": [70000, 35000, 14000],\n    \"Coarse Ash\": [40000, 20000, 8000]\n}\n\nfig, ax = plt.subplots()\n\nstacks_A = ax.stackplot(distances, peak_A.values(), labels=peak_A.keys(), alpha=0.5)\nax.legend(title='Peak A - Ash size', loc='upper left')\n\nstacks_B = ax.stackplot(distances, peak_B.values(), labels=peak_B.keys(), alpha=0.5)\nax.legend(title='Peak B - Ash size', loc='upper left')\n\nstacks_C = ax.stackplot(distances, peak_C.values(), labels=peak_C.keys(), alpha=0.5)\nax.legend(title='Peak C - Ash size', loc='upper left')\n\nfor idx, stack in enumerate(stacks_C):\n    if idx in [0]:#The index of Fine Ash\n        stack.set_facecolor('#98465a')\n        stack.set_hatch('x')\n\nax.set_title('Distribution of Volcanic Ash Particles')\nax.set_xlabel('Distance from Eruption Center (km)')\nax.set_ylabel('Cumulative Volume of Ash Particles (cubic meters)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "7",
        "Test_image": "./test_dataset/Stack/Stack_ce155e7a826c3305/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_ce155e7a826c3305/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_ce155e7a826c3305/figure.png"
    },
    {
        "id": "Stack_646b4df22386dea5",
        "Input_code": "import matplotlib.pyplot as plt\n\ntime_intervals = ['0-10 mins', '10-20 mins', '20-30 mins', '30-40 mins', '40-50 mins']\n\ncells_G1_Phase = [20, 18, 16, 14, 12]\ncells_S_Phase = [15, 17, 19, 18, 20]\ncells_G2_Phase = [10, 12, 14, 16, 18]\ncells_Prophase = [5, 6, 7, 8, 9]\ncells_Metaphase = [3, 5, 6, 7, 8]\ncells_Anaphase = [2, 3, 4, 5, 6]\ncells_Telophase = [1, 2, 3, 4, 5]\ncells_Cytokinesis = [0, 1, 2, 3, 4]\n\nplt.stackplot(time_intervals, cells_G1_Phase, cells_S_Phase, cells_G2_Phase, cells_Prophase, cells_Metaphase, cells_Anaphase, cells_Telophase, cells_Cytokinesis, labels=['G1 Phase','S Phase','G2 Phase','Prophase', 'Metaphase', 'Anaphase', 'Telophase', 'Cytokinesis'])\n\nplt.legend(loc='upper left')\nplt.xlabel(\"Time Intervals (minutes)\")\nplt.ylabel(\"Number of Cells\")\nplt.title(\"Number of Cells at Different Phases of Cell Cycle Over Time\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the picker state of the areas that contain the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Stack/Stack_646b4df22386dea5/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\ntime_intervals = ['0-10 mins', '10-20 mins', '20-30 mins', '30-40 mins', '40-50 mins']\n\ncells_G1_Phase = [20, 18, 16, 14, 12]\ncells_S_Phase = [15, 17, 19, 18, 20]\ncells_G2_Phase = [10, 12, 14, 16, 18]\ncells_Prophase = [5, 6, 7, 8, 9]\ncells_Metaphase = [3, 5, 6, 7, 8]\ncells_Anaphase = [2, 3, 4, 5, 6]\ncells_Telophase = [1, 2, 3, 4, 5]\ncells_Cytokinesis = [0, 1, 2, 3, 4]\n\nplt.stackplot(time_intervals, cells_G1_Phase, cells_S_Phase, cells_G2_Phase, cells_Prophase, cells_Metaphase, cells_Anaphase, cells_Telophase, cells_Cytokinesis, labels=['G1 Phase','S Phase','G2 Phase','Prophase', 'Metaphase', 'Anaphase', 'Telophase', 'Cytokinesis'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # G2 Phase's stack\n        area.set_picker(True)\n\nplt.legend(loc='upper left')\nplt.xlabel(\"Time Intervals (minutes)\")\nplt.ylabel(\"Number of Cells\")\nplt.title(\"Number of Cells at Different Phases of Cell Cycle Over Time\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_646b4df22386dea5/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_646b4df22386dea5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_646b4df22386dea5/figure.png"
    },
    {
        "id": "Stack_b7f2b69f5be369a6",
        "Input_code": "import matplotlib.pyplot as plt\n\ndecades = ['1950s', '1960s', '1970s', '1980s', '1990s', '2000s']\n\nvintage = [30, 20, 10, 5, 10, 15]\nglamorous = [20, 40, 30, 30, 40, 30]\ncasual = [10, 30, 40, 10, 20, 20]\nchic = [40, 10, 20, 55, 30, 35]\n\nplt.figure(figsize=(10,6))\n\nplt.stackplot(decades, vintage, glamorous, casual, chic,\n              labels=['Vintage', 'Glamorous', 'Casual', 'Chic'],\n              colors=['#6d904f', '#fc4f30', '#008fd5', '#e5ae38'], alpha=0.7)\n\nplt.legend(loc='upper left')\n\nplt.title('Fashion Trends over Six Decades')\nplt.xlabel('Decade')\nplt.ylabel('Percentage')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the z-order of the area that contains the center point of the bounding box to 1, and adjust its alpha blending to 0.4867.",
        "Input_image": "./test_dataset/Stack/Stack_b7f2b69f5be369a6/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\ndecades = ['1950s', '1960s', '1970s', '1980s', '1990s', '2000s']\n\nvintage = [30, 20, 10, 5, 10, 15]\nglamorous = [20, 40, 30, 30, 40, 30]\ncasual = [10, 30, 40, 10, 20, 20]\nchic = [40, 10, 20, 55, 30, 35]\n\nplt.figure(figsize=(10,6))\n\nstacks = plt.stackplot(decades, vintage, glamorous, casual, chic,\n              labels=['Vintage', 'Glamorous', 'Casual', 'Chic'],\n              colors=['#6d904f', '#fc4f30', '#008fd5', '#e5ae38'], alpha=0.7)\n\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_zorder(1)\n        stack.set_alpha(0.48666764788900047)\n\nplt.legend(loc='upper left')\n\nplt.title('Fashion Trends over Six Decades')\nplt.xlabel('Decade')\nplt.ylabel('Percentage')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_b7f2b69f5be369a6/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b7f2b69f5be369a6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b7f2b69f5be369a6/figure.png"
    },
    {
        "id": "Stack_eaf00d8c42592988",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nmonths = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n\n# Water flow data for each basin\nbasin_X = [100,120,110,130,140,135,150,155,140,130,125,110]\nbasin_Y = [80,85,90,95,100,105,110,115,120,125,130,135]\nbasin_Z = [70,75,80,85,90,95,100,105,110,115,120,125]\n\nplt.figure(figsize=[10,5])\nplt.stackplot(months, basin_X, basin_Y, basin_Z, labels=['Basin X','Basin Y','Basin Z'])\nplt.legend(loc='upper left')\nplt.title('Monthly Average Water Flow Rates in River Basins X, Y, Z')\nplt.xlabel('Month')\nplt.ylabel('Water flow rate (m\u00b3/s)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the area that contains the center point of the bounding box to #f78037. Additionally, set the face color of the same area to #30926f.",
        "Input_image": "./test_dataset/Stack/Stack_eaf00d8c42592988/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nmonths = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n\n# Water flow data for each basin\nbasin_X = [100,120,110,130,140,135,150,155,140,130,125,110]\nbasin_Y = [80,85,90,95,100,105,110,115,120,125,130,135]\nbasin_Z = [70,75,80,85,90,95,100,105,110,115,120,125]\n\nplt.figure(figsize=[10,5])\nplt.stackplot(months, basin_X, basin_Y, basin_Z, labels=['Basin X','Basin Y','Basin Z'])\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Basin Y's stack\n        area.set_color('#f78037')\n        area.set_facecolor('#30926f')\nplt.legend(loc='upper left')\nplt.title('Monthly Average Water Flow Rates in River Basins X, Y, Z')\nplt.xlabel('Month')\nplt.ylabel('Water flow rate (m\u00b3/s)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_eaf00d8c42592988/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_eaf00d8c42592988/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_eaf00d8c42592988/figure.png"
    },
    {
        "id": "Stack_b582bd2bbe356c2f",
        "Input_code": "import matplotlib.pyplot as plt\n\n# number of days\ndays = range(1, 31)\n\n# coffee consumption data\ncoffee = [3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2]\n\n# productivity levels data\nproductivity = [5, 4, 7, 3, 6, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4]\n\n# create the stackplot\nplt.stackplot(days, coffee, productivity, labels=['Coffee', 'Productivity'], colors=['#ff7f0e', '#1f77b4'])\n\nplt.legend(loc='upper left')\n\nplt.title(\"Coffee Consumption vs Productivity\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Number of Cups/ Productivity Level\")\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the area that contains the center point of the bounding box to True. For those same points, add a stroke to the area with a linewidth of 4.78 and a foreground color of #01812a.",
        "Input_image": "./test_dataset/Stack/Stack_b582bd2bbe356c2f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# number of days\ndays = range(1, 31)\n\n# coffee consumption data\ncoffee = [3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2, 4, 2, 3, 4, 5, 3, 2]\n\n# productivity levels data\nproductivity = [5, 4, 7, 3, 6, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4, 7, 3, 5, 7, 8, 6, 4]\n\n# create the stackplot\nplt.stackplot(days, coffee, productivity, labels=['Coffee', 'Productivity'], colors=['#ff7f0e', '#1f77b4'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 0:  # Coffee's stack\n        area.set_animated(True)\n        stroke_effect = path_effects.withStroke(linewidth=4.7815023487593695, foreground='#01812a')\n        area.set_path_effects([stroke_effect])\n\nplt.legend(loc='upper left')\n\nplt.title(\"Coffee Consumption vs Productivity\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Number of Cups/ Productivity Level\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_b582bd2bbe356c2f/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b582bd2bbe356c2f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b582bd2bbe356c2f/figure.png"
    },
    {
        "id": "Stack_5a7d19bf25d98861",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Depth measurements in meters\npoint_A_depths = [200, 250, 300, 275, 320]\npoint_B_depths = [150, 180, 200, 210, 190]\npoint_C_depths = [300, 320, 350, 330, 310]\npoint_D_depths = [180, 200, 220, 210, 190]\npoint_E_depths = [250, 280, 300, 290, 270]\n\n# The order of the depth measurements\ndepth_order = range(1, len(point_A_depths) + 1)\n\n# Create a new figure\nplt.figure()\n\n# Create a stack plot\nplt.stackplot(depth_order, point_A_depths, point_B_depths, point_C_depths, point_D_depths, point_E_depths,\n              labels=['Point A', 'Point B', 'Point C', 'Point D', 'Point E'])\n\n# Set the title and labels\nplt.title(\"Ocean Depth Soundings along Marine Research Expedition\")\nplt.xlabel(\"Order of Depth Measurements\")\nplt.ylabel(\"Ocean Depths (meters)\")\n\n# Add a legend\nplt.legend(loc='upper left')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the linestyle of the area that contains the center point of the bounding box to 'dashdot' and color to 'yellow' and enable the rasterized state for this area.",
        "Input_image": "./test_dataset/Stack/Stack_5a7d19bf25d98861/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Depth measurements in meters\npoint_A_depths = [200, 250, 300, 275, 320]\npoint_B_depths = [150, 180, 200, 210, 190]\npoint_C_depths = [300, 320, 350, 330, 310]\npoint_D_depths = [180, 200, 220, 210, 190]\npoint_E_depths = [250, 280, 300, 290, 270]\n\n# The order of the depth measurements\ndepth_order = range(1, len(point_A_depths) + 1)\n\n# Create a new figure\nplt.figure()\n\n# Create a stack plot\nstacks = plt.stackplot(depth_order, point_A_depths, point_B_depths, point_C_depths, point_D_depths, point_E_depths,\n              labels=['Point A', 'Point B', 'Point C', 'Point D', 'Point E'])\n\n# Set the linestyle and rasterized state for the target object\nfor i, stack in enumerate(stacks):\n    if i == 2:  # Point C's stack\n        stack.set_linestyle('dashdot')\n        stack.set_edgecolor('yellow')\n        stack.set_rasterized(True)\n\n# Set the title and labels\nplt.title(\"Ocean Depth Soundings along Marine Research Expedition\")\nplt.xlabel(\"Order of Depth Measurements\")\nplt.ylabel(\"Ocean Depths (meters)\")\n\n# Add a legend\nplt.legend(loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_5a7d19bf25d98861/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_5a7d19bf25d98861/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_5a7d19bf25d98861/figure.png"
    },
    {
        "id": "Stack_bfe60822057bcb22",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Year data (X-axis)\nyears = [2016, 2017, 2018, 2019, 2020]\n\n# Genre revenues data in million dollars (Y-axis)\naction_revenues = [750, 850, 900, 950, 800]\ncomedy_revenues = [500, 600, 700, 750, 600]\ndrama_revenues  = [400, 450, 550, 600, 450]\n\n# Create stackplot\nplt.stackplot(years, action_revenues, comedy_revenues, drama_revenues, \n              labels=['Action', 'Comedy', 'Drama'], \n              colors=['blue', 'orange', 'green'])\n\n# Define labels and titles\nplt.xlabel('Years')\nplt.ylabel('Revenues (in millions)')\nplt.title('Annual Trend of Box Office Revenues (2016-2020)')\n\n# Include legend\nplt.legend(loc='upper left')\n\n# Display the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the area that contains the center point of the bounding box to 0.5097. Additionally, set the edge linewidth of this area to 1.498 and change its color to #e5a4e4.",
        "Input_image": "./test_dataset/Stack/Stack_bfe60822057bcb22/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Year data (X-axis)\nyears = [2016, 2017, 2018, 2019, 2020]\n\n# Genre revenues data in million dollars (Y-axis)\naction_revenues = [750, 850, 900, 950, 800]\ncomedy_revenues = [500, 600, 700, 750, 600]\ndrama_revenues  = [400, 450, 550, 600, 450]\n\n# Create stackplot\nstacks = plt.stackplot(years, action_revenues, comedy_revenues, drama_revenues, \n              labels=['Action', 'Comedy', 'Drama'], \n              colors=['blue', 'orange', 'green'])\n\n# Modify the corresponding stack according to the instruction\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_alpha(0.509743097773627)\n        stack.set_edgecolor('#e5a4e4')\n        stack.set_linewidth(1.4975894935043736)\n\n# Define labels and titles\nplt.xlabel('Years')\nplt.ylabel('Revenues (in millions)')\nplt.title('Annual Trend of Box Office Revenues (2016-2020)')\n\n# Include legend\nplt.legend(loc='upper left')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_bfe60822057bcb22/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_bfe60822057bcb22/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_bfe60822057bcb22/figure.png"
    },
    {
        "id": "Stack_670878885ad0cbe5",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nphases = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4']\ntremors = [15, 0, 0, 0]\nash = [0, 25, 0, 0]\nlava = [0, 0, 20, 0]\npyroclastic = [0, 0, 0, 30]\n\n# Create stack plot\nplt.figure(figsize=(10, 6))\nplt.stackplot(phases, tremors, ash, lava, pyroclastic, labels=['Initial Tremors', 'Ash Emissions', 'Lava Flow', 'Pyroclastic Flow'])\n\n# Add legend and labels\nplt.legend(loc='upper left')\nplt.xlabel('Volcanic Phases')\nplt.ylabel('Number of Eruptions')\nplt.title('Volcano Eruption Simulation - Eruption Intensity Levels')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the fill areas that contain the center point of the bounding box to 0.6379, and change the hatch pattern of those fills to '/'.",
        "Input_image": "./test_dataset/Stack/Stack_670878885ad0cbe5/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nphases = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4']\ntremors = [15, 0, 0, 0]\nash = [0, 25, 0, 0]\nlava = [0, 0, 20, 0]\npyroclastic = [0, 0, 0, 30]\n\n# Create stack plot\nplt.figure(figsize=(10, 6))\nstacks = plt.stackplot(phases, tremors, ash, lava, pyroclastic, labels=['Initial Tremors', 'Ash Emissions', 'Lava Flow', 'Pyroclastic Flow'])\n\n# Modify the transparency and hatch pattern of the selected stack\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_alpha(0.6378529533321449)\n        stack.set_hatch('/')\n\n# Add legend and labels\nplt.legend(loc='upper left')\nplt.xlabel('Volcanic Phases')\nplt.ylabel('Number of Eruptions')\nplt.title('Volcano Eruption Simulation - Eruption Intensity Levels')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_670878885ad0cbe5/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_670878885ad0cbe5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_670878885ad0cbe5/figure.png"
    },
    {
        "id": "Stack_b2cf9a54029b9a53",
        "Input_code": "import matplotlib.pyplot as plt\n\n# years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# Carbon emissions from traditional vehicles\nemission_traditional = [500, 490, 480, 470, 460, 450, 440, 430, 420, 410, 400]\n\n# Carbon emissions from electric vehicles\nemission_electric = [20, 35, 50, 65, 80, 95, 110, 125, 140, 155, 170]\n\nplt.stackplot(years, emission_traditional, emission_electric, labels=['Traditional Vehicles','Electric Vehicles'])\n\nplt.legend(loc='upper right')\nplt.title('Carbon Emissions from Traditional and Electric Vehicles in a city (2010 - 2020)')\nplt.xlabel('Years')\nplt.ylabel('Carbon Emissions in metric tons')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the snap state to True for the area that contains the center point of the bounding box. For the same area, adjust the z-order to 11 and apply a shadow effect with an offset of (3.63, 3.81), using a shadow color blue.",
        "Input_image": "./test_dataset/Stack/Stack_b2cf9a54029b9a53/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# Carbon emissions from traditional vehicles\nemission_traditional = [500, 490, 480, 470, 460, 450, 440, 430, 420, 410, 400]\n\n# Carbon emissions from electric vehicles\nemission_electric = [20, 35, 50, 65, 80, 95, 110, 125, 140, 155, 170]\n\nplt.stackplot(years, emission_traditional, emission_electric, labels=['Traditional Vehicles','Electric Vehicles'])\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Electric Vehicles' stack\n        area.set_snap(True)\n        area.set_zorder(11)\n        shadow_color = 'blue'\n        area.set_path_effects([SimplePatchShadow(offset=(3.63, 3.81), shadow_rgbFace=shadow_color), Normal()])\n\nplt.legend(loc='upper right')\nplt.title('Carbon Emissions from Traditional and Electric Vehicles in a city (2010 - 2020)')\nplt.xlabel('Years')\nplt.ylabel('Carbon Emissions in metric tons')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_b2cf9a54029b9a53/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b2cf9a54029b9a53/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b2cf9a54029b9a53/figure.png"
    },
    {
        "id": "Stack_c75b74c7b6d400a9",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Days\ndays = [1, 2, 3, 4, 5]\n\n# Data\ngeeks1 = [1, 1, 2, 3, 5]\ngeeks2 = [0, 4, 2, 6, 8]\ngeeks3 = [1, 3, 5, 7, 9]\n\n# Stack plot\nplt.stackplot(days, geeks1, geeks2, geeks3, labels=['Geeks1', 'Geeks2', 'Geeks3'])\n\nplt.legend(loc='upper left')\n\n# Labels and title\nplt.xlabel(\"Days\")\nplt.ylabel(\"Units\")\nplt.title(\"Stack Plot of Geeks 1,2 & 3\")\n\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Apply a stroke to the area that contains the center point of the bounding box in the stacked chart. Use a linewidth of 2.59 and a foreground color of #11d9ef. Also, make sure to set the transform of this area to the pixel coordinate system.",
        "Input_image": "./test_dataset/Stack/Stack_c75b74c7b6d400a9/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\nimport matplotlib.transforms as transforms\n\n# Days\ndays = [1, 2, 3, 4, 5]\n\n# Data\ngeeks1 = [1, 1, 2, 3, 5]\ngeeks2 = [0, 4, 2, 6, 8]\ngeeks3 = [1, 3, 5, 7, 9]\n\n# Stack plot\nplt.stackplot(days, geeks1, geeks2, geeks3, labels=['Geeks1', 'Geeks2', 'Geeks3'])\n\nstroke_effect = path_effects.withStroke(linewidth=2.5939947033159925, foreground='#11d9ef')\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Geeks2's stack\n        area.set_path_effects([stroke_effect])\n        area.set_transform(transforms.IdentityTransform())\n\nplt.legend(loc='upper left')\n\n# Labels and title\nplt.xlabel(\"Days\")\nplt.ylabel(\"Units\")\nplt.title(\"Stack Plot of Geeks 1,2 & 3\")\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_c75b74c7b6d400a9/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_c75b74c7b6d400a9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_c75b74c7b6d400a9/figure.png"
    },
    {
        "id": "Stack_359c28bb0f3a1c13",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time intervals\ntime_intervals = ['6:00 AM', '12:00 PM', '6:00 PM', '12:00 AM']\n\n# Temperature distribution in each ocean layer\ntemp_surface_layer = [20,22,24,20]\ntemp_thermocline_layer = [18,16,14,16]\ntemp_deep_ocean_layer = [10,8,6,9]\ntemp_abyssal_layer = [4,3,2,3]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Creating the stack plot\nax.stackplot(time_intervals, temp_surface_layer, temp_thermocline_layer, \n             temp_deep_ocean_layer, temp_abyssal_layer, \n             labels=['Surface (0m-100m)','Thermocline (100m-500m)','Deep Ocean (500m-1000m)','Abyssal (>=1000m)'],\n             alpha=0.6)\n\n# Customizing the plot\nax.set_title('Temperature Distribution in Ocean Layers Over 24-Hour Period')\nax.set_xlabel('Time of Day')\nax.set_ylabel('Temperature (\u00b0C)')\nax.legend(loc='upper left')\n\n# Show graph\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge linewidth of the areas that contain the center point of the bounding box to 1.327 and update their color to #3efdc2.",
        "Input_image": "./test_dataset/Stack/Stack_359c28bb0f3a1c13/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Time intervals\ntime_intervals = ['6:00 AM', '12:00 PM', '6:00 PM', '12:00 AM']\n\n# Temperature distribution in each ocean layer\ntemp_surface_layer = [20,22,24,20]\ntemp_thermocline_layer = [18,16,14,16]\ntemp_deep_ocean_layer = [10,8,6,9]\ntemp_abyssal_layer = [4,3,2,3]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Creating the stack plot\nstacks = ax.stackplot(time_intervals, temp_surface_layer, temp_thermocline_layer, \n             temp_deep_ocean_layer, temp_abyssal_layer, \n             labels=['Surface (0m-100m)','Thermocline (100m-500m)','Deep Ocean (500m-1000m)','Abyssal (>=1000m)'],\n             alpha=0.6)\n\n# Modifying the stack plot\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_linewidth(1.326646234951491)\n        stack.set_edgecolor('#3efdc2')\n\n# Customizing the plot\nax.set_title('Temperature Distribution in Ocean Layers Over 24-Hour Period')\nax.set_xlabel('Time of Day')\nax.set_ylabel('Temperature (\u00b0C)')\nax.legend(loc='upper left')\n\n# Show graph\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_359c28bb0f3a1c13/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_359c28bb0f3a1c13/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_359c28bb0f3a1c13/figure.png"
    },
    {
        "id": "Stack_494dfb2d44769e0f",
        "Input_code": "import matplotlib.pyplot as plt\n\n# List of months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September']\n\n# Lists of vaccination rates for each country\ncountry_a = [5, 12, 20, 33, 48, 60, 68, 75, 80]\ncountry_b = [3, 6, 10, 18, 24, 38, 52, 65, 72]\ncountry_c = [12, 22, 30, 40, 55, 65, 75, 80, 85]\n\nplt.stackplot(months, country_a, country_b, country_c, labels=['Country A','Country B','Country C'])\n\n# Adding plot title and labels\nplt.title('COVID-19 Vaccination Rates by Country')\nplt.xlabel('Months')\nplt.ylabel('Vaccination Rate')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Showing the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the areas that contain the center point of the bounding box to True. Also, for the same points, make sure the rasterized state of the areas is set to True.",
        "Input_image": "./test_dataset/Stack/Stack_494dfb2d44769e0f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# List of months\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September']\n\n# Lists of vaccination rates for each country\ncountry_a = [5, 12, 20, 33, 48, 60, 68, 75, 80]\ncountry_b = [3, 6, 10, 18, 24, 38, 52, 65, 72]\ncountry_c = [12, 22, 30, 40, 55, 65, 75, 80, 85]\n\nplt.stackplot(months, country_a, country_b, country_c, labels=['Country A','Country B','Country C'])\n\n# Adding plot title and labels\nplt.title('COVID-19 Vaccination Rates by Country')\nplt.xlabel('Months')\nplt.ylabel('Vaccination Rate')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Modifying the animated and rasterized state of the target object\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Country B's stack\n        area.set_animated(True)\n        area.set_rasterized(True)\n\n# Showing the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_494dfb2d44769e0f/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_494dfb2d44769e0f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_494dfb2d44769e0f/figure.png"
    },
    {
        "id": "Stack_c8f56fb3d254eea3",
        "Input_code": "import matplotlib.pyplot as plt\n\n# define months\nmonths = ['June 2017', 'July 2017', 'August 2017', \n          'June 2018', 'July 2018', 'August 2018', \n          'June 2019', 'July 2019', 'August 2019', \n          'June 2020', 'July 2020', 'August 2020']\n\n# define rainfall data\nrainfall = [2.5, 1.8, 2.1, \n            3.2, 1.4, 1.7, \n            1.7, 2.5, 2.3, \n            2.8, 1.2, 1.5]\n\n# define umbrella sales data\numbrella_sales = [60, 75, 80, \n                  50, 70, 85, \n                  70, 65, 90, \n                  55, 85, 95]\n\n# define labels\nlabels = ['Rainfall(Inches)', 'Umbrella Sales']\n\n# create stack plot\nplt.stackplot(months, rainfall, umbrella_sales, labels=labels)\nplt.legend(loc='upper left')\nplt.title('Monthly Rainfall vs. Summer Umbrella Sales (2017 - 2020)')\nplt.xlabel('Month')\nplt.ylabel('Values')\n\n# rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the area that contains the center point of the bounding box to 0.3804, and set its z-order to 4.",
        "Input_image": "./test_dataset/Stack/Stack_c8f56fb3d254eea3/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# define months\nmonths = ['June 2017', 'July 2017', 'August 2017', \n          'June 2018', 'July 2018', 'August 2018', \n          'June 2019', 'July 2019', 'August 2019', \n          'June 2020', 'July 2020', 'August 2020']\n\n# define rainfall data\nrainfall = [2.5, 1.8, 2.1, \n            3.2, 1.4, 1.7, \n            1.7, 2.5, 2.3, \n            2.8, 1.2, 1.5]\n\n# define umbrella sales data\numbrella_sales = [60, 75, 80, \n                  50, 70, 85, \n                  70, 65, 90, \n                  55, 85, 95]\n\n# define labels\nlabels = ['Rainfall(Inches)', 'Umbrella Sales']\n\n# create stack plot\nstacks = plt.stackplot(months, rainfall, umbrella_sales, labels=labels)\nfor idx, stack in enumerate(stacks):\n    if idx in [0]:\n        stack.set_alpha(0.3803539558613773)\n        stack.set_zorder(4)\nplt.legend(loc='upper left')\nplt.title('Monthly Rainfall vs. Summer Umbrella Sales (2017 - 2020)')\nplt.xlabel('Month')\nplt.ylabel('Values')\n\n# rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_c8f56fb3d254eea3/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_c8f56fb3d254eea3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_c8f56fb3d254eea3/figure.png"
    },
    {
        "id": "Stack_e483a3b7b7038b94",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define years\nyears = list(range(2010, 2021))\n\n# Define data for each dog breed\nbreed_1_data = [10, 9, 8, 7, 5, 6, 5, 4, 3, 4, 5]\nbreed_2_data = [8, 7, 6, 7, 8, 9, 10, 9, 8, 7, 6]\nbreed_3_data = [6, 7, 8, 8, 9, 8, 8, 8, 9, 10, 11]\nbreed_4_data = [9, 9, 8, 8, 7, 7, 6, 7, 7, 6, 5]\nbreed_5_data = [12, 13, 14, 15, 17, 18, 18, 19, 20, 20, 19]\n\n# Plot data\nplt.stackplot(years, breed_1_data, breed_2_data, breed_3_data, breed_4_data, breed_5_data, labels=['Breed 1', 'Breed 2', 'Breed 3', 'Breed 4', 'Breed 5'])\nplt.legend(loc='upper left')\n\n# Customize plot\nplt.title('Popularity of Top 5 Dog Breeds Over the Years')\nplt.xlabel('Years')\nplt.ylabel('Popularity Percentage')\n\n# Show plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the area that contains the center point of the bounding box to a bounding box defined by the coordinates (382, 263) with a width of 455 and a height of 806, following the matplotlib.transforms.Bbox pattern. Also, make sure to set the snap state of the same area to True.",
        "Input_image": "./test_dataset/Stack/Stack_e483a3b7b7038b94/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Define years\nyears = list(range(2010, 2021))\n\n# Define data for each dog breed\nbreed_1_data = [10, 9, 8, 7, 5, 6, 5, 4, 3, 4, 5]\nbreed_2_data = [8, 7, 6, 7, 8, 9, 10, 9, 8, 7, 6]\nbreed_3_data = [6, 7, 8, 8, 9, 8, 8, 8, 9, 10, 11]\nbreed_4_data = [9, 9, 8, 8, 7, 7, 6, 7, 7, 6, 5]\nbreed_5_data = [12, 13, 14, 15, 17, 18, 18, 19, 20, 20, 19]\n\n# Plot data\nplt.stackplot(years, breed_1_data, breed_2_data, breed_3_data, breed_4_data, breed_5_data, labels=['Breed 1', 'Breed 2', 'Breed 3', 'Breed 4', 'Breed 5'])\nplt.legend(loc='upper left')\n\n# Customize plot\nplt.title('Popularity of Top 5 Dog Breeds Over the Years')\nplt.xlabel('Years')\nplt.ylabel('Popularity Percentage')\n\n# Set clip box and snap state for a specific stack\nclip_box = Bbox.from_bounds(382, 263, 455, 806)\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Breed 3's stack\n        area.set_clip_box(clip_box)\n        area.set_snap(True)\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_e483a3b7b7038b94/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_e483a3b7b7038b94/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_e483a3b7b7038b94/figure.png"
    },
    {
        "id": "Stack_22aeb7202160717d",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Initialize data\nyears = np.array(range(2010, 2020))\ntemperature = np.array([-20, -19, -18, -17, -16, -15, -14, -13, -12, -11])\nspecies_a = np.array([50, 50, 49, 48, 47, 46, 45, 44, 43, 42])\nspecies_b = np.array([80, 78, 75, 73, 70, 68, 65, 63, 60, 57])\n\n# Create a figure and a set of subplots\nfig, ax1 = plt.subplots()\n\n# Plotting temperature\nax1.plot(years, temperature, color=\"black\", label=\"Temperature\")\nax1.set_xlabel(\"Year\")\nax1.set_ylabel(\"Temperature (\u00b0C)\")\nax1.tick_params('y')\n\n# Instantiate a second axes that shares the same x-axis\nax2 = ax1.twinx()\n\n# Plotting populations\nax2.stackplot(years, [species_a, species_b], labels=['Species A', 'Species B'], alpha=0.6)\nax2.set_ylabel(\"Population (in thousands)\")\nax2.tick_params('y')\n\n# Adding a legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the hatch pattern of the area that contains the center point of the bounding box to '*'. Additionally, update the edge's linestyle to 'solid' and set the color to #e647d9 for that same area.",
        "Input_image": "./test_dataset/Stack/Stack_22aeb7202160717d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Initialize data\nyears = np.array(range(2010, 2020))\ntemperature = np.array([-20, -19, -18, -17, -16, -15, -14, -13, -12, -11])\nspecies_a = np.array([50, 50, 49, 48, 47, 46, 45, 44, 43, 42])\nspecies_b = np.array([80, 78, 75, 73, 70, 68, 65, 63, 60, 57])\n\n# Create a figure and a set of subplots\nfig, ax1 = plt.subplots()\n\n# Plotting temperature\nax1.plot(years, temperature, color=\"black\", label=\"Temperature\")\nax1.set_xlabel(\"Year\")\nax1.set_ylabel(\"Temperature (\u00b0C)\")\nax1.tick_params('y')\n\n# Instantiate a second axes that shares the same x-axis\nax2 = ax1.twinx()\n\n# Plotting populations\nstacks = ax2.stackplot(years, [species_a, species_b], labels=['Species A', 'Species B'], alpha=0.6)\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_hatch('*')\n        stack.set_edgecolor('#e647d9')\n        stack.set_linestyle('solid')\nax2.set_ylabel(\"Population (in thousands)\")\nax2.tick_params('y')\n\n# Adding a legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_22aeb7202160717d/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_22aeb7202160717d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_22aeb7202160717d/figure.png"
    },
    {
        "id": "Stack_70e41b19c26decda",
        "Input_code": "import matplotlib.pyplot as plt\n\ncountries = ['Country A', 'Country B', 'Country C', 'Country D', 'Country E']\nsoccer = [20, 15, 10, 12, 8]\nbasketball = [8, 10, 5, 6, 7]\ncricket = [5, 3, 6, 8, 4]\ntennis = [2, 3, 4, 1, 5]\nbaseball = [3, 2, 1, 4, 1.5]\n\nplt.figure(figsize=(10,7))\n\nplt.stackplot(countries, soccer, basketball, cricket, tennis, baseball, \n              colors=['blue', 'orange', 'green', 'red', 'purple'], \n              labels=['Soccer', 'Basketball', 'Cricket', 'Tennis', 'Baseball'])\n\nplt.legend(loc='upper left')\nplt.title('Number of sports fanatics by country')\nplt.xlabel('Country')\nplt.ylabel('Number of sports fanatics (in millions)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the area that contains the center point of the bounding box defined by (x0, y0) as (217, 187) with a width of 655 and a height of 298, using the matplotlib.transforms.Bbox pattern. Also, apply a stroke to this area with a line width of 4.4935 and a foreground color of #58e236.",
        "Input_image": "./test_dataset/Stack/Stack_70e41b19c26decda/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\nimport matplotlib.patheffects as path_effects\n\ncountries = ['Country A', 'Country B', 'Country C', 'Country D', 'Country E']\nsoccer = [20, 15, 10, 12, 8]\nbasketball = [8, 10, 5, 6, 7]\ncricket = [5, 3, 6, 8, 4]\ntennis = [2, 3, 4, 1, 5]\nbaseball = [3, 2, 1, 4, 1.5]\n\nplt.figure(figsize=(10,7))\n\nplt.stackplot(countries, soccer, basketball, cricket, tennis, baseball, \n              colors=['blue', 'orange', 'green', 'red', 'purple'], \n              labels=['Soccer', 'Basketball', 'Cricket', 'Tennis', 'Baseball'])\n\nclip_box = Bbox.from_bounds(217, 187, 655, 298)\nstroke_effect = path_effects.withStroke(linewidth=4.493496157783772, foreground='#58e236')\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Cricket's stack\n        area.set_clip_box(clip_box)\n        area.set_path_effects([stroke_effect])\n\nplt.legend(loc='upper left')\nplt.title('Number of sports fanatics by country')\nplt.xlabel('Country')\nplt.ylabel('Number of sports fanatics (in millions)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_70e41b19c26decda/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_70e41b19c26decda/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_70e41b19c26decda/figure.png"
    },
    {
        "id": "Stack_96663d19a4bf4d04",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time intervals\ntime_intervals = [0, 100, 200, 300, 400, 500]\n\n# Neural activity intensities for each brain region\nfrontal_cortex = [0.5, 1.2, 2.0, 2.5, 2.8, 3.0]\nhippocampus = [0.3, 1.0, 1.8, 2.2, 2.6, 3.2]\namygdala = [0.2, 0.8, 1.5, 2.0, 2.3, 2.7]\n\n# Preparing the stack plot\nplt.stackplot(time_intervals, frontal_cortex, hippocampus, amygdala,\n              labels=['Frontal Cortex','Hippocampus','Amygdala'],\n              colors=['#6d904f','#fc4f30','#008fd5'])\n\n# Assigning labels and title\nplt.xlabel('Time Intervals (ms)')\nplt.ylabel('Neural Activity Intensity')\nplt.title('Neural Activity Mapping During Memory Recall Task')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Display plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the transparency of the fill in the area that contains the center point of the bounding box to 0.3336, and set its face color to #a7e997.",
        "Input_image": "./test_dataset/Stack/Stack_96663d19a4bf4d04/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Time intervals\ntime_intervals = [0, 100, 200, 300, 400, 500]\n\n# Neural activity intensities for each brain region\nfrontal_cortex = [0.5, 1.2, 2.0, 2.5, 2.8, 3.0]\nhippocampus = [0.3, 1.0, 1.8, 2.2, 2.6, 3.2]\namygdala = [0.2, 0.8, 1.5, 2.0, 2.3, 2.7]\n\n# Preparing the stack plot\nstacks = plt.stackplot(time_intervals, frontal_cortex, hippocampus, amygdala,\n              labels=['Frontal Cortex','Hippocampus','Amygdala'],\n              colors=['#6d904f','#fc4f30','#008fd5'])\n\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_alpha(0.3336186219845486)\n        stack.set_facecolor('#a7e997')\n\n# Assigning labels and title\nplt.xlabel('Time Intervals (ms)')\nplt.ylabel('Neural Activity Intensity')\nplt.title('Neural Activity Mapping During Memory Recall Task')\n\n# Adding legend\nplt.legend(loc='upper left')\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_96663d19a4bf4d04/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_96663d19a4bf4d04/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_96663d19a4bf4d04/figure.png"
    },
    {
        "id": "Stack_ef0a942096e65fec",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Our data:\nexpeditions = [1, 2, 3, 4]\nalien_creatures = [8, 5, 9, 6]\nlost_shipwrecks = [4, 2, 1, 3]\nancient_artefacts = [6, 4, 7, 5]\nmysterious_structures = [3, 1, 5, 2]\n\nplt.figure(figsize=[10, 5])\n\n# Plotting stackplot with desired colors:\nplt.stackplot(expeditions, alien_creatures, lost_shipwrecks, ancient_artefacts, mysterious_structures, \n              colors=['green', 'blue', 'orange', 'purple'])\n\n# Adding a legend:\nplt.legend(['Alien-like Creatures', 'Lost Shipwrecks', 'Ancient Arterfacts', 'Mysterious Structures'], loc='upper left')\n\nplt.title('Mysterious Discoveries Across Expeditions')\nplt.xlabel('Expeditions')\nplt.ylabel('No. of Discoveries')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the label of the area that contains the center point of the bounding box to 'A new Label'. Also, update the line style for that same area to ':' and color to black.",
        "Input_image": "./test_dataset/Stack/Stack_ef0a942096e65fec/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Our data:\nexpeditions = [1, 2, 3, 4]\nalien_creatures = [8, 5, 9, 6]\nlost_shipwrecks = [4, 2, 1, 3]\nancient_artefacts = [6, 4, 7, 5]\nmysterious_structures = [3, 1, 5, 2]\n\nplt.figure(figsize=[10, 5])\n\n# Plotting stackplot with desired colors:\nplt.stackplot(expeditions, alien_creatures, lost_shipwrecks, ancient_artefacts, mysterious_structures, \n              colors=['green', 'blue', 'orange', 'purple'])\n\n# Adding a legend:\nlegend_labels = ['Alien-like Creatures', 'A new Label', 'Ancient Arterfacts', 'Mysterious Structures']\nplt.legend(legend_labels, loc='upper left')\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Lost Shipwrecks stack\n        area.set_linestyle(':')\n        area.set_edgecolor('black')\n\nplt.title('Mysterious Discoveries Across Expeditions')\nplt.xlabel('Expeditions')\nplt.ylabel('No. of Discoveries')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_ef0a942096e65fec/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_ef0a942096e65fec/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_ef0a942096e65fec/figure.png"
    },
    {
        "id": "Stack_ac6f8dc2faedeaff",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data Points for Terrain Elevation\nregions = ['R1', 'R2', 'R3']\nterrain_elevation = [[100, 150, 200, 180, 120], [80, 120, 160, 140, 100], [60, 90, 120, 110, 70]]\n\n# Data Points for Water Flow\nwater_flow = [[50, 60, 70, 65, 55], [45, 55, 65, 60, 50], [40, 50, 60, 55, 45]]\n\n# Stack Plot for Terrain Elevation\nplt.figure(figsize=(10,6))\nplt.stackplot(range(1,6), terrain_elevation, labels=['R1 Elevation', 'R2 Elevation', 'R3 Elevation'])\nplt.legend(loc='upper left')\n\n# Overlay Plot for Water Flow\nfor i, flow in enumerate(water_flow):\n    plt.plot(range(1,6), flow, marker='o', label=f'{regions[i]} Flow')\n\nplt.title('Terrain Elevation vs. Water Flow in River Regions')\nplt.xlabel('Time Period')\nplt.ylabel('Elevation/Flow')\nplt.legend(loc='lower right')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the area that contains the center point of the bounding box to 4.04, and edge color of red. Additionally, apply a stroke to the same area with a linewidth of 2.20 and set the foreground color to #bd10f1.",
        "Input_image": "./test_dataset/Stack/Stack_ac6f8dc2faedeaff/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Data Points for Terrain Elevation\nregions = ['R1', 'R2', 'R3']\nterrain_elevation = [[100, 150, 200, 180, 120], [80, 120, 160, 140, 100], [60, 90, 120, 110, 70]]\n\n# Data Points for Water Flow\nwater_flow = [[50, 60, 70, 65, 55], [45, 55, 65, 60, 50], [40, 50, 60, 55, 45]]\n\n# Stack Plot for Terrain Elevation\nplt.figure(figsize=(10,6))\nstacks=plt.stackplot(range(1,6), terrain_elevation, labels=['R1 Elevation', 'R2 Elevation', 'R3 Elevation'])\nstroke_effect = path_effects.withStroke(linewidth=2.1999039408669203, foreground='#bd10f1')\n\nfor idx,stack in enumerate(stacks):\n    if idx ==1:\n        stack.set_edgecolor('red')\n        stack.set_linewidth(2.1999039408669203)\n        stack.set_path_effects([stroke_effect])\n\nplt.legend(loc='upper left')\n\n# Overlay Plot for Water Flow\nfor i, flow in enumerate(water_flow):\n    plt.plot(range(1,6), flow, marker='o', label=f'{regions[i]} Flow')\n\nplt.title('Terrain Elevation vs. Water Flow in River Regions')\nplt.xlabel('Time Period')\nplt.ylabel('Elevation/Flow')\nplt.legend(loc='lower right')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_ac6f8dc2faedeaff/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_ac6f8dc2faedeaff/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_ac6f8dc2faedeaff/figure.png"
    },
    {
        "id": "Stack_82aba20b1263aaa3",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time intervals\ntime = [1, 2, 3, 4, 5]\n\n# Tumor sizes\ngroup_A = [10, 15, 20, 25, 30]\ngroup_B = [12, 18, 22, 28, 35]\ngroup_C = [8, 14, 19, 23, 29]\n\nfig, ax = plt.subplots()\n\nax.stackplot(time, group_A, group_B, group_C, labels=['Group A', 'Group B', 'Group C'])\nax.legend(loc='upper left')\n\nplt.xlabel('Time Intervals')\nplt.ylabel('Tumor Size (in mm)')\nplt.title('Tumor Growth Progression in Different Treatment Groups')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the areas that contain the center point of the bounding box to a defined region using the coordinates (77, 181), with a width of 952 and a height of 710, utilizing matplotlib.transforms.Bbox. Also, ensure the rasterized state of these areas is set to False.",
        "Input_image": "./test_dataset/Stack/Stack_82aba20b1263aaa3/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Time intervals\ntime = [1, 2, 3, 4, 5]\n\n# Tumor sizes\ngroup_A = [10, 15, 20, 25, 30]\ngroup_B = [12, 18, 22, 28, 35]\ngroup_C = [8, 14, 19, 23, 29]\n\nfig, ax = plt.subplots()\n\nclip_box = Bbox.from_bounds(77, 181, 952, 710)\nax.stackplot(time, group_A, group_B, group_C, labels=['Group A', 'Group B', 'Group C'])\nfor i, area in enumerate(ax.collections):\n    if i == 1:  # Group B's stack\n        area.set_clip_box(clip_box)\n        area.set_rasterized(False)\nax.legend(loc='upper left')\n\nplt.xlabel('Time Intervals')\nplt.ylabel('Tumor Size (in mm)')\nplt.title('Tumor Growth Progression in Different Treatment Groups')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_82aba20b1263aaa3/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_82aba20b1263aaa3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_82aba20b1263aaa3/figure.png"
    },
    {
        "id": "Stack_bef77a4ab47ff01f",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Specify the data\nphysical_activity_levels = ['No Activity', 'Low Activity', 'Moderate Activity', 'High Activity']\nbelow_average = [25, 20, 15, 10]\naverage = [40, 35, 30, 25]\nabove_average = [35, 45, 55, 65]\n\n# Create the stack plot\nfig, ax = plt.subplots()\nax.stackplot(physical_activity_levels, below_average, average, above_average, labels=['Below Average','Average','Above Average'])\n\n# Specify the legend location\nplt.legend(loc='upper left')\n\n# Set the title and labels\nplt.title('Academic Performance vs Physical Activity')\nplt.xlabel('Level of Physical Activity')\nplt.ylabel('Percentage of Students')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the linestyle of the areas that contain the center point of the bounding box to 'solid'. Additionally, for the same points, make the visibility of the areas tied to the center point of the bounding box false.",
        "Input_image": "./test_dataset/Stack/Stack_bef77a4ab47ff01f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Specify the data\nphysical_activity_levels = ['No Activity', 'Low Activity', 'Moderate Activity', 'High Activity']\nbelow_average = [25, 20, 15, 10]\naverage = [40, 35, 30, 25]\nabove_average = [35, 45, 55, 65]\n\n# Create the stack plot\nfig, ax = plt.subplots()\nstacks = ax.stackplot(physical_activity_levels, below_average, average, above_average, labels=['Below Average','Average','Above Average'])\n\n# Modify the linestyle and visibility of the target object\nfor i, stack in enumerate(stacks):\n    if i == 1:  # Target the 'Average' stack\n        stack.set_linestyle('solid')\n        stack.set_visible(False)\n\n# Specify the legend location\nplt.legend(loc='upper left')\n\n# Set the title and labels\nplt.title('Academic Performance vs Physical Activity')\nplt.xlabel('Level of Physical Activity')\nplt.ylabel('Percentage of Students')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_bef77a4ab47ff01f/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_bef77a4ab47ff01f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_bef77a4ab47ff01f/figure.png"
    },
    {
        "id": "Stack_d9c4fbddbe815174",
        "Input_code": "import matplotlib.pyplot as plt\n\nlocations = ['Location 1', 'Location 2', 'Location 3', 'Location 4', 'Location 5']\nNorth_Atlantic = [2750, 3200, 3850, 4100, 3000]\nPacific_Ocean = [4200, 3800, 4100, 3600, 4300]\nIndian_Ocean = [3500, 3900, 3200, 3800, 4100]\n\nplt.figure(figsize=(10, 7))\nplt.stackplot(locations, North_Atlantic, Pacific_Ocean, Indian_Ocean, labels=['North Atlantic','Pacific Ocean','Indian Ocean'])\nplt.legend(loc='upper left')\nplt.title('Ocean Floor Topography')\nplt.xlabel('Locations')\nplt.ylabel('Depth (m)')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #5ad562. Also, update the edge's linestyle for this area to 'dashdot' and set its color to #306a27.",
        "Input_image": "./test_dataset/Stack/Stack_d9c4fbddbe815174/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nlocations = ['Location 1', 'Location 2', 'Location 3', 'Location 4', 'Location 5']\nNorth_Atlantic = [2750, 3200, 3850, 4100, 3000]\nPacific_Ocean = [4200, 3800, 4100, 3600, 4300]\nIndian_Ocean = [3500, 3900, 3200, 3800, 4100]\n\nplt.figure(figsize=(10, 7))\nstacks=plt.stackplot(locations, North_Atlantic, Pacific_Ocean, Indian_Ocean, labels=['North Atlantic','Pacific Ocean','Indian Ocean'])\nfor idx,stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_facecolor('#5ad562')\n        stack.set_edgecolor('#306a27')\n        stack.set_linestyle('dashdot')\nplt.legend(loc='upper left')\nplt.title('Ocean Floor Topography')\nplt.xlabel('Locations')\nplt.ylabel('Depth (m)')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_d9c4fbddbe815174/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_d9c4fbddbe815174/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_d9c4fbddbe815174/figure.png"
    },
    {
        "id": "Stack_dece138d7a3f6b0a",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Age groups\nages = ['18-25 years', '26-35 years', '36-45 years', '46-55 years', '56-65 years']\n\n# Stress levels per age group \nstress_levels_18_25 = [7, 6, 5, 6, 4]\nstress_levels_26_35 = [6, 7, 4, 5, 3]\nstress_levels_36_45 = [4, 5, 3, 4, 2]\nstress_levels_46_55 = [3, 4, 2, 3, 1]\nstress_levels_56_65 = [2, 3, 1, 2, 1]\n\n# Plotting the data\nplt.stackplot(ages, stress_levels_18_25, stress_levels_26_35, stress_levels_36_45, stress_levels_46_55, stress_levels_56_65, labels=['18-25','26-35','36-45','46-55','56-65'])\n\n# Setting up labels and title\nplt.xlabel('Age Group')\nplt.ylabel('Stress Level')\nplt.title('Impact of Daily Meditation on Stress Level by Age Group')\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the area that contains the center point of the bounding box to 0.66. Also, change the face color of that area to #236b04 for the same points.",
        "Input_image": "./test_dataset/Stack/Stack_dece138d7a3f6b0a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Age groups\nages = ['18-25 years', '26-35 years', '36-45 years', '46-55 years', '56-65 years']\n\n# Stress levels per age group \nstress_levels_18_25 = [7, 6, 5, 6, 4]\nstress_levels_26_35 = [6, 7, 4, 5, 3]\nstress_levels_36_45 = [4, 5, 3, 4, 2]\nstress_levels_46_55 = [3, 4, 2, 3, 1]\nstress_levels_56_65 = [2, 3, 1, 2, 1]\n\n# Plotting the data\nplt.stackplot(ages, stress_levels_18_25, stress_levels_26_35, stress_levels_36_45, stress_levels_46_55, stress_levels_56_65, labels=['18-25','26-35','36-45','46-55','56-65'])\n\n# Setting up labels and title\nplt.xlabel('Age Group')\nplt.ylabel('Stress Level')\nplt.title('Impact of Daily Meditation on Stress Level by Age Group')\nplt.legend()\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # 36-45's stack\n        area.set_facecolor('#236b04')\n        area.set_alpha(0.66)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_dece138d7a3f6b0a/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_dece138d7a3f6b0a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_dece138d7a3f6b0a/figure.png"
    },
    {
        "id": "Stack_21f3c1a50fb9e03f",
        "Input_code": "import matplotlib.pyplot as plt  \n\n# define the data\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nurban_steps = [8000, 7500, 9000, 8500, 9500, 10000, 9500]\nsuburban_steps = [7000, 6500, 7500, 7000, 8000, 8500, 8000]\nrural_steps = [6000, 5500, 6500, 5000, 6500, 7000, 6500]\n\n# create stackplot\nplt.stackplot(days, urban_steps, suburban_steps, rural_steps, labels=['Urban','Suburban','Rural'])\n\n# define title and axis labels\nplt.title('Average Daily Steps Taken By Individuals In Different Areas')\nplt.xlabel('Days of the Week')\nplt.ylabel('Number of Steps')\n\n# place a legend\nplt.legend(loc='upper left')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the linestyle of the edges of the areas that contain the center point of the bounding box to 'dashed' and set their color to #d341e1.",
        "Input_image": "./test_dataset/Stack/Stack_21f3c1a50fb9e03f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# define the data\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nurban_steps = [8000, 7500, 9000, 8500, 9500, 10000, 9500]\nsuburban_steps = [7000, 6500, 7500, 7000, 8000, 8500, 8000]\nrural_steps = [6000, 5500, 6500, 5000, 6500, 7000, 6500]\n\n# create stackplot\nstacks = plt.stackplot(days, urban_steps, suburban_steps, rural_steps, labels=['Urban','Suburban','Rural'])\n\n# modify the corresponding stack according to the instruction\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_linestyle('dashed')\n        stack.set_edgecolor('#d341e1')\n\n# define title and axis labels\nplt.title('Average Daily Steps Taken By Individuals In Different Areas')\nplt.xlabel('Days of the Week')\nplt.ylabel('Number of Steps')\n\n# place a legend\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_21f3c1a50fb9e03f/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_21f3c1a50fb9e03f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_21f3c1a50fb9e03f/figure.png"
    },
    {
        "id": "Stack_9f9d0e8cf2d96c13",
        "Input_code": "import matplotlib.pyplot as plt\n\ndays = [1, 2, 3, 4, 5]\nsleep = [6, 7, 5, 8, 6]\neat = [2, 2, 1, 2, 1]\nwork = [5, 7, 10, 8, 6]\nexercise = [3, 3, 0, 1, 3]\n\nplt.stackplot(days, sleep, eat, work, exercise, labels=['Sleep','Eat','Work','Exercise'], colors=['m','c','r','k'])\nplt.legend(loc='upper left')\n\nplt.title('5 DAY ROUTINE')\nplt.xlabel('Day')\nplt.ylabel('Hours')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Outline the area that contains the center point of the bounding box with a line width of 2.65 and a foreground color of #db2763.",
        "Input_image": "./test_dataset/Stack/Stack_9f9d0e8cf2d96c13/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\ndays = [1, 2, 3, 4, 5]\nsleep = [6, 7, 5, 8, 6]\neat = [2, 2, 1, 2, 1]\nwork = [5, 7, 10, 8, 6]\nexercise = [3, 3, 0, 1, 3]\n\nstroke_effect = path_effects.withStroke(linewidth=2.654782482600966, foreground='#db2763')\nplt.stackplot(days, sleep, eat, work, exercise, labels=['Sleep','Eat','Work','Exercise'], colors=['m','c','r','k'])\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Work's stack\n        area.set_path_effects([stroke_effect])\nplt.legend(loc='upper left')\n\nplt.title('5 DAY ROUTINE')\nplt.xlabel('Day')\nplt.ylabel('Hours')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_9f9d0e8cf2d96c13/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_9f9d0e8cf2d96c13/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_9f9d0e8cf2d96c13/figure.png"
    },
    {
        "id": "Stack_243df181c976beae",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define years and yield data\nyears = list(range(2010, 2020))\nwheat = [2.5, 2.4, 2.6, 2.3, 2.2, 2.1, 2.0, 1.8, 1.7, 1.5]\nrice = [3.2, 3.0, 2.8, 2.7, 2.6, 2.4, 2.3, 2.1, 2.0, 1.8]\nmaize = [4.0, 3.8, 3.5, 3.3, 3.0, 2.8, 2.5, 2.3, 2.2, 2.0]\n\n# Create stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(years, wheat, rice, maize, labels=['Wheat', 'Rice', 'Maize'], alpha=0.7)\n\n# Add labels and title\nplt.xlabel('Years')\nplt.ylabel('Crop yield (t/ha)')\nplt.title('Effects of Climate Change on Global Crop Yields (2010-2019)')\nplt.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the area that contains the center point of the bounding box to True. Additionally, adjust the z-order of this area to 20. Apply a shadow effect to it with an offset of (3.13, 3.40) and color of 'gray' .",
        "Input_image": "./test_dataset/Stack/Stack_243df181c976beae/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\nfrom random import choice\n\n# Define years and yield data\nyears = list(range(2010, 2020))\nwheat = [2.5, 2.4, 2.6, 2.3, 2.2, 2.1, 2.0, 1.8, 1.7, 1.5]\nrice = [3.2, 3.0, 2.8, 2.7, 2.6, 2.4, 2.3, 2.1, 2.0, 1.8]\nmaize = [4.0, 3.8, 3.5, 3.3, 3.0, 2.8, 2.5, 2.3, 2.2, 2.0]\n\n# Create stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(years, wheat, rice, maize, labels=['Wheat', 'Rice', 'Maize'], alpha=0.7)\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Rice's stack\n        area.set_animated(True)\n        area.set_zorder(20)\n        shadow_color = 'gold'\n        area.set_path_effects([path_effects.SimplePatchShadow(offset=(3.13, 3.40), shadow_rgbFace=shadow_color), path_effects.Normal()])\n\n# Add labels and title\nplt.xlabel('Years')\nplt.ylabel('Crop yield (t/ha)')\nplt.title('Effects of Climate Change on Global Crop Yields (2010-2019)')\nplt.legend(loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_243df181c976beae/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_243df181c976beae/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_243df181c976beae/figure.png"
    },
    {
        "id": "Stack_e83e7b9a6c50e263",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data for drink preferences\nweekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nbeer = [40, 35, 45, 50, 30]\ncocktails = [30, 35, 25, 20, 40]\nwine = [15, 20, 10, 15, 15]\nnon_alcoholic = [15, 10, 20, 15, 15]\n\n# Plotting\nplt.figure(figsize=(10, 6))\n\nplt.stackplot(weekdays, beer, cocktails, wine, non_alcoholic,\n              labels=['Beer', 'Cocktails', 'Wine', 'Non-alcoholic'],\n              colors=['gold', 'lightblue', 'lightgreen', 'coral'])\n\nplt.xlabel('Weekdays')\nplt.ylabel('Percentage')\nplt.title('Happy Hour Drink Preferences')\nplt.legend(loc='upper left')\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the fill area that contains the center point of the bounding box to 0.5788.",
        "Input_image": "./test_dataset/Stack/Stack_e83e7b9a6c50e263/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data for drink preferences\nweekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nbeer = [40, 35, 45, 50, 30]\ncocktails = [30, 35, 25, 20, 40]\nwine = [15, 20, 10, 15, 15]\nnon_alcoholic = [15, 10, 20, 15, 15]\n\n# Plotting\nplt.figure(figsize=(10, 6))\n\nstacks = plt.stackplot(weekdays, beer, cocktails, wine, non_alcoholic,\n              labels=['Beer', 'Cocktails', 'Wine', 'Non-alcoholic'],\n              colors=['gold', 'lightblue', 'lightgreen', 'coral'])\n\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_alpha(0.5788113836674385)\n\nplt.xlabel('Weekdays')\nplt.ylabel('Percentage')\nplt.title('Happy Hour Drink Preferences')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_e83e7b9a6c50e263/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_e83e7b9a6c50e263/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_e83e7b9a6c50e263/figure.png"
    },
    {
        "id": "Stack_d8a253abfb8aff5b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time points and corresponding units for each amino acid\ntime_points = [\"T0\", \"T1\", \"T2\"]\nalanine = [12, 10, 14]\nglutamine = [8, 6, 9]\nlysine = [14, 16, 12]\nproline = [6, 7, 5]\n\nfig, ax = plt.subplots()\n\nax.stackplot(time_points, alanine, glutamine, lysine, proline, labels=['Alanine','Glutamine','Lysine','Proline'])\n\nax.legend(loc='upper left')\nax.set_title('Molecular Dance of Protein Structures')\nax.set_xlabel('Time Points')\nax.set_ylabel('Total Units of Amino Acids')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the area that contains the center point of the bounding box to 0.77, and change its color to #228a0b for those specific points.",
        "Input_image": "./test_dataset/Stack/Stack_d8a253abfb8aff5b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Time points and corresponding units for each amino acid\ntime_points = [\"T0\", \"T1\", \"T2\"]\nalanine = [12, 10, 14]\nglutamine = [8, 6, 9]\nlysine = [14, 16, 12]\nproline = [6, 7, 5]\n\nfig, ax = plt.subplots()\n\nax.stackplot(time_points, alanine, glutamine, lysine, proline, labels=['Alanine','Glutamine','Lysine','Proline'])\n\nfor i, area in enumerate(ax.collections):\n    if i == 2:  # Lysine's stack\n        area.set_facecolor('#228a0b')\n        area.set_alpha(0.77)\n\nax.legend(loc='upper left')\nax.set_title('Molecular Dance of Protein Structures')\nax.set_xlabel('Time Points')\nax.set_ylabel('Total Units of Amino Acids')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_d8a253abfb8aff5b/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_d8a253abfb8aff5b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_d8a253abfb8aff5b/figure.png"
    },
    {
        "id": "Stack_344ed9a8e546ab2b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Years of the journey\nyears = ['Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5']\n\n# Distances from Earth\nalpha_centauri = [4.3, 4.4, 4.5, 4.5, 4.6]\nsirius = [8.6, 8.5, 8.4, 8.3, 8.2]\nbetelgeuse = [642, 640, 638, 636, 634]\npolaris = [443, 442, 441, 441, 440]\n\nplt.stackplot(years, alpha_centauri, sirius, betelgeuse, polaris, colors=['red', 'blue', 'green', 'purple'])\n\n# Add legend\nplt.legend(['Alpha Centauri', 'Sirius', 'Betelgeuse', 'Polaris'], loc='upper left')\n\nplt.title(\"Journey of a Spacecraft to Various Stars\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Distance from Earth (in light-years)\")\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the snap state of the area containing the center point of the bounding box to False, and also make this area invisible.",
        "Input_image": "./test_dataset/Stack/Stack_344ed9a8e546ab2b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Years of the journey\nyears = ['Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5']\n\n# Distances from Earth\nalpha_centauri = [4.3, 4.4, 4.5, 4.5, 4.6]\nsirius = [8.6, 8.5, 8.4, 8.3, 8.2]\nbetelgeuse = [642, 640, 638, 636, 634]\npolaris = [443, 442, 441, 441, 440]\n\nplt.stackplot(years, alpha_centauri, sirius, betelgeuse, polaris, colors=['red', 'blue', 'green', 'purple'])\n\n# Add legend\nplt.legend(['Alpha Centauri', 'Sirius', 'Betelgeuse', 'Polaris'], loc='upper left')\n\nplt.title(\"Journey of a Spacecraft to Various Stars\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Distance from Earth (in light-years)\")\n\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Betelgeuse's stack\n        area.set_snap(False)\n        area.set_visible(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_344ed9a8e546ab2b/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_344ed9a8e546ab2b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_344ed9a8e546ab2b/figure.png"
    },
    {
        "id": "Stack_d433096cce9bde88",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Names of regions\nregions = ['Valles Marineris', 'Olympus Mons', 'Tharsis Montes', 'Hellas Planitia']\n\n# Data for each terrain type in each region\nplains = [30, 10, 35, 25]\nplateaus = [20, 30, 15, 25]\ncanyons = [25, 20, 10, 30]\nmountains = [25, 40, 40, 20]\n\n# Generate a stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(regions, plains, plateaus, canyons, mountains, labels=['Plains','Plateaus','Canyons','Mountains'], alpha=0.8)\n\n# Define labels and title\nplt.legend(loc='upper left')\nplt.title('Terrain Composition in Various Martian Regions')\nplt.xlabel('Martian Regions')\nplt.ylabel('Terrain Composition (%)')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the picker state of the area that contains the center point of the bounding box to True. Also, for the same points, change the transform of this area to the data coordinate system.",
        "Input_image": "./test_dataset/Stack/Stack_d433096cce9bde88/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Names of regions\nregions = ['Valles Marineris', 'Olympus Mons', 'Tharsis Montes', 'Hellas Planitia']\n\n# Data for each terrain type in each region\nplains = [30, 10, 35, 25]\nplateaus = [20, 30, 15, 25]\ncanyons = [25, 20, 10, 30]\nmountains = [25, 40, 40, 20]\n\n# Generate a stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(regions, plains, plateaus, canyons, mountains, labels=['Plains','Plateaus','Canyons','Mountains'], alpha=0.8)\n\n# Define labels and title\nplt.legend(loc='upper left')\nplt.title('Terrain Composition in Various Martian Regions')\nplt.xlabel('Martian Regions')\nplt.ylabel('Terrain Composition (%)')\n\n# Modify the picker state and transform for the target object\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Canyons' stack\n        area.set_picker(True)\n        area.set_transform(plt.gca().transData)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_d433096cce9bde88/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_d433096cce9bde88/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_d433096cce9bde88/figure.png"
    },
    {
        "id": "Stack_bb784858f4053f8d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# positions along the DNA strand\npositions = [1, 2, 3, 4, 5]\n\n# counts of each nucleotide base pair at each position\nadenine = [15, 18, 20, 22, 25]\nthymine = [20, 22, 25, 28, 30]\ncytosine = [10, 12, 15, 18, 20]\nguanine = [5, 8, 10, 12, 15]\n\n# create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# stackplot\nax.stackplot(positions, adenine, thymine, cytosine, guanine, labels=['Adenine (A)','Thymine (T)','Cytosine (C)','Guanine (G)'])\n\n# legend\nax.legend(loc='upper left')\n\n# labels\nplt.xlabel('Position along the DNA strand')\nplt.ylabel('Count of each nucleotide base pair')\nplt.title('Microscopic Analysis of DNA Structure')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the areas that contain the center point of the bounding box to a defined rectangle with the bottom-left corner at (175, 168), a width of 196, and a height of 135, following the matplotlib.transforms.Bbox pattern. Additionally, enable the snap state for the areas by setting it to True for the same coordinates.",
        "Input_image": "./test_dataset/Stack/Stack_bb784858f4053f8d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# positions along the DNA strand\npositions = [1, 2, 3, 4, 5]\n\n# counts of each nucleotide base pair at each position\nadenine = [15, 18, 20, 22, 25]\nthymine = [20, 22, 25, 28, 30]\ncytosine = [10, 12, 15, 18, 20]\nguanine = [5, 8, 10, 12, 15]\n\n# create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# stackplot\nax.stackplot(positions, adenine, thymine, cytosine, guanine, labels=['Adenine (A)','Thymine (T)','Cytosine (C)','Guanine (G)'])\n\n# Apply modifications to the target object\nclip_box = Bbox.from_bounds(175, 168, 196, 135)\nfor i, area in enumerate(ax.collections):\n    if i == 2:  # Cytosine's stack\n        area.set_clip_box(clip_box)\n        area.set_snap(True)\n\n# legend\nax.legend(loc='upper left')\n\n# labels\nplt.xlabel('Position along the DNA strand')\nplt.ylabel('Count of each nucleotide base pair')\nplt.title('Microscopic Analysis of DNA Structure')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_bb784858f4053f8d/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_bb784858f4053f8d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_bb784858f4053f8d/figure.png"
    },
    {
        "id": "Stack_6c96785545f4ba16",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Days of the week\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\n# Frequency of exercising\nexercise_freq = [2, 3, 4, 5, 3, 2, 1]\n\n# Number of hours of sleep\nsleep_hours = [6, 7, 8, 7, 6, 5, 4]\n\n# Creating stack plot\nplt.figure(figsize=(10, 6))\nplt.stackplot(days, sleep_hours, exercise_freq, labels=['Sleep', 'Exercise'], colors=['skyblue', 'coral'])\n\nplt.title(\"Exercise Frequency and Sleep Quality\", fontsize=18)\nplt.xlabel(\"Week Days\", fontsize=14)\nplt.ylabel(\"Hours or Frequency\", fontsize=14)\nplt.legend(loc='upper right')\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the label of the area that contains the center point of the bounding box to 'A new Label', and make sure the rasterized state for this area is set to False.",
        "Input_image": "./test_dataset/Stack/Stack_6c96785545f4ba16/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Days of the week\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\n# Frequency of exercising\nexercise_freq = [2, 3, 4, 5, 3, 2, 1]\n\n# Number of hours of sleep\nsleep_hours = [6, 7, 8, 7, 6, 5, 4]\n\n# Creating stack plot\nplt.figure(figsize=(10, 6))\nplt.stackplot(days, sleep_hours, exercise_freq, labels=['A new Label', 'Exercise'], colors=['skyblue', 'coral'])\n\nplt.title(\"Exercise Frequency and Sleep Quality\", fontsize=18)\nplt.xlabel(\"Week Days\", fontsize=14)\nplt.ylabel(\"Hours or Frequency\", fontsize=14)\nplt.legend(loc='upper right')\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_6c96785545f4ba16/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_6c96785545f4ba16/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_6c96785545f4ba16/figure.png"
    },
    {
        "id": "Stack_b57de8d9a49ce981",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ncrystal_sizes = [\"Small\", \"Medium\", \"Large\"]\ngrowth_rates_T1 = [3, 2, 1]\ngrowth_rates_T2 = [4, 3, 2]\ngrowth_rates_T3 = [5, 4, 3]\n\n# Create a stack plot\nplt.figure(figsize=(10, 6))\nplt.stackplot(crystal_sizes, growth_rates_T1, growth_rates_T2, growth_rates_T3, labels=['T1','T2','T3'])\n\n# Labels and Titles\nplt.xlabel(\"Crystal Sizes\")\nplt.ylabel(\"Growth Rates\")\nplt.title(\"Crystal Formation Kinetics in 3D\")\nplt.legend(loc=\"upper left\")\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #97e001. Also, ensure that the snap state for this area is set to False.",
        "Input_image": "./test_dataset/Stack/Stack_b57de8d9a49ce981/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ncrystal_sizes = [\"Small\", \"Medium\", \"Large\"]\ngrowth_rates_T1 = [3, 2, 1]\ngrowth_rates_T2 = [4, 3, 2]\ngrowth_rates_T3 = [5, 4, 3]\n\n# Create a stack plot\nplt.figure(figsize=(10, 6))\nplt.stackplot(crystal_sizes, growth_rates_T1, growth_rates_T2, growth_rates_T3, labels=['T1','T2','T3'])\n\n# Modify the face color and snap state for the target object\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Target object\n        area.set_facecolor('#97e001')\n        area.set_snap(False)\n\n# Labels and Titles\nplt.xlabel(\"Crystal Sizes\")\nplt.ylabel(\"Growth Rates\")\nplt.title(\"Crystal Formation Kinetics in 3D\")\nplt.legend(loc=\"upper left\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_b57de8d9a49ce981/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_b57de8d9a49ce981/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_b57de8d9a49ce981/figure.png"
    },
    {
        "id": "Stack_0546d834906cf3fc",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nind = np.arange(5)  # the x locations for the groups\nwidth = 0.35  # the width of the bars\n\n# Data for Fuel Combustion\nfc = np.array([[15, 18, 20, 22, 19], [8, 10, 12, 15, 11], [5, 6, 7, 8, 6]])\n\n# Data for Exhaust Gases\neg = np.array([[12, 14, 16, 18, 15], [7, 9, 10, 13, 10], [4, 5, 6, 7, 5]])\n\n# Data for Cooling Systems\ncs = np.array([[10, 12, 14, 16, 13], [5, 7, 8, 10, 7], [3, 4, 5, 6, 4]])\n\n# Create a sub-plot for Fuel Combustion\nplt.figure(figsize=(10, 6))\nplt.stackplot(ind, fc, labels=['Component 1','Component 2','Component 3'], alpha=0.5)\nplt.title('Fluid Dynamics in Rocket Engines : Fuel Combustion')\nplt.legend()\n\n# Create a sub-plot for Exhaust Gases\nplt.figure(figsize=(10, 6))\nplt.stackplot(ind, eg, labels=['Component 1','Component 2','Component 3'], alpha=0.5)\nplt.title('Fluid Dynamics in Rocket Engines : Exhaust Gases')\nplt.legend()\n\n# Create a sub-plot for Cooling Systems\nplt.figure(figsize=(10, 6))\nplt.stackplot(ind, cs, labels=['Component 1','Component 2','Component 3'], alpha=0.5)\nplt.title('Fluid Dynamics in Rocket Engines : Cooling Systems')\nplt.legend()\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the z-order of the area that contains the center point of the bounding box to 10. Apply a shadow effect to this area with an offset of (2.24, 4.00) and a shadow color silver. Additionally, outline this area with a linewidth of 3.69 and a foreground color of #8ad05b.",
        "Input_image": "./test_dataset/Stack/Stack_0546d834906cf3fc/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, withStroke\n\nind = np.arange(5)  # the x locations for the groups\nwidth = 0.35  # the width of the bars\n\n# Data for Fuel Combustion\nfc = np.array([[15, 18, 20, 22, 19], [8, 10, 12, 15, 11], [5, 6, 7, 8, 6]])\n\n# Data for Exhaust Gases\neg = np.array([[12, 14, 16, 18, 15], [7, 9, 10, 13, 10], [4, 5, 6, 7, 5]])\n\n# Data for Cooling Systems\ncs = np.array([[10, 12, 14, 16, 13], [5, 7, 8, 10, 7], [3, 4, 5, 6, 4]])\n\n# Create a sub-plot for Fuel Combustion\nplt.figure(figsize=(10, 6))\nplt.stackplot(ind, fc, labels=['Component 1','Component 2','Component 3'], alpha=0.5)\nplt.title('Fluid Dynamics in Rocket Engines : Fuel Combustion')\nplt.legend()\n\n# Create a sub-plot for Exhaust Gases\nplt.figure(figsize=(10, 6))\nplt.stackplot(ind, eg, labels=['Component 1','Component 2','Component 3'], alpha=0.5)\nplt.title('Fluid Dynamics in Rocket Engines : Exhaust Gases')\nplt.legend()\n\n# Create a sub-plot for Cooling Systems\nplt.figure(figsize=(10, 6))\nplt.stackplot(ind, cs, labels=['Component 1','Component 2','Component 3'], alpha=0.5)\nplt.title('Fluid Dynamics in Rocket Engines : Cooling Systems')\nfor i, area in enumerate(plt.gca().collections):\n    if i == 1:  # Target object\n        area.set_zorder(10)\n        shadow_color = 'silver'\n        area.set_path_effects([SimplePatchShadow(offset=(2.24, 4.00), shadow_rgbFace=shadow_color), withStroke(linewidth=3.6905934031615066, foreground='#8ad05b')])\n\nplt.legend()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_0546d834906cf3fc/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_0546d834906cf3fc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_0546d834906cf3fc/figure.png"
    },
    {
        "id": "Stack_0ad35d97df21df5b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# average lifetimes data \ngreen_turtles = [75, 70, 78, 80, 72, 76, 74, 77, 75, 79, 71]\nloggerhead_turtles = [63, 61, 58, 64, 61, 59, 62, 65, 60, 63, 58]\nhawksbill_turtles = [55, 57, 54, 52, 56, 53, 50, 51, 55, 52, 48]\nleatherback_turtles = [90, 88, 87, 85, 89, 92, 86, 91, 88, 84, 90]\nolive_ridley_turtles = [50, 47, 48, 51, 49, 52, 46, 50, 47, 49, 45]\n\n# plot the data using stackplot function\nplt.stackplot(years, green_turtles, loggerhead_turtles, hawksbill_turtles, \n              leatherback_turtles, olive_ridley_turtles, \n              labels=['Green Turtles - Atlantic Ocean','Loggerhead Turtles - Pacific Ocean',\n                      'Hawksbill Turtles - Indian Ocean','Leatherback Turtles - Southern Ocean',\n                      'Olive Ridley Turtles - Mediterranean Sea'])\n\n# labels for x and y axis\nplt.xlabel('Years')\nplt.ylabel('Average Lifetimes')\n\n# title of the plot\nplt.title('Average Lifetimes of Different Species of Sea Turtles in Various Oceans (2010-2020)')\n\n# legend in the upper left corner\nplt.legend(loc='upper left')\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #731665, and update the edge color in that area to #8bf473.",
        "Input_image": "./test_dataset/Stack/Stack_0ad35d97df21df5b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# average lifetimes data \ngreen_turtles = [75, 70, 78, 80, 72, 76, 74, 77, 75, 79, 71]\nloggerhead_turtles = [63, 61, 58, 64, 61, 59, 62, 65, 60, 63, 58]\nhawksbill_turtles = [55, 57, 54, 52, 56, 53, 50, 51, 55, 52, 48]\nleatherback_turtles = [90, 88, 87, 85, 89, 92, 86, 91, 88, 84, 90]\nolive_ridley_turtles = [50, 47, 48, 51, 49, 52, 46, 50, 47, 49, 45]\n\n# plot the data using stackplot function\nstacks = plt.stackplot(years, green_turtles, loggerhead_turtles, hawksbill_turtles, \n              leatherback_turtles, olive_ridley_turtles, \n              labels=['Green Turtles - Atlantic Ocean','Loggerhead Turtles - Pacific Ocean',\n                      'Hawksbill Turtles - Indian Ocean','Leatherback Turtles - Southern Ocean',\n                      'Olive Ridley Turtles - Mediterranean Sea'])\n\nfor idx, stack in enumerate(stacks):\n    if idx in [2]:\n        stack.set_facecolor('#731665')\n        stack.set_edgecolor('#8bf473')\n\n# labels for x and y axis\nplt.xlabel('Years')\nplt.ylabel('Average Lifetimes')\n\n# title of the plot\nplt.title('Average Lifetimes of Different Species of Sea Turtles in Various Oceans (2010-2020)')\n\n# legend in the upper left corner\nplt.legend(loc='upper left')\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_0ad35d97df21df5b/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_0ad35d97df21df5b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_0ad35d97df21df5b/figure.png"
    },
    {
        "id": "Stack_175bfdaab2ae01de",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nyears = ['2017', '2018', '2019', '2020']\nairlines = ['Airline A', 'Airline B', 'Airline C', 'Airline D']\n\n# Ratings data\non_time = np.array([[3.5, 4.1, 3.8, 4.3],\n                    [4.2, 3.9, 4.0, 4.1],\n                    [4.0, 4.3, 3.9, 4.0],\n                    [3.9, 3.7, 4.2, 4.4]])\n\ncust_service = np.array([[4.0, 3.8, 4.3, 4.2],\n                         [3.5, 4.1, 4.0, 4.4],\n                         [4.2, 3.9, 3.8, 4.1],\n                         [4.1, 4.2, 4.1, 4.3]])\n\nbag_handling = np.array([[3.9, 4.0, 3.8, 4.2],\n                         [3.7, 4.1, 4.0, 4.3],\n                         [4.2, 4.3, 3.9, 4.0],\n                         [3.6, 4.2, 4.1, 4.4]])\n\n# Plotting\nfig, ax = plt.subplots()\n\nax.stackplot(years, on_time, cust_service, bag_handling, labels=airlines)\nax.legend(loc='upper left')\nplt.xlabel(\"Years\")\nplt.ylabel(\"Customer Satisfaction Ratings\")\nplt.title(\"Customer Satisfaction Ratings for different airlines\")\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the area that contains the center point of the bounding box to #4c6e36.",
        "Input_image": "./test_dataset/Stack/Stack_175bfdaab2ae01de/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nyears = ['2017', '2018', '2019', '2020']\nairlines = ['Airline A', 'Airline B', 'Airline C', 'Airline D']\n\n# Ratings data\non_time = np.array([[3.5, 4.1, 3.8, 4.3],\n                    [4.2, 3.9, 4.0, 4.1],\n                    [4.0, 4.3, 3.9, 4.0],\n                    [3.9, 3.7, 4.2, 4.4]])\n\ncust_service = np.array([[4.0, 3.8, 4.3, 4.2],\n                         [3.5, 4.1, 4.0, 4.4],\n                         [4.2, 3.9, 3.8, 4.1],\n                         [4.1, 4.2, 4.1, 4.3]])\n\nbag_handling = np.array([[3.9, 4.0, 3.8, 4.2],\n                         [3.7, 4.1, 4.0, 4.3],\n                         [4.2, 4.3, 3.9, 4.0],\n                         [3.6, 4.2, 4.1, 4.4]])\n\n# Plotting\nfig, ax = plt.subplots()\n\nstacks = ax.stackplot(years, on_time, cust_service, bag_handling, labels=airlines)\nfor idx, stack in enumerate(stacks):\n    if idx in [1]:\n        stack.set_facecolor('#4c6e36')\nax.legend(loc='upper left')\nplt.xlabel(\"Years\")\nplt.ylabel(\"Customer Satisfaction Ratings\")\nplt.title(\"Customer Satisfaction Ratings for different airlines\")\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_175bfdaab2ae01de/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_175bfdaab2ae01de/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_175bfdaab2ae01de/figure.png"
    },
    {
        "id": "Stack_69715896090fc0ed",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define the distance in kilometers\ndistance = [0, 10, 20, 30, 40, 50, 60]\n\n# Define the height of ash dispersed in meters for each eruption\neruption1 = [200, 150, 120, 80, 40, 20, 10]\neruption2 = [250, 200, 180, 140, 100, 50, 30]\neruption3 = [180, 160, 130, 100, 70, 40, 20]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Create a stack plot for the ash dispersed data\nax.stackplot(distance, eruption1, eruption2, eruption3, labels=['Eruption 1', 'Eruption 2', 'Eruption 3'])\n\n# Set the title for the stack plot\nax.set_title('Ash Dispersion from Explosive Volcanic Eruptions')\n\n# Set the label for X-axis and Y-axis\nax.set_xlabel('Distance from the Volcano (km)')\nax.set_ylabel('Height of Ash Dispersion (m)')\n\n# Create a legend for the stack plot\nax.legend(loc='upper right')\n\n# Show the stack plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the z-order of the area that contains the center point of the bounding box to 1. Additionally, apply a shadow effect to this area with an offset of (3.40, 3.06) and randomly choose a shadow color 'gold'.",
        "Input_image": "./test_dataset/Stack/Stack_69715896090fc0ed/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport random\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Define the distance in kilometers\ndistance = [0, 10, 20, 30, 40, 50, 60]\n\n# Define the height of ash dispersed in meters for each eruption\neruption1 = [200, 150, 120, 80, 40, 20, 10]\neruption2 = [250, 200, 180, 140, 100, 50, 30]\neruption3 = [180, 160, 130, 100, 70, 40, 20]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Create a stack plot for the ash dispersed data\nax.stackplot(distance, eruption1, eruption2, eruption3, labels=['Eruption 1', 'Eruption 2', 'Eruption 3'])\n\n# Apply modifications to the target object\nfor i, area in enumerate(ax.collections):\n    if i == 1:  # Target Eruption 2\n        area.set_zorder(1)\n        shadow_color = 'gold'\n        area.set_path_effects([SimplePatchShadow(offset=(3.40, 3.06), shadow_rgbFace=shadow_color), Normal()])\n\n# Set the title for the stack plot\nax.set_title('Ash Dispersion from Explosive Volcanic Eruptions')\n\n# Set the label for X-axis and Y-axis\nax.set_xlabel('Distance from the Volcano (km)')\nax.set_ylabel('Height of Ash Dispersion (m)')\n\n# Create a legend for the stack plot\nax.legend(loc='upper right')\n\n# Show the stack plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Stack/Stack_69715896090fc0ed/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_69715896090fc0ed/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_69715896090fc0ed/figure.png"
    },
    {
        "id": "Stack_139e4c54f2ca0cfc",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time points\nx = [0, 1, 2, 3, 4]\n\n# Concentrations of reactants A, B and product C\ny1 = [20, 18, 15, 10, 5]\ny2 = [15, 14, 12, 8, 5]\ny3 = [0, 5, 10, 15, 20]\n\n# Make the stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(x, y1, y2, y3, labels=['Reactant A','Reactant B','Product C'], alpha=0.5 )\n\n# Legend to the upper left corner\nplt.legend(loc='upper left')\n\n# Titles and labels\nplt.title('Chemical Reactions in 3D Space Over Time')\nplt.xlabel('Time intervals')\nplt.ylabel('Concentration')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the rasterized state of the area that contains the center point of the bounding box to False, and also hide the visibility of that same area.",
        "Input_image": "./test_dataset/Stack/Stack_139e4c54f2ca0cfc/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Time points\nx = [0, 1, 2, 3, 4]\n\n# Concentrations of reactants A, B and product C\ny1 = [20, 18, 15, 10, 5]\ny2 = [15, 14, 12, 8, 5]\ny3 = [0, 5, 10, 15, 20]\n\n# Make the stack plot\nplt.figure(figsize=(10,7))\nplt.stackplot(x, y1, y2, y3, labels=['Reactant A','Reactant B','Product C'], alpha=0.5 )\n\n# Modify the properties of the first stack\nfor i, area in enumerate(plt.gca().collections):\n    if i == 0:  # Reactant A's stack\n        area.set_rasterized(False)\n        area.set_visible(False)\n\n# Legend to the upper left corner\nplt.legend(loc='upper left')\n\n# Titles and labels\nplt.title('Chemical Reactions in 3D Space Over Time')\nplt.xlabel('Time intervals')\nplt.ylabel('Concentration')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Stack/Stack_139e4c54f2ca0cfc/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_139e4c54f2ca0cfc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_139e4c54f2ca0cfc/figure.png"
    },
    {
        "id": "Stack_363b2eb1a050329e",
        "Input_code": "import matplotlib.pyplot as plt\n\nyears = ['Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5']\n\n# Percentages of market shares\napple = [40, 35, 30, 28, 25]\nsamsung = [30, 28, 25, 24, 23]\nxiaomi = [15, 20, 22, 20, 18]\nhuawei = [10, 12, 13, 15, 17]\nothers = [5, 5, 10, 13, 17]\n\n# Stacking each brand's market share on top of the other\nplt.stackplot(years, apple, samsung, xiaomi, huawei, others, \n              colors=['green','blue','orange','red','gray'], \n              labels=['Apple', 'Samsung', 'Xiaomi', 'Huawei', 'Others'])\n\n# Title and labels\nplt.title('Market Share of Top-Selling Smartphone Brands Over Five Years')\nplt.xlabel('Year')\nplt.ylabel('Market Share (%)')\n\n# Positioning the legend\nplt.legend(loc='upper left')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the area that contains the center point of the bounding box to #4bdba6. Also, update the linestyle of that area to 'dotted'.",
        "Input_image": "./test_dataset/Stack/Stack_363b2eb1a050329e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nyears = ['Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5']\n\n# Percentages of market shares\napple = [40, 35, 30, 28, 25]\nsamsung = [30, 28, 25, 24, 23]\nxiaomi = [15, 20, 22, 20, 18]\nhuawei = [10, 12, 13, 15, 17]\nothers = [5, 5, 10, 13, 17]\n\n# Stacking each brand's market share on top of the other\nplt.stackplot(years, apple, samsung, xiaomi, huawei, others, \n              colors=['green','blue','orange','red','gray'], \n              labels=['Apple', 'Samsung', 'Xiaomi', 'Huawei', 'Others'])\n\n# Modify the color and linestyle of the target object\nfor i, area in enumerate(plt.gca().collections):\n    if i == 2:  # Xiaomi's stack\n        area.set_facecolor('#4bdba6')\n        area.set_linestyle('dotted')\n\n# Title and labels\nplt.title('Market Share of Top-Selling Smartphone Brands Over Five Years')\nplt.xlabel('Year')\nplt.ylabel('Market Share (%)')\n\n# Positioning the legend\nplt.legend(loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_363b2eb1a050329e/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_363b2eb1a050329e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_363b2eb1a050329e/figure.png"
    },
    {
        "id": "Stack_a3260d95b89b54f3",
        "Input_code": "import matplotlib.pyplot as plt\n\nRegions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\n\n# Data points\nMinor = [8, 10, 5, 12, 7]\nLight = [12, 15, 10, 18, 11]\nModerate = [5, 8, 3, 10, 6]\nStrong = [1, 2, 1, 4, 2]\n\nfig, ax = plt.subplots()\n\nax.stackplot(Regions, Minor, Light, Moderate, Strong, labels=['Minor','Light','Moderate','Strong'])\nax.legend(loc='upper left')\nax.set_title('Distribution of Earthquake Intensities across Different Regions')\nax.set_xlabel('Regions')\nax.set_ylabel('Number of Earthquakes')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the area that contains the center point of the bounding box to #e51e6b, and also set its visibility to false for those same points.",
        "Input_image": "./test_dataset/Stack/Stack_a3260d95b89b54f3/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nRegions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\n\n# Data points\nMinor = [8, 10, 5, 12, 7]\nLight = [12, 15, 10, 18, 11]\nModerate = [5, 8, 3, 10, 6]\nStrong = [1, 2, 1, 4, 2]\n\nfig, ax = plt.subplots()\n\nax.stackplot(Regions, Minor, Light, Moderate, Strong, labels=['Minor','Light','Moderate','Strong'])\nfor i, area in enumerate(ax.collections):\n    if i == 2:  # Moderate's stack\n        area.set_facecolor('#e51e6b')\n        area.set_visible(False)\nax.legend(loc='upper left')\nax.set_title('Distribution of Earthquake Intensities across Different Regions')\nax.set_xlabel('Regions')\nax.set_ylabel('Number of Earthquakes')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Stack/Stack_a3260d95b89b54f3/Edit_figure.png",
        "Masked_image": "./test_dataset/Stack/Stack_a3260d95b89b54f3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Stack/Stack_a3260d95b89b54f3/figure.png"
    },
    {
        "id": "Step_eaa12272661c9490",
        "Input_code": "# importing matplotlib library\nimport matplotlib.pyplot as plt\n\n# years data\nyears = [2015, 2016, 2017, 2018, 2019]\n\n# population count data\npopulation = [8500, 9200, 9600, 10200, 11000] \n\n# creating the plot\nplt.step(years, population, where='post')\n\n# add title and labels to the plot\nplt.xlabel('Years')\nplt.ylabel('Population Count')\nplt.title('Population data over years')\n\n# displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Show the marker and set the marker edge color for the points that contain the center point of the bounding box to #310564, and ensure their rasterized state is set to True.",
        "Input_image": "./test_dataset/Step/Step_eaa12272661c9490/Visual_figure.png",
        "Test_code": "# importing matplotlib library\nimport matplotlib.pyplot as plt\n\n# years data\nyears = [2015, 2016, 2017, 2018, 2019]\n\n# population count data\npopulation = [8500, 9200, 9600, 10200, 11000] \n\n# creating the plot\nline, = plt.step(years, population, where='post', marker='o', markerfacecolor='none', markeredgecolor='#310564', markersize=10)\nline.set_rasterized(True)\n\n# add title and labels to the plot\nplt.xlabel('Years')\nplt.ylabel('Population Count')\nplt.title('Population data over years')\n\n# displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_eaa12272661c9490/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_eaa12272661c9490/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_eaa12272661c9490/figure.png"
    },
    {
        "id": "Step_f5ca78ada82dcce2",
        "Input_code": "import matplotlib.pyplot as plt \n\n# Regions under observation\nregions = ['Region A', 'Region B', 'Region C', 'Region D']\n\n# Temperature recorded for each region before and after the initiatives\ntemp_before = [18, 22, 20, 25]\ntemp_after = [16, 20, 19, 23]\n\n# Plotting\nplt.figure(figsize=(10, 6))\nplt.step(regions, temp_before, label='Before Initiatives', where='mid')\nplt.step(regions, temp_after, label='After Initiatives', where='mid')\n\n# Legends, title and labels\nplt.legend(loc='best')\nplt.title('Comparison of average temperatures before and after urban greening initiatives')\nplt.xlabel('Regions')\nplt.ylabel('Average Temperature (\u00b0C)')\n\n# To start y-axis at 0\nplt.ylim(bottom=0)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the dash pattern of the step line that contains the center point of the bounding box to '-.'.",
        "Input_image": "./test_dataset/Step/Step_f5ca78ada82dcce2/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt \n\n# Regions under observation\nregions = ['Region A', 'Region B', 'Region C', 'Region D']\n\n# Temperature recorded for each region before and after the initiatives\ntemp_before = [18, 22, 20, 25]\ntemp_after = [16, 20, 19, 23]\n\n# Plotting\nplt.figure(figsize=(10, 6))\nplt.step(regions, temp_before, label='Before Initiatives', where='mid')\nplt.step(regions, temp_after, label='After Initiatives', where='mid')\n\n# Modify the dash pattern of the step line corresponding to the Target_object\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == 1:  # Assuming the second line is the target\n        line.set_linestyle('-.')\n\n# Legends, title and labels\nplt.legend(loc='best')\nplt.title('Comparison of average temperatures before and after urban greening initiatives')\nplt.xlabel('Regions')\nplt.ylabel('Average Temperature (\u00b0C)')\n\n# To start y-axis at 0\nplt.ylim(bottom=0)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_f5ca78ada82dcce2/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_f5ca78ada82dcce2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_f5ca78ada82dcce2/figure.png"
    },
    {
        "id": "Step_61ed8fef9418fb4a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    'Year': [2000, 2005, 2010, 2015],\n    'Arctic Ice Cap': [12.3, 10.7, 8.9, 9.2],\n    'Antarctic Ice Cap': [12.5, 12.7, 13.0, 11.5],\n    'Global Sea Level': [3.2, 3.4, 3.7, 3.9]\n}\n\ndf = pd.DataFrame(data)\n\n# Plotting data\nplt.figure(facecolor='lightgray')\nplt.grid(axis='both', color='0.95')\n\nplt.step(df['Year'], df['Arctic Ice Cap'], label='Arctic Ice Cap', linewidth=2, marker='o', markersize=5, linestyle='-', color='blue', alpha=0.7)\nplt.step(df['Year'], df['Antarctic Ice Cap'], label='Antarctic Ice Cap', linewidth=2, marker='v', markersize=5, linestyle='--', color='red', alpha=0.7)\nplt.step(df['Year'], df['Global Sea Level'], label='Global Sea Level', linewidth=2, marker='s', markersize=5, linestyle='-.', color='green', alpha=0.7)\n\n# Annotating lines\nfor i, txt in enumerate(df['Arctic Ice Cap']):\n    plt.annotate('Arctic Ice Cap', (df['Year'][i], df['Arctic Ice Cap'][i]))\n\nfor i, txt in enumerate(df['Antarctic Ice Cap']):\n    plt.annotate('Antarctic Ice Cap', (df['Year'][i], df['Antarctic Ice Cap'][i]))\n\nfor i, txt in enumerate(df['Global Sea Level']):\n    plt.annotate('Global Sea Level', (df['Year'][i], df['Global Sea Level'][i]))\n\nplt.title('Ice Caps and Sea Level Changes Over Years')\nplt.xlabel('Year')\nplt.ylabel('Measurement')\nplt.legend()\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Add a highlight effect to the step line that contains the center point of the bounding box, using the color '#6152ca' at an intensity of 0.11.",
        "Input_image": "./test_dataset/Step/Step_61ed8fef9418fb4a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    'Year': [2000, 2005, 2010, 2015],\n    'Arctic Ice Cap': [12.3, 10.7, 8.9, 9.2],\n    'Antarctic Ice Cap': [12.5, 12.7, 13.0, 11.5],\n    'Global Sea Level': [3.2, 3.4, 3.7, 3.9]\n}\n\ndf = pd.DataFrame(data)\n\n# Plotting data\nplt.figure(facecolor='lightgray')\nplt.grid(axis='both', color='0.95')\n\nplt.step(df['Year'], df['Arctic Ice Cap'], label='Arctic Ice Cap', linewidth=2, marker='o', markersize=5, linestyle='-', color='blue', alpha=0.7)\nplt.step(df['Year'], df['Antarctic Ice Cap'], label='Antarctic Ice Cap', linewidth=2, marker='v', markersize=5, linestyle='--', color='red', alpha=0.7)\nplt.step(df['Year'], df['Global Sea Level'], label='Global Sea Level', linewidth=2, marker='s', markersize=5, linestyle='-.', color='green', alpha=0.7)\n\n# Adding highlight effect\ntarget_index = 1\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == target_index:\n        line.set_color('#6152ca')\n        line.set_alpha(0.11)\n\n# Annotating lines\nfor i, txt in enumerate(df['Arctic Ice Cap']):\n    plt.annotate('Arctic Ice Cap', (df['Year'][i], df['Arctic Ice Cap'][i]))\n\nfor i, txt in enumerate(df['Antarctic Ice Cap']):\n    plt.annotate('Antarctic Ice Cap', (df['Year'][i], df['Antarctic Ice Cap'][i]))\n\nfor i, txt in enumerate(df['Global Sea Level']):\n    plt.annotate('Global Sea Level', (df['Year'][i], df['Global Sea Level'][i]))\n\nplt.title('Ice Caps and Sea Level Changes Over Years')\nplt.xlabel('Year')\nplt.ylabel('Measurement')\nplt.legend()\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_61ed8fef9418fb4a/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_61ed8fef9418fb4a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_61ed8fef9418fb4a/myplot.png"
    },
    {
        "id": "Step_7cc7a0eb98c3d5a2",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a pandas DataFrame for your data\ndata = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020]*5,\n    'Country': ['United States']*4 + ['United Kingdom']*4 + ['Germany']*4 + ['Australia']*4 + ['Canada']*4,\n    'Percentage': [3.5, 4.2, 5.8, 7.6, 2.1, 3.4, 4.5, 5.9, 1.8, 2.5, 3.3, 4.2, 1.2, 1.8, 2.6, 3.5, 1.5, 2.2, 3.1, 4.1]\n})\n\n# Create a figure and axis object\nfig, ax = plt.subplots()\n\n# Draw a stair plot for each country\nfor country in data['Country'].unique():\n    country_data = data[data['Country'] == country]\n    ax.step(country_data['Year'], country_data['Percentage'], where='mid', label=country)\n\n# Set labels\nax.set_xlabel('Year')\nax.set_ylabel('Percentage of Total Restaurant Sales')\n\n# Set title\nax.set_title('Trend in the Consumption of Plant-Based Meat Alternatives')\n\n# Create legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the transparency of the step line that contains the center point of the bounding box to 0.3.",
        "Input_image": "./test_dataset/Step/Step_7cc7a0eb98c3d5a2/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a pandas DataFrame for your data\ndata = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020]*5,\n    'Country': ['United States']*4 + ['United Kingdom']*4 + ['Germany']*4 + ['Australia']*4 + ['Canada']*4,\n    'Percentage': [3.5, 4.2, 5.8, 7.6, 2.1, 3.4, 4.5, 5.9, 1.8, 2.5, 3.3, 4.2, 1.2, 1.8, 2.6, 3.5, 1.5, 2.2, 3.1, 4.1]\n})\n\n# Create a figure and axis object\nfig, ax = plt.subplots()\n\n# Draw a stair plot for each country\nfor country in data['Country'].unique():\n    country_data = data[data['Country'] == country]\n    ax.step(country_data['Year'], country_data['Percentage'], where='mid', label=country)\n\n# Set transparency of the step line corresponding to the Target_object\nfor idx, line in enumerate(ax.lines):\n    if idx == 0:  # Assuming the first line is the target\n        line.set_alpha(0.3)\n\n# Set labels\nax.set_xlabel('Year')\nax.set_ylabel('Percentage of Total Restaurant Sales')\n\n# Set title\nax.set_title('Trend in the Consumption of Plant-Based Meat Alternatives')\n\n# Create legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_7cc7a0eb98c3d5a2/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_7cc7a0eb98c3d5a2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_7cc7a0eb98c3d5a2/figure.png"
    },
    {
        "id": "Step_b468c9d20b544d32",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]\nplastic_waste_in_tons = [8.4, 9.2, 10.1, 11.5, 12.8, 13.6, 14.3, 15.2, 16.8, 18.5, 20.3]\n\n# Plot\nplt.figure(figsize=(10, 5))\nplt.step(years, plastic_waste_in_tons, where='post') # 'post': each y value is repeated, creating a horizontal line\n\n# Title and labels\nplt.title(\"Annual Increase in Ocean Pollution Caused by Plastic Waste (2010-2020)\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Plastic Waste in Tons\")\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the marker face color to #def46f and marker style to 's' for the points that contain the center point of the bounding box, and make sure that the rasterized state for these points is set to False.",
        "Input_image": "./test_dataset/Step/Step_b468c9d20b544d32/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]\nplastic_waste_in_tons = [8.4, 9.2, 10.1, 11.5, 12.8, 13.6, 14.3, 15.2, 16.8, 18.5, 20.3]\n\n# Plot\nplt.figure(figsize=(10, 5))\nstep_plot = plt.step(years, plastic_waste_in_tons, where='post',marker='s', markerfacecolor='#def46f', rasterized=False) # 'post': each y value is repeated, creating a horizontal line\n\n# Title and labels\nplt.title(\"Annual Increase in Ocean Pollution Caused by Plastic Waste (2010-2020)\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Plastic Waste in Tons\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_b468c9d20b544d32/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_b468c9d20b544d32/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_b468c9d20b544d32/figure.png"
    },
    {
        "id": "Step_614d883f8549b1cb",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Age groups with corresponding data\ndata = {\n    '18-24': [81, 84, 87, 89, 92],\n    '25-34': [77, 79, 82, 85, 88],\n    '35-44': [60, 64, 68, 72, 76],\n    '45-54': [40, 43, 46, 49, 52],\n    '55+': [26, 29, 32, 35, 38]\n}\n\n# Years on x-axis\nyears = [2016, 2017, 2018, 2019, 2020]\n\n# Create step plot for each age group\nfor age_group, values in data.items():\n    plt.step(years, values, where='post', label=age_group)\n\nplt.xlabel('Years')\nplt.ylabel('% of Internet Users Engaging with Social Media')\nplt.title('Growth of Social Media Usage Among Different Age Groups (2016-2020)')\nplt.legend(title='Age Groups:')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Show the marker and set the marker edge color for the portion in the center of the bounding box that corresponds to the target to #368d14.",
        "Input_image": "./test_dataset/Step/Step_614d883f8549b1cb/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Age groups with corresponding data\ndata = {\n    '18-24': [81, 84, 87, 89, 92],\n    '25-34': [77, 79, 82, 85, 88],\n    '35-44': [60, 64, 68, 72, 76],\n    '45-54': [40, 43, 46, 49, 52],\n    '55+': [26, 29, 32, 35, 38]\n}\n\n# Years on x-axis\nyears = [2016, 2017, 2018, 2019, 2020]\n\n# Create step plot for each age group\nfor i, (age_group, values) in enumerate(data.items()):\n    if i == 1:  # Apply marker edge color to specific line\n        plt.step(years, values, where='post', label=age_group, marker='o', markersize=8, markeredgecolor='#368d14')\n    else:\n        plt.step(years, values, where='post', label=age_group)\n\nplt.xlabel('Years')\nplt.ylabel('% of Internet Users Engaging with Social Media')\nplt.title('Growth of Social Media Usage Among Different Age Groups (2016-2020)')\nplt.legend(title='Age Groups:')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_614d883f8549b1cb/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_614d883f8549b1cb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_614d883f8549b1cb/figure.png"
    },
    {
        "id": "Step_3899f3fba37443de",
        "Input_code": "import matplotlib.pyplot as plt\n\n# years from 2017 to 2021\nyears = [2017, 2018, 2019, 2020, 2021]\n\n# corresponding college acceptance rates in percentage\nacceptance_rate = [40, 35, 32, 28, 30]\n\nplt.figure(figsize=(9,6))\n\n# plotting a step or stair plot\nplt.step(years, acceptance_rate, where='mid', color='blue', linewidth=2)\n\nplt.ylim(0, 50)  # Set y axis limits\nplt.ylabel('Acceptance Rate (%)')  # Add a label to the y axis\nplt.xlabel('Years')  # Add a label to x axis\nplt.title('College Admission Statistics Over \\n a Five-Year Period')  # Add a title to the plot\n\n# modifying y ticks to display values up to 50 in increments of 10\nplt.yticks(ticks=range(0,51,10))\n\nplt.grid(True)  # Display gridlines on the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the line that contains the center point of the bounding box to the coordinates (271, 373), with a width of 183 and a height of 766, following the matplotlib.transforms.Bbox pattern. Also, apply a stroke to the same line with a linewidth of 3.1768 and a foreground color of #c7dd88.",
        "Input_image": "./test_dataset/Step/Step_3899f3fba37443de/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\nimport matplotlib.patheffects as path_effects\n\n# years from 2017 to 2021\nyears = [2017, 2018, 2019, 2020, 2021]\n\n# corresponding college acceptance rates in percentage\nacceptance_rate = [40, 35, 32, 28, 30]\n\nplt.figure(figsize=(9,6))\n\n# Define clip box\nclip_box = Bbox.from_bounds(271, 373, 183, 766)\n\n# Define stroke effect\nstroke_effect = path_effects.withStroke(linewidth=3.176804678993222, foreground='#c7dd88')\n\n# plotting a step or stair plot with clip box and stroke effect\nstep_plot = plt.step(years, acceptance_rate, where='mid', color='blue', linewidth=2, path_effects=[stroke_effect])\nstep_plot[0].set_clip_box(clip_box)\n\nplt.ylim(0, 50)  # Set y axis limits\nplt.ylabel('Acceptance Rate (%)')  # Add a label to the y axis\nplt.xlabel('Years')  # Add a label to x axis\nplt.title('College Admission Statistics Over \\n a Five-Year Period')  # Add a title to the plot\n\n# modifying y ticks to display values up to 50 in increments of 10\nplt.yticks(ticks=range(0,51,10))\n\nplt.grid(True)  # Display gridlines on the plot\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_3899f3fba37443de/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_3899f3fba37443de/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_3899f3fba37443de/figure.png"
    },
    {
        "id": "Step_de9bea91b19ec5ea",
        "Input_code": "# import the required libraries\nimport matplotlib.pyplot as plt\n\n# Time points\ntime_points = [0, 5, 10, 15, 20]\n\n# Neural activity data for each region\nfrontal_cortex = [75, 80, 85, 90, 95]\nhippocampus = [60, 65, 70, 75, 80]\namygdala = [50, 55, 60, 65, 70]\nthalamus = [40, 45, 50, 55, 60]\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data with 'step' style for each region\nax.step(time_points, frontal_cortex, where='mid', label='Frontal Cortex')\nax.step(time_points, hippocampus, where='mid', label='Hippocampus')\nax.step(time_points, amygdala, where='mid', label='Amygdala')\nax.step(time_points, thalamus, where='mid', label='Thalamus')\n\n# Set additional properties for the plot\nax.set_xlabel('Time (seconds)')\nax.set_ylabel('Neural Activity (Hz)')\nax.set_title('Neural Activity Mapping in Different Brain Regions During a Cognitive Task')\nax.legend(loc='upper left')\nax.grid(True)\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Overlay a dashed step line on the section of the step chart that contains the center point of the bounding box to create a glow effect. Use a glow color of '#0cb484', a dash pattern of (15, 10), and set the transparency (alpha) to 0.5.",
        "Input_image": "./test_dataset/Step/Step_de9bea91b19ec5ea/Visual_figure.png",
        "Test_code": "# import the required libraries\nimport matplotlib.pyplot as plt\n\n# Time points\ntime_points = [0, 5, 10, 15, 20]\n\n# Neural activity data for each region\nfrontal_cortex = [75, 80, 85, 90, 95]\nhippocampus = [60, 65, 70, 75, 80]\namygdala = [50, 55, 60, 65, 70]\nthalamus = [40, 45, 50, 55, 60]\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data with 'step' style for each region\nax.step(time_points, frontal_cortex, where='mid', label='Frontal Cortex')\nax.step(time_points, hippocampus, where='mid', label='Hippocampus')\nax.step(time_points, amygdala, where='mid', label='Amygdala')\nax.step(time_points, thalamus, where='mid', label='Thalamus')\n\n# Overlay a dashed step line on the step chart corresponding to the Target_object to create a glow effect\nfor idx, line in enumerate(ax.lines):\n    if idx == 1:  # Target_object is the Hippocampus line\n        ax.step(time_points, hippocampus, where='mid', color='#0cb484', linestyle=(0, (15, 10)), alpha=0.5, linewidth=2)\n\n# Set additional properties for the plot\nax.set_xlabel('Time (seconds)')\nax.set_ylabel('Neural Activity (Hz)')\nax.set_title('Neural Activity Mapping in Different Brain Regions During a Cognitive Task')\nax.legend(loc='upper left')\nax.grid(True)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_de9bea91b19ec5ea/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_de9bea91b19ec5ea/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_de9bea91b19ec5ea/figure.png"
    },
    {
        "id": "Step_e16b71acbd41f49e",
        "Input_code": "# import the required libraries\nimport matplotlib.pyplot as plt\n\n# Time points\ntime_points = [0, 5, 10, 15, 20]\n\n# Neural activity data for each region\nfrontal_cortex = [75, 80, 85, 90, 95]\nhippocampus = [60, 65, 70, 75, 80]\namygdala = [50, 55, 60, 65, 70]\nthalamus = [40, 45, 50, 55, 60]\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data with 'step' style for each region\nax.step(time_points, frontal_cortex, where='mid', label='Frontal Cortex')\nax.step(time_points, hippocampus, where='mid', label='Hippocampus')\nax.step(time_points, amygdala, where='mid', label='Amygdala')\nax.step(time_points, thalamus, where='mid', label='Thalamus')\n\n# Set additional properties for the plot\nax.set_xlabel('Time (seconds)')\nax.set_ylabel('Neural Activity (Hz)')\nax.set_title('Neural Activity Mapping in Different Brain Regions During a Cognitive Task')\nax.legend(loc='upper left')\nax.grid(True)\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the marker edge width of the points that contain the center point of the bounding box to 0.63 and style to '>'.",
        "Input_image": "./test_dataset/Step/Step_e16b71acbd41f49e/Visual_figure.png",
        "Test_code": "# import the required libraries\nimport matplotlib.pyplot as plt\n\n# Time points\ntime_points = [0, 5, 10, 15, 20]\n\n# Neural activity data for each region\nfrontal_cortex = [75, 80, 85, 90, 95]\nhippocampus = [60, 65, 70, 75, 80]\namygdala = [50, 55, 60, 65, 70]\nthalamus = [40, 45, 50, 55, 60]\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data with 'step' style for each region\nlines = []\nlines.append(ax.step(time_points, frontal_cortex, where='mid', label='Frontal Cortex'))\nlines.append(ax.step(time_points, hippocampus, where='mid', label='Hippocampus'))\nlines.append(ax.step(time_points, amygdala, where='mid', label='Amygdala'))\nlines.append(ax.step(time_points, thalamus, where='mid', label='Thalamus'))\n\n# Set marker edge width for the target object\nfor line in lines[0]:\n    line.set_markeredgewidth(0.63)\n    line.set_marker('>')\n\n# Set additional properties for the plot\nax.set_xlabel('Time (seconds)')\nax.set_ylabel('Neural Activity (Hz)')\nax.set_title('Neural Activity Mapping in Different Brain Regions During a Cognitive Task')\nax.legend(loc='upper left')\nax.grid(True)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_e16b71acbd41f49e/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_e16b71acbd41f49e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_e16b71acbd41f49e/figure.png"
    },
    {
        "id": "Step_9831fa64fc517dcb",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Setting the data\noceans = ['Atlantic Ocean', 'Indian Ocean', 'Pacific Ocean', 'Southern Ocean', 'Arctic Ocean']\navg_lifetimes = [80, 100, 60, 50, 30]\n\n# Creating the Stair Plot\nplt.step(oceans, avg_lifetimes, where='mid', color='green')\n\n# Setting the title and labels\nplt.title('Average Lifetime of Sea Turtles in Various Oceans')\nplt.xlabel('Oceans')\nplt.ylabel('Average Lifetime of Sea Turtles (in years)')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Apply a glowing effect to the endpoints of the step line segments that contain the center point of the bounding box. Set the glow size to 2.7 and the color to '#b1127e'.",
        "Input_image": "./test_dataset/Step/Step_9831fa64fc517dcb/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Setting the data\noceans = ['Atlantic Ocean', 'Indian Ocean', 'Pacific Ocean', 'Southern Ocean', 'Arctic Ocean']\navg_lifetimes = [80, 100, 60, 50, 30]\n\n# Creating the Stair Plot\nplt.step(oceans, avg_lifetimes, where='mid', color='green')\n\n# Adding glowing endpoint effect\nfor line in plt.gca().lines:\n    x_data = line.get_xdata()\n    y_data = line.get_ydata()\n    plt.scatter(x_data, y_data, s=2.7, color='#b1127e', zorder=5)\n\n# Setting the title and labels\nplt.title('Average Lifetime of Sea Turtles in Various Oceans')\nplt.xlabel('Oceans')\nplt.ylabel('Average Lifetime of Sea Turtles (in years)')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_9831fa64fc517dcb/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_9831fa64fc517dcb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_9831fa64fc517dcb/figure.png"
    },
    {
        "id": "Step_40cdb79f43aa8153",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nyear = [1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020]\ntemperature_anomalies = [0.0, 0.2, 0.3, 0.4, 0.5, 0.6, 0.8, 1.1, 1.2, 1.3, 1.4, 1.6, 1.9]\nco2_concentration = [299, 301, 303, 305, 308, 312, 317, 327, 337, 356, 369, 387, 412]\nch4_concentration = [645, 660, 665, 670, 680, 690, 700, 710, 720, 730, 745, 760, 780]\n\nfig, ax1 = plt.subplots()\n\n# Plot temperature anomalies\nax1.plot(year, temperature_anomalies, 'b-', drawstyle='steps', label='Temperature Anomalies (\u00b0C)')\nax1.set_xlabel('Year')\nax1.set_ylabel('Temperature Anomalies (\u00b0C)', color='b')\nax1.tick_params('y', colors='b')\n\n# Create a second y-axis for the concentration of greenhouse gases\nax2 = ax1.twinx()\nax2.plot(year, co2_concentration, 'g-', drawstyle='steps', label='CO2 Concentration (ppm)')\nax2.plot(year, ch4_concentration, 'r-', drawstyle='steps', label='CH4 Concentration (ppb)')\nax2.set_ylabel('Concentration (ppm/ppb)', color='g')\nax2.tick_params('y', colors='g')\n\nfig.tight_layout()\nplt.title('Change in Global Temperatures and Greenhouse Gas Concentrations')\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Apply a glowing endpoint effect to each segment of the step line that includes the center point of the bounding box. Use an endpoint size of 5.7 and set the color to '#a10968'.",
        "Input_image": "./test_dataset/Step/Step_40cdb79f43aa8153/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nyear = [1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020]\ntemperature_anomalies = [0.0, 0.2, 0.3, 0.4, 0.5, 0.6, 0.8, 1.1, 1.2, 1.3, 1.4, 1.6, 1.9]\nco2_concentration = [299, 301, 303, 305, 308, 312, 317, 327, 337, 356, 369, 387, 412]\nch4_concentration = [645, 660, 665, 670, 680, 690, 700, 710, 720, 730, 745, 760, 780]\n\nfig, ax1 = plt.subplots()\n\n# Plot temperature anomalies\nax1.plot(year, temperature_anomalies, 'b-', drawstyle='steps', label='Temperature Anomalies (\u00b0C)',markersize=5.7, markerfacecolor='#a10968',marker='o')\nax1.set_xlabel('Year')\nax1.set_ylabel('Temperature Anomalies (\u00b0C)', color='b')\nax1.tick_params('y', colors='b')\n\n# Create a second y-axis for the concentration of greenhouse gases\nax2 = ax1.twinx()\nax2.plot(year, co2_concentration, 'g-', drawstyle='steps', label='CO2 Concentration (ppm)')\nax2.plot(year, ch4_concentration, 'r-', drawstyle='steps', label='CH4 Concentration (ppb)')\nax2.set_ylabel('Concentration (ppm/ppb)', color='g')\nax2.tick_params('y', colors='g')\n\n\nfig.tight_layout()\nplt.title('Change in Global Temperatures and Greenhouse Gas Concentrations')\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_40cdb79f43aa8153/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_40cdb79f43aa8153/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_40cdb79f43aa8153/figure.png"
    },
    {
        "id": "Step_ffafdfa215abef0c",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2016, 2017, 2018, 2019, 2020]\nproductivity_growth = [5, 8, 10, 12, 15]\n\n# Create the plot\nplt.figure(figsize=(8, 6))\nplt.step(years, productivity_growth, where='post')\n\n# Add labels and title\nplt.xlabel('Years')\nplt.ylabel('Productivity Growth (%)')\nplt.title('Productivity Growth in Technology Companies (2016-2020)')\n\n# Show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the line that contains the center point of the bounding box to #858cf4. Additionally, show the marker and update the marker edge color for the same line to #25d6cf.",
        "Input_image": "./test_dataset/Step/Step_ffafdfa215abef0c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2016, 2017, 2018, 2019, 2020]\nproductivity_growth = [5, 8, 10, 12, 15]\n\n# Create the plot\nplt.figure(figsize=(8, 6))\nstep = plt.step(years, productivity_growth, where='post', marker='o', markersize=8, markerfacecolor='#858cf4', markeredgecolor='#25d6cf')\n\n# Add labels and title\nplt.xlabel('Years')\nplt.ylabel('Productivity Growth (%)')\nplt.title('Productivity Growth in Technology Companies (2016-2020)')\n\n# Show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_ffafdfa215abef0c/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_ffafdfa215abef0c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_ffafdfa215abef0c/figure.png"
    },
    {
        "id": "Step_991ccfbc05b2efb1",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating the data\ncompanies = [\"Company A\", \"Company B\", \"Company C\", \"Company D\", \"Company E\"]\nmale_salaries = [90000, 95000, 100000, 92000, 88000]\nfemale_salaries = [80000, 85000, 90000, 82000, 78000]\n\nx = np.arange(len(companies))\n\n# Creating the plot\nfig, ax = plt.subplots()\n\nax.step(x, male_salaries, label='Male', where='mid')\nax.step(x, female_salaries, label='Female', where='mid')\n\n# Customizing the plot\nax.set_xlabel(\"Companies\")\nax.set_ylabel(\"Average Salary (in USD)\")\nax.set_title(\"Gender Pay Gap in the Tech Industry\")\nax.set_xticks(x)\nax.set_xticklabels(companies)\nax.legend()\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the dash pattern of the step line that contains the center point of the bounding box to ':'.\n",
        "Input_image": "./test_dataset/Step/Step_991ccfbc05b2efb1/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating the data\ncompanies = [\"Company A\", \"Company B\", \"Company C\", \"Company D\", \"Company E\"]\nmale_salaries = [90000, 95000, 100000, 92000, 88000]\nfemale_salaries = [80000, 85000, 90000, 82000, 78000]\n\nx = np.arange(len(companies))\n\n# Creating the plot\nfig, ax = plt.subplots()\n\nax.step(x, male_salaries, label='Male', where='mid')\nax.step(x, female_salaries, label='Female', where='mid')\n\nfor idx, line in enumerate(ax.lines):\n    if idx == 1:\n        line.set_linestyle(':')\n# Customizing the plot\nax.set_xlabel(\"Companies\")\nax.set_ylabel(\"Average Salary (in USD)\")\nax.set_title(\"Gender Pay Gap in the Tech Industry\")\nax.set_xticks(x)\nax.set_xticklabels(companies)\nax.legend()\n\n\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_991ccfbc05b2efb1/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_991ccfbc05b2efb1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_991ccfbc05b2efb1/figure.png"
    },
    {
        "id": "Step_ff8b61a2c2e260ca",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Declaring the data in lists\nplanets = ['Planet A', 'Planet B', 'Planet C', 'Planet D', 'Planet E']\nspecies_x = [1000, 800, 2000, 1500, 300]\nspecies_y = [5000, 3000, 1000, 200, 4000]\nspecies_z = [200, 1000, 500, 8000, 700]\n\n# Creating subplots\nfig, ax = plt.subplots()\n\n# Setting line sequences and plotting\nax.step(planets, species_x, where='mid', label='Species X')\nax.step(planets, species_y, where='mid',label='Species Y')\nax.step(planets, species_z, where='mid',label='Species Z')\n\n# Adding some extra space to the y-axis for readablity\nymax = max(max(species_x), max(species_y), max(species_z)) + 500\nplt.ylim(0, ymax)\n\n# Defining labels, title and grid\nplt.xlabel('Planets')\nplt.ylabel('Estimated population numbers')\nplt.title('Estimated populations of different types of extraterrestrial life forms')\n\n# Adding a legend\nax.legend()\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Overlay a dashed line on the portion of the step chart that contains the center point of the bounding box to create a glow effect. Use the glow color '#4d1372', apply a dash pattern of (15, 10), and set the transparency to 0.5.",
        "Input_image": "./test_dataset/Step/Step_ff8b61a2c2e260ca/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Declaring the data in lists\nplanets = ['Planet A', 'Planet B', 'Planet C', 'Planet D', 'Planet E']\nspecies_x = [1000, 800, 2000, 1500, 300]\nspecies_y = [5000, 3000, 1000, 200, 4000]\nspecies_z = [200, 1000, 500, 8000, 700]\n\n# Creating subplots\nfig, ax = plt.subplots()\n\n# Setting line sequences and plotting\nax.step(planets, species_x, where='mid', label='Species X')\nax.step(planets, species_y, where='mid',label='Species Y')\nax.step(planets, species_z, where='mid',label='Species Z')\n\n# Overlay a dashed step line on the step chart corresponding to the Target_object\nfor idx, line in enumerate(ax.lines):\n    if idx == 1:  # Target_object is Species Y\n        ax.step(planets, species_y, where='mid', color='#4d1372', linestyle=(0, (15, 10)), alpha=0.5)\n\n# Adding some extra space to the y-axis for readability\nymax = max(max(species_x), max(species_y), max(species_z)) + 500\nplt.ylim(0, ymax)\n\n# Defining labels, title and grid\nplt.xlabel('Planets')\nplt.ylabel('Estimated population numbers')\nplt.title('Estimated populations of different types of extraterrestrial life forms')\n\n# Adding a legend\nax.legend()\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_ff8b61a2c2e260ca/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_ff8b61a2c2e260ca/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_ff8b61a2c2e260ca/figure.png"
    },
    {
        "id": "Step_4b39e28efdbbaebf",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Decades (X-axis)\ndecades = ['1950s', '1960s', '1970s', '1980s', '1990s', '2000s', '2010s', '2020s']\n\n# Percent of listeners per genre (Y-axis)\npop_music = [20, 30, 35, 45, 50, 60, 70, 75]\nrock_music = [80, 75, 65, 60, 50, 30, 25, 20]\nhip_hop_music = [5, 10, 25, 40, 60, 80, 85, 90]\nelectronic_music = [0, 2, 5, 10, 15, 25, 40, 65]\n\nplt.figure(figsize=[10,8])\n\nplt.step(decades, pop_music, where='mid', label='Pop Music')\nplt.step(decades, rock_music, where='mid', label='Rock Music')\nplt.step(decades, hip_hop_music, where='mid', label='Hip Hop Music')\nplt.step(decades, electronic_music, where='mid', label='Electronic Music')\n\nplt.ylim([0, 100])\nplt.title('Music Genre Preferences Over Time')\nplt.xlabel('Decades')\nplt.ylabel('Percentage of Listeners')\nplt.legend(loc='best')  \nplt.grid(True)\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the lines that contain the center point of the bounding box to True. For those same points, apply a stroke with a linewidth of 4.455 and a foreground color of #4ff741.",
        "Input_image": "./test_dataset/Step/Step_4b39e28efdbbaebf/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Decades (X-axis)\ndecades = ['1950s', '1960s', '1970s', '1980s', '1990s', '2000s', '2010s', '2020s']\n\n# Percent of listeners per genre (Y-axis)\npop_music = [20, 30, 35, 45, 50, 60, 70, 75]\nrock_music = [80, 75, 65, 60, 50, 30, 25, 20]\nhip_hop_music = [5, 10, 25, 40, 60, 80, 85, 90]\nelectronic_music = [0, 2, 5, 10, 15, 25, 40, 65]\n\nplt.figure(figsize=[10,8])\n\nstroke_effect = path_effects.withStroke(linewidth=4.455047622066301, foreground='#4ff741')\n\nplt.step(decades, pop_music, where='mid', label='Pop Music', clip_on=True, path_effects=[stroke_effect])\nplt.step(decades, rock_music, where='mid', label='Rock Music')\nplt.step(decades, hip_hop_music, where='mid', label='Hip Hop Music')\nplt.step(decades, electronic_music, where='mid', label='Electronic Music')\n\nplt.ylim([0, 100])\nplt.title('Music Genre Preferences Over Time')\nplt.xlabel('Decades')\nplt.ylabel('Percentage of Listeners')\nplt.legend(loc='best')  \nplt.grid(True)\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_4b39e28efdbbaebf/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_4b39e28efdbbaebf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_4b39e28efdbbaebf/figure.png"
    },
    {
        "id": "Step_041b26f3c6fb3582",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np \n\n# Defined temperature range \ntemp_range = ['15-18', '19-22', '23-26', '27-30', '31-34']\n\n# Corresponding coffee consumption\ncoffee_consumption = [50, 53, 57, 62, 68]\n\n# prepare x values, range by 1 start from 0; same length as y\nx = np.arange(len(coffee_consumption))\n\n# Creating a stair plot\nplt.figure(figsize=[10,5])\nplt.step(x, coffee_consumption, where='mid', label='pre (default)')\n\n# Setting X-axis labels \nplt.xticks(x, temp_range)\n\nplt.xlabel('Average Annual Temperature in Celsius')\nplt.ylabel('Global Coffee Consumption (in million bags)')\nplt.title('Global Coffee Consumption vs Temperature in Coffee Producing Regions')\nplt.legend(title='Parameter where:')\nplt.grid()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the line that contains the center point of the bounding box to #2c6437. Additionally, set the snap state of this line to False for the same line.",
        "Input_image": "./test_dataset/Step/Step_041b26f3c6fb3582/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np \n\n# Defined temperature range \ntemp_range = ['15-18', '19-22', '23-26', '27-30', '31-34']\n\n# Corresponding coffee consumption\ncoffee_consumption = [50, 53, 57, 62, 68]\n\n# prepare x values, range by 1 start from 0; same length as y\nx = np.arange(len(coffee_consumption))\n\n# Creating a stair plot\nplt.figure(figsize=[10,5])\nstep_plot = plt.step(x, coffee_consumption, where='mid', label='pre (default)', color='#2c6437', snap=False)\n\n# Setting X-axis labels \nplt.xticks(x, temp_range)\n\nplt.xlabel('Average Annual Temperature in Celsius')\nplt.ylabel('Global Coffee Consumption (in million bags)')\nplt.title('Global Coffee Consumption vs Temperature in Coffee Producing Regions')\nplt.legend(title='Parameter where:')\nplt.grid()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_041b26f3c6fb3582/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_041b26f3c6fb3582/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_041b26f3c6fb3582/figure.png"
    },
    {
        "id": "Step_22798b22e703a4a4",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# different periods categories ('Pre-covid', 'Lockdown', 'Recovery', 'Post-covid')\nstages = np.array([0, 1, 2, 3])\n\n# randomly generated revenue for each destination.\nParis = np.array([200, 80, 150, 210])\nNew_York = np.array([220, 60, 160, 205])\nRome = np.array([210, 70, 140, 220])\nTokyo = np.array([230, 75, 150, 215])\nLondon = np.array([220, 65, 155, 210])\n\n# Plotting using matplotlib's step function\nplt.figure(figsize=(10,6))\nplt.step(stages, Paris, where='mid', label='Paris')\nplt.step(stages, New_York, where='mid', label='New York')\nplt.step(stages, Rome, where='mid', label='Rome')\nplt.step(stages, Tokyo, where='mid', label='Tokyo')\nplt.step(stages, London, where='mid', label='London')\n\nplt.xticks(stages, ['Pre-COVID', 'Lockdown', 'Recovery', 'Post-COVID'])\nplt.yticks(np.arange(0,250,50))\n\nplt.legend()\nplt.title('Revenue Generated by Popular Destinations during COVID-19')\nplt.xlabel('COVID-19 Stages')\nplt.ylabel('Revenue (in Billions)')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Apply a glowing effect to the endpoints of the step line segments that contain the center point of the bounding box. Set the endpoint size to 4.3 and color them '#42effc'.",
        "Input_image": "./test_dataset/Step/Step_22798b22e703a4a4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# different periods categories ('Pre-covid', 'Lockdown', 'Recovery', 'Post-covid')\nstages = np.array([0, 1, 2, 3])\n\n# randomly generated revenue for each destination.\nParis = np.array([200, 80, 150, 210])\nNew_York = np.array([220, 60, 160, 205])\nRome = np.array([210, 70, 140, 220])\nTokyo = np.array([230, 75, 150, 215])\nLondon = np.array([220, 65, 155, 210])\n\n# Plotting using matplotlib's step function\nplt.figure(figsize=(10,6))\nplt.step(stages, Paris, where='mid', label='Paris')\nplt.step(stages, New_York, where='mid', label='New York')\nplt.step(stages, Rome, where='mid', label='Rome')\nplt.step(stages, Tokyo, where='mid', label='Tokyo')\nplt.step(stages, London, where='mid', label='London')\n\nplt.xticks(stages, ['Pre-COVID', 'Lockdown', 'Recovery', 'Post-COVID'])\nplt.yticks(np.arange(0,250,50))\n\n# Adding glowing endpoint effect to each segment of the step line corresponding to the Target_object\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == 1:  # Assuming New York is the target object\n        x_data, y_data = line.get_xdata(), line.get_ydata()\n        for i in range(len(x_data) - 1):\n            plt.scatter(x_data[i], y_data[i], s=4.3**2, color='#42effc', edgecolors='none', alpha=0.6)\n        plt.scatter(x_data[-1], y_data[-1], s=4.3**2, color='#42effc', edgecolors='none', alpha=0.6)\n\nplt.legend()\nplt.title('Revenue Generated by Popular Destinations during COVID-19')\nplt.xlabel('COVID-19 Stages')\nplt.ylabel('Revenue (in Billions)')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_22798b22e703a4a4/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_22798b22e703a4a4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_22798b22e703a4a4/figure.png"
    },
    {
        "id": "Step_4daadcd18906156d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# education levels and corresponding smoking rates\neducation_levels = ['High School Diploma', 'Bachelor\\'s Degree', 'Master\\'s Degree', 'Doctorate']\nsmoking_rates = [25, 18, 12, 8]\n\nfig, ax = plt.subplots()\n\n# stair plot\nax.step(education_levels, smoking_rates, where='mid')\n\n# labeling the plot\nax.set_xlabel('Education Level')\nax.set_ylabel('Smoking Rate (%)')\nax.set_title('Relationship between Education Level and Smoking Rate')\n\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the clipping state of the lines that contain the center point of the bounding box to False. Additionally, set the picker state of those lines to True.",
        "Input_image": "./test_dataset/Step/Step_4daadcd18906156d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# education levels and corresponding smoking rates\neducation_levels = ['High School Diploma', 'Bachelor\\'s Degree', 'Master\\'s Degree', 'Doctorate']\nsmoking_rates = [25, 18, 12, 8]\n\nfig, ax = plt.subplots()\n\n# stair plot\nline = ax.step(education_levels, smoking_rates, where='mid')\nline[0].set_clip_on(False)\nline[0].set_picker(True)\n\n# labeling the plot\nax.set_xlabel('Education Level')\nax.set_ylabel('Smoking Rate (%)')\nax.set_title('Relationship between Education Level and Smoking Rate')\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_4daadcd18906156d/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_4daadcd18906156d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_4daadcd18906156d/figure.png"
    },
    {
        "id": "Step_f7e944284207fb50",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nage_groups = ['18-25', '26-35', '36-45', '46-55', '56-65']\npopularity_scores = [60, 75, 80, 70, 55]\n\n# Create stair plot\nplt.step(age_groups, popularity_scores)\n\n# Set plot title and labels\nplt.title('Popularity of Floral Fragrances Among Different Age Groups')\nplt.xlabel('Age Groups')\nplt.ylabel('Popularity Score')\n\n# Show plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the line that contains the center point of the bounding box to #18183d, and set its linewidth to 2.63 for the same points.",
        "Input_image": "./test_dataset/Step/Step_f7e944284207fb50/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nage_groups = ['18-25', '26-35', '36-45', '46-55', '56-65']\npopularity_scores = [60, 75, 80, 70, 55]\n\n# Create stair plot\nplt.step(age_groups, popularity_scores, color='#18183d', linewidth=2.63)\n\n# Set plot title and labels\nplt.title('Popularity of Floral Fragrances Among Different Age Groups')\nplt.xlabel('Age Groups')\nplt.ylabel('Popularity Score')\n\n# Show plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_f7e944284207fb50/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_f7e944284207fb50/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_f7e944284207fb50/figure.png"
    },
    {
        "id": "Step_ada56603a17ce924",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Months \nMonths = np.array(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n\n# Sales data\nsales_A = np.array([5000, 5200, 4800, 5500, 6200, 7100, 6900, 7300, 8000, 7800, 8200, 8500])\nsales_B = np.array([3000, 3200, 3500, 3800, 4000, 4300, 4800, 4700, 5000, 5100, 5400, 5600])\nsales_C = np.array([1500, 1600, 1800, 1900, 2200, 2400, 2600, 2800, 2900, 3000, 3200, 3300])\n\n# Plotting data\nplt.figure(figsize=(10,7)) # Change the figure size according to your requirement\nplt.step(Months, sales_A, where='mid', label='Category A')\nplt.step(Months, sales_B, where='mid', label='Category B')\nplt.step(Months, sales_C, where='mid', label='Category C')\n\nplt.xlabel('Months')\nplt.ylabel('Sales in USD')\nplt.title('Sales performance of various product categories')\nplt.legend(loc='best')\nplt.grid()\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a glowing endpoint effect to each segment of the step line that contains the center point of the bounding box. Set the endpoint size to 4.1 and use the color '#bb8596'.",
        "Input_image": "./test_dataset/Step/Step_ada56603a17ce924/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Months \nMonths = np.array(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n\n# Sales data\nsales_A = np.array([5000, 5200, 4800, 5500, 6200, 7100, 6900, 7300, 8000, 7800, 8200, 8500])\nsales_B = np.array([3000, 3200, 3500, 3800, 4000, 4300, 4800, 4700, 5000, 5100, 5400, 5600])\nsales_C = np.array([1500, 1600, 1800, 1900, 2200, 2400, 2600, 2800, 2900, 3000, 3200, 3300])\n\n# Plotting data\nplt.figure(figsize=(10,7)) # Change the figure size according to your requirement\nplt.step(Months, sales_A, where='mid', label='Category A')\nplt.step(Months, sales_B, where='mid', label='Category B')\nplt.step(Months, sales_C, where='mid', label='Category C')\n\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == 0:  # Assuming 'Category A' is the target\n        x_data, y_data = line.get_xdata(), line.get_ydata()\n        plt.scatter(x_data, y_data, s=4.1, color='#bb8596', zorder=5)\n\nplt.xlabel('Months')\nplt.ylabel('Sales in USD')\nplt.title('Sales performance of various product categories')\nplt.legend(loc='best')\nplt.grid()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_ada56603a17ce924/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_ada56603a17ce924/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_ada56603a17ce924/figure.png"
    },
    {
        "id": "Step_f0b69e367e5670d4",
        "Input_code": "import matplotlib.pyplot as plt\n\n# X-Axis data\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\n# Y-Axis data\ncrime_rate_urban = [45, 42, 37, 41, 39, 37, 35, 33, 30, 28]\ncrime_rate_suburban = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11]\ncrime_rate_rural = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n# Creating the plot\nplt.figure(figsize=(10, 6))\nplt.step(years, crime_rate_urban, where='mid', label='Urban', color='blue')\nplt.step(years, crime_rate_suburban, where='mid', label='Suburban', color='red')\nplt.step(years, crime_rate_rural, where='mid', label='Rural', color='green')\n\n# Adding titles and labels\nplt.title('Comparing Crime Rates in Urban, Suburban, and Rural Areas (2010-2019)')\nplt.xlabel('Year')\nplt.ylabel('Crime Rate per 1000 Residents')\nplt.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Show the marker and set the marker edge color for the points containing the center point of the bounding box to #c65b86. Additionally, ensure that the picker state for these points is set to False.",
        "Input_image": "./test_dataset/Step/Step_f0b69e367e5670d4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# X-Axis data\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\n# Y-Axis data\ncrime_rate_urban = [45, 42, 37, 41, 39, 37, 35, 33, 30, 28]\ncrime_rate_suburban = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11]\ncrime_rate_rural = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n# Creating the plot\nplt.figure(figsize=(10, 6))\nurban_line = plt.step(years, crime_rate_urban, where='mid', label='Urban', color='blue', marker='o', markersize=8, markeredgecolor='#c65b86', picker=False)\nplt.step(years, crime_rate_suburban, where='mid', label='Suburban', color='red')\nplt.step(years, crime_rate_rural, where='mid', label='Rural', color='green')\n\n# Adding titles and labels\nplt.title('Comparing Crime Rates in Urban, Suburban, and Rural Areas (2010-2019)')\nplt.xlabel('Year')\nplt.ylabel('Crime Rate per 1000 Residents')\nplt.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_f0b69e367e5670d4/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_f0b69e367e5670d4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_f0b69e367e5670d4/figure.png"
    },
    {
        "id": "Step_10da3eac635bdf6b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Values for X-axis (depth below the seafloor in meters)\nx = [0, 100, 200, 300, 400, 500, 600]\n\n# Values for Y-axis (geological age of the sedimentary strata in Mya)\ny = [0, 10, 20, 30, 40, 50, 60]\n\nplt.step(x, y, where='post')\nplt.title('Stratigraphic Composition of Geological Layers Beneath the Seabed')\nplt.xlabel('Depth Below the Seafloor (meters)')\nplt.ylabel('Geological Age (Mya)')\n\nplt.grid(visible=True)\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Turn off the animation for the steps that contain the center point of the bounding box. Additionally, ensure that the picker state for those same steps is set to True.",
        "Input_image": "./test_dataset/Step/Step_10da3eac635bdf6b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Values for X-axis (depth below the seafloor in meters)\nx = [0, 100, 200, 300, 400, 500, 600]\n\n# Values for Y-axis (geological age of the sedimentary strata in Mya)\ny = [0, 10, 20, 30, 40, 50, 60]\n\nstep = plt.step(x, y, where='post')\nstep[0].set_animated(False)\nstep[0].set_picker(True)\nplt.title('Stratigraphic Composition of Geological Layers Beneath the Seabed')\nplt.xlabel('Depth Below the Seafloor (meters)')\nplt.ylabel('Geological Age (Mya)')\n\nplt.grid(visible=True)\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_10da3eac635bdf6b/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_10da3eac635bdf6b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_10da3eac635bdf6b/figure.png"
    },
    {
        "id": "Step_346e38c65b7abd2b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# X-axis data points\ncountries = ['United States', 'United Kingdom', 'France', 'Germany', 'Italy', 'Spain', 'Australia', 'Japan']\n\n# Y-axis data points\nborder_closing = [40, 25, 60, 75, 80, 70, 10, 5]\n\n# Create the stair plot\nplt.step(countries, border_closing, where='mid')\n\n# Adding labels, title and a grid\nplt.title('Popularity of Travel Destinations Based on Border Closings')\nplt.xlabel('Countries')\nplt.ylabel('Border Closings (0-100)')\nplt.grid(True)\n\n# Show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the snap state of the lines that contain the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Step/Step_346e38c65b7abd2b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# X-axis data points\ncountries = ['United States', 'United Kingdom', 'France', 'Germany', 'Italy', 'Spain', 'Australia', 'Japan']\n\n# Y-axis data points\nborder_closing = [40, 25, 60, 75, 80, 70, 10, 5]\n\n# Create the stair plot\nstep = plt.step(countries, border_closing, where='mid')\nstep[0].set_snap(True)\n\n# Adding labels, title and a grid\nplt.title('Popularity of Travel Destinations Based on Border Closings')\nplt.xlabel('Countries')\nplt.ylabel('Border Closings (0-100)')\nplt.grid(True)\n\n# Show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_346e38c65b7abd2b/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_346e38c65b7abd2b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_346e38c65b7abd2b/figure.png"
    },
    {
        "id": "Step_7391c5b3fa2b2edb",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Creating the DataFrame\ndata = {\n    'Toppings': ['Pepperoni', 'Mushrooms', 'Onions', 'Extra Cheese', 'Olives', 'Pineapple', 'Others'],\n    'Northeast': [35, 20, 15, 10, 10, 5, 5],\n    'Midwest': [30, 15, 10, 15, 20, 5, 5],\n    'Southwest': [25, 5, 5, 20, 15, 25, 5],\n    'West Coast': [15, 10, 5, 25, 10, 10, 25]\n}\ndf = pd.DataFrame(data)\n\n# Setting the plot size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Drawing the step plot for each region\nfor region in ['Northeast', 'Midwest', 'Southwest', 'West Coast']:\n    ax.step(df['Toppings'], df[region], where='mid', label=region)\n\n# Setting the plot title and labels\nplt.title('Distribution of Popular Pizza Toppings in Different Regions')\nplt.xlabel('Toppings')\nplt.ylabel('Percentage of Customers (%)')\n\n# Adding a legend\nplt.legend()\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the line that contains the center point of the bounding box to a bounding box defined by the bottom-left corner at (373, 175), with a width of 771 and a height of 279 using `matplotlib.transforms.Bbox`. Also, adjust the marker edge width for the same line to 0.96.",
        "Input_image": "./test_dataset/Step/Step_7391c5b3fa2b2edb/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# Creating the DataFrame\ndata = {\n    'Toppings': ['Pepperoni', 'Mushrooms', 'Onions', 'Extra Cheese', 'Olives', 'Pineapple', 'Others'],\n    'Northeast': [35, 20, 15, 10, 10, 5, 5],\n    'Midwest': [30, 15, 10, 15, 20, 5, 5],\n    'Southwest': [25, 5, 5, 20, 15, 25, 5],\n    'West Coast': [15, 10, 5, 25, 10, 10, 25]\n}\ndf = pd.DataFrame(data)\n\n# Setting the plot size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Drawing the step plot for each region\nclip_box = Bbox.from_bounds(373, 175, 771, 279)\nfor i, region in enumerate(['Northeast', 'Midwest', 'Southwest', 'West Coast']):\n    step, = ax.step(df['Toppings'], df[region], where='mid', label=region)\n    if i == 1:  # Apply modifications to the Midwest region\n        step.set_clip_box(clip_box)\n        step.set_markeredgewidth(0.96)\n\n# Setting the plot title and labels\nplt.title('Distribution of Popular Pizza Toppings in Different Regions')\nplt.xlabel('Toppings')\nplt.ylabel('Percentage of Customers (%)')\n\n# Adding a legend\nplt.legend()\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_7391c5b3fa2b2edb/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_7391c5b3fa2b2edb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_7391c5b3fa2b2edb/figure.png"
    },
    {
        "id": "Step_06ca6379f4dbb5c2",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Given Data\nlongitudes = [32.5, 33.0, 33.5, 34.0, 34.5] # X-axis\ndepths = [1000, 920, 850, 1100, 950]  # Y-axis\n\n# Create the plot\nplt.figure()\nplt.step(longitudes, depths, where='mid')\n\n# Set label names\nplt.xlabel(\"Longitude (degrees)\")\nplt.ylabel(\"Ocean Depth (meters)\")\n\n# Set plot title\nplt.title(\"Ocean Depth Exploration Model\")\n\n# Show the plot\nplt.grid(True)  # to enable grid\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the label of the element that contains the center point of the bounding box to 'A new Label'show the lable in legend. Additionally, set its z-order to 18 and add a shadow effect with an offset of (3.34, 2.11).",
        "Input_image": "./test_dataset/Step/Step_06ca6379f4dbb5c2/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Given Data\nlongitudes = [32.5, 33.0, 33.5, 34.0, 34.5] # X-axis\ndepths = [1000, 920, 850, 1100, 950]  # Y-axis\n\n# Create the plot\nplt.figure()\nstep_plot = plt.step(longitudes, depths, where='mid', label='A new Label', zorder=18, path_effects=[SimpleLineShadow(offset=(3.34, 2.11)), Normal()])\n\n# Set label names\nplt.xlabel(\"Longitude (degrees)\")\nplt.ylabel(\"Ocean Depth (meters)\")\n\n# Set plot title\nplt.title(\"Ocean Depth Exploration Model\")\n\n# Show the plot\nplt.grid(True)  # to enable grid\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_06ca6379f4dbb5c2/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_06ca6379f4dbb5c2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_06ca6379f4dbb5c2/figure.png"
    },
    {
        "id": "Step_80f206d6dc9ce012",
        "Input_code": "import matplotlib.pyplot as plt\n\n# data\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nheight = [5, 8, 11, 18, 24, 30]\n\n# create a new figure\nplt.figure()\n\n# create a step plot\nplt.step(months, height, where='post', label='Plant Height (cm)')\n\n# add a plot title and labels for the x-axis and y-axis\nplt.title('Growth of Plants Infused with Pixie Dust Over Six Months')\nplt.xlabel('Months')\nplt.ylabel('Plant Height (cm)')\n\n# add a legend \nplt.legend()\n\n# show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the step line that contains the center point of the bounding box to '#41a7ff'.",
        "Input_image": "./test_dataset/Step/Step_80f206d6dc9ce012/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# data\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nheight = [5, 8, 11, 18, 24, 30]\n\n# create a new figure\nplt.figure()\n\n# create a step plot\nplt.step(months, height, where='post', label='Plant Height (cm)')\n\n# change the color of the step line\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == 0:\n        line.set_color('#41a7ff')\n\n# add a plot title and labels for the x-axis and y-axis\nplt.title('Growth of Plants Infused with Pixie Dust Over Six Months')\nplt.xlabel('Months')\nplt.ylabel('Plant Height (cm)')\n\n# add a legend \nplt.legend()\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_80f206d6dc9ce012/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_80f206d6dc9ce012/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_80f206d6dc9ce012/figure.png"
    },
    {
        "id": "Step_bf835ae1d11b55aa",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Given data\nsunlight_hours = [2, 4, 6, 8, 10, 12]  # Hours of sunlight exposure\nmental_health_scores = [50, 55, 60, 65, 70, 75]  # Corresponding mental health scores\n\n# Creating the step plot\nplt.figure(figsize=(8, 6))\nplt.step(sunlight_hours, mental_health_scores, where='mid')\n\n# Setting the title and labels\nplt.title('Daily Sunlight Exposure vs. Mental Health Scores in Winter')\nplt.xlabel('Daily Sunlight Exposure in Hours')\nplt.ylabel('Mental Health Scores')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the linestyle of the line that contains the center point of the bounding box to 'dashdot'. Also, show the marker and change the marker edge color for the same line to #81ee9b.",
        "Input_image": "./test_dataset/Step/Step_bf835ae1d11b55aa/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Given data\nsunlight_hours = [2, 4, 6, 8, 10, 12]  # Hours of sunlight exposure\nmental_health_scores = [50, 55, 60, 65, 70, 75]  # Corresponding mental health scores\n\n# Creating the step plot\nplt.figure(figsize=(8, 6))\nplt.step(sunlight_hours, mental_health_scores, where='mid', linestyle='dashdot', marker='o', markerfacecolor='none', markeredgecolor='#81ee9b')\n\n# Setting the title and labels\nplt.title('Daily Sunlight Exposure vs. Mental Health Scores in Winter')\nplt.xlabel('Daily Sunlight Exposure in Hours')\nplt.ylabel('Mental Health Scores')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_bf835ae1d11b55aa/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_bf835ae1d11b55aa/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_bf835ae1d11b55aa/figure.png"
    },
    {
        "id": "Step_e6859982167db5b3",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Year': [1960, 1970, 1980, 1990, 2000],\n    'Missions': [35, 28, 45, 30, 50]\n}\n\n# Create a dataframe from the data\ndf = pd.DataFrame(data)\n\n# Define the x and y data\nx = df['Year']\ny = df['Missions']\n\n# Create a step plot\nplt.step(x, y, label='Missions', linewidth=2, color='blue', marker='o', markersize=5, alpha=0.7)\n\n# Annotate each line\nfor i, txt in enumerate(y):\n    plt.annotate(txt, (x[i], y[i]))\n\n# Set the title, x-label, y-label, and legend\nplt.title('Missions over the years')\nplt.xlabel('Year')\nplt.ylabel('Number of Missions')\nplt.legend()\n\n# Add a grid\nplt.grid(axis='both', color='0.95')\n\n# Set the background color\nplt.gca().set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Transform the step line that contains the center point of the bounding box into a double line. Use '#62a04c' for the color of the second line and set the spacing between the lines to 1 unit.",
        "Input_image": "./test_dataset/Step/Step_e6859982167db5b3/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Year': [1960, 1970, 1980, 1990, 2000],\n    'Missions': [35, 28, 45, 30, 50]\n}\n\n# Create a dataframe from the data\ndf = pd.DataFrame(data)\n\n# Define the x and y data\nx = df['Year']\ny = df['Missions']\n\n# Create a step plot\nplt.step(x, y, label='Missions (Upper)', linewidth=2, color='blue', marker='o', markersize=5, alpha=0.7)\nplt.step(x, [value - 1 for value in y], label='Missions (Lower)', linewidth=2, color='#62a04c', marker='o', markersize=5, alpha=0.7)\n\n# Annotate each line\nfor i, txt in enumerate(y):\n    plt.annotate(txt, (x[i], y[i]))\n\n# Set the title, x-label, y-label, and legend\nplt.title('Missions over the years')\nplt.xlabel('Year')\nplt.ylabel('Number of Missions')\nplt.legend()\n\n# Add a grid\nplt.grid(axis='both', color='0.95')\n\n# Set the background color\nplt.gca().set_facecolor('lightgray')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_e6859982167db5b3/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_e6859982167db5b3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_e6859982167db5b3/myplot.png"
    },
    {
        "id": "Step_ce9474cb47008755",
        "Input_code": "import matplotlib.pyplot as plt \n\n# Data\nyear = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]\ntraditional_carbon = [5000, 5200, 5300, 5400, 5300, 5200, 5300, 5400, 5200, 5100, 5000]\nelectric_carbon = [1500, 1450, 1400, 1350, 1300, 1250, 1200, 1150, 1150, 1100, 1050]\n\n# Create a figure and axis \nfig, ax = plt.subplots()\n\n# Plot stair plot \nax.step(year, traditional_carbon, where='post', label='Traditional Vehicles')\nax.step(year, electric_carbon, where='post', label='Electric Vehicles')\n\n# Set labels and title\nax.set_xlabel('Year')  \nax.set_ylabel('Carbon Emissions (in metric tons)')\nax.set_title('Comparison of Carbon Emissions: Traditional vs Electric Vehicles (2010-2020)')\n\n# Adding legend\nax.legend()\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the line that contains the center point of the bounding box to False. Additionally, change the linewidth of that line to 3.27.",
        "Input_image": "./test_dataset/Step/Step_ce9474cb47008755/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt \n\n# Data\nyear = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]\ntraditional_carbon = [5000, 5200, 5300, 5400, 5300, 5200, 5300, 5400, 5200, 5100, 5000]\nelectric_carbon = [1500, 1450, 1400, 1350, 1300, 1250, 1200, 1150, 1150, 1100, 1050]\n\n# Create a figure and axis \nfig, ax = plt.subplots()\n\n# Plot stair plot \nline1 = ax.step(year, traditional_carbon, where='post', label='Traditional Vehicles', linewidth=3.27, animated=False)\nline2 = ax.step(year, electric_carbon, where='post', label='Electric Vehicles')\n\n# Set labels and title\nax.set_xlabel('Year')  \nax.set_ylabel('Carbon Emissions (in metric tons)')\nax.set_title('Comparison of Carbon Emissions: Traditional vs Electric Vehicles (2010-2020)')\n\n# Adding legend\nax.legend()\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_ce9474cb47008755/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_ce9474cb47008755/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_ce9474cb47008755/figure.png"
    },
    {
        "id": "Step_329dcec926995186",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2015, 2016, 2017, 2018, 2019]\npopulation = [8500, 9200, 9600, 10200, 11000]\n\n# Create Stair Step plot\nplt.step(years, population, where='post')\n\n# Adding titles and labels\nplt.title(\"Population Data over the years\")\nplt.xlabel('Years')\nplt.ylabel('Population Count')\n\n# Showing the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the lines that contain the center point of the bounding box to False. For those same points, change the color of the lines to #7c7f23.",
        "Input_image": "./test_dataset/Step/Step_329dcec926995186/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [2015, 2016, 2017, 2018, 2019]\npopulation = [8500, 9200, 9600, 10200, 11000]\n\n# Create Stair Step plot\nstep_plot = plt.step(years, population, where='post')\nstep_plot[0].set_animated(False)\nstep_plot[0].set_color('#7c7f23')\n\n# Adding titles and labels\nplt.title(\"Population Data over the years\")\nplt.xlabel('Years')\nplt.ylabel('Population Count')\n\n# Showing the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_329dcec926995186/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_329dcec926995186/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_329dcec926995186/figure.png"
    },
    {
        "id": "Step_794dd83fae83a072",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define the data\nspatial_positions = [0, 1, 2, 3, 4, 5, 6]\nprobability_amplitudes = [0.1, 0.3, 0.5, 0.4, 0.2, 0.1, 0]\n\n# Create the figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data using a step plot\nax.step(spatial_positions, probability_amplitudes, where='mid', color='purple', linestyle='-', linewidth=2)\n\n# Set the labels and title\nax.set_xlabel('Spatial Positions')\nax.set_ylabel('Probability Amplitudes')\nax.set_title('Quantum Particle Position Probability Distribution')\n\n# Display grid\nax.grid(True)\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the step lines that include the center point of the bounding box to True. For these same points, adjust the clip box of the step lines to a bounding box with the bottom-left corner at (118, 333), and a width of 397 and height of 822, following the matplotlib.transforms.Bbox format.",
        "Input_image": "./test_dataset/Step/Step_794dd83fae83a072/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Define the data\nspatial_positions = [0, 1, 2, 3, 4, 5, 6]\nprobability_amplitudes = [0.1, 0.3, 0.5, 0.4, 0.2, 0.1, 0]\n\n# Create the figure and axis\nfig, ax = plt.subplots()\n\n# Define the clip box\nclip_box = Bbox.from_bounds(118, 333, 397, 822)\n\n# Plot the data using a step plot\nstep_plot = ax.step(spatial_positions, probability_amplitudes, where='mid', color='purple', linestyle='-', linewidth=2, animated=True)\n\n# Apply the clip box to the step plot\nfor line in step_plot:\n    line.set_clip_box(clip_box)\n\n# Set the labels and title\nax.set_xlabel('Spatial Positions')\nax.set_ylabel('Probability Amplitudes')\nax.set_title('Quantum Particle Position Probability Distribution')\n\n# Display grid\nax.grid(True)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_794dd83fae83a072/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_794dd83fae83a072/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_794dd83fae83a072/figure.png"
    },
    {
        "id": "Step_c5434609e845dd63",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Creating the DataFrame\ndata = {\n    'Toppings': ['Pepperoni', 'Mushrooms', 'Onions', 'Extra Cheese', 'Olives', 'Pineapple', 'Others'],\n    'Northeast': [35, 20, 15, 10, 10, 5, 5],\n    'Midwest': [30, 15, 10, 15, 20, 5, 5],\n    'Southwest': [25, 5, 5, 20, 15, 25, 5],\n    'West Coast': [15, 10, 5, 25, 10, 10, 25]\n}\ndf = pd.DataFrame(data)\n\n# Setting the plot size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Drawing the step plot for each region\nfor region in ['Northeast', 'Midwest', 'Southwest', 'West Coast']:\n    ax.step(df['Toppings'], df[region], where='mid', label=region)\n\n# Setting the plot title and labels\nplt.title('Distribution of Popular Pizza Toppings in Different Regions')\nplt.xlabel('Toppings')\nplt.ylabel('Percentage of Customers (%)')\n\n# Adding a legend\nplt.legend()\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Fill the area below the step line that contains the center point of the bounding box with a gradient, starting with the color '#698c4a' and transitioning to '#60311a'.",
        "Input_image": "./test_dataset/Step/Step_c5434609e845dd63/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom matplotlib.colors import to_rgb\n\n# Creating the DataFrame\ndata = {\n    'Toppings': ['Pepperoni', 'Mushrooms', 'Onions', 'Extra Cheese', 'Olives', 'Pineapple', 'Others'],\n    'Northeast': [35, 20, 15, 10, 10, 5, 5],\n    'Midwest': [30, 15, 10, 15, 20, 5, 5],\n    'Southwest': [25, 5, 5, 20, 15, 25, 5],\n    'West Coast': [15, 10, 5, 25, 10, 10, 25]\n}\ndf = pd.DataFrame(data)\n\n# Setting the plot size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Drawing the step plot for each region\nfor region in ['Northeast', 'Midwest', 'Southwest', 'West Coast']:\n    ax.step(df['Toppings'], df[region], where='mid', label=region)\n\n# Selecting the target object for gradient fill\ntarget_region = 'Southwest'\ntarget_toppings = df['Toppings']\ntarget_values = df[target_region]\n\n# Gradient fill settings\nstart_color = '#698c4a'\nend_color = '#60311a'\nstart_rgb = np.array(to_rgb(start_color))\nend_rgb = np.array(to_rgb(end_color))\nnum_segments = len(target_toppings) - 1\ncolors = [start_rgb + (end_rgb - start_rgb) * (i / num_segments) for i in range(num_segments)]\ny_min, y_max = plt.ylim()\n\n# Applying gradient fill\nfor i in range(num_segments):\n    x0 = target_toppings[i]\n    x1 = target_toppings[i+1]\n    y0 = target_values[i]\n    y1 = target_values[i+1]\n    plt.fill_between([x0, x1], [y0, y1], [y_min, y_min], color=colors[i], step='mid')\n\n# Setting the plot title and labels\nplt.title('Distribution of Popular Pizza Toppings in Different Regions')\nplt.xlabel('Toppings')\nplt.ylabel('Percentage of Customers (%)')\n\n# Adding a legend\nplt.legend()\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Step/Step_c5434609e845dd63/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_c5434609e845dd63/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_c5434609e845dd63/figure.png"
    },
    {
        "id": "Step_2a03374edc34a784",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nactivities = ['Studying', 'Working', 'Socializing', 'Exercising', 'Leisure Activities']\npercentage_distribution = [20, 30, 15, 10, 25]\n\n# Make the data suitable for a step plot\nx = np.concatenate([[i, i+1] for i in range(len(activities))])\ny = np.repeat(percentage_distribution, 2)\n\n# Plot\nplt.figure(figsize=(10,6))\nplt.step(x, y, where='post')\n\n# labeling\nplt.xticks(range(len(activities)), activities)\nplt.yticks(np.arange(0, max(percentage_distribution)+10, step=10))\nplt.xlabel('Activities')\nplt.ylabel('Percentage Distribution (%)')\nplt.title('Time Spent on Daily Activities for Individuals Aged 18-24')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the steps that contain the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Step/Step_2a03374edc34a784/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nactivities = ['Studying', 'Working', 'Socializing', 'Exercising', 'Leisure Activities']\npercentage_distribution = [20, 30, 15, 10, 25]\n\n# Make the data suitable for a step plot\nx = np.concatenate([[i, i+1] for i in range(len(activities))])\ny = np.repeat(percentage_distribution, 2)\n\n# Plot\nplt.figure(figsize=(10,6))\nstep_plot = plt.step(x, y, where='post')\nstep_plot[0].set_clip_on(True)\n\n# labeling\nplt.xticks(range(len(activities)), activities)\nplt.yticks(np.arange(0, max(percentage_distribution)+10, step=10))\nplt.xlabel('Activities')\nplt.ylabel('Percentage Distribution (%)')\nplt.title('Time Spent on Daily Activities for Individuals Aged 18-24')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_2a03374edc34a784/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_2a03374edc34a784/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_2a03374edc34a784/figure.png"
    },
    {
        "id": "Step_cd8fed888c99e3c9",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points\ndog_owners = [8, 7, 6, 9, 8, 9, 9]\ncat_owners = [6, 5, 7, 5, 6, 7, 7]\n\n# Creating lists to hold X-axis labels\nx = list(range(1,len(dog_owners)+1))\nlabel=['Dog Owners']*len(dog_owners)+['Cat Owners']*len(cat_owners)\n\n# Draws the stair plot\nplt.step(x*2, dog_owners+cat_owners, where='mid')\n\n# Adds title and labels to our plot\nplt.title('Comparison of Happiness Levels between Dog Owners and Cat Owners')\nplt.xlabel('Pet Owners')\nplt.ylabel('Happiness Level [0-10]')\n\n# set the limits for X and Y axis\nplt.xlim([0.5, len(dog_owners)+0.5])\nplt.ylim([0,10])\n\n# set the X-ticks labels and make it vertical\nplt.xticks(x*2, label, rotation='vertical')\n\n# Displays the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the portion that contains the center point of the bounding box to 0.01. Additionally, set the animated state for those same points to False.",
        "Input_image": "./test_dataset/Step/Step_cd8fed888c99e3c9/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points\ndog_owners = [8, 7, 6, 9, 8, 9, 9]\ncat_owners = [6, 5, 7, 5, 6, 7, 7]\n\n# Creating lists to hold X-axis labels\nx = list(range(1,len(dog_owners)+1))\nlabel=['Dog Owners']*len(dog_owners)+['Cat Owners']*len(cat_owners)\n\n# Draws the stair plot\nline = plt.step(x*2, dog_owners+cat_owners, where='mid', alpha=0.1, animated=False)\n\n# Adds title and labels to our plot\nplt.title('Comparison of Happiness Levels between Dog Owners and Cat Owners')\nplt.xlabel('Pet Owners')\nplt.ylabel('Happiness Level [0-10]')\n\n# set the limits for X and Y axis\nplt.xlim([0.5, len(dog_owners)+0.5])\nplt.ylim([0,10])\n\n# set the X-ticks labels and make it vertical\nplt.xticks(x*2, label, rotation='vertical')\n\n# Displays the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_cd8fed888c99e3c9/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_cd8fed888c99e3c9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_cd8fed888c99e3c9/figure.png"
    },
    {
        "id": "Step_977da1096a4d948e",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Create lists of data\nage_groups = ['18-24', '25-34', '35-44', '45-54', '55-64', '65+']\npercentages = [30, 40, 35, 20, 15, 10]\n\n# Plot the step chart\nplt.figure()\nplt.step(age_groups, percentages, where='mid')\nplt.title('Impact of Social Media on Voter Behavior Across Different Age Groups')\nplt.xlabel('Age Group')\nplt.ylabel('Percentage of Voters Influenced by Social Media (%)')\nplt.grid(True)\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the lines that contain the center point of the bounding box to 0.63. Additionally, set the marker size of the points to 16.38 that also contain the center point of the bounding box.",
        "Input_image": "./test_dataset/Step/Step_977da1096a4d948e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Create lists of data\nage_groups = ['18-24', '25-34', '35-44', '45-54', '55-64', '65+']\npercentages = [30, 40, 35, 20, 15, 10]\n\n# Plot the step chart\nplt.figure()\nstep_plot = plt.step(age_groups, percentages, where='mid', alpha=0.63, marker='o', markersize=16.38)\nplt.title('Impact of Social Media on Voter Behavior Across Different Age Groups')\nplt.xlabel('Age Group')\nplt.ylabel('Percentage of Voters Influenced by Social Media (%)')\nplt.grid(True)\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_977da1096a4d948e/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_977da1096a4d948e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_977da1096a4d948e/figure.png"
    },
    {
        "id": "Step_80b3ff2690842b69",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = [1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020]\ncrop_yield = [200, 198, 195, 192, 190, 185, 182, 180, 178, 175, 172]\n\n# Create a new figure\nplt.figure(figsize=[10,5])\n\n# Create a stair plot\nplt.step(years, crop_yield, where='post')\n\n# Labeling the axes\nplt.xlabel(\"Years\")\nplt.ylabel(\"Crop Yield (Million Metric Tons)\")\n\n# Title of the plot\nplt.title(\"Impact of climate change on global crop yields (1970-2020)\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Fill the area below the step line that contains the center point of the bounding box with a gradient that smoothly transitions from the starting color '#b64055' to the ending color '#987379'.",
        "Input_image": "./test_dataset/Step/Step_80b3ff2690842b69/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import to_rgb\n\n# Data\nyears = [1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020]\ncrop_yield = [200, 198, 195, 192, 190, 185, 182, 180, 178, 175, 172]\n\n# Create a new figure\nplt.figure(figsize=[10,5])\n\n# Create a stair plot\nplt.step(years, crop_yield, where='post')\n\n# Gradient fill\nstart_color = '#b64055'\nend_color = '#987379'\nstart_rgb = np.array(to_rgb(start_color))\nend_rgb = np.array(to_rgb(end_color))\nnum_segments = len(years) - 1\ncolors = [start_rgb + (end_rgb - start_rgb) * (i / num_segments) for i in range(num_segments)]\ny_min, y_max = plt.ylim()\nfor i in range(num_segments):\n    x0 = years[i]\n    x1 = years[i+1]\n    y0 = crop_yield[i]\n    y1 = crop_yield[i+1]\n    plt.fill_between([x0, x1], [y0, y1], [y_min, y_min], color=colors[i], step='post')\n\n# Labeling the axes\nplt.xlabel(\"Years\")\nplt.ylabel(\"Crop Yield (Million Metric Tons)\")\n\n# Title of the plot\nplt.title(\"Impact of climate change on global crop yields (1970-2020)\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_80b3ff2690842b69/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_80b3ff2690842b69/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_80b3ff2690842b69/figure.png"
    },
    {
        "id": "Step_77e42170a4668a3d",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a dictionary for the given data\ndata = {'Year': [2015, 2016, 2017, 2018, 2019, 2020]*5,\n        'Sector': ['Agriculture']*6 + ['Manufacturing']*6 + ['Services']*6 + ['Construction']*6 + ['Finance']*6,\n        'Growth Rate': [2.5, 1.8, 2.0, 1.6, 1.9, 1.2, 3.2, 1.5, 2.7, 2.1, 1.8, 0.9, 2.8, 3.0,\n                        2.5, 2.2, 1.5, 0.6, 1.9, 2.3, 1.7, 2.4, 1.2, 0.8, 2.4, 2.6, 2.3, 2.8, 1.7, 0.7]}\n\n# Convert the dictionary into a DataFrame\ndf = pd.DataFrame(data)\n\n# Create a list of sectors\nsectors = ['Agriculture', 'Manufacturing', 'Services', 'Construction', 'Finance']\n\n# Create a stair plot for each sector\nfor sector in sectors:\n    plt.step(df['Year'][df['Sector'] == sector], df['Growth Rate'][df['Sector'] == sector], label=sector)\n\nplt.xlabel('Year')\nplt.ylabel('Growth Rate (%)')\nplt.title('Annual Growth Rates of Different Sectors of US Economy (2015-2020)')\nplt.legend(title='Sectors')\nplt.grid()\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the line that contains the center point of the bounding box to 0.99. Also, set the line width for the same line to 2.91.",
        "Input_image": "./test_dataset/Step/Step_77e42170a4668a3d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a dictionary for the given data\ndata = {'Year': [2015, 2016, 2017, 2018, 2019, 2020]*5,\n        'Sector': ['Agriculture']*6 + ['Manufacturing']*6 + ['Services']*6 + ['Construction']*6 + ['Finance']*6,\n        'Growth Rate': [2.5, 1.8, 2.0, 1.6, 1.9, 1.2, 3.2, 1.5, 2.7, 2.1, 1.8, 0.9, 2.8, 3.0,\n                        2.5, 2.2, 1.5, 0.6, 1.9, 2.3, 1.7, 2.4, 1.2, 0.8, 2.4, 2.6, 2.3, 2.8, 1.7, 0.7]}\n\n# Convert the dictionary into a DataFrame\ndf = pd.DataFrame(data)\n\n# Create a list of sectors\nsectors = ['Agriculture', 'Manufacturing', 'Services', 'Construction', 'Finance']\n\n# Create a stair plot for each sector\nfor sector in sectors:\n    if sector == 'Manufacturing':\n        plt.step(df['Year'][df['Sector'] == sector], df['Growth Rate'][df['Sector'] == sector], label=sector, alpha=0.99, linewidth=2.91)\n    else:\n        plt.step(df['Year'][df['Sector'] == sector], df['Growth Rate'][df['Sector'] == sector], label=sector)\n\nplt.xlabel('Year')\nplt.ylabel('Growth Rate (%)')\nplt.title('Annual Growth Rates of Different Sectors of US Economy (2015-2020)')\nplt.legend(title='Sectors')\nplt.grid()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_77e42170a4668a3d/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_77e42170a4668a3d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_77e42170a4668a3d/figure.png"
    },
    {
        "id": "Step_40ddfe93be4aaeed",
        "Input_code": "import matplotlib.pyplot as plt\n\ncontinents = ['Asia', 'Africa', 'Europe', 'North America', 'South America', 'Australia', 'Antarctica']\neruption_frequencies = [45, 32, 27, 38, 21, 13, 2]\n\nplt.figure(figsize=(10, 6))\nplt.step(continents, eruption_frequencies, where='mid', linewidth=2)\nplt.title('Volcanic Eruptions Frequency Across Continents')\nplt.xlabel('Continents')\nplt.ylabel('Eruption Frequency')\nplt.grid(True)\nplt.xticks(rotation=45)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the linestyle of the line that contains the center point of the bounding box to 'dashdot'.",
        "Input_image": "./test_dataset/Step/Step_40ddfe93be4aaeed/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\ncontinents = ['Asia', 'Africa', 'Europe', 'North America', 'South America', 'Australia', 'Antarctica']\neruption_frequencies = [45, 32, 27, 38, 21, 13, 2]\n\nplt.figure(figsize=(10, 6))\nplt.step(continents, eruption_frequencies, where='mid', linewidth=2, linestyle='dashdot')\nplt.title('Volcanic Eruptions Frequency Across Continents')\nplt.xlabel('Continents')\nplt.ylabel('Eruption Frequency')\nplt.grid(True)\nplt.xticks(rotation=45)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_40ddfe93be4aaeed/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_40ddfe93be4aaeed/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_40ddfe93be4aaeed/figure.png"
    },
    {
        "id": "Step_1448bb7f8bc5b58c",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n#Given data\n_longitude = np.array([0, 60, 120, 180, 240, 300, 360])\n_density = np.array([8, 12, 10, 15, 20, 18, 6])\n\nplt.figure(figsize=[10,6])\n\n#Create a stair plot\nplt.step(_longitude, _density, where='post')\n\n#Labeling the Graph\nplt.title(\"Spatial Distribution of Galactic Dust Clouds\")\nplt.xlabel(\"Galactic Longitude (in degrees)\")\nplt.ylabel(\"Density of Dust Clouds (in particles per cubic parsec)\")\n\nplt.xlim([0, 360])\nplt.ylim([0, max(_density)+5])\n\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the clipping state of the lines that contain the center point of the bounding box to False. Additionally, set the linewidth of these lines to 3.83.",
        "Input_image": "./test_dataset/Step/Step_1448bb7f8bc5b58c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n#Given data\n_longitude = np.array([0, 60, 120, 180, 240, 300, 360])\n_density = np.array([8, 12, 10, 15, 20, 18, 6])\n\nplt.figure(figsize=[10,6])\n\n#Create a stair plot\nstep_plot = plt.step(_longitude, _density, where='post', linewidth=3.83)\nstep_plot[0].set_clip_on(False)\n\n#Labeling the Graph\nplt.title(\"Spatial Distribution of Galactic Dust Clouds\")\nplt.xlabel(\"Galactic Longitude (in degrees)\")\nplt.ylabel(\"Density of Dust Clouds (in particles per cubic parsec)\")\n\nplt.xlim([0, 360])\nplt.ylim([0, max(_density)+5])\n\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_1448bb7f8bc5b58c/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_1448bb7f8bc5b58c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_1448bb7f8bc5b58c/figure.png"
    },
    {
        "id": "Step_f0259dd74e609779",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Categories for x-axis\neducation_levels = ['High School Diploma', 'Bachelor\\'s Degree', 'Master\\'s Degree', 'Doctorate']\n\n# Corresponding rates for y-axis\nsmoking_rates = [25, 18, 12, 8]\n\n# Create a new figure\nplt.figure(figsize=(8,6))\n\n# Create stair plot\nplt.step(education_levels, smoking_rates, where='mid')\n\n# Setting y-axis labels to percentage\nplt.gca().set_yticklabels(['{:.0f}%'.format(x) for x in plt.gca().get_yticks()]) \n\n# Adding titles and labels\nplt.title('Smoking Rates by Education Level')\nplt.xlabel('Education Level')\nplt.ylabel('Smoking Rate')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the step that contains the center point of the bounding box to 0.92, and make sure its rasterized state is set to False.",
        "Input_image": "./test_dataset/Step/Step_f0259dd74e609779/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Categories for x-axis\neducation_levels = ['High School Diploma', 'Bachelor\\'s Degree', 'Master\\'s Degree', 'Doctorate']\n\n# Corresponding rates for y-axis\nsmoking_rates = [25, 18, 12, 8]\n\n# Create a new figure\nplt.figure(figsize=(8,6))\n\n# Create stair plot\nstep_plot = plt.step(education_levels, smoking_rates, where='mid', alpha=0.92, rasterized=False)\n\n# Setting y-axis labels to percentage\nplt.gca().set_yticklabels(['{:.0f}%'.format(x) for x in plt.gca().get_yticks()]) \n\n# Adding titles and labels\nplt.title('Smoking Rates by Education Level')\nplt.xlabel('Education Level')\nplt.ylabel('Smoking Rate')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_f0259dd74e609779/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_f0259dd74e609779/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_f0259dd74e609779/figure.png"
    },
    {
        "id": "Step_0861308a1cbacbcc",
        "Input_code": "import matplotlib.pyplot as plt\n\n#Data\nyears = list(range(2010, 2021))\nadoption_rates = [20, 22, 24, 28, 30, 34, 38, 40, 44, 48, 50]\n\n#Create stair plot\nplt.step(years, adoption_rates, where='post')\n\n#Naming the x-axis, y-axis and the whole graph\nplt.xlabel(\"Years\")\nplt.ylabel(\"Robot Adoption Rate (%)\")\nplt.title(\"Rise of Robot Adoption in Various Industries (2010-2020)\")\n\n#Plotting\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the line that contains the center point of the bounding box to #075bb9. Additionally, show the marker and update the marker edge color of that line to #9ddb0c for the same points.",
        "Input_image": "./test_dataset/Step/Step_0861308a1cbacbcc/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n#Data\nyears = list(range(2010, 2021))\nadoption_rates = [20, 22, 24, 28, 30, 34, 38, 40, 44, 48, 50]\n\n#Create stair plot\nstep = plt.step(years, adoption_rates, where='post', color='#075bb9', marker='o', markersize=8, markerfacecolor='none', markeredgecolor='#9ddb0c')\n\n#Naming the x-axis, y-axis and the whole graph\nplt.xlabel(\"Years\")\nplt.ylabel(\"Robot Adoption Rate (%)\")\nplt.title(\"Rise of Robot Adoption in Various Industries (2010-2020)\")\n\n#Plotting\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_0861308a1cbacbcc/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_0861308a1cbacbcc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_0861308a1cbacbcc/figure.png"
    },
    {
        "id": "Step_e71bb687762cca2e",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Given data\nx = [2016, 2017, 2018, 2019, 2020]\ny_action = [120, 150, 140, 160, 180]\ny_comedy = [80, 90, 100, 110, 120]\ny_drama = [70, 60, 80, 90, 100]\ny_fantasy = [60, 70, 80, 90, 100]\ny_scifi = [90, 100, 110, 120, 130]\n\n# Make plot\nplt.figure(figsize=(10, 6))\nplt.step(x, y_action, where='mid', label=\"Action\")\nplt.step(x, y_comedy, where='mid', label=\"Comedy\")\nplt.step(x, y_drama, where='mid', label=\"Drama\")\nplt.step(x, y_fantasy, where='mid', label=\"Fantasy\")\nplt.step(x, y_scifi, where='mid', label=\"Science Fiction\")\n\n# Set labels and title\nplt.xlabel('Year')\nplt.ylabel('Box Office Revenue (in millions)')\nplt.title('Box Office Revenue by Movie Genres (2016-2020)')\n\n# Show legend\nplt.legend()\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the lines that contain the center point of the bounding box to False. Also, for those same points,set the marker style as '^' and change the marker edge color to #20de7e.",
        "Input_image": "./test_dataset/Step/Step_e71bb687762cca2e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Given data\nx = [2016, 2017, 2018, 2019, 2020]\ny_action = [120, 150, 140, 160, 180]\ny_comedy = [80, 90, 100, 110, 120]\ny_drama = [70, 60, 80, 90, 100]\ny_fantasy = [60, 70, 80, 90, 100]\ny_scifi = [90, 100, 110, 120, 130]\n\n# Make plot\nplt.figure(figsize=(10, 6))\nline_action = plt.step(x, y_action, where='mid', label=\"Action\")\nline_comedy = plt.step(x, y_comedy, where='mid', label=\"Comedy\")\nline_drama = plt.step(x, y_drama, where='mid', label=\"Drama\")\nline_fantasy = plt.step(x, y_fantasy, where='mid', label=\"Fantasy\")\nline_scifi = plt.step(x, y_scifi, where='mid', label=\"Science Fiction\")\n\n# Set labels and title\nplt.xlabel('Year')\nplt.ylabel('Box Office Revenue (in millions)')\nplt.title('Box Office Revenue by Movie Genres (2016-2020)')\n\n# Modify the target object\nline_action[0].set_animated(False)\nline_action[0].set_marker('^')\nline_action[0].set_markeredgecolor('#20de7e')\n\n# Show legend\nplt.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_e71bb687762cca2e/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_e71bb687762cca2e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_e71bb687762cca2e/figure.png"
    },
    {
        "id": "Step_02f1f7a379e9203a",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Defining the coordinates \nx = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\ny = [0, 100, 200, 250, 300, 350, 400, 450, 500, 550]\n\n# Plotting the coordinates using step plot\nplt.step(x, y, where='mid')\n\n# Setting plot title\nplt.title('Flight Path Visualization Using Volumetric Data')\n\n# Setting X-axis label\nplt.xlabel('Spatial Coordinates')\n\n# Setting Y-axis label\nplt.ylabel('Altitude (feet)')\n\n# Displaying grid\nplt.grid(True)\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the steps that contain the center point of the bounding box to #060691. Also, update the marker face color of those corresponding points to #f769d5.",
        "Input_image": "./test_dataset/Step/Step_02f1f7a379e9203a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Defining the coordinates \nx = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\ny = [0, 100, 200, 250, 300, 350, 400, 450, 500, 550]\n\n# Plotting the coordinates using step plot\nstep_plot = plt.step(x, y, where='mid', color='#060691', markerfacecolor='#f769d5')\n\n# Setting plot title\nplt.title('Flight Path Visualization Using Volumetric Data')\n\n# Setting X-axis label\nplt.xlabel('Spatial Coordinates')\n\n# Setting Y-axis label\nplt.ylabel('Altitude (feet)')\n\n# Displaying grid\nplt.grid(True)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_02f1f7a379e9203a/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_02f1f7a379e9203a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_02f1f7a379e9203a/figure.png"
    },
    {
        "id": "Step_8e53091648b8be83",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Time series (X axis)\nyears = list(range(2010, 2020))\n\n# Population counts (Y axis)\nlion_pop = [10, 12, 15, 17, 20, 22, 25, 27, 30, 33]\ngiraffe_pop = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23]\nelephant_pop = [8, 10, 13, 16, 20, 24, 28, 32, 36, 40]\n\n# Set figure size\nplt.figure(figsize=(10,6))\n\n# Plot data\nplt.step(years, lion_pop, where='mid', label=\"Lions\")\nplt.step(years, giraffe_pop, where='mid', label=\"Giraffes\")\nplt.step(years, elephant_pop, where='mid', label=\"Elephants\")\n\n# Set plot title and labels\nplt.title('Population Dynamics in the Zoo (2010-2019)')\nplt.xlabel('Year')\nplt.ylabel('Population Count')\n\n# Set legend\nplt.legend(title=\"Species\")\n\n# Show plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Fill the area below the step line that includes the center point of the bounding box with a gradient that smoothly transitions from '#7f3b14' to '#1a4e8d'.",
        "Input_image": "./test_dataset/Step/Step_8e53091648b8be83/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import to_rgb\n\n# Time series (X axis)\nyears = list(range(2010, 2020))\n\n# Population counts (Y axis)\nlion_pop = [10, 12, 15, 17, 20, 22, 25, 27, 30, 33]\ngiraffe_pop = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23]\nelephant_pop = [8, 10, 13, 16, 20, 24, 28, 32, 36, 40]\n\n# Set figure size\nplt.figure(figsize=(10,6))\n\n# Plot data\nplt.step(years, lion_pop, where='mid', label=\"Lions\")\nplt.step(years, giraffe_pop, where='mid', label=\"Giraffes\")\nplt.step(years, elephant_pop, where='mid', label=\"Elephants\")\n\n# Apply gradient fill below the step line for the target object\ntarget_years = years\ntarget_pop = giraffe_pop\nstart_color = '#7f3b14'\nend_color = '#1a4e8d'\nstart_rgb = np.array(to_rgb(start_color))\nend_rgb = np.array(to_rgb(end_color))\nnum_segments = len(target_years) - 1\ncolors = [start_rgb + (end_rgb - start_rgb) * (i / num_segments) for i in range(num_segments)]\ny_min, y_max = plt.ylim()\nfor i in range(num_segments):\n    x0 = target_years[i]\n    x1 = target_years[i+1]\n    y0 = target_pop[i]\n    y1 = target_pop[i+1]\n    plt.fill_between([x0, x1], [y0, y1], [y_min, y_min], color=colors[i], step='mid')\n\n# Set plot title and labels\nplt.title('Population Dynamics in the Zoo (2010-2019)')\nplt.xlabel('Year')\nplt.ylabel('Population Count')\n\n# Set legend\nplt.legend(title=\"Species\")\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_8e53091648b8be83/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_8e53091648b8be83/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_8e53091648b8be83/figure.png"
    },
    {
        "id": "Step_3de594046ded8e32",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nozone_concentration = [265, 280, 290, 305, 320, 340, 355, 370, 360, 330, 290, 270]\n\n# Create stair plot\nplt.step(months, ozone_concentration, where='mid', label='Ozone concentration')\n\n# Annotations\nplt.title('Variations in Atmospheric Ozone Concentration Across Different Months')\nplt.xlabel('Months')\nplt.ylabel('Ozone Concentration (DU)')\nplt.grid(True)\n\n# Display plot\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the marker face color of the lines that contain the center point of the bounding box to #362753 and style to 'o'.",
        "Input_image": "./test_dataset/Step/Step_3de594046ded8e32/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nozone_concentration = [265, 280, 290, 305, 320, 340, 355, 370, 360, 330, 290, 270]\n\n# Create stair plot\nplt.step(months, ozone_concentration, where='mid', label='Ozone concentration',marker='o', markerfacecolor='#362753')\n\n# Annotations\nplt.title('Variations in Atmospheric Ozone Concentration Across Different Months')\nplt.xlabel('Months')\nplt.ylabel('Ozone Concentration (DU)')\nplt.grid(True)\n\n# Display plot\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_3de594046ded8e32/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_3de594046ded8e32/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_3de594046ded8e32/figure.png"
    },
    {
        "id": "Step_5be46f517a6f9eff",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Labels for x-axis\nage_groups = ['18-25', '26-35', '36-45', '46-55', '56-65']\n\n# Y-axis data points\nbooks_read = [5, 7, 6, 4, 3]\ncoffee_consumed = [2, 3, 4, 3, 2]\n\n# Create stair plots\nplt.step(age_groups, books_read, where='mid', label='Books Read')\nplt.step(age_groups, coffee_consumed, where='mid', label='Coffee Consumed')\n\n# Adding labels and title\nplt.xlabel(\"Age Groups\")\nplt.ylabel(\"Average Number\")\nplt.title(\"Relationship between Number of Books Read and Coffee Consumed\")\n\n# Displaying legend\nplt.legend(title='Parameters')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the z-order of the step that contains the center point of the bounding box to 8. Additionally, apply a shadow effect to this step with an offset of (3.73, 3.84) units.",
        "Input_image": "./test_dataset/Step/Step_5be46f517a6f9eff/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Labels for x-axis\nage_groups = ['18-25', '26-35', '36-45', '46-55', '56-65']\n\n# Y-axis data points\nbooks_read = [5, 7, 6, 4, 3]\ncoffee_consumed = [2, 3, 4, 3, 2]\n\n# Create stair plots\nplt.step(age_groups, books_read, where='mid', label='Books Read', zorder=8, path_effects=[SimpleLineShadow(offset=(3.73, 3.84)), Normal()])\nplt.step(age_groups, coffee_consumed, where='mid', label='Coffee Consumed')\n\n# Adding labels and title\nplt.xlabel(\"Age Groups\")\nplt.ylabel(\"Average Number\")\nplt.title(\"Relationship between Number of Books Read and Coffee Consumed\")\n\n# Displaying legend\nplt.legend(title='Parameters')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_5be46f517a6f9eff/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_5be46f517a6f9eff/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_5be46f517a6f9eff/figure.png"
    },
    {
        "id": "Step_79039f691468b03b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {\n    \"Type of Alcohol\": [\"Beer\", \"Wine\", \"Spirits\", \"Beer\", \"Wine\", \"Spirits\", \"Beer\"],\n    \"Consumption\": [100, 120, 80, 70, 150, 50, 90]\n}\n\ndf = pd.DataFrame(data)\n\n# Sorting and grouping data by type of alcohol and getting the mean consumption\ngrouped_df = df.groupby('Type of Alcohol').mean()\n\nx = np.array(grouped_df.index)\ny = np.array(grouped_df[\"Consumption\"])\n\nplt.figure(facecolor='gray')\n\n# Plotting the data\nplt.step(x, y, linestyle=':', linewidth=2, color='green', marker='o', markersize=5, alpha=0.7, label=\"Consumption\")\n\nplt.grid(axis='both', color='0.95')\n\n# Adding labels and title\nplt.xlabel('Type of Alcohol')\nplt.ylabel('Consumption')\nplt.title('Alcohol Consumption')\n\n# Adding legend\nplt.legend()\n\nfor i, txt in enumerate(y):\n    plt.annotate(txt, (x[i], y[i]))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the step alignment of the step line that contains the center point of the bounding box to 'mid'.",
        "Input_image": "./test_dataset/Step/Step_79039f691468b03b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {\n    \"Type of Alcohol\": [\"Beer\", \"Wine\", \"Spirits\", \"Beer\", \"Wine\", \"Spirits\", \"Beer\"],\n    \"Consumption\": [100, 120, 80, 70, 150, 50, 90]\n}\n\ndf = pd.DataFrame(data)\n\n# Sorting and grouping data by type of alcohol and getting the mean consumption\ngrouped_df = df.groupby('Type of Alcohol').mean()\n\nx = np.array(grouped_df.index)\ny = np.array(grouped_df[\"Consumption\"])\n\nplt.figure(facecolor='gray')\n\n# Plotting the data\nplt.step(x, y, linestyle=':', linewidth=2, color='green', marker='o', markersize=5, alpha=0.7, label=\"Consumption\", where='mid')\n\nplt.grid(axis='both', color='0.95')\n\n# Adding labels and title\nplt.xlabel('Type of Alcohol')\nplt.ylabel('Consumption')\nplt.title('Alcohol Consumption')\n\n# Adding legend\nplt.legend()\n\nfor i, txt in enumerate(y):\n    plt.annotate(txt, (x[i], y[i]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_79039f691468b03b/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_79039f691468b03b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_79039f691468b03b/myplot.png"
    },
    {
        "id": "Step_383bd2eb07f5b2be",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a pandas DataFrame for your data\ndata = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020]*5,\n    'Country': ['United States']*4 + ['United Kingdom']*4 + ['Germany']*4 + ['Australia']*4 + ['Canada']*4,\n    'Percentage': [3.5, 4.2, 5.8, 7.6, 2.1, 3.4, 4.5, 5.9, 1.8, 2.5, 3.3, 4.2, 1.2, 1.8, 2.6, 3.5, 1.5, 2.2, 3.1, 4.1]\n})\n\n# Create a figure and axis object\nfig, ax = plt.subplots()\n\n# Draw a stair plot for each country\nfor country in data['Country'].unique():\n    country_data = data[data['Country'] == country]\n    ax.step(country_data['Year'], country_data['Percentage'], where='mid', label=country)\n\n# Set labels\nax.set_xlabel('Year')\nax.set_ylabel('Percentage of Total Restaurant Sales')\n\n# Set title\nax.set_title('Trend in the Consumption of Plant-Based Meat Alternatives')\n\n# Create legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the marker style of the points that contain the center point of the bounding box to 'o', and ensure their transformation aligns with the data's coordinate system.",
        "Input_image": "./test_dataset/Step/Step_383bd2eb07f5b2be/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a pandas DataFrame for your data\ndata = pd.DataFrame({\n    'Year': [2017, 2018, 2019, 2020]*5,\n    'Country': ['United States']*4 + ['United Kingdom']*4 + ['Germany']*4 + ['Australia']*4 + ['Canada']*4,\n    'Percentage': [3.5, 4.2, 5.8, 7.6, 2.1, 3.4, 4.5, 5.9, 1.8, 2.5, 3.3, 4.2, 1.2, 1.8, 2.6, 3.5, 1.5, 2.2, 3.1, 4.1]\n})\n\n# Create a figure and axis object\nfig, ax = plt.subplots()\n\n# Draw a stair plot for each country\nfor idx, country in enumerate(data['Country'].unique()):\n    country_data = data[data['Country'] == country]\n    if idx == 0:  # Apply modifications to the first country's plot\n        line, = ax.step(country_data['Year'], country_data['Percentage'], where='mid', label=country, marker='o')\n        line.set_transform(ax.transData)  # Set transform to data coordinate system\n    else:\n        ax.step(country_data['Year'], country_data['Percentage'], where='mid', label=country)\n\n# Set labels\nax.set_xlabel('Year')\nax.set_ylabel('Percentage of Total Restaurant Sales')\n\n# Set title\nax.set_title('Trend in the Consumption of Plant-Based Meat Alternatives')\n\n# Create legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_383bd2eb07f5b2be/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_383bd2eb07f5b2be/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_383bd2eb07f5b2be/figure.png"
    },
    {
        "id": "Step_e2579ed01a1ae1c8",
        "Input_code": "import matplotlib.pyplot as plt\n\nyears = [2016, 2017, 2018, 2019, 2020]\npreferences = [30, 40, 55, 65, 70]\n\nplt.step(years, preferences, where='post')\nplt.xlabel('Year')\nplt.ylabel('Consumers Preferences for Plant-Based Food (%)')\nplt.title('Consumer Preferences for Plant-Based Food Over the Years')\nplt.ylim(bottom=0, top=100)\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the marker style for the points at the center of the bounding box to '<' for the portion that corresponds to the target.",
        "Input_image": "./test_dataset/Step/Step_e2579ed01a1ae1c8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nyears = [2016, 2017, 2018, 2019, 2020]\npreferences = [30, 40, 55, 65, 70]\n\nplt.step(years, preferences, where='post', marker='<', markersize=10)\nplt.xlabel('Year')\nplt.ylabel('Consumers Preferences for Plant-Based Food (%)')\nplt.title('Consumer Preferences for Plant-Based Food Over the Years')\nplt.ylim(bottom=0, top=100)\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_e2579ed01a1ae1c8/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_e2579ed01a1ae1c8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_e2579ed01a1ae1c8/figure.png"
    },
    {
        "id": "Step_e36f053dd9b5ff76",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the age ranges as a list of strings\nage_ranges = ['18-24', '25-34', '35-44', '45-54', '55-64']\n\n# Define the percentage of individuals with a mental health disorder\nmental_health_percentages = [14, 16, 12, 10, 8]\n\n# Define the percentage of individuals with alcohol dependency or abuse\nalcohol_percentages = [8, 10, 6, 5, 4]\n\n# Define the number of age ranges\nn_ranges = len(age_ranges)\n\n# Set the figure size\nplt.figure(figsize=(10,6))\n\n# Plot the mental health percentages\nplt.plot(np.arange(n_ranges), mental_health_percentages, drawstyle='steps-mid', label='Mental Health Disorders')\n\n# Plot the alcohol percentages\nplt.plot(np.arange(n_ranges), alcohol_percentages, drawstyle='steps-mid', label='Alcohol Dependency or Abuse')\n\n# Set the x-ticks to be the age ranges\nplt.xticks(np.arange(n_ranges), age_ranges)\n\n# Add labels and title\nplt.xlabel('Age Range')\nplt.ylabel('Percentages (%)')\nplt.title('Mental Health Disorders and Alcohol Dependency or Abuse by Age Range')\n\n# Add legend\nplt.legend()\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the step alignment of the step line that contains the center point of the bounding box to 'pre'.",
        "Input_image": "./test_dataset/Step/Step_e36f053dd9b5ff76/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the age ranges as a list of strings\nage_ranges = ['18-24', '25-34', '35-44', '45-54', '55-64']\n\n# Define the percentage of individuals with a mental health disorder\nmental_health_percentages = [14, 16, 12, 10, 8]\n\n# Define the percentage of individuals with alcohol dependency or abuse\nalcohol_percentages = [8, 10, 6, 5, 4]\n\n# Define the number of age ranges\nn_ranges = len(age_ranges)\n\n# Set the figure size\nplt.figure(figsize=(10,6))\n\n# Plot the mental health percentages\nplt.plot(np.arange(n_ranges), mental_health_percentages, drawstyle='steps-mid', label='Mental Health Disorders')\n\n# Plot the alcohol percentages\nplt.plot(np.arange(n_ranges), alcohol_percentages, drawstyle='steps-pre', label='Alcohol Dependency or Abuse')\n\n# Set the x-ticks to be the age ranges\nplt.xticks(np.arange(n_ranges), age_ranges)\n\n# Add labels and title\nplt.xlabel('Age Range')\nplt.ylabel('Percentages (%)')\nplt.title('Mental Health Disorders and Alcohol Dependency or Abuse by Age Range')\n\n# Add legend\nplt.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_e36f053dd9b5ff76/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_e36f053dd9b5ff76/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_e36f053dd9b5ff76/figure.png"
    },
    {
        "id": "Step_b83f9fc3b6815024",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Create lists to store the months and infection rates\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\ninfection_rate = [200, 150, 100, 80, 70, 60, 50, 40, 30, 20, 20, 10]\n\n# Create a new figure\nplt.figure(figsize=(10, 6))\n\n# Plot the data with a step plot\nplt.step(months, infection_rate, where='mid', label='Infection rates')\n\n# Set the titles for the x and y axes\nplt.title('Impact of vaccination on global COVID-19 infection rates (per million)')\nplt.xlabel('Months in 2021')\nplt.ylabel('Infection rate')\n\n# Display the legend\nplt.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the steps that contain the center point of the bounding box to a region defined by the bottom-left corner at (25, 486), with a width of 198 and a height of 864, using matplotlib.transforms.Bbox. Also, make sure to set the snap state for these steps to False.",
        "Input_image": "./test_dataset/Step/Step_b83f9fc3b6815024/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Create lists to store the months and infection rates\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\ninfection_rate = [200, 150, 100, 80, 70, 60, 50, 40, 30, 20, 20, 10]\n\n# Create a new figure\nplt.figure(figsize=(10, 6))\n\n# Define the clip box\nclip_box = Bbox.from_bounds(25, 486, 198, 864)\n\n# Plot the data with a step plot\nstep_plot = plt.step(months, infection_rate, where='mid', label='Infection rates')\n\n# Apply the clip box and set snap state to False for the step plot\nfor line in step_plot:\n    line.set_clip_box(clip_box)\n    line.set_snap(False)\n\n# Set the titles for the x and y axes\nplt.title('Impact of vaccination on global COVID-19 infection rates (per million)')\nplt.xlabel('Months in 2021')\nplt.ylabel('Infection rate')\n\n# Display the legend\nplt.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_b83f9fc3b6815024/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_b83f9fc3b6815024/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_b83f9fc3b6815024/figure.png"
    },
    {
        "id": "Step_0ade28fada99c6d9",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ndrinks = ['Beer', 'Wine', 'Cocktails', 'Spirits']\npercentages = [55, 30, 40, 20]\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Plot the data using a step plot\nax.step(drinks, percentages, where='mid')\n\n# Set the limits for x and y axes\nax.set_xlim(-0.5, len(drinks) - 0.5)\nax.set_ylim(0, 100)\n\n# Label axes\nax.set_xlabel('Drink Options')\nax.set_ylabel('Percentage of Customers (%)')\n\n# Add a title to the plot\nax.set_title('Preferred Drink Choices During Happy Hour')\n\n# Adding grid lines\nax.grid()\n\n# Show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the label for the lines that contain the center point of the bounding box to 'A new Label' show the label as annotation and set the annotation xy = (1, 40). Additionally, enable the picker state for those lines.",
        "Input_image": "./test_dataset/Step/Step_0ade28fada99c6d9/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ndrinks = ['Beer', 'Wine', 'Cocktails', 'Spirits']\npercentages = [55, 30, 40, 20]\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Plot the data using a step plot\nstep_plot = ax.step(drinks, percentages, where='mid', label='A new Label', picker=True)\nax.annotate('A new Label',xy=(1, 40))\n# Set the limits for x and y axes\nax.set_xlim(-0.5, len(drinks) - 0.5)\nax.set_ylim(0, 100)\n\n# Label axes\nax.set_xlabel('Drink Options')\nax.set_ylabel('Percentage of Customers (%)')\n\n# Add a title to the plot\nax.set_title('Preferred Drink Choices During Happy Hour')\n\n# Adding grid lines\nax.grid()\n\n# Show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_0ade28fada99c6d9/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_0ade28fada99c6d9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_0ade28fada99c6d9/figure.png"
    },
    {
        "id": "Step_c824bdcd756b65a6",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [1, 3, 5, 6, 8, 9, 7, 6, 5, 4]\ny2 = [10, 20, 30, 25, 35, 45, 40, 35, 30, 25] \n\n# Plot\nplt.figure(figsize=(10, 6))\nplt.step(x, y1, where='mid', label='Social Media Engagement (in thousands)')\nplt.step(x, y2, where='mid', label='Sales Conversions (in hundreds)')\n\n# Title and labels\nplt.title('Stair plot: Social Media Engagement & Sales Conversion')\nplt.xlabel('Duration of Campaign (in segments)')\nplt.ylabel('Metrics')\nplt.legend(loc='best')\n\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the dash pattern of the step line that contains the center point of the bounding box to '(9, 7)'.",
        "Input_image": "./test_dataset/Step/Step_c824bdcd756b65a6/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [1, 3, 5, 6, 8, 9, 7, 6, 5, 4]\ny2 = [10, 20, 30, 25, 35, 45, 40, 35, 30, 25] \n\n# Plot\nplt.figure(figsize=(10, 6))\nplt.step(x, y1, where='mid', label='Social Media Engagement (in thousands)')\nplt.step(x, y2, where='mid', label='Sales Conversions (in hundreds)')\n\n# Modify the dash pattern of the step line corresponding to the Target_object\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == 1:\n        line.set_linestyle((0, (9, 7)))\n\n# Title and labels\nplt.title('Stair plot: Social Media Engagement & Sales Conversion')\nplt.xlabel('Duration of Campaign (in segments)')\nplt.ylabel('Metrics')\nplt.legend(loc='best')\n\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_c824bdcd756b65a6/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_c824bdcd756b65a6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_c824bdcd756b65a6/figure.png"
    },
    {
        "id": "Step_5dc99008b69c6d0f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {\n    \"Type of Alcohol\": [\"Beer\", \"Wine\", \"Spirits\", \"Beer\", \"Wine\", \"Spirits\", \"Beer\"],\n    \"Consumption\": [100, 120, 80, 70, 150, 50, 90]\n}\n\ndf = pd.DataFrame(data)\n\n# Sorting and grouping data by type of alcohol and getting the mean consumption\ngrouped_df = df.groupby('Type of Alcohol').mean()\n\nx = np.array(grouped_df.index)\ny = np.array(grouped_df[\"Consumption\"])\n\nplt.figure(facecolor='gray')\n\n# Plotting the data\nplt.step(x, y, linestyle=':', linewidth=2, color='green', marker='o', markersize=5, alpha=0.7, label=\"Consumption\")\n\nplt.grid(axis='both', color='0.95')\n\n# Adding labels and title\nplt.xlabel('Type of Alcohol')\nplt.ylabel('Consumption')\nplt.title('Alcohol Consumption')\n\n# Adding legend\nplt.legend()\n\nfor i, txt in enumerate(y):\n    plt.annotate(txt, (x[i], y[i]))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add data point annotations to the step line that contains the center point of the bounding box. Use a font size of 12 and color the text with '#925fa5'.",
        "Input_image": "./test_dataset/Step/Step_5dc99008b69c6d0f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {\n    \"Type of Alcohol\": [\"Beer\", \"Wine\", \"Spirits\", \"Beer\", \"Wine\", \"Spirits\", \"Beer\"],\n    \"Consumption\": [100, 120, 80, 70, 150, 50, 90]\n}\n\ndf = pd.DataFrame(data)\n\n# Sorting and grouping data by type of alcohol and getting the mean consumption\ngrouped_df = df.groupby('Type of Alcohol').mean()\n\nx = np.array(grouped_df.index)\ny = np.array(grouped_df[\"Consumption\"])\n\nplt.figure(facecolor='gray')\n\n# Plotting the data\nplt.step(x, y, linestyle=':', linewidth=2, color='green', marker='o', markersize=5, alpha=0.7, label=\"Consumption\")\n\nplt.grid(axis='both', color='0.95')\n\n# Adding labels and title\nplt.xlabel('Type of Alcohol')\nplt.ylabel('Consumption')\nplt.title('Alcohol Consumption')\n\n# Adding legend\nplt.legend()\n\nfor i, txt in enumerate(y):\n    plt.annotate(txt, (x[i], y[i]), fontsize=12, color='#925fa5')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_5dc99008b69c6d0f/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_5dc99008b69c6d0f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_5dc99008b69c6d0f/myplot.png"
    },
    {
        "id": "Step_62521777e84ab25b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nage_groups = ['Children (5-12)', 'Teenagers (13-18)', 'Young Adults (19-25)', 'Adults (26-59)', 'Seniors (60+)']\nscreen_time = [2.5, 4.5, 6, 5.5, 3.5]\n\n# Plot\nplt.figure(figsize=(10,5))\nplt.step(age_groups, screen_time, where='mid', label='Avg. Screen time')\n\nplt.xlabel('Age groups')\nplt.ylabel('Avg. screen time (hours)')\nplt.title('Avg. daily screen time across different age groups and its potential impact on mental health and well-being')\nplt.legend()\n\nplt.xticks(age_groups)\nplt.yticks(range(0, max(screen_time)+1))\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the picker state of the step that contains the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Step/Step_62521777e84ab25b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nage_groups = ['Children (5-12)', 'Teenagers (13-18)', 'Young Adults (19-25)', 'Adults (26-59)', 'Seniors (60+)']\nscreen_time = [2.5, 4.5, 6, 5.5, 3.5]\n\n# Plot\nplt.figure(figsize=(10,5))\nstep_plot = plt.step(age_groups, screen_time, where='mid', label='Avg. Screen time', picker=True)\n\nplt.xlabel('Age groups')\nplt.ylabel('Avg. screen time (hours)')\nplt.title('Avg. daily screen time across different age groups and its potential impact on mental health and well-being')\nplt.legend()\n\nplt.xticks(age_groups)\nplt.yticks(range(0, max(screen_time)+1))\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_62521777e84ab25b/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_62521777e84ab25b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_62521777e84ab25b/figure.png"
    },
    {
        "id": "Step_b22f21942191ecd8",
        "Input_code": "\nimport matplotlib.pyplot as plt\n\n# Given data\nsocial_media_usage_hours = ['0-1 hour', '1-2 hours', '2-3 hours', '3-4 hours', '4-5 hours']\nmental_health_scores = [8, 7, 6, 5, 4]\n\n# Plotting\nplt.figure(figsize=(10, 6))\nplt.step(social_media_usage_hours, mental_health_scores, where='mid', label='mental health scores')\n\n# Axis labels\nplt.xlabel('Daily Social Media Usage')\nplt.ylabel('Mental Health Scores')\n\n# Title\nplt.title('Impact of Social Media Usage on Teenagers\\' Mental Health')\n\n# Legend\nplt.legend()\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the lines that contain the center point of the bounding box using a box defined by the lower-left corner (x0, y0) at (276, 363), with a width of 816 and a height of 596. Also, change the marker face color of the lines associated with the center point of the bounding box to #1eae9c.",
        "Input_image": "./test_dataset/Step/Step_b22f21942191ecd8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Given data\nsocial_media_usage_hours = ['0-1 hour', '1-2 hours', '2-3 hours', '3-4 hours', '4-5 hours']\nmental_health_scores = [8, 7, 6, 5, 4]\n\n# Plotting\nplt.figure(figsize=(10, 6))\nclip_box = Bbox.from_bounds(276, 363, 816, 596)\nline, = plt.step(social_media_usage_hours, mental_health_scores, where='mid', label='mental health scores', marker='o', markerfacecolor='#1eae9c')\nline.set_clip_box(clip_box)\n\n# Axis labels\nplt.xlabel('Daily Social Media Usage')\nplt.ylabel('Mental Health Scores')\n\n# Title\nplt.title('Impact of Social Media Usage on Teenagers\\' Mental Health')\n\n# Legend\nplt.legend()\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_b22f21942191ecd8/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_b22f21942191ecd8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_b22f21942191ecd8/figure.png"
    },
    {
        "id": "Step_fa5155f8f14f7644",
        "Input_code": "import matplotlib.pyplot as plt\n\n# defining the data\nsmileys = [':)', ':D', ';)', ':P', ':O']\nfrequency = [500, 450, 400, 350, 300]\n\n# creating a figure and a subplot\nfig, ax = plt.subplots()\n\n# plotting the stair plot\nax.step(smileys, frequency, where='mid')\n\n# setting title and labels\nax.set_title('Top 5 Smileys Used Online Based on Their Popularity')\nax.set_xlabel('Smileys')\nax.set_ylabel('Frequency of usage on different social media platforms')\n\n# displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the label of the line that contains the center point of the bounding box to 'A new Label'.",
        "Input_image": "./test_dataset/Step/Step_fa5155f8f14f7644/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# defining the data\nsmileys = [':)', ':D', ';)', ':P', ':O']\nfrequency = [500, 450, 400, 350, 300]\n\n# creating a figure and a subplot\nfig, ax = plt.subplots()\n\n# plotting the stair plot\nax.step(smileys, frequency, where='mid', label='A new Label')\n\n# setting title and labels\nax.set_title('Top 5 Smileys Used Online Based on Their Popularity')\nax.set_xlabel('Smileys')\nax.set_ylabel('Frequency of usage on different social media platforms')\nax.legend()\n\n# displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_fa5155f8f14f7644/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_fa5155f8f14f7644/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_fa5155f8f14f7644/figure.png"
    },
    {
        "id": "Step_039820642eee98d7",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define the social media usage levels and mental health scores\nsocial_media_usage = ['Low', 'Moderate', 'High']\nmental_health_scores = [7.5, 6.2, 4.3]\n\n# Create a new figure\nplt.figure(figsize=[8,6])\n\n# Create a stair plot\nplt.step(social_media_usage, mental_health_scores, where='mid', label='Mental health scores')\n\n# Configuring plot options\nplt.title('Impact of Social Media Usage on Mental Health')\nplt.xlabel('Social Media Usage Level')\nplt.ylabel('Mental Health Scores')\nplt.xticks(rotation=45)\nplt.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the step that contains the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Step/Step_039820642eee98d7/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Define the social media usage levels and mental health scores\nsocial_media_usage = ['Low', 'Moderate', 'High']\nmental_health_scores = [7.5, 6.2, 4.3]\n\n# Create a new figure\nplt.figure(figsize=[8,6])\n\n# Create a stair plot\nstep_plot = plt.step(social_media_usage, mental_health_scores, where='mid', label='Mental health scores', animated=True)\n\n# Configuring plot options\nplt.title('Impact of Social Media Usage on Mental Health')\nplt.xlabel('Social Media Usage Level')\nplt.ylabel('Mental Health Scores')\nplt.xticks(rotation=45)\nplt.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_039820642eee98d7/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_039820642eee98d7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_039820642eee98d7/figure.png"
    },
    {
        "id": "Step_7229048584d35287",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Age Groups\nage_groups = [\"Children (5-12 years)\", \"Teenagers (13-19 years)\", \"Young Adults (20-30 years)\", \"Adults (31-50 years)\", \"Seniors (51+ years)\"]\n  \n# Time spent playing games per week \nhours = [2, 4, 6, 3, 1] \n\nplt.step(age_groups, hours, where='mid')\n\nplt.xlabel('Age Groups') \nplt.ylabel('Hours spent playing pixel puzzle games per week') \nplt.title('Popularity of Pixel Puzzle Games among Different Age Groups') \n\n \n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Overlay a dashed step line on the part of the step chart that contains the center point of the bounding box to create a glowing effect. Use the glow color '#33c018', apply a dash pattern of (15, 10), and set the transparency (alpha) to 0.5.",
        "Input_image": "./test_dataset/Step/Step_7229048584d35287/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Age Groups\nage_groups = [\"Children (5-12 years)\", \"Teenagers (13-19 years)\", \"Young Adults (20-30 years)\", \"Adults (31-50 years)\", \"Seniors (51+ years)\"]\n  \n# Time spent playing games per week \nhours = [2, 4, 6, 3, 1] \n\nplt.step(age_groups, hours, where='mid')\nplt.step(age_groups, hours, where='mid', color='#33c018', linestyle=(0, (15, 10)), alpha=0.5)\n\nplt.xlabel('Age Groups') \nplt.ylabel('Hours spent playing pixel puzzle games per week') \nplt.title('Popularity of Pixel Puzzle Games among Different Age Groups') \n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_7229048584d35287/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_7229048584d35287/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_7229048584d35287/figure.png"
    },
    {
        "id": "Step_4d05d9dab50167ab",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ndistance = [0, 10, 20, 30, 40]\ndepth_100m = [5000, 4800, 4600, 4400, 4200]\ndepth_200m = [4800, 4600, 4400, 4200, 4000]\ndepth_300m = [4500, 4300, 4100, 3900, 3700]\n\nplt.figure(figsize=(10,8))\n\n# Line plots for each depth\nplt.step(distance, depth_100m, where='mid', label='Depth 100m')\nplt.step(distance, depth_200m, where='mid', label='Depth 200m')\nplt.step(distance, depth_300m, where='mid', label='Depth 300m')\n\n# Labels and Legend\nplt.xlabel('Distance from coast (km)')\nplt.ylabel('Volumetric flow rate (m\u00b3/s)')\nplt.title('Oceanic Currents Analysis')\nplt.legend()\n\n# Show the plot\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Fill the area below the step line that contains the center point of the bounding box with a gradient, starting with the color '#e5600e' and ending with '#b707cb'.",
        "Input_image": "./test_dataset/Step/Step_4d05d9dab50167ab/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import to_rgb\n\n# Data\ndistance = [0, 10, 20, 30, 40]\ndepth_100m = [5000, 4800, 4600, 4400, 4200]\ndepth_200m = [4800, 4600, 4400, 4200, 4000]\ndepth_300m = [4500, 4300, 4100, 3900, 3700]\n\nplt.figure(figsize=(10,8))\n\n# Line plots for each depth\nplt.step(distance, depth_100m, where='mid', label='Depth 100m')\nplt.step(distance, depth_200m, where='mid', label='Depth 200m')\nplt.step(distance, depth_300m, where='mid', label='Depth 300m')\n\ntarget_distance = distance\ntarget_depth = depth_300m#this is key for this modification\n\nstart_color = '#e5600e'\nend_color = '#b707cb'\n\nstart_rgb = np.array(to_rgb(start_color))\nend_rgb = np.array(to_rgb(end_color))\n\nnum_segments = len(target_distance) - 1\ncolors = [start_rgb + (end_rgb - start_rgb) * (i / num_segments) for i in range(num_segments)]\n\ny_min, y_max = plt.ylim()#this is also important\n\nfor i in range(num_segments):#set color partly\n    x0 = target_distance[i]\n    x1 = target_distance[i+1]\n    y0 = target_depth[i]\n    y1 = target_depth[i+1]\n    plt.fill_between([x0, x1], [y0, y1], [y_min, y_min], color=colors[i], step='mid')\n\nplt.xlabel('Distance from coast (km)')\nplt.ylabel('Volumetric flow rate (m\u00b3/s)')\nplt.title('Oceanic Currents Analysis')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n\n",
        "Target_object": "2",
        "Test_image": "./test_dataset/Step/Step_4d05d9dab50167ab/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_4d05d9dab50167ab/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_4d05d9dab50167ab/figure.png"
    },
    {
        "id": "Step_be0867abf869bab7",
        "Input_code": "# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nanimals = ['Cheetah', 'Gazelle']\ncheetah_speeds = [50, 60, 70, 80, 90]\ngazelle_speeds = [40, 45, 50, 55, 60]\n\n# Create step plots for cheetah and gazelle speeds\nplt.figure(figsize=(8, 6))\nplt.step( np.arange(len(cheetah_speeds)), cheetah_speeds, where='mid', label='Cheetah', linestyle='-', linewidth=2)\nplt.step( np.arange(len(gazelle_speeds)), gazelle_speeds, where='mid', label='Gazelle', linestyle='-', linewidth=2)\n\n# Add necessary graph components\nplt.xlabel('Time Interval')\nplt.ylabel('Speed (km/h)')\nplt.title('Speed Comparison: Cheetah vs Gazelle')\nplt.legend()\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the thickness of the step line that includes the center point of the bounding box to 3.4 units.",
        "Input_image": "./test_dataset/Step/Step_be0867abf869bab7/Visual_figure.png",
        "Test_code": "# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nanimals = ['Cheetah', 'Gazelle']\ncheetah_speeds = [50, 60, 70, 80, 90]\ngazelle_speeds = [40, 45, 50, 55, 60]\n\n# Create step plots for cheetah and gazelle speeds\nplt.figure(figsize=(8, 6))\nplt.step( np.arange(len(cheetah_speeds)), cheetah_speeds, where='mid', label='Cheetah', linestyle='-', linewidth=2)\nplt.step( np.arange(len(gazelle_speeds)), gazelle_speeds, where='mid', label='Gazelle', linestyle='-', linewidth=2)\n\n# Modify the thickness of the step line corresponding to the Target_object\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == 1:\n        line.set_linewidth(3.4)\n\n# Add necessary graph components\nplt.xlabel('Time Interval')\nplt.ylabel('Speed (km/h)')\nplt.title('Speed Comparison: Cheetah vs Gazelle')\nplt.legend()\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_be0867abf869bab7/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_be0867abf869bab7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_be0867abf869bab7/figure.png"
    },
    {
        "id": "Step_f619baa6f4cff0a0",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# Corresponding percentage increase in coral reef coverage annually\ngrowth_percentage = [4, 6, 8, 10, 12, 15, 17, 19, 22, 25, 28]\n\n# Creating step plot\nplt.step(years, growth_percentage, where='mid')\n\n# Adding labels and title\nplt.xlabel('Year')\nplt.ylabel('Percentage Increase in Coral Reef Coverage')\nplt.title('Growth Patterns of Underwater Coral Reefs from 2010 to 2020')\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Make the animation for the lines containing the center point of the bounding box active by setting their animated state to True. Additionally, for these same points, ensure that the clipping state remains set to False.",
        "Input_image": "./test_dataset/Step/Step_f619baa6f4cff0a0/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Years from 2010 to 2020\nyears = list(range(2010, 2021))\n\n# Corresponding percentage increase in coral reef coverage annually\ngrowth_percentage = [4, 6, 8, 10, 12, 15, 17, 19, 22, 25, 28]\n\n# Creating step plot\nstep_plot = plt.step(years, growth_percentage, where='mid')\n\n# Set the animated state of the object corresponding to the Target_object to True\nstep_plot[0].set_animated(True)\n# Set the clipping state of the object corresponding to the Target_object to False\nstep_plot[0].set_clip_on(False)\n\n# Adding labels and title\nplt.xlabel('Year')\nplt.ylabel('Percentage Increase in Coral Reef Coverage')\nplt.title('Growth Patterns of Underwater Coral Reefs from 2010 to 2020')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_f619baa6f4cff0a0/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_f619baa6f4cff0a0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_f619baa6f4cff0a0/figure.png"
    },
    {
        "id": "Step_6405212244ef4dca",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# different periods categories ('Pre-covid', 'Lockdown', 'Recovery', 'Post-covid')\nstages = np.array([0, 1, 2, 3])\n\n# randomly generated revenue for each destination.\nParis = np.array([200, 80, 150, 210])\nNew_York = np.array([220, 60, 160, 205])\nRome = np.array([210, 70, 140, 220])\nTokyo = np.array([230, 75, 150, 215])\nLondon = np.array([220, 65, 155, 210])\n\n# Plotting using matplotlib's step function\nplt.figure(figsize=(10,6))\nplt.step(stages, Paris, where='mid', label='Paris')\nplt.step(stages, New_York, where='mid', label='New York')\nplt.step(stages, Rome, where='mid', label='Rome')\nplt.step(stages, Tokyo, where='mid', label='Tokyo')\nplt.step(stages, London, where='mid', label='London')\n\nplt.xticks(stages, ['Pre-COVID', 'Lockdown', 'Recovery', 'Post-COVID'])\nplt.yticks(np.arange(0,250,50))\n\nplt.legend()\nplt.title('Revenue Generated by Popular Destinations during COVID-19')\nplt.xlabel('COVID-19 Stages')\nplt.ylabel('Revenue (in Billions)')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the linestyle of the line that contains the center point of the bounding box to 'dashed'. Also, update the marker edge width for this line to 1.98 and marker style to '*'.",
        "Input_image": "./test_dataset/Step/Step_6405212244ef4dca/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# different periods categories ('Pre-covid', 'Lockdown', 'Recovery', 'Post-covid')\nstages = np.array([0, 1, 2, 3])\n\n# randomly generated revenue for each destination.\nParis = np.array([200, 80, 150, 210])\nNew_York = np.array([220, 60, 160, 205])\nRome = np.array([210, 70, 140, 220])\nTokyo = np.array([230, 75, 150, 215])\nLondon = np.array([220, 65, 155, 210])\n\n# Plotting using matplotlib's step function\nplt.figure(figsize=(10,6))\nplt.step(stages, Paris, where='mid', label='Paris', linestyle='dashed', markeredgewidth=1.98,marker='*')\nplt.step(stages, New_York, where='mid', label='New York')\nplt.step(stages, Rome, where='mid', label='Rome')\nplt.step(stages, Tokyo, where='mid', label='Tokyo')\nplt.step(stages, London, where='mid', label='London')\n\nplt.xticks(stages, ['Pre-COVID', 'Lockdown', 'Recovery', 'Post-COVID'])\nplt.yticks(np.arange(0,250,50))\n\nplt.legend()\nplt.title('Revenue Generated by Popular Destinations during COVID-19')\nplt.xlabel('COVID-19 Stages')\nplt.ylabel('Revenue (in Billions)')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_6405212244ef4dca/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_6405212244ef4dca/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_6405212244ef4dca/figure.png"
    },
    {
        "id": "Step_d3a4ad4c6bfd8281",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Advertising channels\nchannels = [\"TV\", \"Digital Ads\", \"Social Media\", \"Email Marketing\", \"Influencer Campaigns\"]\n\n# Corresponding online sales generated by each channel\nsales = [11300, 12780, 9920, 8450, 10970]\n\n# Create a new figure\nplt.figure(figsize=(10,6))\n\n# Plot the data using a stair plot\nplt.step(channels, sales, where='mid')\n\n# Add a title\nplt.title(\"Effectiveness of Different Advertising Channels in Generating Online Sales\")\n\n# Label the X and Y axes\nplt.xlabel(\"Advertising Channels\")\nplt.ylabel(\"Online Sales (in USD)\")\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the points that contain the center point of the bounding box to #c56e60. For these same points, set the z-order to 16 and apply a shadow effect with an offset of (2.58, 2.97).",
        "Input_image": "./test_dataset/Step/Step_d3a4ad4c6bfd8281/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Advertising channels\nchannels = [\"TV\", \"Digital Ads\", \"Social Media\", \"Email Marketing\", \"Influencer Campaigns\"]\n\n# Corresponding online sales generated by each channel\nsales = [11300, 12780, 9920, 8450, 10970]\n\n# Create a new figure\nplt.figure(figsize=(10,6))\n\n# Plot the data using a stair plot\nstep_plot = plt.step(channels, sales, where='mid', color='#c56e60', zorder=16, path_effects=[SimpleLineShadow(offset=(2.58, 2.97)), Normal()])\n\n# Add a title\nplt.title(\"Effectiveness of Different Advertising Channels in Generating Online Sales\")\n\n# Label the X and Y axes\nplt.xlabel(\"Advertising Channels\")\nplt.ylabel(\"Online Sales (in USD)\")\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_d3a4ad4c6bfd8281/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_d3a4ad4c6bfd8281/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_d3a4ad4c6bfd8281/figure.png"
    },
    {
        "id": "Step_a338c9e63cdc3885",
        "Input_code": "import matplotlib.pyplot as plt\n\n# x-axis values (list of holidays)\nholidays = ['New Year', \"Valentine's Day\", 'Easter', 'Fourth of July', 'Halloween', 'Thanksgiving', 'Christmas']\n\n# y-axis values (list of total online orders)\ntotal_online_orders = [1500, 2000, 1800, 2200, 1900, 2300, 2500]\n\n# Create stair plot\nplt.step(holidays, total_online_orders)\n\n# Set plot title and labels\nplt.title('Online Shopping Behaviors During Major Holidays')\nplt.xlabel('Holidays')\nplt.ylabel('Total number of online orders')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the lines that contain the center point of the bounding box to True. For the same points, also set the snap state of the lines that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Step/Step_a338c9e63cdc3885/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# x-axis values (list of holidays)\nholidays = ['New Year', \"Valentine's Day\", 'Easter', 'Fourth of July', 'Halloween', 'Thanksgiving', 'Christmas']\n\n# y-axis values (list of total online orders)\ntotal_online_orders = [1500, 2000, 1800, 2200, 1900, 2300, 2500]\n\n# Create stair plot\nstep_plot = plt.step(holidays, total_online_orders)\n\n# Set clipping state to True and snap state to False for the step plot\nfor line in step_plot:\n    line.set_clip_on(True)\n    line.set_snap(False)\n\n# Set plot title and labels\nplt.title('Online Shopping Behaviors During Major Holidays')\nplt.xlabel('Holidays')\nplt.ylabel('Total number of online orders')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_a338c9e63cdc3885/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_a338c9e63cdc3885/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_a338c9e63cdc3885/figure.png"
    },
    {
        "id": "Step_87783c8c6b8d4419",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Specify the values of spatial positions\nx = [-3, -2, -1, 0, 1, 2, 3]\n\n# Specify the values of probability amplitudes\ny = [0.1, 0.5, 0.8, 1.0, 0.8, 0.5, 0.1]\n\n# Create a step plot\nplt.step(x, y, where='mid')\n\n# Add a title to the plot\nplt.title('Quantum Particle Wave Function Visualization')\n\n# Add a label to the x-axis\nplt.xlabel('Spatial Positions')\n\n# Add a label to the y-axis\nplt.ylabel('Probability Amplitudes')\n\n# Add a grid to the plot\nplt.grid(True)\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the marker size of the data points that contain the center point of the bounding box to 17.31.",
        "Input_image": "./test_dataset/Step/Step_87783c8c6b8d4419/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Specify the values of spatial positions\nx = [-3, -2, -1, 0, 1, 2, 3]\n\n# Specify the values of probability amplitudes\ny = [0.1, 0.5, 0.8, 1.0, 0.8, 0.5, 0.1]\n\n# Create a step plot\nplt.step(x, y, where='mid', marker='o', markersize=17.31)\n\n# Add a title to the plot\nplt.title('Quantum Particle Wave Function Visualization')\n\n# Add a label to the x-axis\nplt.xlabel('Spatial Positions')\n\n# Add a label to the y-axis\nplt.ylabel('Probability Amplitudes')\n\n# Add a grid to the plot\nplt.grid(True)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_87783c8c6b8d4419/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_87783c8c6b8d4419/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_87783c8c6b8d4419/figure.png"
    },
    {
        "id": "Step_712b4b25d6fde593",
        "Input_code": "import matplotlib.pyplot as plt\n\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nexpenses = [50, 40, 35, 45]\nincome = [30, 25, 20, 35]\n\nplt.figure(figsize=(10,6))\n\nplt.step(quarters, expenses, where='mid', label='Expenses')\nplt.step(quarters, income, where='mid', label='Income')\n\nplt.title('Comparison of Expenses and Income for each Quarter during COVID-19')\nplt.ylabel('Amount in Thousands of Dollars')\nplt.ylim(0, max(expenses+income)+10)\nplt.legend()\nplt.grid(True)\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Show the marker and change the marker edge color for the points that contain the center point of the bounding box to #4ef298, and set the marker size for those same points to 9.91.",
        "Input_image": "./test_dataset/Step/Step_712b4b25d6fde593/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nexpenses = [50, 40, 35, 45]\nincome = [30, 25, 20, 35]\n\nplt.figure(figsize=(10,6))\n\nplt.step(quarters, expenses, where='mid', label='Expenses', marker='o', markersize=9.91, markeredgecolor='#4ef298')\nplt.step(quarters, income, where='mid', label='Income')\n\nplt.title('Comparison of Expenses and Income for each Quarter during COVID-19')\nplt.ylabel('Amount in Thousands of Dollars')\nplt.ylim(0, max(expenses+income)+10)\nplt.legend()\nplt.grid(True)\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_712b4b25d6fde593/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_712b4b25d6fde593/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_712b4b25d6fde593/figure.png"
    },
    {
        "id": "Step_47be5d40e720db09",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Given data\ntransport_modes = ['Walking', 'Bicycling', 'Public Transportation', 'Carpooling', 'Private Vehicle']\nstudents_percentage = [30, 15, 20, 10, 25]\n\n# Creation of step plot\nplt.step(transport_modes, students_percentage, where='mid')\n\n# Setting labels and title\nplt.xlabel('Mode of Transportation')\nplt.ylabel('Percentage of Students (%)')\nplt.title('Mode of Transportation used by School Students')\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the color of the lines that contain the center point of the bounding box to #6198a9. Also, make sure to set the rasterized state of these lines to False.",
        "Input_image": "./test_dataset/Step/Step_47be5d40e720db09/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Given data\ntransport_modes = ['Walking', 'Bicycling', 'Public Transportation', 'Carpooling', 'Private Vehicle']\nstudents_percentage = [30, 15, 20, 10, 25]\n\n# Creation of step plot\nstep_plot = plt.step(transport_modes, students_percentage, where='mid', color='#6198a9', rasterized=False)\n\n# Setting labels and title\nplt.xlabel('Mode of Transportation')\nplt.ylabel('Percentage of Students (%)')\nplt.title('Mode of Transportation used by School Students')\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_47be5d40e720db09/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_47be5d40e720db09/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_47be5d40e720db09/figure.png"
    },
    {
        "id": "Step_5230ee1f7c5cd356",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Aspects\naspects = ['Taste', 'Affordability', 'Cleanliness', 'Variety', 'Service']\n\n# Ratings for McDonald's\nratings_mcd = {\n    'Taste': [4.2, 4.4, 3.9, 4.3, 4.1],\n    'Affordability': [3.8, 3.9, 4.1, 4.0, 3.7],\n    'Cleanliness': [4.5, 4.3, 4.2, 4.4, 4.1],\n    'Variety': [3.9, 4.2, 4.0, 4.1, 3.8],\n    'Service': [4.0, 4.1, 4.3, 4.2, 4.0],\n}\n\n# Ratings for Burger King\nratings_bk = {\n    'Taste': [4.1, 4.3, 3.8, 4.2, 4.0],\n    'Affordability': [3.7, 3.8, 4.0, 3.9, 3.6],\n    'Cleanliness': [4.4, 4.2, 4.1, 4.3, 4.0],\n    'Variety': [3.8, 4.1, 3.9, 4.0, 3.7],\n    'Service': [3.9, 4.0, 4.2, 4.1, 3.9],\n}\n\n# Create plot for each aspect\nfor aspect in aspects:\n    plt.figure(figsize=(12, 5))\n    \n    plt.step(range(5), ratings_mcd[aspect], where='mid', label=\"McDonald's\")\n    plt.step(range(5), ratings_bk[aspect], where='mid', label='Burger King')\n    \n    plt.xticks(range(5), ['Rating 1', 'Rating 2', 'Rating 3', 'Rating 4', 'Rating 5'])\n    plt.xlabel('Ratings')\n    plt.ylabel('Average Rating')\n    plt.title(f'{aspect} Rating Stair Plot')\n    plt.grid(True)\n    plt.legend()\n    \nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the line that contains the center point of the bounding box to True. For the same points, adjust its z-order to 11 and apply a shadow effect with an offset of (3.26, 2.76).",
        "Input_image": "./test_dataset/Step/Step_5230ee1f7c5cd356/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Aspects\naspects = ['Taste', 'Affordability', 'Cleanliness', 'Variety', 'Service']\n\n# Ratings for McDonald's\nratings_mcd = {\n    'Taste': [4.2, 4.4, 3.9, 4.3, 4.1],\n    'Affordability': [3.8, 3.9, 4.1, 4.0, 3.7],\n    'Cleanliness': [4.5, 4.3, 4.2, 4.4, 4.1],\n    'Variety': [3.9, 4.2, 4.0, 4.1, 3.8],\n    'Service': [4.0, 4.1, 4.3, 4.2, 4.0],\n}\n\n# Ratings for Burger King\nratings_bk = {\n    'Taste': [4.1, 4.3, 3.8, 4.2, 4.0],\n    'Affordability': [3.7, 3.8, 4.0, 3.9, 3.6],\n    'Cleanliness': [4.4, 4.2, 4.1, 4.3, 4.0],\n    'Variety': [3.8, 4.1, 3.9, 4.0, 3.7],\n    'Service': [3.9, 4.0, 4.2, 4.1, 3.9],\n}\n\n# Create plot for each aspect\nfor aspect in aspects:\n    plt.figure(figsize=(12, 5))\n    \n    line_mcd, = plt.step(range(5), ratings_mcd[aspect], where='mid', label=\"McDonald's\", animated=True, zorder=11, path_effects=[SimpleLineShadow(offset=(3.26, 2.76)), Normal()])\n    plt.step(range(5), ratings_bk[aspect], where='mid', label='Burger King')\n    \n    plt.xticks(range(5), ['Rating 1', 'Rating 2', 'Rating 3', 'Rating 4', 'Rating 5'])\n    plt.xlabel('Ratings')\n    plt.ylabel('Average Rating')\n    plt.title(f'{aspect} Rating Stair Plot')\n    plt.grid(True)\n    plt.legend()\n    \nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_5230ee1f7c5cd356/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_5230ee1f7c5cd356/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_5230ee1f7c5cd356/figure.png"
    },
    {
        "id": "Step_2972bbe80f811ae7",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for population count at different depths for each underground society\ndepths = [1, 2, 3, 4, 5]\npopulations = {\n    'Society X': [500, 600, 550, 700, 650],\n    'Society Y': [300, 450, 400, 350, 300],\n    'Society Z': [800, 700, 750, 900, 850]\n}\n\nplt.figure(figsize=(10, 6))\n\nfor society, population in populations.items():\n    plt.step(depths, population, label=society, where='mid')\n\nplt.xlabel('Depth (km)')\nplt.ylabel('Population Count')\nplt.title('Subterranean Civilizations Mapped Using 3D')\nplt.legend()\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the step lines that contain the center point of the bounding box to 0.89. Additionally, set the picker state of those same lines to False.",
        "Input_image": "./test_dataset/Step/Step_2972bbe80f811ae7/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points for population count at different depths for each underground society\ndepths = [1, 2, 3, 4, 5]\npopulations = {\n    'Society X': [500, 600, 550, 700, 650],\n    'Society Y': [300, 450, 400, 350, 300],\n    'Society Z': [800, 700, 750, 900, 850]\n}\n\nplt.figure(figsize=(10, 6))\n\nfor i, (society, population) in enumerate(populations.items()):\n    if i == 1:  # Target_object\n        step = plt.step(depths, population, label=society, where='mid', alpha=0.89, picker=False)\n    else:\n        step = plt.step(depths, population, label=society, where='mid')\n\nplt.xlabel('Depth (km)')\nplt.ylabel('Population Count')\nplt.title('Subterranean Civilizations Mapped Using 3D')\nplt.legend()\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_2972bbe80f811ae7/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_2972bbe80f811ae7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_2972bbe80f811ae7/figure.png"
    },
    {
        "id": "Step_37e2834f381ac8aa",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Your data\nactivity_levels = ['0-1 days', '2-3 days', '4-5 days', '6-7 days']\nscores = [70, 75, 80, 85]\n\n# Plotting\nplt.figure(figsize=(10,5))\nplt.plot(activity_levels, scores, marker = 'o', drawstyle = 'steps-post')\nplt.title('Impact of physical activity on academic performance')\nplt.xlabel('Physical Activity [days per week]')\nplt.ylabel('Academic Score')\nplt.ylim(65, 90)  # This adds some space below and above the bars\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the rasterized state of the steps that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Step/Step_37e2834f381ac8aa/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Your data\nactivity_levels = ['0-1 days', '2-3 days', '4-5 days', '6-7 days']\nscores = [70, 75, 80, 85]\n\n# Plotting\nplt.figure(figsize=(10,5))\nline, = plt.plot(activity_levels, scores, marker = 'o', drawstyle = 'steps-post')\nline.set_rasterized(False)  # Set rasterized state to False\nplt.title('Impact of physical activity on academic performance')\nplt.xlabel('Physical Activity [days per week]')\nplt.ylabel('Academic Score')\nplt.ylim(65, 90)  # This adds some space below and above the bars\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_37e2834f381ac8aa/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_37e2834f381ac8aa/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_37e2834f381ac8aa/figure.png"
    },
    {
        "id": "Step_2f3b8038a97ee2dd",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Names of Operating Systems\nos_names = ['Android', 'iOS', 'Windows', 'Others']\n\n# Corresponding User percentages\nuser_percentages = [54, 40, 4, 2]\n\n# Initialize a figure and axis \nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Draw the stair plot\nax.step(os_names, user_percentages, where='mid', label='Preference')\n\n# Add title and labels\nax.set_xlabel('Operating Systems')\nax.set_ylabel('Percentage of Users (%)')\nax.set_title('Operating System Preferences among smartphone users')\nax.grid(True)\n\n# Display the Legend\nax.legend()\n\n# Show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Disable the clipping for the step line that contains the center point of the bounding box. Also, change the marker face color for those points to #c2d9dc and style to 'o'.",
        "Input_image": "./test_dataset/Step/Step_2f3b8038a97ee2dd/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Names of Operating Systems\nos_names = ['Android', 'iOS', 'Windows', 'Others']\n\n# Corresponding User percentages\nuser_percentages = [54, 40, 4, 2]\n\n# Initialize a figure and axis \nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Draw the stair plot\nline, = ax.step(os_names, user_percentages, where='mid', label='Preference')\n\n# Set the clipping state to False and marker face color\nline.set_clip_on(False)\nline.set_markerfacecolor('#c2d9dc')\nline.set_marker('o')\n\n# Add title and labels\nax.set_xlabel('Operating Systems')\nax.set_ylabel('Percentage of Users (%)')\nax.set_title('Operating System Preferences among smartphone users')\nax.grid(True)\n\n# Display the Legend\nax.legend()\n\n# Show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_2f3b8038a97ee2dd/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_2f3b8038a97ee2dd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_2f3b8038a97ee2dd/figure.png"
    },
    {
        "id": "Step_99c04199a15f009e",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Age Groups\nage_groups = [\"Children (5-12 years)\", \"Teenagers (13-19 years)\", \"Young Adults (20-30 years)\", \"Adults (31-50 years)\", \"Seniors (51+ years)\"]\n  \n# Time spent playing games per week \nhours = [2, 4, 6, 3, 1] \n\nplt.step(age_groups, hours, where='mid')\n\nplt.xlabel('Age Groups') \nplt.ylabel('Hours spent playing pixel puzzle games per week') \nplt.title('Popularity of Pixel Puzzle Games among Different Age Groups') \n\n \n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the points that contain the center point of the bounding box to #1665e2, and set their marker size to 17.66.",
        "Input_image": "./test_dataset/Step/Step_99c04199a15f009e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Age Groups\nage_groups = [\"Children (5-12 years)\", \"Teenagers (13-19 years)\", \"Young Adults (20-30 years)\", \"Adults (31-50 years)\", \"Seniors (51+ years)\"]\n  \n# Time spent playing games per week \nhours = [2, 4, 6, 3, 1] \n\nplt.step(age_groups, hours, where='mid', color='#1665e2', markersize=17.66)\n\nplt.xlabel('Age Groups') \nplt.ylabel('Hours spent playing pixel puzzle games per week') \nplt.title('Popularity of Pixel Puzzle Games among Different Age Groups') \n\n \n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_99c04199a15f009e/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_99c04199a15f009e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_99c04199a15f009e/figure.png"
    },
    {
        "id": "Step_65edd93a081f0189",
        "Input_code": "import matplotlib.pyplot as plt\n\n# data for x-axis and y-axis\nx = ['Low', 'Medium', 'High']\ny = [20, 35, 45]\n\n# creating a new figure\nplt.figure()\n\n# creating the stair plot\nplt.step(x, y, where='mid')\n\n# labeling the y-axis\nplt.ylabel('Average Height of Flower Growth (cm)')\n  \n# labeling the x-axis\nplt.xlabel('Sunlight Exposure Levels')\n  \n# title to be given to the plot\nplt.title('Stair plot showing Flower Growth based on Sunlight Exposure Levels')\n  \n# function to show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the marker style for the points that contain the center point of the bounding box to 's', and set the marker edge width for these points to 1.22.",
        "Input_image": "./test_dataset/Step/Step_65edd93a081f0189/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# data for x-axis and y-axis\nx = ['Low', 'Medium', 'High']\ny = [20, 35, 45]\n\n# creating a new figure\nplt.figure()\n\n# creating the stair plot with marker style 's' and marker edge width 1.22\nplt.step(x, y, where='mid', marker='s', markeredgewidth=1.22)\n\n# labeling the y-axis\nplt.ylabel('Average Height of Flower Growth (cm)')\n  \n# labeling the x-axis\nplt.xlabel('Sunlight Exposure Levels')\n  \n# title to be given to the plot\nplt.title('Stair plot showing Flower Growth based on Sunlight Exposure Levels')\n  \n# function to show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_65edd93a081f0189/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_65edd93a081f0189/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_65edd93a081f0189/figure.png"
    },
    {
        "id": "Step_83b536ff920fbd2f",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the levels of engagement and conversion rates\nlevels_of_engagement = ['Low', 'Moderate', 'High', 'Very High', 'Extreme']\nconversion_rates = np.array([25, 40, 55, 70, 85])\n\n# Enlarge the plot size\nplt.figure(figsize=(10,7))\n\n# Generate the stair plot\nplt.step(levels_of_engagement, conversion_rates, where='mid')\n\n# Label the axes\nplt.xlabel(\"Level of Social Media Engagement\")\nplt.ylabel(\"Customer Conversion Rate (%)\")\nplt.title(\"Stair Plot of Social Media Engagement vs Conversion Rate\")\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the points that contain the center point of the bounding box to #083d38, and set the marker size for those same points to 13.07.",
        "Input_image": "./test_dataset/Step/Step_83b536ff920fbd2f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the levels of engagement and conversion rates\nlevels_of_engagement = ['Low', 'Moderate', 'High', 'Very High', 'Extreme']\nconversion_rates = np.array([25, 40, 55, 70, 85])\n\n# Enlarge the plot size\nplt.figure(figsize=(10,7))\n\n# Generate the stair plot\nplt.step(levels_of_engagement, conversion_rates, where='mid', color='#083d38', marker='o', markersize=13.07)\n\n# Label the axes\nplt.xlabel(\"Level of Social Media Engagement\")\nplt.ylabel(\"Customer Conversion Rate (%)\")\nplt.title(\"Stair Plot of Social Media Engagement vs Conversion Rate\")\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_83b536ff920fbd2f/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_83b536ff920fbd2f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_83b536ff920fbd2f/figure.png"
    },
    {
        "id": "Step_382c961606dfe8de",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Months in 2021\nmonths = np.array([\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"])\n\n# Market Capitalization data of top 10 cryptocurrencies\nbitcoin = np.array([663.23, 745.46, 641.98, 834.23, 927.51, 658.21, 789.42, 850.64, 774.36, 819.23, 923.77, 996.51])\nethereum = np.array([160.85, 186.74, 201.76, 281.09, 389.54, 276.13, 322.45, 361.29, 301.67, 355.42, 414.37, 482.98])\nbinance_coin = np.array([20.98, 27.63, 37.15, 45.82, 59.41, 37.96, 49.13, 54.72, 41.54, 52.63, 61.87, 67.51])\ncardano = np.array([0.31, 0.42, 0.38, 0.42, 0.59, 0.29, 0.34, 0.41, 0.32, 0.39, 0.44, 0.48])\nxrp = np.array([0.29, 0.32, 0.28, 0.28, 0.40, 0.24, 0.29, 0.37, 0.27, 0.31, 0.35, 0.39])\ndogecoin = np.array([0.01, 0.01, 0.01, 0.06, 0.28, 0.33, 0.31, 0.42, 0.30, 0.40, 0.48, 0.51])\npolkadot = np.array([11.23, 11.81, 10.34, 14.72, 17.83, 9.44, 11.15, 14.63, 13.20, 17.28, 20.06, 23.42])\nlitecoin = np.array([3.57, 4.81, 3.98, 5.63, 7.92, 5.43, 6.45, 8.17, 6.83, 8.09, 9.35, 10.75])\nchainlink = np.array([11.25, 11.48, 11.24, 13.36, 19.63, 11.04, 12.57, 15.44, 13.26, 16.18, 18.64, 21.89])\nbitcoin_cash = np.array([541.05, 620.77, 518.23, 703.27, 811.14, 512.37, 618.53, 694.82, 576.59, 652.47, 737.93, 825.11])\n\n# Stem plot for each cryptocurrency\nplt.figure(figsize=(12,8))\nplt.step(months, bitcoin, label = \"Bitcoin\")\nplt.step(months, ethereum, label = \"Ethereum\")\nplt.step(months, binance_coin, label = \"Binance Coin\")\nplt.step(months, cardano, label = \"Cardano\")\nplt.step(months, xrp, label = \"XRP\")\nplt.step(months, dogecoin, label = \"Dogecoin\")\nplt.step(months, polkadot, label = \"Polkadot\")\nplt.step(months, litecoin, label = \"Litecoin\")\nplt.step(months, chainlink,label = \"Chainlink\")\nplt.step(months, bitcoin_cash, label = \"Bitcoin Cash\")\n\n# Adding labels, title and legend\nplt.xlabel('Months')\nplt.ylabel('Market Capitalization (Billions USD)')\nplt.title('Market Capitalization trends of top 10 Cryptocurrencies in 2021')\nplt.legend(loc='best')\n\n# Display the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add data point annotations to the step line that contains the center point of the bounding box, using a font size of 13 and the color '#3a2161'.",
        "Input_image": "./test_dataset/Step/Step_382c961606dfe8de/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Months in 2021\nmonths = np.array([\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"])\n\n# Market Capitalization data of top 10 cryptocurrencies\nbitcoin = np.array([663.23, 745.46, 641.98, 834.23, 927.51, 658.21, 789.42, 850.64, 774.36, 819.23, 923.77, 996.51])\nethereum = np.array([160.85, 186.74, 201.76, 281.09, 389.54, 276.13, 322.45, 361.29, 301.67, 355.42, 414.37, 482.98])\nbinance_coin = np.array([20.98, 27.63, 37.15, 45.82, 59.41, 37.96, 49.13, 54.72, 41.54, 52.63, 61.87, 67.51])\ncardano = np.array([0.31, 0.42, 0.38, 0.42, 0.59, 0.29, 0.34, 0.41, 0.32, 0.39, 0.44, 0.48])\nxrp = np.array([0.29, 0.32, 0.28, 0.28, 0.40, 0.24, 0.29, 0.37, 0.27, 0.31, 0.35, 0.39])\ndogecoin = np.array([0.01, 0.01, 0.01, 0.06, 0.28, 0.33, 0.31, 0.42, 0.30, 0.40, 0.48, 0.51])\npolkadot = np.array([11.23, 11.81, 10.34, 14.72, 17.83, 9.44, 11.15, 14.63, 13.20, 17.28, 20.06, 23.42])\nlitecoin = np.array([3.57, 4.81, 3.98, 5.63, 7.92, 5.43, 6.45, 8.17, 6.83, 8.09, 9.35, 10.75])\nchainlink = np.array([11.25, 11.48, 11.24, 13.36, 19.63, 11.04, 12.57, 15.44, 13.26, 16.18, 18.64, 21.89])\nbitcoin_cash = np.array([541.05, 620.77, 518.23, 703.27, 811.14, 512.37, 618.53, 694.82, 576.59, 652.47, 737.93, 825.11])\n\n# Stem plot for each cryptocurrency\nplt.figure(figsize=(12,8))\nplt.step(months, bitcoin, label = \"Bitcoin\")\nplt.step(months, ethereum, label = \"Ethereum\")\nplt.step(months, binance_coin, label = \"Binance Coin\")\nplt.step(months, cardano, label = \"Cardano\")\nplt.step(months, xrp, label = \"XRP\")\nplt.step(months, dogecoin, label = \"Dogecoin\")\nplt.step(months, polkadot, label = \"Polkadot\")\nplt.step(months, litecoin, label = \"Litecoin\")\nplt.step(months, chainlink,label = \"Chainlink\")\nplt.step(months, bitcoin_cash, label = \"Bitcoin Cash\")\n\n# Adding labels, title and legend\nplt.xlabel('Months')\nplt.ylabel('Market Capitalization (Billions USD)')\nplt.title('Market Capitalization trends of top 10 Cryptocurrencies in 2021')\nplt.legend(loc='best')\n\n# Adding data point annotations to the step line corresponding to the Target_object\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == 0:  # Assuming Bitcoin is the target object\n        x_data = line.get_xdata()\n        y_data = line.get_ydata()\n        for i, (x, y) in enumerate(zip(x_data, y_data)):\n            plt.text(x, y, f'{y:.2f}', fontsize=13, color='#3a2161', ha='center', va='bottom')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_382c961606dfe8de/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_382c961606dfe8de/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_382c961606dfe8de/figure.png"
    },
    {
        "id": "Step_53234db1c8e1ade7",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating the data\ncompanies = [\"Company A\", \"Company B\", \"Company C\", \"Company D\", \"Company E\"]\nmale_salaries = [90000, 95000, 100000, 92000, 88000]\nfemale_salaries = [80000, 85000, 90000, 82000, 78000]\n\nx = np.arange(len(companies))\n\n# Creating the plot\nfig, ax = plt.subplots()\n\nax.step(x, male_salaries, label='Male', where='mid')\nax.step(x, female_salaries, label='Female', where='mid')\n\n# Customizing the plot\nax.set_xlabel(\"Companies\")\nax.set_ylabel(\"Average Salary (in USD)\")\nax.set_title(\"Gender Pay Gap in the Tech Industry\")\nax.set_xticks(x)\nax.set_xticklabels(companies)\nax.legend()\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the transparency of the step line that contains the center point of the bounding box to 0.3.",
        "Input_image": "./test_dataset/Step/Step_53234db1c8e1ade7/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating the data\ncompanies = [\"Company A\", \"Company B\", \"Company C\", \"Company D\", \"Company E\"]\nmale_salaries = [90000, 95000, 100000, 92000, 88000]\nfemale_salaries = [80000, 85000, 90000, 82000, 78000]\n\nx = np.arange(len(companies))\n\n# Creating the plot\nfig, ax = plt.subplots()\n\nax.step(x, male_salaries, label='Male', where='mid')\nax.step(x, female_salaries, label='Female', where='mid')\n\n# Customizing the plot\nax.set_xlabel(\"Companies\")\nax.set_ylabel(\"Average Salary (in USD)\")\nax.set_title(\"Gender Pay Gap in the Tech Industry\")\nax.set_xticks(x)\nax.set_xticklabels(companies)\nax.legend()\n\n# Modifying the transparency of the step line\nfor idx, line in enumerate(ax.lines):\n    if idx == 0:\n        line.set_alpha(0.3)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_53234db1c8e1ade7/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_53234db1c8e1ade7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_53234db1c8e1ade7/figure.png"
    },
    {
        "id": "Step_bce8055d7170ebb4",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nsubjects = ['Math', 'Physics', 'Chemistry', 'Biology']\ngrades_extracurriculars = [80, 75, 90, 85]\ngrades_no_extracurriculars = [70, 65, 80, 75]\n\nplt.figure(figsize=[10,5])\n\n# For students participating in extracurricular activities\nplt.step(subjects, grades_extracurriculars, where='mid', label='Participation in Extracurriculars')\n\n# For students not participating in extracurricular activities\nplt.step(subjects, grades_no_extracurriculars, where='mid', label='No Participation in Extracurriculars')\n\nplt.ylim(0, 100) # Scale of grades\n\nplt.title('Comparison of Academic Performance in STEM')\nplt.xlabel('Subjects')\nplt.ylabel('Average Grades')\n\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the linewidth of the steps that contain the center point of the bounding box to 1.48.",
        "Input_image": "./test_dataset/Step/Step_bce8055d7170ebb4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nsubjects = ['Math', 'Physics', 'Chemistry', 'Biology']\ngrades_extracurriculars = [80, 75, 90, 85]\ngrades_no_extracurriculars = [70, 65, 80, 75]\n\nplt.figure(figsize=[10,5])\n\n# For students participating in extracurricular activities\nplt.step(subjects, grades_extracurriculars, where='mid', label='Participation in Extracurriculars', linewidth=1.48)\n\n# For students not participating in extracurricular activities\nplt.step(subjects, grades_no_extracurriculars, where='mid', label='No Participation in Extracurriculars')\n\nplt.ylim(0, 100) # Scale of grades\n\nplt.title('Comparison of Academic Performance in STEM')\nplt.xlabel('Subjects')\nplt.ylabel('Average Grades')\n\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_bce8055d7170ebb4/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_bce8055d7170ebb4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_bce8055d7170ebb4/figure.png"
    },
    {
        "id": "Step_2cb3562d10f9d7e1",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndecades = np.array([1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040])\nmoon_missions = np.array([12, 22, 16, 14, 8, 5, 2, 6, 10])\nmars_missions = np.array([5, 7, 12, 10, 14, 11, 20, 25, 30])\n\n# Plotting the data\nplt.step(decades, moon_missions, label='Moon Missions', color='blue', linewidth=2, marker='o', markersize=8, alpha=0.7, linestyle='-')\nplt.step(decades, mars_missions, label='Mars Missions', color='red', linewidth=2, marker='v', markersize=8, alpha=0.7, linestyle='--')\n\n# Annotating the lines\nfor i, txt in enumerate(moon_missions):\n    plt.annotate('Moon Missions', (decades[i], moon_missions[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8, color='blue')\nfor i, txt in enumerate(mars_missions):\n    plt.annotate('Mars Missions', (decades[i], mars_missions[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8, color='red')\n\n# Setting the chart title and labels\nplt.title('Moon vs Mars Missions per Decade')\nplt.xlabel('Decade')\nplt.ylabel('Number of Missions')\n\n# Adding a grid\nplt.grid(True)\n\n# Setting the background color\nplt.gca().set_facecolor('gray')\n\n# Adding a legend\nplt.legend()\n\n# Adjusting layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Highlight the step line that contains the center point of the bounding box, using the color '#c697b1' with an intensity of 0.42.",
        "Input_image": "./test_dataset/Step/Step_2cb3562d10f9d7e1/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndecades = np.array([1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040])\nmoon_missions = np.array([12, 22, 16, 14, 8, 5, 2, 6, 10])\nmars_missions = np.array([5, 7, 12, 10, 14, 11, 20, 25, 30])\n\n# Plotting the data\nplt.step(decades, moon_missions, label='Moon Missions', color='blue', linewidth=2, marker='o', markersize=8, alpha=0.7, linestyle='-')\nplt.step(decades, mars_missions, label='Mars Missions', color='red', linewidth=2, marker='v', markersize=8, alpha=0.7, linestyle='--')\n\n# Adding highlight effect to the target object\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == 0:  # Assuming the first line is the target\n        line.set_color('#c697b1')\n        line.set_alpha(0.42)\n\n# Annotating the lines\nfor i, txt in enumerate(moon_missions):\n    plt.annotate('Moon Missions', (decades[i], moon_missions[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8, color='blue')\nfor i, txt in enumerate(mars_missions):\n    plt.annotate('Mars Missions', (decades[i], mars_missions[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8, color='red')\n\n# Setting the chart title and labels\nplt.title('Moon vs Mars Missions per Decade')\nplt.xlabel('Decade')\nplt.ylabel('Number of Missions')\n\n# Adding a grid\nplt.grid(True)\n\n# Setting the background color\nplt.gca().set_facecolor('gray')\n\n# Adding a legend\nplt.legend()\n\n# Adjusting layout and saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_2cb3562d10f9d7e1/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_2cb3562d10f9d7e1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_2cb3562d10f9d7e1/myplot.png"
    },
    {
        "id": "Step_a6d34abc86ab8ea5",
        "Input_code": "import matplotlib.pyplot as plt\n\n# given data\nseasons = ['Winter', 'Spring', 'Summer', 'Fall']\naccidents = [1000, 850, 1200, 950]\n\n# plot data\nplt.step(seasons, accidents, where='mid')\n\n# define labels and title\nplt.xlabel('Seasons')\nplt.ylabel('Accident Frequency')\nplt.title('Frequency of weather-related car accidents across different seasons')\n\n# display\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Stroke the line that contains the center point of the bounding box with a linewidth of 4.3 and a foreground color of #5e7579.",
        "Input_image": "./test_dataset/Step/Step_a6d34abc86ab8ea5/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# given data\nseasons = ['Winter', 'Spring', 'Summer', 'Fall']\naccidents = [1000, 850, 1200, 950]\n\n# plot data\nstroke_effect = path_effects.withStroke(linewidth=4.301443937208367, foreground='#5e7579')\nplt.step(seasons, accidents, where='mid', path_effects=[stroke_effect])\n\n# define labels and title\nplt.xlabel('Seasons')\nplt.ylabel('Accident Frequency')\nplt.title('Frequency of weather-related car accidents across different seasons')\n\n# display\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_a6d34abc86ab8ea5/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_a6d34abc86ab8ea5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_a6d34abc86ab8ea5/figure.png"
    },
    {
        "id": "Step_530be3a7890d74df",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Quantum states\nstates = ['State A', 'State B', 'State C', 'State D', 'State E']\n\n# Entanglement strengths for each state\nentanglement_strengths = {\n    'State A': [0.8, 0.9, 0.7, 0.6, 0.8],\n    'State B': [0.5, 0.6, 0.4, 0.3, 0.2],\n    'State C': [0.9, 0.8, 0.7, 0.6, 0.8],\n    'State D': [0.3, 0.4, 0.2, 0.1, 0.3],\n    'State E': [0.7, 0.6, 0.5, 0.4, 0.6]\n}\n\n# Create plot\nfig, ax = plt.subplots()\n\nfor state in states:\n    ax.step(range(len(entanglement_strengths[state])), entanglement_strengths[state], where='mid', label=state)\n\n# Set the plot labels\nplt.xlabel('Quantum States')\nplt.ylabel('Entanglement Strength')\nplt.title('Quantum Entanglement in TimeSpace Theory')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the step lines that contain the center point of the bounding box to 0.66. Additionally, ensure that these lines are transformed to align with the coordinate system of the subfigure.",
        "Input_image": "./test_dataset/Step/Step_530be3a7890d74df/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Quantum states\nstates = ['State A', 'State B', 'State C', 'State D', 'State E']\n\n# Entanglement strengths for each state\nentanglement_strengths = {\n    'State A': [0.8, 0.9, 0.7, 0.6, 0.8],\n    'State B': [0.5, 0.6, 0.4, 0.3, 0.2],\n    'State C': [0.9, 0.8, 0.7, 0.6, 0.8],\n    'State D': [0.3, 0.4, 0.2, 0.1, 0.3],\n    'State E': [0.7, 0.6, 0.5, 0.4, 0.6]\n}\n\n# Create plot\nfig, ax = plt.subplots()\n\nfor idx, state in enumerate(states):\n    if idx == 2:  # Target object\n        line, = ax.step(range(len(entanglement_strengths[state])), entanglement_strengths[state], where='mid', label=state, alpha=0.66)\n        line.set_transform(ax.transData)\n    else:\n        ax.step(range(len(entanglement_strengths[state])), entanglement_strengths[state], where='mid', label=state)\n\n# Set the plot labels\nplt.xlabel('Quantum States')\nplt.ylabel('Entanglement Strength')\nplt.title('Quantum Entanglement in TimeSpace Theory')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Step/Step_530be3a7890d74df/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_530be3a7890d74df/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_530be3a7890d74df/figure.png"
    },
    {
        "id": "Step_837d18cc56472a47",
        "Input_code": "import matplotlib.pyplot as plt\n\n# In your data, Time period and Number of Sales are:\ntime_periods = ['Q1', 'Q2', 'Q3', 'Q4']\neco_friendly_products = [50, 45, 58, 52]\nconventional_products = [60, 62, 55, 48]\n\n# Creating the stairs plot\nplt.step(time_periods, eco_friendly_products, label='Eco-Friendly Products')\nplt.step(time_periods, conventional_products, label='Conventional Products')\n\n# Adding legend to distinguish the lines\nplt.legend(loc='best')\n\n# Adding title and labels for the axes\nplt.title('Sales Performance Comparison')\nplt.xlabel('Quarters')\nplt.ylabel('Sales Volume (in thousands)')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the label of the steps that contain the center point of the bounding box to 'A new Label'. Also, adjust the marker size for those same steps to 11.43.",
        "Input_image": "./test_dataset/Step/Step_837d18cc56472a47/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# In your data, Time period and Number of Sales are:\ntime_periods = ['Q1', 'Q2', 'Q3', 'Q4']\neco_friendly_products = [50, 45, 58, 52]\nconventional_products = [60, 62, 55, 48]\n\n# Creating the stairs plot\nplt.step(time_periods, eco_friendly_products, label='Eco-Friendly Products')\nplt.step(time_periods, conventional_products, label='A new Label', marker='o', markersize=11.43)\n\n# Adding legend to distinguish the lines\nplt.legend(loc='best')\n\n# Adding title and labels for the axes\nplt.title('Sales Performance Comparison')\nplt.xlabel('Quarters')\nplt.ylabel('Sales Volume (in thousands)')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_837d18cc56472a47/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_837d18cc56472a47/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_837d18cc56472a47/figure.png"
    },
    {
        "id": "Step_5bfcf9abc97c1034",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ngenres = ['Rock', 'Pop', 'Jazz', 'Classical', 'Hip-hop']\ndopamine_production = [3.2, 4.5, 2.9, 2.1, 3.8]\n\n# Create Stair Plot\nplt.step(genres, dopamine_production, where='mid')\n\n# Setting title and labels\nplt.title(\"Effect of different music genres on the brain's dopamine production\")\nplt.xlabel(\"Music Genres\")\nplt.ylabel(\"Dopamine Production\")\n\n# Display Plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the steps that contain the center point of the bounding box to 0.35. Also, change the linestyle of these steps to 'dashed'.",
        "Input_image": "./test_dataset/Step/Step_5bfcf9abc97c1034/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ngenres = ['Rock', 'Pop', 'Jazz', 'Classical', 'Hip-hop']\ndopamine_production = [3.2, 4.5, 2.9, 2.1, 3.8]\n\n# Create Stair Plot\nplt.step(genres, dopamine_production, where='mid', linestyle='dashed', alpha=0.35)\n\n# Setting title and labels\nplt.title(\"Effect of different music genres on the brain's dopamine production\")\nplt.xlabel(\"Music Genres\")\nplt.ylabel(\"Dopamine Production\")\n\n# Display Plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_5bfcf9abc97c1034/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_5bfcf9abc97c1034/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_5bfcf9abc97c1034/figure.png"
    },
    {
        "id": "Step_9a1f28353ec575ea",
        "Input_code": "import matplotlib.pyplot as plt\n\nspecies = ['Psychrobacter', 'Chryseobacterium', 'Pseudomonas', 'Flavobacterium', 'Arthrobacter']\nabundance = [126, 93, 85, 72, 64]\n\nplt.step(species, abundance, where='mid', color='purple')\nplt.title('Microbial Diversity in Antarctic Ice Samples')\nplt.xlabel('Microbial Species')\nplt.ylabel('Abundance')\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the step that contains the center point of the bounding box to #69b8c0.",
        "Input_image": "./test_dataset/Step/Step_9a1f28353ec575ea/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nspecies = ['Psychrobacter', 'Chryseobacterium', 'Pseudomonas', 'Flavobacterium', 'Arthrobacter']\nabundance = [126, 93, 85, 72, 64]\n\nplt.step(species, abundance, where='mid', color='#69b8c0')\nplt.title('Microbial Diversity in Antarctic Ice Samples')\nplt.xlabel('Microbial Species')\nplt.ylabel('Abundance')\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_9a1f28353ec575ea/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_9a1f28353ec575ea/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_9a1f28353ec575ea/figure.png"
    },
    {
        "id": "Step_62b3f826a8527357",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Labels for x-axis\nage_groups = ['18-25', '26-35', '36-45', '46-55', '56-65']\n\n# Y-axis data points\nbooks_read = [5, 7, 6, 4, 3]\ncoffee_consumed = [2, 3, 4, 3, 2]\n\n# Create stair plots\nplt.step(age_groups, books_read, where='mid', label='Books Read')\nplt.step(age_groups, coffee_consumed, where='mid', label='Coffee Consumed')\n\n# Adding labels and title\nplt.xlabel(\"Age Groups\")\nplt.ylabel(\"Average Number\")\nplt.title(\"Relationship between Number of Books Read and Coffee Consumed\")\n\n# Displaying legend\nplt.legend(title='Parameters')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the marker style of the step line that contains the center point of the bounding box to a triangle ('^').",
        "Input_image": "./test_dataset/Step/Step_62b3f826a8527357/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Labels for x-axis\nage_groups = ['18-25', '26-35', '36-45', '46-55', '56-65']\n\n# Y-axis data points\nbooks_read = [5, 7, 6, 4, 3]\ncoffee_consumed = [2, 3, 4, 3, 2]\n\n# Create stair plots\nplt.step(age_groups, books_read, where='mid', label='Books Read')\nplt.step(age_groups, coffee_consumed, where='mid', label='Coffee Consumed')\n\n# Adding labels and title\nplt.xlabel(\"Age Groups\")\nplt.ylabel(\"Average Number\")\nplt.title(\"Relationship between Number of Books Read and Coffee Consumed\")\n\n# Displaying legend\nplt.legend(title='Parameters')\n\n# Modify the marker style of the step line corresponding to the Target_object\nfor idx, line in enumerate(plt.gca().lines):\n    if idx == 0:\n        line.set_marker('^')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_62b3f826a8527357/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_62b3f826a8527357/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_62b3f826a8527357/figure.png"
    },
    {
        "id": "Step_35682dedad046e26",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx_values = np.array([100, 500, 1000, 2000, 4000, 6000, 8000, 10000])\ny_values = np.array([15, 20, 25, 18, 22, 10, 5, 2])\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.step(x_values, y_values, where='post')\nplt.ylim(0, max(y_values)+5)\nplt.xlim(0, max(x_values)+1000)\n\n# Label the axes and the plot\nplt.title('Microbial Diversity in Deep-Sea Trenches')\nplt.xlabel('Ocean Depth (meters)')\nplt.ylabel('Microbial Species Richness')\n\n# Display plot grid\nplt.grid(True)\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the marker style of the step line that includes the center point of the bounding box to 'o'.",
        "Input_image": "./test_dataset/Step/Step_35682dedad046e26/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx_values = np.array([100, 500, 1000, 2000, 4000, 6000, 8000, 10000])\ny_values = np.array([15, 20, 25, 18, 22, 10, 5, 2])\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.step(x_values, y_values, where='post')\nfor idx,line in enumerate(plt.gca().lines):\n    if idx==0:\n        line.set_marker('o')\nplt.ylim(0, max(y_values)+5)\nplt.xlim(0, max(x_values)+1000)\n\n# Label the axes and the plot\nplt.title('Microbial Diversity in Deep-Sea Trenches')\nplt.xlabel('Ocean Depth (meters)')\nplt.ylabel('Microbial Species Richness')\n\n# Display plot grid\nplt.grid(True)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_35682dedad046e26/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_35682dedad046e26/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_35682dedad046e26/figure.png"
    },
    {
        "id": "Step_5568a687b6f21fb9",
        "Input_code": "# Import the matplotlib library which is used for creating visualizations in Python.\nimport matplotlib.pyplot as plt  \n\n# Events and intensity levels are stored in two separate lists.\nevents = ['Exoplanet Discovery', 'Solar Eclipse', 'Comet Visitation', 'Supernova Explosion', 'Gravitational Waves Detection']\nintensity = [4.2, 5.8, 6.5, 7.3, 8.9]\n\n# The step() function is used to create the stair plot. \n# The 'where' parameter is set to 'mid' which means that the steps change halfway between the x values.\n# The color of the plot is set to be purple.\nplt.step(events, intensity, where='mid', color='purple')\n\n# The plot is given a title\nplt.title('SpaceTime Exploration of Cosmic Phenomena')\n\n# The x and y axes are labelled to give viewers an understanding of the plot.\nplt.xlabel('Cosmic Events')  \nplt.ylabel('Intensity Level')\n\n# A grid is displayed to help viewers distinguish between individual values.\nplt.grid(True)\n\n# The plot is displayed.\n  \nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the label of the step that contains the center point of the bounding box to 'A new Label' show the lable in legend and set its rasterized state to True.",
        "Input_image": "./test_dataset/Step/Step_5568a687b6f21fb9/Visual_figure.png",
        "Test_code": "# Import the matplotlib library which is used for creating visualizations in Python.\nimport matplotlib.pyplot as plt  \n\n# Events and intensity levels are stored in two separate lists.\nevents = ['Exoplanet Discovery', 'Solar Eclipse', 'Comet Visitation', 'Supernova Explosion', 'Gravitational Waves Detection']\nintensity = [4.2, 5.8, 6.5, 7.3, 8.9]\n\n# The step() function is used to create the stair plot. \n# The 'where' parameter is set to 'mid' which means that the steps change halfway between the x values.\n# The color of the plot is set to be purple.\nstep_plot = plt.step(events, intensity, where='mid', color='purple', label='A new Label', rasterized=True)\n\n# The plot is given a title\nplt.title('SpaceTime Exploration of Cosmic Phenomena')\n\n# The x and y axes are labelled to give viewers an understanding of the plot.\nplt.xlabel('Cosmic Events')  \nplt.ylabel('Intensity Level')\n\n# A grid is displayed to help viewers distinguish between individual values.\nplt.grid(True)\n\n# The plot is displayed.\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_5568a687b6f21fb9/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_5568a687b6f21fb9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_5568a687b6f21fb9/figure.png"
    },
    {
        "id": "Step_909c9f0808049ecc",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = list(range(1990, 2021))\nmarathon_times = [2.08, 2.07, 2.06, 2.05, 2.04, 2.03, 2.02, 2.01, 2.00, 1.59, 1.58, 1.57, 1.56, 1.55, \n                  1.54, 1.53, 1.52, 1.51, 1.50, 1.49, 2.10, 2.11, 2.09, 2.08, 2.07, 2.06, 2.05, 2.04, 2.03, \n                  2.02, 2.01]\n\n# Plot\nplt.figure(figsize=(10,6))\nplt.step(years, marathon_times, where='post')\n\nplt.xlabel('Year')\nplt.ylabel('Fastest Marathon Time (hr)')\nplt.title('Fastest Marathon Times by Year (1990-2020)')\n\nplt.grid(True)\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add data point annotations to the step line that contains the center point of the bounding box, with a font size of 11 and a color of '#8c79b2'.",
        "Input_image": "./test_dataset/Step/Step_909c9f0808049ecc/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nyears = list(range(1990, 2021))\nmarathon_times = [2.08, 2.07, 2.06, 2.05, 2.04, 2.03, 2.02, 2.01, 2.00, 1.59, 1.58, 1.57, 1.56, 1.55, \n                  1.54, 1.53, 1.52, 1.51, 1.50, 1.49, 2.10, 2.11, 2.09, 2.08, 2.07, 2.06, 2.05, 2.04, 2.03, \n                  2.02, 2.01]\n\n# Plot\nplt.figure(figsize=(10,6))\nplt.step(years, marathon_times, where='post')\n\n# Add data point annotations\nfor i, (year, time) in enumerate(zip(years, marathon_times)):\n    plt.text(year, time, f'{time}', fontsize=11, color='#8c79b2', ha='right')\n\nplt.xlabel('Year')\nplt.ylabel('Fastest Marathon Time (hr)')\nplt.title('Fastest Marathon Times by Year (1990-2020)')\n\nplt.grid(True)\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_909c9f0808049ecc/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_909c9f0808049ecc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_909c9f0808049ecc/figure.png"
    },
    {
        "id": "Step_0fe88f9b826a0f96",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Different agricultural techniques\nagri_techniques = ['Traditional Farming', 'Hydroponics']\n\n# Representing crop yield data\ncrop_yield = [2500, 4000]\n\n# Resource consumption values\nresource_consumption = [5000, 2000]\n\n# Create a new figure and a subplots\nfig, ax = plt.subplots()\n\n# Create and display a Step plot for crop yield\nax.step(agri_techniques, crop_yield, where='post', label='Crop Yield')\n\n# Create and display a Step plot for resource consumption\nax.step(agri_techniques, resource_consumption, where='post', label='Resource Consumption')\n\n# Adding a legend\nax.legend()\n\n# Label for x axis\nplt.xlabel('Agricultural Techniques')\n\n# Label for y axis\nplt.ylabel('Crop Yield/Resource Consumption')\n\n# Title for plot\nplt.title('Comparison between Traditional Farming and Hydroponics')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Overlay a dashed step line on the section of the step chart that contains the center point of the bounding box to create a glow effect. Use the color '#dcd2ab', a dash pattern of (15, 10), and set the transparency to 0.5.",
        "Input_image": "./test_dataset/Step/Step_0fe88f9b826a0f96/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Different agricultural techniques\nagri_techniques = ['Traditional Farming', 'Hydroponics']\n\n# Representing crop yield data\ncrop_yield = [2500, 4000]\n\n# Resource consumption values\nresource_consumption = [5000, 2000]\n\n# Create a new figure and a subplots\nfig, ax = plt.subplots()\n\n# Create and display a Step plot for crop yield\nax.step(agri_techniques, crop_yield, where='post', label='Crop Yield')\n\n# Create and display a Step plot for resource consumption\nax.step(agri_techniques, resource_consumption, where='post', label='Resource Consumption')\n\n# Overlay a dashed step line on the step chart corresponding to the Target_object to create a glow effect\nfor idx, line in enumerate(ax.lines):\n    if idx == 0:  # Assuming the first line is the target\n        x_data, y_data = line.get_xdata(), line.get_ydata()\n        ax.step(x_data, y_data, where='post', color='#dcd2ab', linestyle=(0, (15, 10)), alpha=0.5)\n\n# Adding a legend\nax.legend()\n\n# Label for x axis\nplt.xlabel('Agricultural Techniques')\n\n# Label for y axis\nplt.ylabel('Crop Yield/Resource Consumption')\n\n# Title for plot\nplt.title('Comparison between Traditional Farming and Hydroponics')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_0fe88f9b826a0f96/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_0fe88f9b826a0f96/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_0fe88f9b826a0f96/figure.png"
    },
    {
        "id": "Step_cb9e38e4f4e5310a",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Months \nMonths = np.array(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n\n# Sales data\nsales_A = np.array([5000, 5200, 4800, 5500, 6200, 7100, 6900, 7300, 8000, 7800, 8200, 8500])\nsales_B = np.array([3000, 3200, 3500, 3800, 4000, 4300, 4800, 4700, 5000, 5100, 5400, 5600])\nsales_C = np.array([1500, 1600, 1800, 1900, 2200, 2400, 2600, 2800, 2900, 3000, 3200, 3300])\n\n# Plotting data\nplt.figure(figsize=(10,7)) # Change the figure size according to your requirement\nplt.step(Months, sales_A, where='mid', label='Category A')\nplt.step(Months, sales_B, where='mid', label='Category B')\nplt.step(Months, sales_C, where='mid', label='Category C')\n\nplt.xlabel('Months')\nplt.ylabel('Sales in USD')\nplt.title('Sales performance of various product categories')\nplt.legend(loc='best')\nplt.grid()\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Fill the area below the step line that contains the center point of the bounding box with a gradient that starts with the color '#1c12a4' and transitions to '#d407c4'.",
        "Input_image": "./test_dataset/Step/Step_cb9e38e4f4e5310a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import to_rgb\n\n# Months \nMonths = np.array(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])\n\n# Sales data\nsales_A = np.array([5000, 5200, 4800, 5500, 6200, 7100, 6900, 7300, 8000, 7800, 8200, 8500])\nsales_B = np.array([3000, 3200, 3500, 3800, 4000, 4300, 4800, 4700, 5000, 5100, 5400, 5600])\nsales_C = np.array([1500, 1600, 1800, 1900, 2200, 2400, 2600, 2800, 2900, 3000, 3200, 3300])\n\n# Plotting data\nplt.figure(figsize=(10,7)) # Change the figure size according to your requirement\nplt.step(Months, sales_A, where='mid', label='Category A')\nplt.step(Months, sales_B, where='mid', label='Category B')\nplt.step(Months, sales_C, where='mid', label='Category C')\n\n# Gradient fill for Category B\nstart_color = '#1c12a4'\nend_color = '#d407c4'\nstart_rgb = np.array(to_rgb(start_color))\nend_rgb = np.array(to_rgb(end_color))\nnum_segments = len(Months) - 1\ncolors = [start_rgb + (end_rgb - start_rgb) * (i / num_segments) for i in range(num_segments)]\ny_min, y_max = plt.ylim()\nfor i in range(num_segments):\n    x0 = Months[i]\n    x1 = Months[i+1]\n    y0 = sales_B[i]\n    y1 = sales_B[i+1]\n    plt.fill_between([x0, x1], [y0, y1], [y_min, y_min], color=colors[i], step='mid')\n\nplt.xlabel('Months')\nplt.ylabel('Sales in USD')\nplt.title('Sales performance of various product categories')\nplt.legend(loc='best')\nplt.grid()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_cb9e38e4f4e5310a/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_cb9e38e4f4e5310a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_cb9e38e4f4e5310a/figure.png"
    },
    {
        "id": "Step_1d5eb9ec4adcbfcf",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for the number of unique species at different depths in each region\nregions = ['Region A', 'Region B', 'Region C']\ndepths = [100, 200, 300, 400, 500]\nspecies_counts = {\n    'Region A': [12, 19, 24, 21, 16],\n    'Region B': [10, 13, 15, 12, 9],\n    'Region C': [15, 22, 26, 20, 18]\n}\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\nfor region in regions:\n    ax.step(depths, species_counts[region], label=region)\n\nax.set(xlabel='Depth (m)', ylabel='Number of Unique Species',\n       title='Alien Ecosystem Diversity in 3D')\nax.grid()\nplt.legend()\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the lines that contain the center point of the bounding box to True. Additionally, change the color of these lines to #833fc3.",
        "Input_image": "./test_dataset/Step/Step_1d5eb9ec4adcbfcf/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points for the number of unique species at different depths in each region\nregions = ['Region A', 'Region B', 'Region C']\ndepths = [100, 200, 300, 400, 500]\nspecies_counts = {\n    'Region A': [12, 19, 24, 21, 16],\n    'Region B': [10, 13, 15, 12, 9],\n    'Region C': [15, 22, 26, 20, 18]\n}\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\nfor region in regions:\n    ax.step(depths, species_counts[region], label=region)\nfor idx,line in enumerate(plt.gca().lines):\n    if idx==1:\n        line.set_color('#833fc3')\n        line.set_animated(True)\n\nax.set(xlabel='Depth (m)', ylabel='Number of Unique Species',\n       title='Alien Ecosystem Diversity in 3D')\nax.grid()\nplt.legend()\n\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_1d5eb9ec4adcbfcf/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_1d5eb9ec4adcbfcf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_1d5eb9ec4adcbfcf/figure.png"
    },
    {
        "id": "Step_269578e738e0f0ab",
        "Input_code": "# Import the necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nanimals = ['Cheetah', 'Gazelle']\ncheetah_speeds = [50, 60, 70, 80, 90]\ngazelle_speeds = [40, 45, 50, 55, 60]\n\n# Create step plots for cheetah and gazelle speeds\nplt.figure(figsize=(8, 6))\nplt.step( np.arange(len(cheetah_speeds)), cheetah_speeds, where='mid', label='Cheetah', linestyle='-', linewidth=2)\nplt.step( np.arange(len(gazelle_speeds)), gazelle_speeds, where='mid', label='Gazelle', linestyle='-', linewidth=2)\n\n# Add necessary graph components\nplt.xlabel('Time Interval')\nplt.ylabel('Speed (km/h)')\nplt.title('Speed Comparison: Cheetah vs Gazelle')\nplt.legend()\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Fill the area below the step line that contains the center point of the bounding box with a gradient that transitions from the starting color '#560791' to the ending color '#b4de22'.",
        "Input_image": "./test_dataset/Step/Step_269578e738e0f0ab/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import to_rgb\n\n# Define the data\nanimals = ['Cheetah', 'Gazelle']\ncheetah_speeds = [50, 60, 70, 80, 90]\ngazelle_speeds = [40, 45, 50, 55, 60]\n\n# Create step plots for cheetah and gazelle speeds\nplt.figure(figsize=(8, 6))\nplt.step(np.arange(len(cheetah_speeds)), cheetah_speeds, where='mid', label='Cheetah', linestyle='-', linewidth=2)\nplt.step(np.arange(len(gazelle_speeds)), gazelle_speeds, where='mid', label='Gazelle', linestyle='-', linewidth=2)\n\n# Apply gradient fill below the step line for Gazelle\ntarget_speeds = gazelle_speeds\nstart_color = '#560791'\nend_color = '#b4de22'\nstart_rgb = np.array(to_rgb(start_color))\nend_rgb = np.array(to_rgb(end_color))\nnum_segments = len(target_speeds) - 1\ncolors = [start_rgb + (end_rgb - start_rgb) * (i / num_segments) for i in range(num_segments)]\ny_min, y_max = plt.ylim()\nfor i in range(num_segments):\n    x0 = i\n    x1 = i + 1\n    y0 = target_speeds[i]\n    y1 = target_speeds[i + 1]\n    plt.fill_between([x0, x1], [y0, y1], [y_min, y_min], color=colors[i], step='mid')\n\n# Add necessary graph components\nplt.xlabel('Time Interval')\nplt.ylabel('Speed (km/h)')\nplt.title('Speed Comparison: Cheetah vs Gazelle')\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Step/Step_269578e738e0f0ab/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_269578e738e0f0ab/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_269578e738e0f0ab/figure.png"
    },
    {
        "id": "Step_ff6206b73e933060",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Initialize time intervals (in nanoseconds) and corresponding energy levels (in kJ/mol)\ntime_intervals = [0, 1, 2, 3, 4, 5] # in nanoseconds\nenergy_levels = [100, 95, 85, 75, 80, 90] # in kJ/mol\n\nplt.figure(figsize=(10, 6))\n\n# Creating the stair plot\nplt.step(time_intervals, energy_levels, where='post')\n\n# Set labels and title\nplt.xlabel('Time Intervals (ns)')\nplt.ylabel('Energy Levels (kJ/mol)')\nplt.title('Molecular Dynamics Simulations of Protein Folding Dynamics')\n\n# Set the x and y axis limits\nplt.xlim([0, 5])\nplt.ylim([70, 110])\n\n# Showing the plot\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the visibility of the lines that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Step/Step_ff6206b73e933060/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Initialize time intervals (in nanoseconds) and corresponding energy levels (in kJ/mol)\ntime_intervals = [0, 1, 2, 3, 4, 5] # in nanoseconds\nenergy_levels = [100, 95, 85, 75, 80, 90] # in kJ/mol\n\nplt.figure(figsize=(10, 6))\n\n# Creating the stair plot\nstep_plot = plt.step(time_intervals, energy_levels, where='post')\nstep_plot[0].set_visible(False)  # Set visibility to False\n\n# Set labels and title\nplt.xlabel('Time Intervals (ns)')\nplt.ylabel('Energy Levels (kJ/mol)')\nplt.title('Molecular Dynamics Simulations of Protein Folding Dynamics')\n\n# Set the x and y axis limits\nplt.xlim([0, 5])\nplt.ylim([70, 110])\n\n# Showing the plot\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_ff6206b73e933060/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_ff6206b73e933060/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_ff6206b73e933060/figure.png"
    },
    {
        "id": "Step_7d4f165511277801",
        "Input_code": "# Import the required library\nimport matplotlib.pyplot as plt\n\n# Data for x-axis (Depth Levels in meters)\ndepth_levels = [0, 10, 20, 30, 40, 50]\n\n# Data for y-axis (Temperature and Salinity levels)\ntemperature = [24, 23.5, 22.8, 20.5, 18.9, 17]\nsalinity = [35, 35.2, 35.4, 35.6, 35.8, 36]\n\n# Create a new figure and a subplot\nfig, ax_temp = plt.subplots()\n\n# Temperature plot \nax_temp.step(depth_levels, temperature, where='mid', color='tab:red')\nax_temp.set_xlabel('Depth Levels in meters')\nax_temp.set_ylabel('Temperature in \u00b0C', color='tab:red')\nax_temp.tick_params(axis='y', labelcolor='tab:red')\n\n# Instantiate a second axes that shares the same x-axis\nax_salinity = ax_temp.twinx()\nax_salinity.step(depth_levels, salinity, where='mid', color='tab:blue')\nax_salinity.set_ylabel('Salinity Levels in ppt', color='tab:blue') \nax_salinity.tick_params(axis='y', labelcolor='tab:blue')\n\n# Add grid and title\nplt.grid()\nplt.title('Depth Vs Temperature and Salinity Levels')\n\n# Display plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the marker edge width of the points that contain the center point of the bounding box to 1.74, and set their picker state to True.",
        "Input_image": "./test_dataset/Step/Step_7d4f165511277801/Visual_figure.png",
        "Test_code": "# Import the required library\nimport matplotlib.pyplot as plt\n\n# Data for x-axis (Depth Levels in meters)\ndepth_levels = [0, 10, 20, 30, 40, 50]\n\n# Data for y-axis (Temperature and Salinity levels)\ntemperature = [24, 23.5, 22.8, 20.5, 18.9, 17]\nsalinity = [35, 35.2, 35.4, 35.6, 35.8, 36]\n\n# Create a new figure and a subplot\nfig, ax_temp = plt.subplots()\n\n# Temperature plot \nline_temp, = ax_temp.step(depth_levels, temperature, where='mid', color='tab:red', marker='o', markersize=5)\nline_temp.set_markeredgewidth(1.74)\nline_temp.set_picker(True)\nax_temp.set_xlabel('Depth Levels in meters')\nax_temp.set_ylabel('Temperature in \u00b0C', color='tab:red')\nax_temp.tick_params(axis='y', labelcolor='tab:red')\n\n# Instantiate a second axes that shares the same x-axis\nax_salinity = ax_temp.twinx()\nax_salinity.step(depth_levels, salinity, where='mid', color='tab:blue')\nax_salinity.set_ylabel('Salinity Levels in ppt', color='tab:blue') \nax_salinity.tick_params(axis='y', labelcolor='tab:blue')\n\n# Add grid and title\nplt.grid()\nplt.title('Depth Vs Temperature and Salinity Levels')\n\n# Display plot\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_7d4f165511277801/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_7d4f165511277801/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_7d4f165511277801/figure.png"
    },
    {
        "id": "Step_b4aebe0a44bde4a4",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the age ranges as a list of strings\nage_ranges = ['18-24', '25-34', '35-44', '45-54', '55-64']\n\n# Define the percentage of individuals with a mental health disorder\nmental_health_percentages = [14, 16, 12, 10, 8]\n\n# Define the percentage of individuals with alcohol dependency or abuse\nalcohol_percentages = [8, 10, 6, 5, 4]\n\n# Define the number of age ranges\nn_ranges = len(age_ranges)\n\n# Set the figure size\nplt.figure(figsize=(10,6))\n\n# Plot the mental health percentages\nplt.plot(np.arange(n_ranges), mental_health_percentages, drawstyle='steps-mid', label='Mental Health Disorders')\n\n# Plot the alcohol percentages\nplt.plot(np.arange(n_ranges), alcohol_percentages, drawstyle='steps-mid', label='Alcohol Dependency or Abuse')\n\n# Set the x-ticks to be the age ranges\nplt.xticks(np.arange(n_ranges), age_ranges)\n\n# Add labels and title\nplt.xlabel('Age Range')\nplt.ylabel('Percentages (%)')\nplt.title('Mental Health Disorders and Alcohol Dependency or Abuse by Age Range')\n\n# Add legend\nplt.legend()\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the line that contains the center point of the bounding box to #f93792. For the same points, apply a stroke with a linewidth of 2.73 and a foreground color of #1a16d2.",
        "Input_image": "./test_dataset/Step/Step_b4aebe0a44bde4a4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as path_effects\n\n# Define the age ranges as a list of strings\nage_ranges = ['18-24', '25-34', '35-44', '45-54', '55-64']\n\n# Define the percentage of individuals with a mental health disorder\nmental_health_percentages = [14, 16, 12, 10, 8]\n\n# Define the percentage of individuals with alcohol dependency or abuse\nalcohol_percentages = [8, 10, 6, 5, 4]\n\n# Define the number of age ranges\nn_ranges = len(age_ranges)\n\n# Set the figure size\nplt.figure(figsize=(10,6))\n\n# Plot the mental health percentages\nplt.plot(np.arange(n_ranges), mental_health_percentages, drawstyle='steps-mid', label='Mental Health Disorders', color='#f93792', path_effects=[path_effects.withStroke(linewidth=2.730971483410853, foreground='#1a16d2')])\n\n# Plot the alcohol percentages\nplt.plot(np.arange(n_ranges), alcohol_percentages, drawstyle='steps-mid', label='Alcohol Dependency or Abuse')\n\n# Set the x-ticks to be the age ranges\nplt.xticks(np.arange(n_ranges), age_ranges)\n\n# Add labels and title\nplt.xlabel('Age Range')\nplt.ylabel('Percentages (%)')\nplt.title('Mental Health Disorders and Alcohol Dependency or Abuse by Age Range')\n\n# Add legend\nplt.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_b4aebe0a44bde4a4/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_b4aebe0a44bde4a4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_b4aebe0a44bde4a4/figure.png"
    },
    {
        "id": "Step_1e6a3dc8ffd45a96",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points\nyears = [2016, 2017, 2018, 2019, 2020]\ngrowth_rate_percentage = [7.57, 7.94, 7.99, 7.71, 7.55]\n\n# Creating the plot\nplt.step(years, growth_rate_percentage)\n\n# Setting the titles and labels\nplt.title('Global Internet User Growth Rate (2016 - 2020)')\nplt.xlabel('Year')\nplt.ylabel('Growth Rate Percentage')\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the linewidth of the line that contains the center point of the bounding box to 1.75. Also, for the same points, set the marker size of the line to 19.59 and marker style to '>'.",
        "Input_image": "./test_dataset/Step/Step_1e6a3dc8ffd45a96/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points\nyears = [2016, 2017, 2018, 2019, 2020]\ngrowth_rate_percentage = [7.57, 7.94, 7.99, 7.71, 7.55]\n\n# Creating the plot\nplt.step(years, growth_rate_percentage, linewidth=1.75, markersize=19.59,marker='>')\n\n# Setting the titles and labels\nplt.title('Global Internet User Growth Rate (2016 - 2020)')\nplt.xlabel('Year')\nplt.ylabel('Growth Rate Percentage')\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_1e6a3dc8ffd45a96/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_1e6a3dc8ffd45a96/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_1e6a3dc8ffd45a96/figure.png"
    },
    {
        "id": "Step_f6d6487802eb46cf",
        "Input_code": "import matplotlib.pyplot as plt\n\n# data points\ndepth = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\ncurrent_speed = [0.5, 0.8, 1.2, 1.5, 1.7, 1.5, 1.2, 0.8, 0.5, 0.2]\n\n# create a stair plot\nplt.step(depth, current_speed, where='mid')\n\n# set the limit for x-axis and y-axis \nplt.xlim(0, 100)\nplt.ylim(0, 2)\n\n# specify labels and title\nplt.xlabel('Depth (in meters)')\nplt.ylabel('Current Speed (in knots)')\nplt.title('Ocean Currents Data Visualization')\n\n# show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the linewidth of the portion of the step chart that contains the center point of the bounding box to 0.87. For the same portion, set the z-order to 16, and apply a shadow effect with an offset of (3.82, 2.12).",
        "Input_image": "./test_dataset/Step/Step_f6d6487802eb46cf/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# data points\ndepth = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\ncurrent_speed = [0.5, 0.8, 1.2, 1.5, 1.7, 1.5, 1.2, 0.8, 0.5, 0.2]\n\n# create a stair plot\nplt.step(depth, current_speed, where='mid', linewidth=0.87, zorder=16, path_effects=[SimpleLineShadow(offset=(3.82, 2.12)), Normal()])\n\n# set the limit for x-axis and y-axis \nplt.xlim(0, 100)\nplt.ylim(0, 2)\n\n# specify labels and title\nplt.xlabel('Depth (in meters)')\nplt.ylabel('Current Speed (in knots)')\nplt.title('Ocean Currents Data Visualization')\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_f6d6487802eb46cf/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_f6d6487802eb46cf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_f6d6487802eb46cf/figure.png"
    },
    {
        "id": "Step_dd71e52419011988",
        "Input_code": "import matplotlib.pyplot as plt\n\n# given data\ndepth_zones = ['Surface', 'Epipelagic\\nZone', 'Mesopelagic\\nZone', 'Bathypelagic\\nZone', 'Abyssopelagic\\nZone']\ntemperature_ranges = [25, 20, 15, 10, 5 ]\n\n# plot\nplt.figure(figsize=(10,7))\nplt.step(temperature_ranges, depth_zones, where='post')\n\n# labels & title\nplt.title(\"Ocean Temperature Influence on Marine Life Distribution\")\nplt.xlabel(\"Temperature (\u00b0C)\")\nplt.ylabel(\"Ocean Depth Zones\")\n\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the line associated with the center point of the bounding box to 1.17. For the same points, adjust the transformation of the line linked to the center point of the bounding box to match the coordinate system of the axes.",
        "Input_image": "./test_dataset/Step/Step_dd71e52419011988/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# given data\ndepth_zones = ['Surface', 'Epipelagic\\nZone', 'Mesopelagic\\nZone', 'Bathypelagic\\nZone', 'Abyssopelagic\\nZone']\ntemperature_ranges = [25, 20, 15, 10, 5 ]\n\n# plot\nplt.figure(figsize=(10,7))\nline, = plt.step(temperature_ranges, depth_zones, where='post', linewidth=1.17)\nline.set_transform(plt.gca().transAxes)\n\n# labels & title\nplt.title(\"Ocean Temperature Influence on Marine Life Distribution\")\nplt.xlabel(\"Temperature (\u00b0C)\")\nplt.ylabel(\"Ocean Depth Zones\")\n\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_dd71e52419011988/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_dd71e52419011988/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_dd71e52419011988/figure.png"
    },
    {
        "id": "Step_99c8e08dc20f8b75",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Given data\nx_data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny_data = [20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100]\n\n# Creating the plot\nplt.step(x_data, y_data, where='post')\n\n# Setting the title and labels\nplt.title('Correlation between the Number of Books Read per Year and Financial Success')\nplt.xlabel('Number of Books Read per Year')\nplt.ylabel('Financial Success (Scale: 1-100)')\n\n# Showing the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the marker style to '>' for the points that contain the center point of the bounding box. For these same points, set the z-order to 12 and add a shadow effect with an offset of (3.37, 3.89).",
        "Input_image": "./test_dataset/Step/Step_99c8e08dc20f8b75/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Given data\nx_data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny_data = [20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100]\n\n# Creating the plot\nplt.step(x_data, y_data, where='post', marker='>', zorder=12, path_effects=[SimpleLineShadow(offset=(3.37, 3.89)), Normal()])\n\n# Setting the title and labels\nplt.title('Correlation between the Number of Books Read per Year and Financial Success')\nplt.xlabel('Number of Books Read per Year')\nplt.ylabel('Financial Success (Scale: 1-100)')\n\n# Showing the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_99c8e08dc20f8b75/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_99c8e08dc20f8b75/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_99c8e08dc20f8b75/figure.png"
    },
    {
        "id": "Step_8afa316afcc88704",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ncontinents = ['Africa', 'Asia', 'Europe', 'North America', 'South America', 'Australia']\nanimal_species = [5000, 4000, 3000, 2500, 4500, 2000]\n\n# Create Stair Plot\nplt.step(continents, animal_species, where='mid', label='Animal Species')\n\n# Labeling Plot\nplt.title('Diversity of Animal Species by Continent')\nplt.xlabel('Continents')\nplt.ylabel('Number of Animal Species')\nplt.legend()\n\n# Display plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transformation of the line that contains the center point of the bounding box so that it aligns with the coordinate system of the subfigure.",
        "Input_image": "./test_dataset/Step/Step_8afa316afcc88704/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ncontinents = ['Africa', 'Asia', 'Europe', 'North America', 'South America', 'Australia']\nanimal_species = [5000, 4000, 3000, 2500, 4500, 2000]\n\n# Create Stair Plot\nfig, ax = plt.subplots()\nline, = ax.step(continents, animal_species, where='mid', label='Animal Species')\nline.set_transform(ax.transAxes)  # Set transform to the coordinate system of subfigure\n\n# Labeling Plot\nplt.title('Diversity of Animal Species by Continent')\nplt.xlabel('Continents')\nplt.ylabel('Number of Animal Species')\nplt.legend()\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Step/Step_8afa316afcc88704/Edit_figure.png",
        "Masked_image": "./test_dataset/Step/Step_8afa316afcc88704/Masked_figure.png",
        "Initial_figure": "./test_dataset/Step/Step_8afa316afcc88704/figure.png"
    },
    {
        "id": "Heatmap_03ceb1ee2d2ac9e8",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndisaster_types = [\"Flood\", \"Drought\", \"Earthquake\"]\nyears = [\"Year 1\", \"Year 2\"]\n\neconomic_impact = np.array([[100, 50],\n                            [150, 80],\n                            [120, 200]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(economic_impact, cmap=\"YlOrRd\", alpha=0.7)\n\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(disaster_types)))\nax.set_xticklabels(years)\nax.set_yticklabels(disaster_types)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(disaster_types)):\n    for j in range(len(years)):\n        text = ax.text(j, i, economic_impact[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Economic Impact of Disasters\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Disaster Type\")\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box in the heatmap to #f11cb9, and set the border width to 1.3.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_03ceb1ee2d2ac9e8/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndisaster_types = [\"Flood\", \"Drought\", \"Earthquake\"]\nyears = [\"Year 1\", \"Year 2\"]\n\neconomic_impact = np.array([[100, 50],\n                            [150, 80],\n                            [120, 200]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(economic_impact, cmap=\"YlOrRd\", alpha=0.7)\n\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(disaster_types)))\nax.set_xticklabels(years)\nax.set_yticklabels(disaster_types)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(disaster_types)):\n    for j in range(len(years)):\n        text = ax.text(j, i, economic_impact[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        if (i, j) in [(0, 0), (1, 1), (2, 0)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"none\", edgecolor=\"#f11cb9\", lw=1.3))\n\nax.set_title(\"Economic Impact of Disasters\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Disaster Type\")\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 0), (1, 1), (2, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_03ceb1ee2d2ac9e8/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_03ceb1ee2d2ac9e8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_03ceb1ee2d2ac9e8/myplot.png"
    },
    {
        "id": "Heatmap_6c3028462440ea98",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nhouseholds = [\"Single Person Household\", \"Two-Person Household\", \"Three-Person Household\", \n              \"Four-Person Household\", \"Five-Person Household\", \"Six or More Person Household\", \n              \"Average Household\"]\nyears = [\"2019\", \"2020\"]\n\nwaste = np.array([[450, 550],\n                  [1000, 1100],\n                  [700, 800],\n                  [800, 600],\n                  [500, 700],\n                  [1100, 1300],\n                  [720, 790]])\n\nfig, ax = plt.subplots()\n\nim = ax.imshow(waste, cmap='hot', alpha=0.7)\n\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\n\nax.set_yticks(np.arange(len(households)))\nax.set_yticklabels(households)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(households)):\n    for j in range(len(years)):\n        text = ax.text(j, i, waste[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Household Food Waste (in kg/year)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Household Type\")\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the background color of the cells that contain the center point of the bounding box to #a18901, and update the annotation text color in those cells to #9537db.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_6c3028462440ea98/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nhouseholds = [\"Single Person Household\", \"Two-Person Household\", \"Three-Person Household\", \n              \"Four-Person Household\", \"Five-Person Household\", \"Six or More Person Household\", \n              \"Average Household\"]\nyears = [\"2019\", \"2020\"]\n\nwaste = np.array([[450, 550],\n                  [1000, 1100],\n                  [700, 800],\n                  [800, 600],\n                  [500, 700],\n                  [1100, 1300],\n                  [720, 790]])\n\nfig, ax = plt.subplots()\n\nim = ax.imshow(waste, cmap='hot', alpha=0.7)\n\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\n\nax.set_yticks(np.arange(len(households)))\nax.set_yticklabels(households)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(households)):\n    for j in range(len(years)):\n        text_color = \"w\"  # Default text color\n        if (i, j) in [(0, 0), (3, 1), (5, 0)]:  # Target specific cells\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"#a18901\", edgecolor=\"black\", lw=0))\n            text_color = \"#9537db\"  # Change text color for these cells\n        text = ax.text(j, i, waste[i, j], ha=\"center\", va=\"center\", color=text_color)\n\nax.set_title(\"Household Food Waste (in kg/year)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Household Type\")\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 0), (3, 1), (5, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_6c3028462440ea98/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_6c3028462440ea98/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_6c3028462440ea98/myplot.png"
    },
    {
        "id": "Heatmap_8b919662f0b2cdd8",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nregions = [\"North America\", \"South America\", \"Europe\", \"Asia\", \"Africa\"]\nyears = [\"Year2017\", \"Year2018\", \"Year2019\"]\n\ndata = np.array([[4000, 5000, 4500],\n                 [4000, 7000, 5000],\n                 [5000, 5500, 7000],\n                 [4000, 4500, 5000],\n                 [2000, 3000, 4000]])\n\nfig, ax = plt.subplots()\n\n# Setting the background color of the chart figure\nax.set_facecolor('gray')\n\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(regions)))\n\n# Set the labels to the names\nax.set_xticklabels(years)\nax.set_yticklabels(regions)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(regions)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Region's Yearly Income\")\nax.set_xlabel('Year')\nax.set_ylabel('Region')\n\n# Add grid\nax.grid(True)\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the edge color of the cells that contain the center point of the bounding box to #9a9943.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_8b919662f0b2cdd8/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nregions = [\"North America\", \"South America\", \"Europe\", \"Asia\", \"Africa\"]\nyears = [\"Year2017\", \"Year2018\", \"Year2019\"]\n\ndata = np.array([[4000, 5000, 4500],\n                 [4000, 7000, 5000],\n                 [5000, 5500, 7000],\n                 [4000, 4500, 5000],\n                 [2000, 3000, 4000]])\n\nfig, ax = plt.subplots()\n\n# Setting the background color of the chart figure\nax.set_facecolor('gray')\n\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(regions)))\n\n# Set the labels to the names\nax.set_xticklabels(years)\nax.set_yticklabels(regions)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(regions)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        if (i, j) in [(1, 1), (2, 2), (4, 0)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#9a9943\", facecolor=\"none\", lw=2))\n\nax.set_title(\"Region's Yearly Income\")\nax.set_xlabel('Year')\nax.set_ylabel('Region')\n\n# Add grid\nax.grid(True)\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(1, 1), (2, 2), (4, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_8b919662f0b2cdd8/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_8b919662f0b2cdd8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_8b919662f0b2cdd8/myplot.png"
    },
    {
        "id": "Heatmap_89001ce252f3851a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nyears = [\"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\nbirds = [\"Sparrow\", \"Hummingbird\", \"Eagle\"]\nbird_counts = np.array([[2000, 2100, 2150, 7000, 2200, 2250, 2300, 2350, 2400],\n                        [1000, 3500, 3700, 4000, 4100, 8000, 4200, 4300, 4400],\n                        [500, 450, 400, 350, 300, 250, 200, 150, 100]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(bird_counts, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(birds)))\n\n# Assign labels to ticks\nax.set_xticklabels(years)\nax.set_yticklabels(birds)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(birds)):\n    for j in range(len(years)):\n        text = ax.text(j, i, bird_counts[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set title and labels\nax.set_title(\"Bird Population Over The Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Bird Species\")\n\n# Add grid and change background color\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the edge color of the cells that contain the center point of the bounding box to #756fdb.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_89001ce252f3851a/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nyears = [\"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\nbirds = [\"Sparrow\", \"Hummingbird\", \"Eagle\"]\nbird_counts = np.array([[2000, 2100, 2150, 7000, 2200, 2250, 2300, 2350, 2400],\n                        [1000, 3500, 3700, 4000, 4100, 8000, 4200, 4300, 4400],\n                        [500, 450, 400, 350, 300, 250, 200, 150, 100]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(bird_counts, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(birds)))\n\n# Assign labels to ticks\nax.set_xticklabels(years)\nax.set_yticklabels(birds)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(birds)):\n    for j in range(len(years)):\n        text = ax.text(j, i, bird_counts[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        # Apply edge color to specific cells\n        if (i, j) in [(0, 3), (1, 5), (2, 8)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"none\", edgecolor=\"#756fdb\", lw=2))\n\n# Set title and labels\nax.set_title(\"Bird Population Over The Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Bird Species\")\n\n# Add grid and change background color\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 3), (1, 5), (2, 8)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_89001ce252f3851a/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_89001ce252f3851a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_89001ce252f3851a/myplot.png"
    },
    {
        "id": "Heatmap_72c690f253fec4a1",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016]\norganic_farming = [1000, 1250, 1500, 1750, 2500, 2000, 1500, 3000, 3500]\npercentage_of_organic_farming = [0.5, 0.65, 0.67, 0.7, 1.5, 1.2, 0.9, 1.8, 2.1]\n\n# Convert the data to a 2D array\ndata = np.array([organic_farming, percentage_of_organic_farming])\n\n# Create a figure and axes\nfig, ax = plt.subplots()\n\n# Show the 2D array data as an image, with the alpha parameter set over 0.6, and using a colormap\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# We want to show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\n\n# Set the labels for the y axis\nax.set_yticks(np.arange(len(['Organic Farming', 'Percentage of Organic Farming'])), labels=['Organic Farming', 'Percentage of Organic Farming'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(['Organic Farming', 'Percentage of Organic Farming'])):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set the title\nax.set_title(\"Organic Farming (in hectares) and Percentage of Organic Farming Over the Years\")\n\n# Add a grid and set a light gray background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Make sure the layout is tight (no unnecessary padding)\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the background color of the cells that contain the center point of the bounding box to #076bf0. Also, for these cells, increase the border thickness to 2.5 pixels and set the border color to #d692ac.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_72c690f253fec4a1/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016]\norganic_farming = [1000, 1250, 1500, 1750, 2500, 2000, 1500, 3000, 3500]\npercentage_of_organic_farming = [0.5, 0.65, 0.67, 0.7, 1.5, 1.2, 0.9, 1.8, 2.1]\n\n# Convert the data to a 2D array\ndata = np.array([organic_farming, percentage_of_organic_farming])\n\n# Create a figure and axes\nfig, ax = plt.subplots()\n\n# Show the 2D array data as an image, with the alpha parameter set over 0.6, and using a colormap\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# We want to show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\n\n# Set the labels for the y axis\nax.set_yticks(np.arange(len(['Organic Farming', 'Percentage of Organic Farming'])), labels=['Organic Farming', 'Percentage of Organic Farming'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(['Organic Farming', 'Percentage of Organic Farming'])):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        # Highlight specific cells\n        if (i, j) in [(0, 4), (1, 7), (1, 8)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"#076bf0\", edgecolor=\"#d692ac\", lw=2.5))\n\n# Set the title\nax.set_title(\"Organic Farming (in hectares) and Percentage of Organic Farming Over the Years\")\n\n# Add a grid and set a light gray background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Make sure the layout is tight (no unnecessary padding)\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 4), (1, 7), (1, 8)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_72c690f253fec4a1/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_72c690f253fec4a1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_72c690f253fec4a1/myplot.png"
    },
    {
        "id": "Heatmap_c84441e28d7dfbbb",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nvehicle_type = [\"Sedans\", \"SUVs\", \"Electric Vehicles\", \"Trucks\", \"Motorcycles\", \"Hybrids\"]\nyears = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\n\nsales = np.array([[4000, 8000, 6000, 7000, 9000],\n                  [3000, 3000, 6000, 5000, 8000],\n                  [1000, 5000, 2000, 2500, 5000],\n                  [2500, 2000, 3000, 2000, 1000],\n                  [5000, 4000, 6000, 8000, 7000],\n                  [2000, 3000, 7000, 5000, 6000]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(sales, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\nax.set_yticks(np.arange(len(vehicle_type)), labels=vehicle_type)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(vehicle_type)):\n    for j in range(len(years)):\n        text = ax.text(j, i, sales[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Adding grid, title and setting light blue face color\nax.grid(True)\nax.set_facecolor('#add8e6')  # Modify the face color here\nax.set_title(\"Sales of Vehicles from 2016 to 2020\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Vehicle Type\")\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the font size of the annotations in the cells that contain the center point of the bounding box to 16, and remove the annotations for the data points in the heatmap.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_c84441e28d7dfbbb/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nvehicle_type = [\"Sedans\", \"SUVs\", \"Electric Vehicles\", \"Trucks\", \"Motorcycles\", \"Hybrids\"]\nyears = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\n\nsales = np.array([[4000, 8000, 6000, 7000, 9000],\n                  [3000, 3000, 6000, 5000, 8000],\n                  [1000, 5000, 2000, 2500, 5000],\n                  [2500, 2000, 3000, 2000, 1000],\n                  [5000, 4000, 6000, 8000, 7000],\n                  [2000, 3000, 7000, 5000, 6000]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(sales, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\nax.set_yticks(np.arange(len(vehicle_type)), labels=vehicle_type)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(vehicle_type)):\n    for j in range(len(years)):\n        if (i, j) in [(0, 3), (2, 1), (4, 4)]:\n            continue  # Skip annotating these points\n        text = ax.text(j, i, sales[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Adding grid, title and setting light blue face color\nax.grid(True)\nax.set_facecolor('#add8e6')  # Modify the face color here\nax.set_title(\"Sales of Vehicles from 2016 to 2020\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Vehicle Type\")\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "[(0, 3), (2, 1), (4, 4)]",
        "Test_image": "./test_dataset/Heatmap/Heatmap_c84441e28d7dfbbb/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_c84441e28d7dfbbb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_c84441e28d7dfbbb/myplot.png"
    },
    {
        "id": "Heatmap_ed481884917f05d3",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nart_types = [\"Sculpture\", \"Painting\", \"Photography\", \"Digital Art\", \"Conceptual Art\", \"Performance Art\"]\npopularity_index = np.array([45, 60, 20, 70, 15, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(popularity_index.reshape(1, -1), cmap='Blues', alpha=0.8)  # Changed colormap to 'Blues'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(art_types)), labels=art_types)\nax.set_yticks([])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations with modified color\nfor i in range(len(art_types)):\n    text = ax.text(i, 0, popularity_index[i], ha=\"center\", va=\"center\", color=\"black\")  # Changed text color to black\n\nax.set_title(\"Popularity Index of Different Art Types\")\nax.set_xlabel(\"Art Types\")\nax.set_ylabel(\"Popularity Index\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the background color of the cells containing the center point of the bounding box to #ededc8. For these cells, increase the border thickness to 2.1 pixels and set the border color to #fb6a55.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_ed481884917f05d3/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nart_types = [\"Sculpture\", \"Painting\", \"Photography\", \"Digital Art\", \"Conceptual Art\", \"Performance Art\"]\npopularity_index = np.array([45, 60, 20, 70, 15, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(popularity_index.reshape(1, -1), cmap='Blues', alpha=0.8)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(art_types)), labels=art_types)\nax.set_yticks([])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations with modified color\nfor i in range(len(art_types)):\n    text = ax.text(i, 0, popularity_index[i], ha=\"center\", va=\"center\", color=\"black\")\n    if i in [1, 3, 5]:  # Selected indices for modification\n        ax.add_patch(plt.Rectangle((i - 0.5, -0.5), 1, 1, facecolor=\"#ededc8\", edgecolor=\"#fb6a55\", lw=2.1))\n\nax.set_title(\"Popularity Index of Different Art Types\")\nax.set_xlabel(\"Art Types\")\nax.set_ylabel(\"Popularity Index\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,1), (0,3), (0,5)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_ed481884917f05d3/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_ed481884917f05d3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_ed481884917f05d3/myplot.png"
    },
    {
        "id": "Heatmap_de438ae47e736435",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntechnologies = [\"Battery Life (in hours)\", \"Range (in Km)\", \"Load Capacity (in Kg)\", \"Flight Speed (in Km/hr)\"]\nyears = [\"Year 2014\", \"Year 2018\", \"Year 2022\"]\n\ndata = np.array([[5, 7, 4],\n                 [20, 35, 60],\n                 [1, 2, 5],\n                 [40, 80, 55]])\n\nfig, ax = plt.subplots()\n# Change the colormap to 'plasma'\nim = ax.imshow(data, cmap='plasma', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\nax.set_yticks(np.arange(len(technologies)))\nax.set_yticklabels(technologies)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Annotate each cell with the data value\nfor i in range(len(technologies)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Technology Performance Over Time\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Performance Metric\")\nax.grid(visible=True)\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Remove the annotations from the cells that contain the center point of the bounding box in the heatmap, and change the color of the annotation text for those cells to #3c4098.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_de438ae47e736435/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ntechnologies = [\"Battery Life (in hours)\", \"Range (in Km)\", \"Load Capacity (in Kg)\", \"Flight Speed (in Km/hr)\"]\nyears = [\"Year 2014\", \"Year 2018\", \"Year 2022\"]\n\ndata = np.array([[5, 7, 4],\n                 [20, 35, 60],\n                 [1, 2, 5],\n                 [40, 80, 55]])\n\nfig, ax = plt.subplots()\n# Change the colormap to 'plasma'\nim = ax.imshow(data, cmap='plasma', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\nax.set_yticks(np.arange(len(technologies)))\nax.set_yticklabels(technologies)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Annotate each cell with the data value\nfor i in range(len(technologies)):\n    for j in range(len(years)):\n        if (i, j) in [(0, 2), (2, 1), (3, 0)]:\n            continue  # Delete the annotation for these points\n        else:\n            text = ax.text(j, i, data[i, j],\n                           ha=\"center\", va=\"center\", color=\"w\")\n\n# Add back annotations for the selected points with #3c4098 color\nfor (i, j) in [(0, 2), (2, 1), (3, 0)]:\n    text = ax.text(j, i, data[i, j],\n                   ha=\"center\", va=\"center\", color=\"#3c4098\")\n\nax.set_title(\"Technology Performance Over Time\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Performance Metric\")\nax.grid(visible=True)\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 2), (2, 1), (3, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_de438ae47e736435/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_de438ae47e736435/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_de438ae47e736435/myplot.png"
    },
    {
        "id": "Heatmap_d96ee1d26f04b46e",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nExercise_Types = [\"Yoga\", \"Weightlifting\", \"Running\", \"Cycling\", \"Swimming\"]\nPopularity = np.array([15, 35, 20, 40, 25])\n\nfig, ax = plt.subplots()\nim = ax.imshow(Popularity.reshape(1,5), cmap='viridis', alpha=0.7)  # Changed colormap to 'viridis'\n\nax.set_xticks(np.arange(len(Exercise_Types)))\nax.set_yticks([])\n\nax.set_xticklabels(Exercise_Types)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(Exercise_Types)):\n    text = ax.text(i, 0, Popularity[i], ha=\"center\", va=\"center\", color=\"k\")  # Changed text color to black\n\nax.set_title(\"Popularity of Different Exercise Types\")\nax.set_xlabel(\"Exercise Types\")\nax.set_ylabel(\"Popularity\")\nax.grid(True)\nax.set_facecolor('lightgray')\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the font size of the annotations in the cells that contain the center point of the bounding box to 12, and update the text color in those cells to #21ab69.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_d96ee1d26f04b46e/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nExercise_Types = [\"Yoga\", \"Weightlifting\", \"Running\", \"Cycling\", \"Swimming\"]\nPopularity = np.array([15, 35, 20, 40, 25])\n\nfig, ax = plt.subplots()\nim = ax.imshow(Popularity.reshape(1, 5), cmap='viridis', alpha=0.7)  # Changed colormap to 'viridis'\n\nax.set_xticks(np.arange(len(Exercise_Types)))\nax.set_yticks([])\n\nax.set_xticklabels(Exercise_Types)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(Exercise_Types)):\n    if i in [1, 3]:  # Selecting data points with indices 1 and 3\n        text = ax.text(i, 0, Popularity[i], ha=\"center\", va=\"center\", color=\"#21ab69\", fontsize=12)\n    else:\n        text = ax.text(i, 0, Popularity[i], ha=\"center\", va=\"center\", color=\"k\")  # Default text color remains black\n\nax.set_title(\"Popularity of Different Exercise Types\")\nax.set_xlabel(\"Exercise Types\")\nax.set_ylabel(\"Popularity\")\nax.grid(True)\nax.set_facecolor('lightgray')\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,1), (0,3)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_d96ee1d26f04b46e/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_d96ee1d26f04b46e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_d96ee1d26f04b46e/myplot.png"
    },
    {
        "id": "Heatmap_f7d756d50c2fa9b3",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncities = [\"San Francisco\", \"Boston\", \"New York\", \"Austin\", \"Seattle\"]\nyears = [\"2018\", \"2019\", \"2020\"]\n\ndata = np.array([[500, 450, 300],\n                 [200, 400, 600],\n                 [300, 250, 500],\n                 [400, 350, 200],\n                 [250, 300, 250]])\n\nfig, ax = plt.subplots()\n\n# Set facecolor to a soft blue color\nax.set_facecolor(\"#DCE3F3\")  # Soft blue background\n\nheatmap = ax.imshow(data, cmap=\"YlGn\", alpha=0.8)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(cities)))\n\nax.set_xticklabels(years)\nax.set_yticklabels(cities)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(cities)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set title and labels\nax.set_title(\"City Population Over Years\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Cities\")\n\n# Add grid\nax.grid(True)\n\n# Add legend\ncbar = plt.colorbar(heatmap)\ncbar.set_label('Population')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the font size of the annotations in the cells that contain the center point of the bounding box to 9, and set the background color of those cells to #e17ea8.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_f7d756d50c2fa9b3/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ncities = [\"San Francisco\", \"Boston\", \"New York\", \"Austin\", \"Seattle\"]\nyears = [\"2018\", \"2019\", \"2020\"]\n\ndata = np.array([[500, 450, 300],\n                 [200, 400, 600],\n                 [300, 250, 500],\n                 [400, 350, 200],\n                 [250, 300, 250]])\n\nfig, ax = plt.subplots()\n\n# Set facecolor to a soft blue color\nax.set_facecolor(\"#DCE3F3\")  # Soft blue background\n\nim = ax.imshow(data, cmap=\"YlGn\", alpha=0.8)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(cities)))\n\nax.set_xticklabels(years)\nax.set_yticklabels(cities)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(cities)):\n    for j in range(len(years)):\n        if (i, j) in [(0, 0), (2, 1), (4, 2)]:\n            text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\", fontsize=9)\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"#e17ea8\", edgecolor=\"none\", lw=0))\n        else:\n            text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set title and labels\nax.set_title(\"City Population Over Years\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Cities\")\n\n# Add grid\nax.grid(True)\n\n# Add legend\ncbar = plt.colorbar(im)\ncbar.set_label('Population')\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 0), (2, 1), (4, 2)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_f7d756d50c2fa9b3/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_f7d756d50c2fa9b3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_f7d756d50c2fa9b3/myplot.png"
    },
    {
        "id": "Heatmap_d5afc699b2d1c2d8",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndisorders = [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"]\nyears = [\"2018\", \"2019\", \"2020\"]\n\ndata = np.array([[100, 150, 130],\n                 [80, 90, 200],\n                 [60, 70, 65]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='hot', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\nax.set_yticks(np.arange(len(disorders)), labels=disorders)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(disorders)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Set title, labels and legend\nax.set_title(\"Prevalence of Mental Health Disorders (in thousands)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Disorder\")\nax.legend()\n\n# Set background color and grid\nax.set_facecolor(\"lightgray\")\nax.grid(True)\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #457a1c, with a border width of 1.3. Additionally, update the background color of these cells to #b88f24.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_d5afc699b2d1c2d8/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\ndisorders = [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"]\nyears = [\"2018\", \"2019\", \"2020\"]\n\ndata = np.array([[100, 150, 130],\n                 [80, 90, 200],\n                 [60, 70, 65]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='hot', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\nax.set_yticks(np.arange(len(disorders)), labels=disorders)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(disorders)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n        # Add specific cell modifications\n        if (i, j) in [(0, 1), (1, 2), (2, 0)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, \n                                       facecolor=\"#b88f24\", edgecolor=\"#457a1c\", lw=1.3))\n\n# Set title, labels and legend\nax.set_title(\"Prevalence of Mental Health Disorders (in thousands)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Disorder\")\n\n# Set background color and grid\nax.set_facecolor(\"lightgray\")\nax.grid(True)\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 1), (1, 2), (2, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_d5afc699b2d1c2d8/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_d5afc699b2d1c2d8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_d5afc699b2d1c2d8/myplot.png"
    },
    {
        "id": "Heatmap_3075b7040506cf80",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncountries = [\"USA\", \"China\", \"India\", \"Brazil\", \"Australia\"]\nyears = [\"Year 1\", \"Year 2\", \"Year 3\"]\n\ndata = np.array([[100, 200, 170],\n                 [150, 160, 320],\n                 [120, 140, 120],\n                 [200, 210, 160],\n                 [80, 70, 150]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, alpha=0.7, cmap='viridis')\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\nax.set_yticks(np.arange(len(countries)))\nax.set_yticklabels(countries)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(countries)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Data of Countries Over Years\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Countries\")\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Increase the border thickness of the cells that contain the center point of the bounding box to 2.8 pixels, and change their color to #071003.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_3075b7040506cf80/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ncountries = [\"USA\", \"China\", \"India\", \"Brazil\", \"Australia\"]\nyears = [\"Year 1\", \"Year 2\", \"Year 3\"]\n\ndata = np.array([[100, 200, 170],\n                 [150, 160, 320],\n                 [120, 140, 120],\n                 [200, 210, 160],\n                 [80, 70, 150]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, alpha=0.7, cmap='viridis')\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\nax.set_yticks(np.arange(len(countries)))\nax.set_yticklabels(countries)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(countries)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        if (i, j) in [(1, 2), (3, 1), (4, 0)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#071003\", lw=2.8, facecolor='none'))\n\nax.set_title(\"Data of Countries Over Years\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Countries\")\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(1, 2), (3, 1), (4, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_3075b7040506cf80/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_3075b7040506cf80/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_3075b7040506cf80/myplot.png"
    },
    {
        "id": "Heatmap_041129355858ed61",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nregions = [\"North America\", \"Latin America\", \"Europe\", \"Africa\", \"Asia\", \"Australia\", \"Antarctica\", \"East Asia\", \"Middle East\"]\nhome_schooling_rate = np.array([[5, 8, 10, 3, 7, 11, 1, 6, 4]])\n\nfig, ax = plt.subplots()\n\n# using heatmap\nim = ax.imshow(home_schooling_rate, cmap='YlOrRd', alpha=0.7)\n\n# setting ticks\nax.set_xticks(np.arange(len(regions)))\nax.set_yticks(np.arange(1))\nax.set_xticklabels(regions, fontsize=12)  # Changed font size for x-axis tick labels\nax.set_yticklabels(['Home schooling rate'], fontsize=12)  # Changed font size for y-axis tick labels\n\n# rotating the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# loop over data dimensions and create text annotations\nfor i in range(len(home_schooling_rate[0])):\n    text = ax.text(i, 0, home_schooling_rate[0][i], ha=\"center\", va=\"center\", color=\"black\")\n\n# setting title and labels\nax.set_title(\"Home schooling rate by region\", fontsize=16)  # Changed font size for title\nax.set_xlabel(\"Region\")\nax.set_ylabel(\"Home schooling rate\")\n\n# adding grid and changing the background color\nax.grid(True)\nax.set_facecolor(\"lightgray\")\n\n# legend\ncbar = plt.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Home schooling rate', rotation=-90, va=\"bottom\")\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Increase the border thickness of the cells that contain the center point of the bounding box to 2.7 pixels and change their color to #332e9c. Also, set the annotation text color in those cells to #c09ae7.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_041129355858ed61/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# data\nregions = [\"North America\", \"Latin America\", \"Europe\", \"Africa\", \"Asia\", \"Australia\", \"Antarctica\", \"East Asia\", \"Middle East\"]\nhome_schooling_rate = np.array([[5, 8, 10, 3, 7, 11, 1, 6, 4]])\n\nfig, ax = plt.subplots()\n\n# using heatmap\nim = ax.imshow(home_schooling_rate, cmap='YlOrRd', alpha=0.7)\n\n# setting ticks\nax.set_xticks(np.arange(len(regions)))\nax.set_yticks(np.arange(1))\nax.set_xticklabels(regions, fontsize=12)  # Changed font size for x-axis tick labels\nax.set_yticklabels(['Home schooling rate'], fontsize=12)  # Changed font size for y-axis tick labels\n\n# rotating the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# loop over data dimensions and create text annotations\nfor i in range(len(home_schooling_rate[0])):\n    text_color = \"black\"\n    if i in [1, 4, 7]:  # Targeted data points: Latin America, Asia, East Asia\n        ax.add_patch(plt.Rectangle((i - 0.5, -0.5), 1, 1, edgecolor=\"#332e9c\", lw=2.7, facecolor=\"none\"))\n        text_color = \"#c09ae7\"\n    text = ax.text(i, 0, home_schooling_rate[0][i], ha=\"center\", va=\"center\", color=text_color)\n\n# setting title and labels\nax.set_title(\"Home schooling rate by region\", fontsize=16)  # Changed font size for title\nax.set_xlabel(\"Region\")\nax.set_ylabel(\"Home schooling rate\")\n\n# adding grid and changing the background color\nax.grid(True)\nax.set_facecolor(\"lightgray\")\n\n# legend\ncbar = plt.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Home schooling rate', rotation=-90, va=\"bottom\")\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,1), (0,4), (0,7)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_041129355858ed61/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_041129355858ed61/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_041129355858ed61/myplot.png"
    },
    {
        "id": "Heatmap_8573d48f317d77c9",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\ndisorders = [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"]\nyears = [\"2018\", \"2019\", \"2020\"]\n\ndata = np.array([[100, 150, 130],\n                 [80, 90, 200],\n                 [60, 70, 65]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='hot', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\nax.set_yticks(np.arange(len(disorders)), labels=disorders)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(disorders)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Set title, labels and legend\nax.set_title(\"Prevalence of Mental Health Disorders (in thousands)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Disorder\")\nax.legend()\n\n# Set background color and grid\nax.set_facecolor(\"lightgray\")\nax.grid(True)\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the background color of the cells that contain the center point of the bounding box to #7cb8bd, and update their edge color to #98ea2e.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_8573d48f317d77c9/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\ndisorders = [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"]\nyears = [\"2018\", \"2019\", \"2020\"]\n\ndata = np.array([[100, 150, 130],\n                 [80, 90, 200],\n                 [60, 70, 65]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='hot', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\nax.set_yticks(np.arange(len(disorders)), labels=disorders)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(disorders)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n        if (i, j) in [(0, 2), (1, 1), (2, 0)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"#7cb8bd\", edgecolor=\"#98ea2e\", lw=2))\n\n# Set title, labels and legend\nax.set_title(\"Prevalence of Mental Health Disorders (in thousands)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Disorder\")\n\n# Set background color and grid\nax.set_facecolor(\"lightgray\")\nax.grid(True)\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 2), (1, 1), (2, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_8573d48f317d77c9/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_8573d48f317d77c9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_8573d48f317d77c9/myplot.png"
    },
    {
        "id": "Heatmap_6193d4720fc44c5b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nspecies = [\"Tuna\", \"Shark\", \"Cod\", \"Salmon\", \"Herring\"]\nyears = [\"2000\", \"2005\", \"2010\", \"2015\"]\n\ncatches = np.array([[500000, 400000, 350000, 250000],\n                    [400000, 300000, 350000, 200000],\n                    [350000, 300000, 250000, 150000],\n                    [500000, 550000, 500000, 450000],\n                    [400000, 350000, 325000, 300000]])\n\nfig, ax = plt.subplots()\n\nim = ax.imshow(catches, alpha=0.7, cmap='RdYlBu')\n\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(species)))\n\nax.set_xticklabels(years)\nax.set_yticklabels(species)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\nfor i in range(len(species)):\n    for j in range(len(years)):\n        text = ax.text(j, i, catches[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Catch of Sea Species over the years\")\nax.set_xlabel('Years')\nax.set_ylabel('Species')\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the font size of the annotations in the cells that contain the center point of the bounding box to 14. Additionally, increase the border thickness of these cells to 2.5 pixels and set the border color to #f1b103.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_6193d4720fc44c5b/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nspecies = [\"Tuna\", \"Shark\", \"Cod\", \"Salmon\", \"Herring\"]\nyears = [\"2000\", \"2005\", \"2010\", \"2015\"]\n\ncatches = np.array([[500000, 400000, 350000, 250000],\n                    [400000, 300000, 350000, 200000],\n                    [350000, 300000, 250000, 150000],\n                    [500000, 550000, 500000, 450000],\n                    [400000, 350000, 325000, 300000]])\n\nfig, ax = plt.subplots()\n\nim = ax.imshow(catches, alpha=0.7, cmap='RdYlBu')\n\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(species)))\n\nax.set_xticklabels(years)\nax.set_yticklabels(species)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\nfor i in range(len(species)):\n    for j in range(len(years)):\n        text = ax.text(j, i, catches[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n        if (i, j) in [(0, 0), (3, 1), (4, 3)]:\n            text.set_fontsize(14)\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#f1b103\", lw=2.5, facecolor='none'))\n\nax.set_title(\"Catch of Sea Species over the years\")\nax.set_xlabel('Years')\nax.set_ylabel('Species')\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 0), (3, 1), (4, 3)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_6193d4720fc44c5b/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_6193d4720fc44c5b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_6193d4720fc44c5b/myplot.png"
    },
    {
        "id": "Heatmap_08f8094647e6ae38",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\n\nplants = [\"Rose\", \"Sunflower\", \"Fern\", \"Dandelion\", \"Orchid\", \"Cactus\", \"Lily\", \"Oak\"]\npatterns = [\"Pattern1\", \"Pattern2\", \"Pattern3\", \"Pattern4\", \"Pattern5\", \"Pattern6\", \"Pattern7\"]\n\ngrowth = np.array([[25,30,35,70,75,30,20],\n                   [40,30,20,10,50,60,70],\n                   [60,50,40,30,80,90,100],\n                   [20,30,40,80,85,40,30],\n                   [100,90,80,70,150,140,130],\n                   [30,40,50,100,105,50,40],\n                   [70,60,50,40,90,100,110],\n                   [50,60,70,80,85,90,40]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(growth, cmap='viridis', alpha=0.7)  # Changed 'Blues' to 'viridis'\n\nax.set_xticks(np.arange(len(patterns)))\nax.set_yticks(np.arange(len(plants)))\nax.set_xticklabels(patterns)\nax.set_yticklabels(plants)\nax.set_facecolor('gray')\nax.grid(True, linestyle='--', color='w')  # Added color='w' to set gridline color to white\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(plants)):\n    for j in range(len(patterns)):\n        text = ax.text(j, i, growth[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Plant Growth Patterns\")\nax.set_xlabel(\"Pattern\")\nax.set_ylabel(\"Plant Species\")\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #a9e0f0 with a width of 1.1, then update the edge color of those same cells to #6ad280.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_08f8094647e6ae38/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nplants = [\"Rose\", \"Sunflower\", \"Fern\", \"Dandelion\", \"Orchid\", \"Cactus\", \"Lily\", \"Oak\"]\npatterns = [\"Pattern1\", \"Pattern2\", \"Pattern3\", \"Pattern4\", \"Pattern5\", \"Pattern6\", \"Pattern7\"]\n\ngrowth = np.array([[25,30,35,70,75,30,20],\n                   [40,30,20,10,50,60,70],\n                   [60,50,40,30,80,90,100],\n                   [20,30,40,80,85,40,30],\n                   [100,90,80,70,150,140,130],\n                   [30,40,50,100,105,50,40],\n                   [70,60,50,40,90,100,110],\n                   [50,60,70,80,85,90,40]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(growth, cmap='viridis', alpha=0.7)\n\nax.set_xticks(np.arange(len(patterns)))\nax.set_yticks(np.arange(len(plants)))\nax.set_xticklabels(patterns)\nax.set_yticklabels(plants)\nax.set_facecolor('gray')\nax.grid(True, linestyle='--', color='w')\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(plants)):\n    for j in range(len(patterns)):\n        text = ax.text(j, i, growth[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        if (i, j) in [(1, 3), (4, 4), (6, 5)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor='none', edgecolor='#6ad280', lw=1.1))\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, fill=False, edgecolor='#a9e0f0', lw=1.1))\n\nax.set_title(\"Plant Growth Patterns\")\nax.set_xlabel(\"Pattern\")\nax.set_ylabel(\"Plant Species\")\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(1, 3), (4, 4), (6, 5)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_08f8094647e6ae38/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_08f8094647e6ae38/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_08f8094647e6ae38/myplot.png"
    },
    {
        "id": "Heatmap_6a9456031dacc26d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The given data\ngroups = [\"Young Adults\", \"Middle Aged\", \"Seniors\", \"Teens\"]\nrecycling_habits = np.array([[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20],\n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50],\n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]])\n\nfig, ax = plt.subplots()\n\n# Using the imshow() function to draw the heatmap\nim = ax.imshow(recycling_habits, cmap='viridis', alpha=0.7)\n\n# Setting the ticks and labels\nax.set_xticks(np.arange(12))\nax.set_yticks(np.arange(len(groups)), labels=groups)\n\n# Adding a grid and changing the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Rotating the tick labels and setting their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Looping over data dimensions and creating text annotations\nfor i in range(len(groups)):\n    for j in range(12):\n        text = ax.text(j, i, recycling_habits[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Setting the title and labels\nax.set_title(\"Recycling Habits by Demographics\")\nax.set_xlabel(\"Months\")\nax.set_ylabel(\"Demographics\")\n\n# Applying a tight layout and saving the figure\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box in the heatmap to #0693f1, with a border width of 0.8. Also, update the color of the annotation text in those cells to #848e60.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_6a9456031dacc26d/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# The given data\ngroups = [\"Young Adults\", \"Middle Aged\", \"Seniors\", \"Teens\"]\nrecycling_habits = np.array([[10, 12, 14, 20, 22, 25, 6, 30, 32, 35, 18, 20],\n                             [12, 13, 11, 9, 8, 7, 20, 10, 7, 6, 5, 50],\n                             [20, 18, 15, 13, 10, 9, 12, 30, 35, 32, 28, 25],\n                             [10, 15, 20, 25, 30, 12, 14, 50, 45, 40, 35, 30]])\n\nfig, ax = plt.subplots()\n\n# Using the imshow() function to draw the heatmap\nim = ax.imshow(recycling_habits, cmap='viridis', alpha=0.7)\n\n# Setting the ticks and labels\nax.set_xticks(np.arange(12))\nax.set_yticks(np.arange(len(groups)), labels=groups)\n\n# Adding a grid and changing the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Rotating the tick labels and setting their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Looping over data dimensions and creating text annotations\nfor i in range(len(groups)):\n    for j in range(12):\n        text_color = \"w\"\n        if (i, j) in [(0, 6), (1, 11), (3, 7)]:\n            text_color = \"#848e60\"\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor='none', edgecolor=\"#0693f1\", lw=0.8))\n        text = ax.text(j, i, recycling_habits[i, j], ha=\"center\", va=\"center\", color=text_color)\n\n# Setting the title and labels\nax.set_title(\"Recycling Habits by Demographics\")\nax.set_xlabel(\"Months\")\nax.set_ylabel(\"Demographics\")\n\n# Applying a tight layout and saving the figure\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "[(0, 6), (1, 11), (3, 7)]",
        "Test_image": "./test_dataset/Heatmap/Heatmap_6a9456031dacc26d/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_6a9456031dacc26d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_6a9456031dacc26d/myplot.png"
    },
    {
        "id": "Heatmap_e89413d8372499a7",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# The given data\nsocial_media_platforms = [\"Facebook\", \"Instagram\", \"Twitter\", \"LinkedIn\", \"YouTube\", \"Pinterest\"]\nyears = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\n\ndata = np.array([[500, 600, 800, 400, 1000],\n                 [200, 400, 200, 800, 1000],\n                 [300, 500, 300, 900, 200],\n                 [200, 500, 800, 1000, 200],\n                 [400, 600, 400, 800, 400],\n                 [300, 200, 900, 200, 1000]])\n\nfig, ax = plt.subplots()\n\n# Change colormap to 'plasma'\nim = ax.imshow(data, cmap='plasma', alpha=0.8)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(social_media_platforms)))\n\nax.set_xticklabels(years)\nax.set_yticklabels(social_media_platforms)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations with color changed to black.\nfor i in range(len(social_media_platforms)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j],\n                       ha=\"center\", va=\"center\", color=\"black\")  # Change text color to black\n\n# Setting title and labels\nax.set_title(\"Social Media Usage from 2016 to 2020\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Social Media Platforms\")\n\n# Add Grid\nax.grid(True)\n\n# Set the figure background color to light gray\nax.set_facecolor('lightgray')\n\n# Save the plot\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Enhance the border thickness of the cells that contain the center point of the bounding box to 1.6 pixels, changing their color to #a7424e. Additionally, update the annotation text color in those cells to #d42d92.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_e89413d8372499a7/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# The given data\nsocial_media_platforms = [\"Facebook\", \"Instagram\", \"Twitter\", \"LinkedIn\", \"YouTube\", \"Pinterest\"]\nyears = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\n\ndata = np.array([[500, 600, 800, 400, 1000],\n                 [200, 400, 200, 800, 1000],\n                 [300, 500, 300, 900, 200],\n                 [200, 500, 800, 1000, 200],\n                 [400, 600, 400, 800, 400],\n                 [300, 200, 900, 200, 1000]])\n\nfig, ax = plt.subplots()\n\n# Change colormap to 'plasma'\nim = ax.imshow(data, cmap='plasma', alpha=0.8)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(social_media_platforms)))\n\nax.set_xticklabels(years)\nax.set_yticklabels(social_media_platforms)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations with color changed to black.\nfor i in range(len(social_media_platforms)):\n    for j in range(len(years)):\n        text_color = \"black\"\n        if (i, j) in [(0, 4), (3, 3), (5, 2)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#a7424e\", lw=1.6, facecolor='none'))\n            text_color = \"#d42d92\"\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=text_color)\n\n# Setting title and labels\nax.set_title(\"Social Media Usage from 2016 to 2020\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Social Media Platforms\")\n\n# Add Grid\nax.grid(True)\n\n# Set the figure background color to light gray\nax.set_facecolor('lightgray')\n\n# Save the plot\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 4), (3, 3), (5, 2)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_e89413d8372499a7/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_e89413d8372499a7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_e89413d8372499a7/myplot.png"
    },
    {
        "id": "Heatmap_0b4bf69f323e1c2e",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nprofessions = [\"Software Engineers\", \"Actors\", \"Doctors\", \"Teachers\", \"Farmers\", \"Chefs\", \"Mechanics\", \"Lawyers\", \"Artists\"]\nscores = np.array([56, 89, 67, 102, 73, 85, 92, 75, 66])\n\nfig, ax = plt.subplots()\nim = ax.imshow(scores.reshape(1,9), cmap='viridis', alpha=0.7)\n\n# Set the face and edge color to light gray\nfig.patch.set_facecolor('#f0f0f0')\nax.set_facecolor('#f0f0f0')\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(professions)))\nax.set_yticks([])\n\nax.set_xticklabels(professions)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_title(\"Dietary Score among Different Professions\")\nax.set_xlabel('Professions')\nax.set_ylabel('Dietary Score')\n\n# Add a colorbar\ncbar = fig.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Dietary Score', rotation=-90, va=\"bottom\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(scores)):\n    text = ax.text(i, 0, scores[i], ha=\"center\", va=\"center\", color=\"w\")\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Increase the border thickness of the cells that contain the center point of the bounding box to 2.8 pixels, and change their color to #e5fff5.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_0b4bf69f323e1c2e/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nprofessions = [\"Software Engineers\", \"Actors\", \"Doctors\", \"Teachers\", \"Farmers\", \"Chefs\", \"Mechanics\", \"Lawyers\", \"Artists\"]\nscores = np.array([56, 89, 67, 102, 73, 85, 92, 75, 66])\n\nfig, ax = plt.subplots()\nim = ax.imshow(scores.reshape(1, 9), cmap='viridis', alpha=0.7)\n\n# Set the face and edge color to light gray\nfig.patch.set_facecolor('#f0f0f0')\nax.set_facecolor('#f0f0f0')\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(professions)))\nax.set_yticks([])\n\nax.set_xticklabels(professions)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_title(\"Dietary Score among Different Professions\")\nax.set_xlabel('Professions')\nax.set_ylabel('Dietary Score')\n\n# Add a colorbar\ncbar = fig.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Dietary Score', rotation=-90, va=\"bottom\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(scores)):\n    text = ax.text(i, 0, scores[i], ha=\"center\", va=\"center\", color=\"w\")\n    if i in [1, 3, 6]:  # Corresponding data points to modify\n        ax.add_patch(plt.Rectangle((i - 0.5, -0.5), 1, 1, facecolor='none', edgecolor='#e5fff5', lw=2.8))\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,1), (0,3), (0,6)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_0b4bf69f323e1c2e/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_0b4bf69f323e1c2e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_0b4bf69f323e1c2e/myplot.png"
    },
    {
        "id": "Heatmap_1f4aaeaba059f152",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nhouseholds = [\"Single Person Household\", \"Two-Person Household\", \"Three-Person Household\", \n              \"Four-Person Household\", \"Five-Person Household\", \"Six or More Person Household\", \n              \"Average Household\"]\nyears = [\"2019\", \"2020\"]\n\nwaste = np.array([[450, 550],\n                  [1000, 1100],\n                  [700, 800],\n                  [800, 600],\n                  [500, 700],\n                  [1100, 1300],\n                  [720, 790]])\n\nfig, ax = plt.subplots()\n\n# Change the color map to 'viridis'\nim = ax.imshow(waste, cmap='viridis', alpha=0.7)\n\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\n\nax.set_yticks(np.arange(len(households)))\nax.set_yticklabels(households)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(households)):\n    for j in range(len(years)):\n        text = ax.text(j, i, waste[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Household Food Waste (in kg/year)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Household Type\")\n\n# Change the color of the grid lines to 'blue'\nax.grid(True, color='blue')\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the border color of the cells that contain the center point of the bounding box to #861939, and set the border width to 0.7.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_1f4aaeaba059f152/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nhouseholds = [\"Single Person Household\", \"Two-Person Household\", \"Three-Person Household\", \n              \"Four-Person Household\", \"Five-Person Household\", \"Six or More Person Household\", \n              \"Average Household\"]\nyears = [\"2019\", \"2020\"]\n\nwaste = np.array([[450, 550],\n                  [1000, 1100],\n                  [700, 800],\n                  [800, 600],\n                  [500, 700],\n                  [1100, 1300],\n                  [720, 790]])\n\nfig, ax = plt.subplots()\n\n# Change the color map to 'viridis'\nim = ax.imshow(waste, cmap='viridis', alpha=0.7)\n\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\n\nax.set_yticks(np.arange(len(households)))\nax.set_yticklabels(households)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(households)):\n    for j in range(len(years)):\n        text = ax.text(j, i, waste[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        if (i, j) in [(0, 1), (3, 0), (5, 1)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, fill=False, edgecolor=\"#861939\", linewidth=0.7))\n\nax.set_title(\"Household Food Waste (in kg/year)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Household Type\")\n\n# Change the color of the grid lines to 'blue'\nax.grid(True, color='blue')\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 1), (3, 0), (5, 1)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_1f4aaeaba059f152/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_1f4aaeaba059f152/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_1f4aaeaba059f152/myplot.png"
    },
    {
        "id": "Heatmap_19303cf71f00f788",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Stock Indices and corresponding data\nindices = [\"Dow Jones\", \"S&P 500\", \"Nasdaq\", \"FTSE 100\"]\nweeks = [\"Week 1\", \"Week 2\", \"Week 3\", \"Week 4\"]\n\ndata = np.array([[25000, 24000, 23500, 26000],\n                 [3000, 3200, 3100, 2700],\n                 [7500, 7400, 7800, 7300],\n                 [7000, 7100, 7200, 6800]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='cool', alpha=0.7)  # Changed color map to 'cool'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(weeks)))\nax.set_xticklabels(weeks)\nax.set_yticks(np.arange(len(indices)))\nax.set_yticklabels(indices)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(indices)):\n    for j in range(len(weeks)):\n        text = ax.text(j, i, data[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Stock Indices Over Four Weeks\")\nax.figure.set_facecolor('grey')\nax.grid(color='black', linestyle='-', linewidth=0.2)  # Changed grid color to 'black'\n\nfig.tight_layout()\nplt.savefig(\"modified_myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #6832f7 and set the border thickness to 2.3 pixels, overriding the previous settings of #b5e713 for the color and 1.9 pixels for the thickness.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_19303cf71f00f788/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Stock Indices and corresponding data\nindices = [\"Dow Jones\", \"S&P 500\", \"Nasdaq\", \"FTSE 100\"]\nweeks = [\"Week 1\", \"Week 2\", \"Week 3\", \"Week 4\"]\n\ndata = np.array([[25000, 24000, 23500, 26000],\n                 [3000, 3200, 3100, 2700],\n                 [7500, 7400, 7800, 7300],\n                 [7000, 7100, 7200, 6800]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='cool', alpha=0.7)  # Changed color map to 'cool'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(weeks)))\nax.set_xticklabels(weeks)\nax.set_yticks(np.arange(len(indices)))\nax.set_yticklabels(indices)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(indices)):\n    for j in range(len(weeks)):\n        text = ax.text(j, i, data[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n        # Apply specific modifications to certain data points\n        if (i, j) in [(0, 3), (2, 2), (3, 0)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#b5e713\", lw=1.9, fill=False))\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#6832f7\", lw=2.3, fill=False))\n\nax.set_title(\"Stock Indices Over Four Weeks\")\nax.figure.set_facecolor('grey')\nax.grid(color='black', linestyle='-', linewidth=0.2)  # Changed grid color to 'black'\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 3), (2, 2), (3, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_19303cf71f00f788/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_19303cf71f00f788/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_19303cf71f00f788/modified_myplot.png"
    },
    {
        "id": "Heatmap_d6584997a3ed6abb",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nproperty_types = [\"Residential\", \"Commercial\", \"Industrial\"]\nyears = [\"2018\", \"2019\", \"2020\"]\n\nproperty_values = np.array([[150000, 120000, 185000],\n                            [200000, 210000, 145000],\n                            [180000, 225000, 215000]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(property_values, cmap='viridis', alpha=0.6)\n\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\n\nax.set_yticks(np.arange(len(property_types)))\nax.set_yticklabels(property_types)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\nfor i in range(len(property_types)):\n    for j in range(len(years)):\n        text = ax.text(j, i, property_values[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Property Values by Type and Year\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Property Type\")\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Remove the annotations from the cells that contain the center point of the bounding box in the heatmap.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_d6584997a3ed6abb/Visual_figure.png",
        "Test_code": "import numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nproperty_types = [\"Residential\", \"Commercial\", \"Industrial\"]\nyears = [\"2018\", \"2019\", \"2020\"]\n\nproperty_values = np.array([[150000, 120000, 185000],\n                            [200000, 210000, 145000],\n                            [180000, 225000, 215000]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(property_values, cmap='viridis', alpha=0.6)\n\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\n\nax.set_yticks(np.arange(len(property_types)))\nax.set_yticklabels(property_types)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\nfor i in range(len(property_types)):\n    for j in range(len(years)):\n        if (i, j) not in [(0, 2), (2, 1)]:\n            text = ax.text(j, i, property_values[i, j],\n                           ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Property Values by Type and Year\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Property Type\")\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 2), (2, 1)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_d6584997a3ed6abb/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_d6584997a3ed6abb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_d6584997a3ed6abb/myplot.png"
    },
    {
        "id": "Heatmap_acd6287ccc073a31",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nage_groups = [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"]\nactivities = [\"Gym Visits\", \"Outdoor Activities\"]\n\ndata = np.array([[12, 35],\n                 [27, 30],\n                 [45, 25],\n                 [60, 15],\n                 [30, 5]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='YlGnBu', alpha=0.7)\n\nax.set_xticks(np.arange(len(activities)))\nax.set_yticks(np.arange(len(age_groups)))\n\nax.set_xticklabels(activities)\nax.set_yticklabels(age_groups)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(age_groups)):\n    for j in range(len(activities)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"black\")\n\nax.set_title(\"Activity Preferences by Age Group\")\nax.grid(True)\nax.set_facecolor('gray')\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Modify the border color of the cells that contain the center point of the bounding box to #410ac8, and set the thickness to 2.0 pixels. Please disregard any earlier instructions regarding border color and width.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_acd6287ccc073a31/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nage_groups = [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"]\nactivities = [\"Gym Visits\", \"Outdoor Activities\"]\n\ndata = np.array([[12, 35],\n                 [27, 30],\n                 [45, 25],\n                 [60, 15],\n                 [30, 5]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='YlGnBu', alpha=0.7)\n\nax.set_xticks(np.arange(len(activities)))\nax.set_yticks(np.arange(len(age_groups)))\n\nax.set_xticklabels(activities)\nax.set_yticklabels(age_groups)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(age_groups)):\n    for j in range(len(activities)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"black\")\n        if (i, j) in [(1, 0), (3, 1)]:\n            rect = plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"none\", edgecolor=\"#328573\", lw=1.3)\n            ax.add_patch(rect)\n            rect_thick = plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"none\", edgecolor=\"#410ac8\", lw=2.0)\n            ax.add_patch(rect_thick)\n\nax.set_title(\"Activity Preferences by Age Group\")\nax.grid(True)\nax.set_facecolor('gray')\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(1, 0), (3, 1)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_acd6287ccc073a31/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_acd6287ccc073a31/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_acd6287ccc073a31/myplot.png"
    },
    {
        "id": "Heatmap_dc0894530f4485fe",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nage_groups = [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"]\nactivities = [\"Gym Visits\", \"Outdoor Activities\"]\n\ndata = np.array([[12, 35],\n                 [27, 30],\n                 [45, 25],\n                 [60, 15],\n                 [30, 5]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='YlGnBu', alpha=0.7)\n\nax.set_xticks(np.arange(len(activities)))\nax.set_yticks(np.arange(len(age_groups)))\n\nax.set_xticklabels(activities)\nax.set_yticklabels(age_groups)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(age_groups)):\n    for j in range(len(activities)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"black\")\n\nax.set_title(\"Activity Preferences by Age Group\")\nax.grid(True)\nax.set_facecolor('gray')\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #cb8dc8 with a width of 0.7 pixels. Then, update the border thickness of these cells to 1.6 pixels and modify the color to #a38ac5.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_dc0894530f4485fe/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nage_groups = [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"]\nactivities = [\"Gym Visits\", \"Outdoor Activities\"]\n\ndata = np.array([[12, 35],\n                 [27, 30],\n                 [45, 25],\n                 [60, 15],\n                 [30, 5]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='YlGnBu', alpha=0.7)\n\nax.set_xticks(np.arange(len(activities)))\nax.set_yticks(np.arange(len(age_groups)))\n\nax.set_xticklabels(activities)\nax.set_yticklabels(age_groups)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(age_groups)):\n    for j in range(len(activities)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"black\")\n        if (i, j) in [(0, 0), (2, 1), (4, 0)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#cb8dc8\", linewidth=0.7))\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#a38ac5\", linewidth=1.6, fill=False))\n\nax.set_title(\"Activity Preferences by Age Group\")\nax.grid(True)\nax.set_facecolor('gray')\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "(0, 0), (2, 1), (4, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_dc0894530f4485fe/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_dc0894530f4485fe/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_dc0894530f4485fe/myplot.png"
    },
    {
        "id": "Heatmap_4cc76c62915e782b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nart_types = [\"Sculpture\", \"Painting\", \"Photography\", \"Digital Art\", \"Conceptual Art\", \"Performance Art\"]\npopularity_index = np.array([45, 60, 20, 70, 15, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(popularity_index.reshape(1, -1), cmap='hot', alpha=0.8)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(art_types)), labels=art_types)\nax.set_yticks([])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(art_types)):\n    text = ax.text(i, 0, popularity_index[i], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Popularity Index of Different Art Types\")\nax.set_xlabel(\"Art Types\")\nax.set_ylabel(\"Popularity Index\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the font size of the annotations in the cells that contain the center point of the bounding box to 11, and change the background color of those same cells to #5dce8c.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_4cc76c62915e782b/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nart_types = [\"Sculpture\", \"Painting\", \"Photography\", \"Digital Art\", \"Conceptual Art\", \"Performance Art\"]\npopularity_index = np.array([45, 60, 20, 70, 15, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(popularity_index.reshape(1, -1), cmap='hot', alpha=0.8)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(art_types)), labels=art_types)\nax.set_yticks([])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(art_types)):\n    text_color = \"w\"\n    fontsize = 10\n    background_color = None\n\n    if i in [1, 3]:  # Modify points for \"Painting\" and \"Digital Art\"\n        fontsize = 11\n        background_color = \"#5dce8c\"\n\n    text = ax.text(i, 0, popularity_index[i], ha=\"center\", va=\"center\", color=text_color, fontsize=fontsize)\n\n    if background_color:\n        ax.add_patch(plt.Rectangle((i - 0.5, -0.5), 1, 1, facecolor=background_color, edgecolor=\"none\"))\n\nax.set_title(\"Popularity Index of Different Art Types\")\nax.set_xlabel(\"Art Types\")\nax.set_ylabel(\"Popularity Index\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,1), (0,3)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_4cc76c62915e782b/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_4cc76c62915e782b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_4cc76c62915e782b/myplot.png"
    },
    {
        "id": "Heatmap_7d3436b040274458",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create a dataframe from the provided data\ndata = {\n    \"Platform\": [\"Facebook\", \"Instagram\", \"Twitter\", \"Snapchat\", \"LinkedIn\", \"Pinterest\", \"Reddit\", \"WeChat\", \"WhatsApp\"],\n    \"2016\": [100, 80, 90, 70, 60, 50, 30, 20, 10],\n    \"2017\": [120, 110, 70, 100, 80, 75, 60, 40, 5],\n    \"2018\": [85, 130, 95, 70, 85, 55, 65, 45, 30],\n}\ndf = pd.DataFrame(data)\nplatforms = df[\"Platform\"].values\nyears = df.columns[1:]\n\n# Convert the dataframe to a 2D array\nvalues = df[years].values\n\nfig, ax = plt.subplots()\n\n# Set the color of the figure to white\nfig.patch.set_facecolor('white')\n\n# Show the heatmap\nim = ax.imshow(values, cmap=\"YlGnBu\", alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\nax.set_yticks(np.arange(len(platforms)), labels=platforms)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(platforms)):\n    for j in range(len(years)):\n        text = ax.text(j, i, values[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set labels and title\nax.set_title(\"Social Media Usage Over Years\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Platforms\")\n\n# Remove the grid\nax.grid(False)\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the font size of the annotations in the cells that contain the center point of the bounding box to 16, and change the edge color of those same cells to #b6fceb.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_7d3436b040274458/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a dataframe from the provided data\ndata = {\n    \"Platform\": [\"Facebook\", \"Instagram\", \"Twitter\", \"Snapchat\", \"LinkedIn\", \"Pinterest\", \"Reddit\", \"WeChat\", \"WhatsApp\"],\n    \"2016\": [100, 80, 90, 70, 60, 50, 30, 20, 10],\n    \"2017\": [120, 110, 70, 100, 80, 75, 60, 40, 5],\n    \"2018\": [85, 130, 95, 70, 85, 55, 65, 45, 30],\n}\ndf = pd.DataFrame(data)\nplatforms = df[\"Platform\"].values\nyears = df.columns[1:]\n\n# Convert the dataframe to a 2D array\nvalues = df[years].values\n\nfig, ax = plt.subplots()\n\n# Set the color of the figure to white\nfig.patch.set_facecolor('white')\n\n# Show the heatmap\nim = ax.imshow(values, cmap=\"YlGnBu\", alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\nax.set_yticks(np.arange(len(platforms)), labels=platforms)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(platforms)):\n    for j in range(len(years)):\n        text = ax.text(j, i, values[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        if (i, j) in [(0, 0), (2, 1), (4, 2)]:\n            text.set_fontsize(16)\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#b6fceb\", facecolor=\"none\", lw=2))\n\n# Set labels and title\nax.set_title(\"Social Media Usage Over Years\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Platforms\")\n\n# Remove the grid\nax.grid(False)\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 0), (2, 1), (4, 2)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_7d3436b040274458/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_7d3436b040274458/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_7d3436b040274458/myplot.png"
    },
    {
        "id": "Heatmap_0eddbb08f6e91e30",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndisorders = [\"Anxiety Disorders\", \"Mood Disorders\", \"Schizophrenia\", \"Mood Disorders\", \"Schizophrenia\", \"Anxiety Disorders\"]\nprevalence = [12, 15, 8, 10, 6, 18]\ndata = np.array([12, 15, 8, 10, 6, 18])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data.reshape(3,2), cmap='plasma', alpha=0.8)  # Changed colormap to 'plasma'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(2), labels=[\"First\", \"Second\"])\nax.set_yticks(np.arange(3), labels=list(set(disorders)))\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(set(disorders))):\n    for j in range(2):\n        text = ax.text(j, i, data[i*2+j],\n                       ha=\"center\", va=\"center\", color=\"black\")  # Changed text color to black\n\nax.set_title(\"Prevalence of Mental Health Disorders\")\nax.set_xlabel(\"Measurement\")\nax.set_ylabel(\"Mental Health Disorder\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the background color of the cells that contain the center point of the bounding box to #604690.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_0eddbb08f6e91e30/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndisorders = [\"Anxiety Disorders\", \"Mood Disorders\", \"Schizophrenia\", \"Mood Disorders\", \"Schizophrenia\", \"Anxiety Disorders\"]\nprevalence = [12, 15, 8, 10, 6, 18]\ndata = np.array([12, 15, 8, 10, 6, 18])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data.reshape(3, 2), cmap='plasma', alpha=0.8)  # Changed colormap to 'plasma'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(2), labels=[\"First\", \"Second\"])\nax.set_yticks(np.arange(3), labels=list(set(disorders)))\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(set(disorders))):\n    for j in range(2):\n        text = ax.text(j, i, data[i*2+j],\n                       ha=\"center\", va=\"center\", color=\"black\")  # Changed text color to black\n        if (i, j) in [(0, 1), (1, 0)]:  # Selected specific cells to modify\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"#604690\", edgecolor=\"black\", lw=1))\n\nax.set_title(\"Prevalence of Mental Health Disorders\")\nax.set_xlabel(\"Measurement\")\nax.set_ylabel(\"Mental Health Disorder\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 1), (1, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_0eddbb08f6e91e30/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_0eddbb08f6e91e30/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_0eddbb08f6e91e30/myplot.png"
    },
    {
        "id": "Heatmap_09895a913f455534",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncountries = [\"USA\", \"China\", \"India\", \"Brazil\", \"Australia\"]\nyears = [\"Year 1\", \"Year 2\", \"Year 3\"]\n\ndata = np.array([[100, 200, 170],\n                 [150, 160, 320],\n                 [120, 140, 120],\n                 [200, 210, 160],\n                 [80, 70, 150]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, alpha=0.7, cmap='viridis')\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\nax.set_yticks(np.arange(len(countries)))\nax.set_yticklabels(countries)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(countries)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Data of Countries Over Years\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Countries\")\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the annotation text in the cells that contain the center point of the bounding box to #3b6529.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_09895a913f455534/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ncountries = [\"USA\", \"China\", \"India\", \"Brazil\", \"Australia\"]\nyears = [\"Year 1\", \"Year 2\", \"Year 3\"]\n\ndata = np.array([[100, 200, 170],\n                 [150, 160, 320],\n                 [120, 140, 120],\n                 [200, 210, 160],\n                 [80, 70, 150]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, alpha=0.7, cmap='viridis')\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\nax.set_yticks(np.arange(len(countries)))\nax.set_yticklabels(countries)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(countries)):\n    for j in range(len(years)):\n        if (i, j) in [(0, 0), (1, 2), (4, 1)]:\n            text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"#3b6529\")\n        else:\n            text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Data of Countries Over Years\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Countries\")\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "[(0, 0), (1, 2), (4, 1)]",
        "Test_image": "./test_dataset/Heatmap/Heatmap_09895a913f455534/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_09895a913f455534/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_09895a913f455534/myplot.png"
    },
    {
        "id": "Heatmap_7fc7238a7232081b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nyears = [\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"]\nsubscriptions = [\"Cable TV Subscriptions\", \"Online Streaming Subscriptions\"]\n\ndata = np.array([[100, 120, 150, 200, 220, 200, 180, 160, 140],\n                 [5, 8, 10, 20, 25, 30, 50, 100, 150]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(subscriptions)))\nax.set_xticklabels(years)\nax.set_yticklabels(subscriptions)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(subscriptions)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Comparison of Cable TV and Online Streaming Subscriptions (2000-2008)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Type of Subscription\")\n\n# Make grid visible and set background color\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #bf7225, and set the border thickness to 2.2 pixels. This will replace the previous settings of #fb4f38 and a width of 1.8 pixels.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_7fc7238a7232081b/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nyears = [\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"]\nsubscriptions = [\"Cable TV Subscriptions\", \"Online Streaming Subscriptions\"]\n\ndata = np.array([[100, 120, 150, 200, 220, 200, 180, 160, 140],\n                 [5, 8, 10, 20, 25, 30, 50, 100, 150]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(subscriptions)))\nax.set_xticklabels(years)\nax.set_yticklabels(subscriptions)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(subscriptions)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        \n        # Modify specific cells.\n        if (i, j) in [(0, 3), (1, 7), (0, 6)]:  # Target points\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor='none', edgecolor=\"#fb4f38\", lw=1.8))\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor='none', edgecolor=\"#bf7225\", lw=2.2))\n\nax.set_title(\"Comparison of Cable TV and Online Streaming Subscriptions (2000-2008)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Type of Subscription\")\n\n# Make grid visible and set background color\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 3), (1, 7), (0, 6)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_7fc7238a7232081b/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_7fc7238a7232081b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_7fc7238a7232081b/myplot.png"
    },
    {
        "id": "Heatmap_6b25930d7ab51b00",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nyears = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"]\ncategories = [\"Qubits\", \"Quantum Supremacy\", \"Quantum Volume\", \"Quantum Computers Sold\"]\ndata = np.array([[2, 0, 4, 0],\n                 [6, 0, 16, 1],\n                 [20, 0, 80, 3],\n                 [53, 1, 2128, 5],\n                 [72, 1, 373248, 7],\n                 [100, 1, 1000000, 10]])\n\n# create figure and axes\nfig, ax = plt.subplots()\n\n# set light gray background color\nax.set_facecolor(\"lightgray\")\n\n# plot heatmap\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# set ticks and labels\nax.set_xticks(np.arange(len(categories)), labels=categories)\nax.set_yticks(np.arange(len(years)), labels=years)\n\n# rotate x-axis labels\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# add text annotations\nfor i in range(len(years)):\n    for j in range(len(categories)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# set title\nax.set_title(\"Quantum Computing Development (2016-2021)\")\n\n# add grid\nax.grid(True)\n\n# save figure\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Increase the border thickness of the cells that contain the center point of the bounding box to 1.5 pixels and change the border color to #017b1c. Also, update the annotation text color in these cells to #cd3955.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_6b25930d7ab51b00/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# data\nyears = [\"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"]\ncategories = [\"Qubits\", \"Quantum Supremacy\", \"Quantum Volume\", \"Quantum Computers Sold\"]\ndata = np.array([[2, 0, 4, 0],\n                 [6, 0, 16, 1],\n                 [20, 0, 80, 3],\n                 [53, 1, 2128, 5],\n                 [72, 1, 373248, 7],\n                 [100, 1, 1000000, 10]])\n\n# create figure and axes\nfig, ax = plt.subplots()\n\n# set light gray background color\nax.set_facecolor(\"lightgray\")\n\n# plot heatmap\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# set ticks and labels\nax.set_xticks(np.arange(len(categories)), labels=categories)\nax.set_yticks(np.arange(len(years)), labels=years)\n\n# rotate x-axis labels\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# add text annotations\nfor i in range(len(years)):\n    for j in range(len(categories)):\n        text_color = \"w\"\n        if (i, j) in [(2, 2), (4, 3), (5, 0)]:\n            text_color = \"#cd3955\"\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#017b1c\", facecolor=\"none\", linewidth=1.5))\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=text_color)\n\n# set title\nax.set_title(\"Quantum Computing Development (2016-2021)\")\n\n# add grid\nax.grid(True)\n\n# save figure\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(2, 2), (4, 3), (5, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_6b25930d7ab51b00/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_6b25930d7ab51b00/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_6b25930d7ab51b00/myplot.png"
    },
    {
        "id": "Heatmap_b61fbb775932db4f",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data\nregions = [\"North America\", \"Latin America\", \"Europe\", \"Africa\",\"Asia\", \"Australia\", \"Antarctica\", \"East Asia\", \"Middle East\"]\nhome_schooling_rate = np.array([[5, 8, 10, 3, 7, 11, 1, 6, 4]])\n\nfig, ax = plt.subplots()\n\n# using heatmap\nim = ax.imshow(home_schooling_rate, cmap='YlOrRd', alpha=0.7)\n\n# setting ticks\nax.set_xticks(np.arange(len(regions)))\nax.set_yticks(np.arange(1))\nax.set_xticklabels(regions)\nax.set_yticklabels(['Home schooling rate'])\n\n# rotating the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# loop over data dimensions and create text annotations\nfor i in range(len(home_schooling_rate[0])):\n    text = ax.text(i, 0, home_schooling_rate[0][i], ha=\"center\", va=\"center\", color=\"black\")\n\n# setting title and labels\nax.set_title(\"Home schooling rate by region\")\nax.set_xlabel(\"Region\")\nax.set_ylabel(\"Home schooling rate\")\n\n# adding grid and changing the background color\nax.grid(True)\nax.set_facecolor(\"lightgray\")\n\n# legend\ncbar = plt.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Home schooling rate', rotation=-90, va=\"bottom\")\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the edge color of the cells that contain the center point of the bounding box to #671bb1, and update the annotation text color in these cells to #64bd84.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_b61fbb775932db4f/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# data\nregions = [\"North America\", \"Latin America\", \"Europe\", \"Africa\",\"Asia\", \"Australia\", \"Antarctica\", \"East Asia\", \"Middle East\"]\nhome_schooling_rate = np.array([[5, 8, 10, 3, 7, 11, 1, 6, 4]])\n\nfig, ax = plt.subplots()\n\n# using heatmap\nim = ax.imshow(home_schooling_rate, cmap='YlOrRd', alpha=0.7)\n\n# setting ticks\nax.set_xticks(np.arange(len(regions)))\nax.set_yticks(np.arange(1))\nax.set_xticklabels(regions)\nax.set_yticklabels(['Home schooling rate'])\n\n# rotating the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# loop over data dimensions and create text annotations\nfor i in range(len(home_schooling_rate[0])):\n    text_color = \"black\"\n    if i in [2, 5, 7]:  # Target points: Europe, Australia, East Asia\n        ax.add_patch(plt.Rectangle((i - 0.5, -0.5), 1, 1, facecolor=\"none\", edgecolor=\"#671bb1\", lw=2))\n        text_color = \"#64bd84\"\n    text = ax.text(i, 0, home_schooling_rate[0][i], ha=\"center\", va=\"center\", color=text_color)\n\n# setting title and labels\nax.set_title(\"Home schooling rate by region\")\nax.set_xlabel(\"Region\")\nax.set_ylabel(\"Home schooling rate\")\n\n# adding grid and changing the background color\nax.grid(True)\nax.set_facecolor(\"lightgray\")\n\n# legend\ncbar = plt.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Home schooling rate', rotation=-90, va=\"bottom\")\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,2), (0,5), (0,7)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_b61fbb775932db4f/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_b61fbb775932db4f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_b61fbb775932db4f/myplot.png"
    },
    {
        "id": "Heatmap_70b1be7a92a14b4c",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndemographics = [\"Teenagers\", \"Adults\", \"Elderly\", \"Infants\"]\nhours_of_sleep = np.array([6.5, 7.3, 5.2, 14.8])\n\nfig, ax = plt.subplots()\n\nax.set_facecolor('white')  # Change background to white\n\nim = ax.imshow(hours_of_sleep.reshape(1,4), cmap='plasma', alpha=0.7)  # Change colormap to 'plasma'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(demographics)))\nax.set_yticks([])\n\nax.set_xticklabels(demographics)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(demographics)):\n    text = ax.text(i, 0, hours_of_sleep[i],\n                   ha=\"center\", va=\"center\", color=\"black\")  # Change text color to black\n\nax.set_title(\"Hours of Sleep by Age Group\")\nax.set_xlabel('Demographics')\nax.set_ylabel('Hours of Sleep')\n\nfig.tight_layout()\nplt.grid(visible=True)\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the background color of the cells that contain the center point of the bounding box to #58199f, and set their edge color to #8321ec.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_70b1be7a92a14b4c/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndemographics = [\"Teenagers\", \"Adults\", \"Elderly\", \"Infants\"]\nhours_of_sleep = np.array([6.5, 7.3, 5.2, 14.8])\n\nfig, ax = plt.subplots()\n\nax.set_facecolor('white')  # Change background to white\n\nim = ax.imshow(hours_of_sleep.reshape(1, 4), cmap='plasma', alpha=0.7)  # Change colormap to 'plasma'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(demographics)))\nax.set_yticks([])\n\nax.set_xticklabels(demographics)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(demographics)):\n    text = ax.text(i, 0, hours_of_sleep[i],\n                   ha=\"center\", va=\"center\", color=\"black\")  # Change text color to black\n    if i in [1, 3]:  # Highlight specific cells\n        ax.add_patch(plt.Rectangle((i - 0.5, -0.5), 1, 1, facecolor=\"#58199f\", edgecolor=\"#8321ec\", lw=2))\n\nax.set_title(\"Hours of Sleep by Age Group\")\nax.set_xlabel('Demographics')\nax.set_ylabel('Hours of Sleep')\n\nfig.tight_layout()\nplt.grid(visible=True)\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,1), (0,3)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_70b1be7a92a14b4c/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_70b1be7a92a14b4c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_70b1be7a92a14b4c/myplot.png"
    },
    {
        "id": "Heatmap_d96a5738e4f02f70",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [\"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\ngenres = [\"Pop\", \"Rock\", \"Classical\"]\nsales = np.array([\n    [100, 80, 120],\n    [120, 70, 130],\n    [150, 60, 140],\n    [200, 50, 100],\n    [180, 90, 120],\n    [190, 80, 110],\n    [210, 70, 90],\n    [230, 150, 80],\n    [240, 160, 70]\n])\n\nfig, ax = plt.subplots()\nim = ax.imshow(sales, cmap=\"viridis\")  # Changed colormap to \"viridis\" and removed alpha\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(genres)))\nax.set_yticks(np.arange(len(years)))\nax.set_xticklabels(genres)\nax.set_yticklabels(years)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(years)):\n    for j in range(len(genres)):\n        text = ax.text(j, i, sales[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Adding grid, title and labels\nax.grid(True)\nax.set_facecolor('lightgray')\nax.set_title(\"Music Genre Sales Over the Years\")\nax.set_xlabel(\"Genre\")\nax.set_ylabel(\"Year\")\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the background color of the cells that contain the center point of the bounding box to #e051f1, and remove the annotations for those specific cells in the heatmap.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_d96a5738e4f02f70/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [\"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\ngenres = [\"Pop\", \"Rock\", \"Classical\"]\nsales = np.array([\n    [100, 80, 120],\n    [120, 70, 130],\n    [150, 60, 140],\n    [200, 50, 100],\n    [180, 90, 120],\n    [190, 80, 110],\n    [210, 70, 90],\n    [230, 150, 80],\n    [240, 160, 70]\n])\n\nfig, ax = plt.subplots()\nim = ax.imshow(sales, cmap=\"viridis\")\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(genres)))\nax.set_yticks(np.arange(len(years)))\nax.set_xticklabels(genres)\nax.set_yticklabels(years)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(years)):\n    for j in range(len(genres)):\n        if (i, j) in [(0, 0), (3, 1), (8, 2)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"#e051f1\", edgecolor=\"black\", lw=2))\n        else:\n            text = ax.text(j, i, sales[i, j],\n                           ha=\"center\", va=\"center\", color=\"w\")\n\n# Adding grid, title and labels\nax.grid(True)\nax.set_facecolor('lightgray')\nax.set_title(\"Music Genre Sales Over the Years\")\nax.set_xlabel(\"Genre\")\nax.set_ylabel(\"Year\")\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 0), (3, 1), (8, 2)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_d96a5738e4f02f70/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_d96a5738e4f02f70/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_d96a5738e4f02f70/myplot.png"
    },
    {
        "id": "Heatmap_f891e25c7edd77dc",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nart_types = [\"Sculpture\", \"Painting\", \"Photography\", \"Digital Art\", \"Conceptual Art\", \"Performance Art\"]\npopularity_index = np.array([45, 60, 20, 70, 15, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(popularity_index.reshape(1, -1), cmap='hot', alpha=0.8)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(art_types)), labels=art_types)\nax.set_yticks([])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(art_types)):\n    text = ax.text(i, 0, popularity_index[i], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Popularity Index of Different Art Types\")\nax.set_xlabel(\"Art Types\")\nax.set_ylabel(\"Popularity Index\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Increase the border thickness of the cells that contain the center point of the bounding box to 2.6 pixels and change the border color to #a9258d.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_f891e25c7edd77dc/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nart_types = [\"Sculpture\", \"Painting\", \"Photography\", \"Digital Art\", \"Conceptual Art\", \"Performance Art\"]\npopularity_index = np.array([45, 60, 20, 70, 15, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(popularity_index.reshape(1, -1), cmap='hot', alpha=0.8)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(art_types)), labels=art_types)\nax.set_yticks([])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(art_types)):\n    text = ax.text(i, 0, popularity_index[i], ha=\"center\", va=\"center\", color=\"w\")\n    if i in [1, 3, 5]:  # Target selected points: \"Painting\", \"Digital Art\", \"Performance Art\"\n        ax.add_patch(plt.Rectangle((i - 0.5, -0.5), 1, 1, fill=False, edgecolor=\"#a9258d\", linewidth=2.6))\n\nax.set_title(\"Popularity Index of Different Art Types\")\nax.set_xlabel(\"Art Types\")\nax.set_ylabel(\"Popularity Index\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "(0,1), (0,3), (0,5)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_f891e25c7edd77dc/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_f891e25c7edd77dc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_f891e25c7edd77dc/myplot.png"
    },
    {
        "id": "Heatmap_561704713f232c73",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data \nwildlife = [\"Deer\", \"Bear\", \"Squirrel\", \"Bird\", \"Fox\"]\nyears = [\"1970\", \"2020\"]\n\nimpact = np.array([[80, 55],\n                   [50, 40],\n                   [70, 75],\n                   [80, 60],\n                   [25, 35]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(impact, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\n\nax.set_yticks(np.arange(len(wildlife)))\nax.set_yticklabels(wildlife)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(wildlife)):\n    for j in range(len(years)):\n        text = ax.text(j, i, impact[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set the title and labels\nax.set_title(\"Urbanization Impact on Wildlife\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Wildlife\")\n\n# Set the facecolor\nax.set_facecolor('lightgray')\n\n# Add grid\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the font size of the annotations in the cells that contain the center point of the bounding box to 13.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_561704713f232c73/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data \nwildlife = [\"Deer\", \"Bear\", \"Squirrel\", \"Bird\", \"Fox\"]\nyears = [\"1970\", \"2020\"]\n\nimpact = np.array([[80, 55],\n                   [50, 40],\n                   [70, 75],\n                   [80, 60],\n                   [25, 35]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(impact, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\n\nax.set_yticks(np.arange(len(wildlife)))\nax.set_yticklabels(wildlife)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(wildlife)):\n    for j in range(len(years)):\n        font_size = 13 if (i, j) in [(0, 0), (2, 1), (4, 0)] else 10\n        text = ax.text(j, i, impact[i, j], ha=\"center\", va=\"center\", color=\"w\", fontsize=font_size)\n\n# Set the title and labels\nax.set_title(\"Urbanization Impact on Wildlife\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Wildlife\")\n\n# Set the facecolor\nax.set_facecolor('lightgray')\n\n# Add grid\nax.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 0), (2, 1), (4, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_561704713f232c73/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_561704713f232c73/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_561704713f232c73/myplot.png"
    },
    {
        "id": "Heatmap_d93b0101b1783a27",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [\"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\ngenres = [\"Pop\", \"Rock\", \"Classical\"]\nsales = np.array([\n    [100, 80, 120],\n    [120, 70, 130],\n    [150, 60, 140],\n    [200, 50, 100],\n    [180, 90, 120],\n    [190, 80, 110],\n    [210, 70, 90],\n    [230, 150, 80],\n    [240, 160, 70]\n])\n\nfig, ax = plt.subplots()\nim = ax.imshow(sales, cmap=\"viridis\")  # Changed colormap to \"viridis\" and removed alpha\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(genres)))\nax.set_yticks(np.arange(len(years)))\nax.set_xticklabels(genres)\nax.set_yticklabels(years)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(years)):\n    for j in range(len(genres)):\n        text = ax.text(j, i, sales[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Adding grid, title and labels\nax.grid(True)\nax.set_facecolor('lightgray')\nax.set_title(\"Music Genre Sales Over the Years\")\nax.set_xlabel(\"Genre\")\nax.set_ylabel(\"Year\")\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the background color of the cells that contain the center point of the bounding box to #4ff9b1, and remove the annotations for the data points in those cells.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_d93b0101b1783a27/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [\"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\ngenres = [\"Pop\", \"Rock\", \"Classical\"]\nsales = np.array([\n    [100, 80, 120],\n    [120, 70, 130],\n    [150, 60, 140],\n    [200, 50, 100],\n    [180, 90, 120],\n    [190, 80, 110],\n    [210, 70, 90],\n    [230, 150, 80],\n    [240, 160, 70]\n])\n\nfig, ax = plt.subplots()\nim = ax.imshow(sales, cmap=\"viridis\")  # Changed colormap to \"viridis\"\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(genres)))\nax.set_yticks(np.arange(len(years)))\nax.set_xticklabels(genres)\nax.set_yticklabels(years)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(years)):\n    for j in range(len(genres)):\n        if (i, j) in [(3, 1), (5, 2), (8, 0)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"#4ff9b1\", edgecolor=\"none\"))\n        else:\n            text = ax.text(j, i, sales[i, j],\n                           ha=\"center\", va=\"center\", color=\"w\")\n\n# Adding grid, title and labels\nax.grid(True)\nax.set_facecolor('lightgray')\nax.set_title(\"Music Genre Sales Over the Years\")\nax.set_xlabel(\"Genre\")\nax.set_ylabel(\"Year\")\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(3, 1), (5, 2), (8, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_d93b0101b1783a27/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_d93b0101b1783a27/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_d93b0101b1783a27/myplot.png"
    },
    {
        "id": "Heatmap_f0264b77ed66ca93",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nvehicle_types = [\"Sedans\", \"SUVs\", \"Electric Vehicles\", \"Trucks\"]\nyears = [\"2010\", \"2015\", \"2020\"]\nsales = np.array([[50000, 60000, 35000],\n                  [40000, 35000, 70000],\n                  [500, 1500, 5000],\n                  [70000, 65000, 67000]])\n\n# Create Figure and Axes instances\nfig, ax = plt.subplots()\n\n# Display the image\nim = ax.imshow(sales, cmap='viridis', alpha=0.7)\n\n# Configure axes\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(vehicle_types)))\nax.set_xticklabels(years)\nax.set_yticklabels(vehicle_types)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Annotate the values\nfor i in range(len(vehicle_types)):\n    for j in range(len(years)):\n        text = ax.text(j, i, sales[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set the title and labels\nax.set_title(\"Vehicle Sales over Time\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Vehicle Type\")\n\n# Set background color and disable grid\nax.set_facecolor('lightblue')  # Change background color to light blue\nax.grid(False)  # Disable grids\n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the edge color of the cells that contain the center point of the bounding box to #f8e1a7, and change the color of the annotation text in those cells to #f4d939.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_f0264b77ed66ca93/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nvehicle_types = [\"Sedans\", \"SUVs\", \"Electric Vehicles\", \"Trucks\"]\nyears = [\"2010\", \"2015\", \"2020\"]\nsales = np.array([[50000, 60000, 35000],\n                  [40000, 35000, 70000],\n                  [500, 1500, 5000],\n                  [70000, 65000, 67000]])\n\n# Create Figure and Axes instances\nfig, ax = plt.subplots()\n\n# Display the image\nim = ax.imshow(sales, cmap='viridis', alpha=0.7)\n\n# Configure axes\nax.set_xticks(np.arange(len(years)))\nax.set_yticks(np.arange(len(vehicle_types)))\nax.set_xticklabels(years)\nax.set_yticklabels(vehicle_types)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Annotate the values\nfor i in range(len(vehicle_types)):\n    for j in range(len(years)):\n        if (i, j) in [(0, 2), (1, 1), (3, 0)]:\n            # Highlight specific cells\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#f8e1a7\", facecolor='none', lw=2))\n            # Change annotation text color for specific cells\n            text = ax.text(j, i, sales[i, j], ha=\"center\", va=\"center\", color=\"#f4d939\")\n        else:\n            text = ax.text(j, i, sales[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set the title and labels\nax.set_title(\"Vehicle Sales over Time\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Vehicle Type\")\n\n# Set background color and disable grid\nax.set_facecolor('lightblue')  # Change background color to light blue\nax.grid(False)  # Disable grids\n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 2), (1, 1), (3, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_f0264b77ed66ca93/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_f0264b77ed66ca93/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_f0264b77ed66ca93/myplot.png"
    },
    {
        "id": "Heatmap_e6e55707b07a6e4b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nage_groups = [\"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-90\", \"90-100\"]\nactivities = [\"Running\", \"Yoga\", \"Weightlifting\"]\n\ndata = np.array([[140, 180, 200],\n                 [160, 220, 210],\n                 [180, 210, 190],\n                 [210, 205, 205],\n                 [200, 180, 215],\n                 [180, 160, 210],\n                 [220, 140, 190],\n                 [180, 120, 160]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(activities)), labels=activities)\nax.set_yticks(np.arange(len(age_groups)), labels=age_groups)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(age_groups)):\n    for j in range(len(activities)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Activity participation by age group\")\nax.set_xlabel(\"Activities\")\nax.set_ylabel(\"Age groups\")\nax.grid(True)\nax.set_facecolor('lightgray')\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the edge color of the cells that contain the center point of the bounding box to #569081. For these same cells, increase the border thickness to 2.8 pixels and change the border color to #0225c2.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_e6e55707b07a6e4b/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nage_groups = [\"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-90\", \"90-100\"]\nactivities = [\"Running\", \"Yoga\", \"Weightlifting\"]\n\ndata = np.array([[140, 180, 200],\n                 [160, 220, 210],\n                 [180, 210, 190],\n                 [210, 205, 205],\n                 [200, 180, 215],\n                 [180, 160, 210],\n                 [220, 140, 190],\n                 [180, 120, 160]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(activities)), labels=activities)\nax.set_yticks(np.arange(len(age_groups)), labels=age_groups)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(age_groups)):\n    for j in range(len(activities)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        # Highlight specific cells\n        if (i, j) in [(3, 1), (5, 2), (7, 0)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#569081\", linewidth=2.8, facecolor='none'))\nax.set_title(\"Activity participation by age group\")\nax.set_xlabel(\"Activities\")\nax.set_ylabel(\"Age groups\")\nax.grid(True)\nax.set_facecolor('lightgray')\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(3, 1), (5, 2), (7, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_e6e55707b07a6e4b/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_e6e55707b07a6e4b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_e6e55707b07a6e4b/myplot.png"
    },
    {
        "id": "Heatmap_3e0b85a88cc5a4a0",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nage_groups = [\"Under 18\", \"18-24\", \"25-34\", \"35-44\", \"45 and over\"]\ntimes_of_day = [\"Morning Viewers\", \"Afternoon Viewers\", \"Evening Viewers\"]\n\nviewers = np.array([[100, 85, 90],\n                    [80, 70, 110],\n                    [70, 90, 105],\n                    [60, 75, 95],\n                    [50, 60, 80]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(viewers, cmap='plasma', alpha=0.7)  # Changed colormap to 'plasma'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(times_of_day)), labels=times_of_day)\nax.set_yticks(np.arange(len(age_groups)), labels=age_groups)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\nax.set_facecolor('lightgray')\nax.grid(True)\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(age_groups)):\n    for j in range(len(times_of_day)):\n        text = ax.text(j, i, viewers[i, j],\n                       ha=\"center\", va=\"center\", color=\"black\")  # Changed text color to black\n\nax.set_title(\"TV Viewership by Age Group and Time of Day\")\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Remove the annotations from the cells that contain the center point of the bounding box in the heatmap. For those same cells, increase the border thickness to 1.6 pixels and change the border color to #b76a9f.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_3e0b85a88cc5a4a0/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nage_groups = [\"Under 18\", \"18-24\", \"25-34\", \"35-44\", \"45 and over\"]\ntimes_of_day = [\"Morning Viewers\", \"Afternoon Viewers\", \"Evening Viewers\"]\n\nviewers = np.array([[100, 85, 90],\n                    [80, 70, 110],\n                    [70, 90, 105],\n                    [60, 75, 95],\n                    [50, 60, 80]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(viewers, cmap='plasma', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(times_of_day)), labels=times_of_day)\nax.set_yticks(np.arange(len(age_groups)), labels=age_groups)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\nax.set_facecolor('lightgray')\nax.grid(True)\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(age_groups)):\n    for j in range(len(times_of_day)):\n        if (i, j) in [(1, 2), (3, 0), (4, 1)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#b76a9f\", lw=1.6, facecolor='none'))\n        else:\n            text = ax.text(j, i, viewers[i, j],\n                           ha=\"center\", va=\"center\", color=\"black\")\n\nax.set_title(\"TV Viewership by Age Group and Time of Day\")\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(1, 2), (3, 0), (4, 1)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_3e0b85a88cc5a4a0/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_3e0b85a88cc5a4a0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_3e0b85a88cc5a4a0/myplot.png"
    },
    {
        "id": "Heatmap_fa59dd5b6443f662",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016]\norganic_farming = [1000, 1250, 1500, 1750, 2500, 2000, 1500, 3000, 3500]\npercentage_of_organic_farming = [0.5, 0.65, 0.67, 0.7, 1.5, 1.2, 0.9, 1.8, 2.1]\n\n# Convert the data to a 2D array\ndata = np.array([organic_farming, percentage_of_organic_farming])\n\n# Create a figure and axes\nfig, ax = plt.subplots()\n\n# Show the 2D array data as an image, with the alpha parameter set over 0.6, and using a colormap\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# We want to show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\n\n# Set the labels for the y axis\nax.set_yticks(np.arange(len(['Organic Farming', 'Percentage of Organic Farming'])), labels=['Organic Farming', 'Percentage of Organic Farming'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(['Organic Farming', 'Percentage of Organic Farming'])):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set the title\nax.set_title(\"Organic Farming (in hectares) and Percentage of Organic Farming Over the Years\")\n\n# Add a grid and set a light gray background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Make sure the layout is tight (no unnecessary padding)\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #afd55e, and set the border width to 2.0.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_fa59dd5b6443f662/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016]\norganic_farming = [1000, 1250, 1500, 1750, 2500, 2000, 1500, 3000, 3500]\npercentage_of_organic_farming = [0.5, 0.65, 0.67, 0.7, 1.5, 1.2, 0.9, 1.8, 2.1]\n\n# Convert the data to a 2D array\ndata = np.array([organic_farming, percentage_of_organic_farming])\n\n# Create a figure and axes\nfig, ax = plt.subplots()\n\n# Show the 2D array data as an image, with the alpha parameter set over 0.6, and using a colormap\nim = ax.imshow(data, cmap='viridis', alpha=0.7)\n\n# We want to show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)), labels=years)\n\n# Set the labels for the y axis\nax.set_yticks(np.arange(len(['Organic Farming', 'Percentage of Organic Farming'])), labels=['Organic Farming', 'Percentage of Organic Farming'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(['Organic Farming', 'Percentage of Organic Farming'])):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        if (i, j) in [(0, 4), (1, 7), (0, 8)]:  # Selected cells\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#afd55e\", linewidth=2.0, facecolor=\"none\"))\n\n# Set the title\nax.set_title(\"Organic Farming (in hectares) and Percentage of Organic Farming Over the Years\")\n\n# Add a grid and set a light gray background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Make sure the layout is tight (no unnecessary padding)\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 4), (1, 7), (0, 8)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_fa59dd5b6443f662/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_fa59dd5b6443f662/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_fa59dd5b6443f662/myplot.png"
    },
    {
        "id": "Heatmap_32b45f863f136cba",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nprofessions = [\"Teacher\", \"Doctor\", \"Software Developer\", \n               \"Construction Worker\", \"Nurse\", \"Chef\", \n               \"Lawyer\", \"Police Officer\", \"Retail Worker\"]\n\nweeks = [\"Week 1\", \"Week 2\"]\n\nhours = np.array([[40, 44], [50, 75], [45, 47], [60, 42], \n                  [48, 50], [50, 50], [55, 30], [60, 60], [35, 35]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(hours, cmap='viridis', alpha=0.7)\n\nax.set_xticks(np.arange(len(weeks)))\nax.set_yticks(np.arange(len(professions)))\n\nax.set_xticklabels(weeks)\nax.set_yticklabels(professions)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(professions)):\n    for j in range(len(weeks)):\n        text = ax.text(j, i, hours[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        \nax.set_title(\"Hours worked by different professions\")\nax.set_xlabel(\"Week\")\nax.set_ylabel(\"Profession\")\n\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the font size of the annotations for the cells that do not contain the center point of the bounding box to 16, and remove the annotations from those same cells in the heatmap.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_32b45f863f136cba/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nprofessions = [\"Teacher\", \"Doctor\", \"Software Developer\", \n               \"Construction Worker\", \"Nurse\", \"Chef\", \n               \"Lawyer\", \"Police Officer\", \"Retail Worker\"]\n\nweeks = [\"Week 1\", \"Week 2\"]\n\nhours = np.array([[40, 44], [50, 75], [45, 47], [60, 42], \n                  [48, 50], [50, 50], [55, 30], [60, 60], [35, 35]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(hours, cmap='viridis', alpha=0.7)\n\nax.set_xticks(np.arange(len(weeks)))\nax.set_yticks(np.arange(len(professions)))\n\nax.set_xticklabels(weeks)\nax.set_yticklabels(professions)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(professions)):\n    for j in range(len(weeks)):\n        if (i, j) in [(1, 1), (3, 0), (6, 1)]:\n            # Delete annotations for these points\n            continue\n        else:\n            text = ax.text(j, i, hours[i, j], ha=\"center\", va=\"center\", color=\"w\", fontsize=16)\n        \nax.set_title(\"Hours worked by different professions\")\nax.set_xlabel(\"Week\")\nax.set_ylabel(\"Profession\")\n\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(1, 1), (3, 0), (6, 1)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_32b45f863f136cba/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_32b45f863f136cba/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_32b45f863f136cba/myplot.png"
    },
    {
        "id": "Heatmap_a9e523c34518532f",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nyears = [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"]\nvehicle_types = [\"Compact Cars\", \"SUVs\", \"Trucks\"]\n\nsales = np.array([[1000, 1200, 1400],\n                  [1200, 1100, 1300],\n                  [1400, 1000, 1200],\n                  [1600, 1400, 1100],\n                  [1800, 1600, 1000],\n                  [2000, 1800, 1300],\n                  [1600, 2000, 1500],\n                  [1700, 1500, 1600],\n                  [1900, 1300, 1400]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(sales, cmap='hot', alpha=0.7)\n\nax.set_xticks(np.arange(len(vehicle_types)))\nax.set_yticks(np.arange(len(years)))\nax.set_xticklabels(vehicle_types)\nax.set_yticklabels(years)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(years)):\n    for j in range(len(vehicle_types)):\n        text = ax.text(j, i, sales[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Sales of Different Vehicle Types (in units/year)\")\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Year')\nax.grid(True)\nax.set_facecolor('gray')\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Remove the annotations from the cells that contain the center point of the bounding box in the heatmap, and change the annotation text color for those cells to #d94a5b.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_a9e523c34518532f/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nyears = [\"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"]\nvehicle_types = [\"Compact Cars\", \"SUVs\", \"Trucks\"]\n\nsales = np.array([[1000, 1200, 1400],\n                  [1200, 1100, 1300],\n                  [1400, 1000, 1200],\n                  [1600, 1400, 1100],\n                  [1800, 1600, 1000],\n                  [2000, 1800, 1300],\n                  [1600, 2000, 1500],\n                  [1700, 1500, 1600],\n                  [1900, 1300, 1400]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(sales, cmap='hot', alpha=0.7)\n\nax.set_xticks(np.arange(len(vehicle_types)))\nax.set_yticks(np.arange(len(years)))\nax.set_xticklabels(vehicle_types)\nax.set_yticklabels(years)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(years)):\n    for j in range(len(vehicle_types)):\n        if (i, j) in [(0, 2), (4, 1), (7, 0)]:\n            continue\n        text = ax.text(j, i, sales[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n        \nfor i, j in [(0, 2), (4, 1), (7, 0)]:\n    ax.text(j, i, '', ha=\"center\", va=\"center\", color=\"#d94a5b\")\n\nax.set_title(\"Sales of Different Vehicle Types (in units/year)\")\nax.set_xlabel('Vehicle Type')\nax.set_ylabel('Year')\nax.grid(True)\nax.set_facecolor('gray')\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 2), (4, 1), (7, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_a9e523c34518532f/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_a9e523c34518532f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_a9e523c34518532f/myplot.png"
    },
    {
        "id": "Heatmap_75565805373b04d8",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntravel_types = [\"Car Travel\", \"Train Travel\", \"Flight Travel\", \"Bus Travel\"]\npopularity = np.array([70, 90, 50, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(popularity.reshape((-1, 1)), cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(travel_types)), labels=travel_types)\nax.set_yticks([])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(travel_types)):\n    text = ax.text(0, i, popularity[i],\n                   ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Popularity of Different Types of Travel\")\nax.set_xlabel(\"Type of Travel\")\nax.set_ylabel(\"Popularity\")\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #4e7fc2 and update the border width to 1.0.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_75565805373b04d8/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ntravel_types = [\"Car Travel\", \"Train Travel\", \"Flight Travel\", \"Bus Travel\"]\npopularity = np.array([70, 90, 50, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(popularity.reshape((-1, 1)), cmap='viridis', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(travel_types)), labels=travel_types)\nax.set_yticks([])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(travel_types)):\n    text = ax.text(0, i, popularity[i],\n                   ha=\"center\", va=\"center\", color=\"w\")\n    if i in [1, 2]:  # Corresponding to 'Train Travel' and 'Flight Travel'\n        ax.add_patch(plt.Rectangle((-0.5, i - 0.5), 1, 1, facecolor='none', edgecolor=\"#0d0a91\", lw=1.0))\n        ax.add_patch(plt.Rectangle((-0.5, i - 0.5), 1, 1, edgecolor=\"#4e7fc2\", lw=1.5, fill=False))\n\nax.set_title(\"Popularity of Different Types of Travel\")\nax.set_xlabel(\"Type of Travel\")\nax.set_ylabel(\"Popularity\")\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(1,0), (2,0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_75565805373b04d8/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_75565805373b04d8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_75565805373b04d8/myplot.png"
    },
    {
        "id": "Heatmap_3700352ff796e715",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007],\n        'Climate Change Effects': [0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 2.0],\n        'Greenhouse Gas Emissions': [1.2, 1.1, 0.9, 0.5, 0.4, 0.3, 0.2, 1.5],\n        'Global Average Temperature': [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 1.0]}\n\nlabels = ['Climate Change Effects', 'Greenhouse Gas Emissions', 'Global Average Temperature']\n\nheatmap_data = np.array([data[label] for label in labels])\n\nfig, ax = plt.subplots()\ncax = ax.imshow(heatmap_data, cmap='viridis', alpha=0.7)\nax.set_xticks(np.arange(len(data['Year'])))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(data['Year'])\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(labels)):\n    for j in range(len(data['Year'])):\n        text = ax.text(j, i, heatmap_data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\nfig.colorbar(cax, ax=ax, orientation='vertical')\nax.set_title(\"Climate Change Data Over Years\")\nax.set_xlabel('Year')\nax.set_ylabel('Metrics')\nax.grid(True)\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the edge color of the cells that contain the center point of the bounding box to #ee5806, and remove the annotations for the data points within those cells.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_3700352ff796e715/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndata = {'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007],\n        'Climate Change Effects': [0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 2.0],\n        'Greenhouse Gas Emissions': [1.2, 1.1, 0.9, 0.5, 0.4, 0.3, 0.2, 1.5],\n        'Global Average Temperature': [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 1.0]}\n\nlabels = ['Climate Change Effects', 'Greenhouse Gas Emissions', 'Global Average Temperature']\n\nheatmap_data = np.array([data[label] for label in labels])\n\nfig, ax = plt.subplots()\nim = ax.imshow(heatmap_data, cmap='viridis', alpha=0.7)\nax.set_xticks(np.arange(len(data['Year'])))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(data['Year'])\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(labels)):\n    for j in range(len(data['Year'])):\n        if (i, j) not in [(0, 7), (1, 3), (2, 5)]:\n            text = ax.text(j, i, heatmap_data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n        else:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#ee5806\", facecolor=\"none\", lw=2))\n\nfig.colorbar(im, ax=ax, orientation='vertical')\nax.set_title(\"Climate Change Data Over Years\")\nax.set_xlabel('Year')\nax.set_ylabel('Metrics')\nax.grid(True)\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 7), (1, 3), (2, 5)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_3700352ff796e715/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_3700352ff796e715/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_3700352ff796e715/myplot.png"
    },
    {
        "id": "Heatmap_f657af5580de53b9",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the age groups and diets\nage_groups = [\"18-25\", \"25-35\", \"35-45\", \"45-55\"]\ndiets = [\"Vegan\", \"Gluten-Free\", \"Keto\"]\n\n# Define the number of people following each diet in each age group\ndata = np.array([[200, 400, 600],\n                 [450, 550, 350],\n                 [500, 300, 200],\n                 [600, 700, 1000]])\n\nfig, ax = plt.subplots()\n\n# Plot the data as a heatmap with a different colormap\nim = ax.imshow(data, cmap='viridis', alpha=0.7)  # Changed colormap to 'viridis'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(diets)))\nax.set_xticklabels(diets)\nax.set_yticks(np.arange(len(age_groups)))\nax.set_yticklabels(age_groups)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(age_groups)):\n    for j in range(len(diets)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Add some extra information to the plot\nax.set_title(\"Number of people following each diet in each age group\")\nax.set_xlabel(\"Diet\")\nax.set_ylabel(\"Age Group\")\nax.grid(True)\nfig.tight_layout()\nax.set_facecolor('white')  # Changed background to white\n\n# Save the plot\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #9a27f8 and set the border width to 0.8. Also, remove the annotations for the data points in those cells.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_f657af5580de53b9/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the age groups and diets\nage_groups = [\"18-25\", \"25-35\", \"35-45\", \"45-55\"]\ndiets = [\"Vegan\", \"Gluten-Free\", \"Keto\"]\n\n# Define the number of people following each diet in each age group\ndata = np.array([[200, 400, 600],\n                 [450, 550, 350],\n                 [500, 300, 200],\n                 [600, 700, 1000]])\n\nfig, ax = plt.subplots()\n\n# Plot the data as a heatmap with a different colormap\nim = ax.imshow(data, cmap='viridis', alpha=0.7)  # Changed colormap to 'viridis'\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(diets)))\nax.set_xticklabels(diets)\nax.set_yticks(np.arange(len(age_groups)))\nax.set_yticklabels(age_groups)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(age_groups)):\n    for j in range(len(diets)):\n        if (i, j) in [(1, 1), (2, 0), (3, 2)]:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#9a27f8\", facecolor=\"none\", lw=0.8))\n        else:\n            text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Add some extra information to the plot\nax.set_title(\"Number of people following each diet in each age group\")\nax.set_xlabel(\"Diet\")\nax.set_ylabel(\"Age Group\")\nax.grid(True)\nfig.tight_layout()\nax.set_facecolor('white')  # Changed background to white\n\n# Save the plot\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(1, 1), (2, 0), (3, 2)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_f657af5580de53b9/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_f657af5580de53b9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_f657af5580de53b9/myplot.png"
    },
    {
        "id": "Heatmap_26c5f360df2c4e9b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nage_groups = [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"]\nactivities = [\"Gym Visits\", \"Outdoor Activities\"]\n\ndata = np.array([[12, 35],\n                 [27, 30],\n                 [45, 25],\n                 [60, 15],\n                 [30, 5]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='viridis', alpha=0.7)  # Changed color map to 'viridis'\n\nax.set_xticks(np.arange(len(activities)))\nax.set_yticks(np.arange(len(age_groups)))\n\nax.set_xticklabels(activities)\nax.set_yticklabels(age_groups)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(age_groups)):\n    for j in range(len(activities)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"white\")  # Changed text color to white\n\nax.set_title(\"Activity Preferences by Age Group\")\nax.grid(True, color='white')  # Changed grid lines to white\nax.set_facecolor('gray')\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the background color of the cells that contain the center point of the bounding box to #67e195.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_26c5f360df2c4e9b/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nage_groups = [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"]\nactivities = [\"Gym Visits\", \"Outdoor Activities\"]\n\ndata = np.array([[12, 35],\n                 [27, 30],\n                 [45, 25],\n                 [60, 15],\n                 [30, 5]])\n\nfig, ax = plt.subplots()\nim = ax.imshow(data, cmap='viridis', alpha=0.7)  # Changed color map to 'viridis'\n\nax.set_xticks(np.arange(len(activities)))\nax.set_yticks(np.arange(len(age_groups)))\n\nax.set_xticklabels(activities)\nax.set_yticklabels(age_groups)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(age_groups)):\n    for j in range(len(activities)):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"white\")  # Changed text color to white\n        if (i, j) in [(0, 0), (3, 1)]:  # Selected specific data points to modify\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, facecolor=\"#67e195\", edgecolor=\"none\", lw=2))  # Added background color\n\nax.set_title(\"Activity Preferences by Age Group\")\nax.grid(True, color='white')  # Changed grid lines to white\nax.set_facecolor('gray')\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 0), (3, 1)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_26c5f360df2c4e9b/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_26c5f360df2c4e9b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_26c5f360df2c4e9b/myplot.png"
    },
    {
        "id": "Heatmap_22c62e0ea5939e79",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the time periods and corresponding traffic volumes\ntime_periods = [\"Morning Rush Hour\", \"Afternoon Lull\", \"Evening Rush Hour\", \"Late Night\"]\ntraffic_volumes = [12000, 6000, 14000, 2000]\n\n# Convert the traffic volumes to a numpy array and reshape it for the heatmap\ntraffic_volumes_np = np.array(traffic_volumes).reshape(len(time_periods), 1)\n\n# Create the figure and axis objects\nfig, ax = plt.subplots()\n\n# Create the heatmap using the traffic volumes data\n# Use a grayscale colormap and set the alpha parameter to 0.7\nim = ax.imshow(traffic_volumes_np, cmap='gray', alpha=0.7)\n\n# Set the x and y ticks and their labels\nax.set_xticks(np.arange(1))\nax.set_yticks(np.arange(len(time_periods)))\nax.set_xticklabels(['Traffic Volume'])\nax.set_yticklabels(time_periods)\n\n# Rotate the x tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over the traffic volumes data and create text annotations for each value\nfor i in range(len(time_periods)):\n    text = ax.text(0, i, traffic_volumes_np[i, 0], ha=\"center\", va=\"center\", color=\"w\")\n\n# Set the title of the heatmap\nax.set_title(\"Traffic Volumes at Different Times of Day\")\n\n# Add a grid to the background\nax.grid(True)\n\n# Set the background color to a light gray\nax.set_facecolor('lightgray')\n\n# Adjust the layout to make sure everything fits properly\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #2b04ab, and set the border width to 0.5.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_22c62e0ea5939e79/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the time periods and corresponding traffic volumes\ntime_periods = [\"Morning Rush Hour\", \"Afternoon Lull\", \"Evening Rush Hour\", \"Late Night\"]\ntraffic_volumes = [12000, 6000, 14000, 2000]\n\n# Convert the traffic volumes to a numpy array and reshape it for the heatmap\ntraffic_volumes_np = np.array(traffic_volumes).reshape(len(time_periods), 1)\n\n# Create the figure and axis objects\nfig, ax = plt.subplots()\n\n# Create the heatmap using the traffic volumes data\n# Use a grayscale colormap and set the alpha parameter to 0.7\nim = ax.imshow(traffic_volumes_np, cmap='gray', alpha=0.7)\n\n# Set the x and y ticks and their labels\nax.set_xticks(np.arange(1))\nax.set_yticks(np.arange(len(time_periods)))\nax.set_xticklabels(['Traffic Volume'])\nax.set_yticklabels(time_periods)\n\n# Rotate the x tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over the traffic volumes data and create text annotations for each value\nfor i in range(len(time_periods)):\n    text = ax.text(0, i, traffic_volumes_np[i, 0], ha=\"center\", va=\"center\", color=\"w\")\n    if i in [0, 2]:  # Target specific rows (Morning Rush Hour and Evening Rush Hour)\n        ax.add_patch(plt.Rectangle((-0.5, i - 0.5), 1, 1, facecolor=\"none\", edgecolor=\"#2b04ab\", linewidth=1,zorder=10))\n\n# Set the title of the heatmap\nax.set_title(\"Traffic Volumes at Different Times of Day\")\n\n# Add a grid to the background\nax.grid(True)\n\n# Set the background color to a light gray\nax.set_facecolor('lightgray')\n\n# Adjust the layout to make sure everything fits properly\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,0), (2,0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_22c62e0ea5939e79/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_22c62e0ea5939e79/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_22c62e0ea5939e79/myplot.png"
    },
    {
        "id": "Heatmap_2b58ca5f75414797",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a list of species and years\nspecies = [\"Amazon Rainforest\", \"Siberian Taiga\", \"Australian Bush\"]\nyears = [\"Year 2000\", \"Year 2020\"]\n\n# Create a 2D array of the data\ndata = np.array([[5000, 3700],\n                 [4200, 4000],\n                 [3200, 1800]])\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Create a heatmap of the data using the 'plasma' colormap\nim = ax.imshow(data, cmap='plasma', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\nax.set_yticks(np.arange(len(species)))\nax.set_yticklabels(species)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(species)):\n    for j in range(len(years)):\n        text = ax.text(j, i, data[i, j],\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Set the title of the chart\nax.set_title(\"Population of Species in Different Years\")\n\n# Add grids on the background\nax.grid(True)\n\n# Set the background color of the chart figure\nax.set_facecolor('gray')\n\n# Adjust layout to make sure the labels fit\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the border color of the cells that contain the center point of the bounding box to #26f67a, setting the border width to 1.5. Also, remove the annotations for these specific data points in the heatmap.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_2b58ca5f75414797/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a list of species and years\nspecies = [\"Amazon Rainforest\", \"Siberian Taiga\", \"Australian Bush\"]\nyears = [\"Year 2000\", \"Year 2020\"]\n\n# Create a 2D array of the data\ndata = np.array([[5000, 3700],\n                 [4200, 4000],\n                 [3200, 1800]])\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Create a heatmap of the data using the 'plasma' colormap\nim = ax.imshow(data, cmap='plasma', alpha=0.7)\n\n# Show all ticks and label them with the respective list entries\nax.set_xticks(np.arange(len(years)))\nax.set_xticklabels(years)\nax.set_yticks(np.arange(len(species)))\nax.set_yticklabels(species)\n\n# Rotate the tick labels and set their alignment\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations\nfor i in range(len(species)):\n    for j in range(len(years)):\n        if (i, j) not in [(0, 1), (2, 0)]:  # Exclude specific points for annotation\n            text = ax.text(j, i, data[i, j],\n                           ha=\"center\", va=\"center\", color=\"w\")\n        else:\n            ax.add_patch(plt.Rectangle((j - 0.5, i - 0.5), 1, 1, edgecolor=\"#26f67a\", linewidth=1.5, facecolor='none'))\n\n# Set the title of the chart\nax.set_title(\"Population of Species in Different Years\")\n\n# Add grids on the background\nax.grid(True)\n\n# Set the background color of the chart figure\nax.set_facecolor('gray')\n\n# Adjust layout to make sure the labels fit\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0, 1), (2, 0)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_2b58ca5f75414797/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_2b58ca5f75414797/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_2b58ca5f75414797/myplot.png"
    },
    {
        "id": "Heatmap_f32748c8f2734771",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndecades = [\"1960\", \"1970\", \"1980\", \"1990\", \"2000\", \"2010\", \"2020\", \"2030\"]\nscores = np.array([20, 25, 40, 35, 60, 65, 90, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(scores.reshape(1,8), cmap='viridis', alpha=0.7)\n\nax.set_xticks(np.arange(len(decades)))\nax.set_xticklabels(decades)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(scores)):\n    text = ax.text(i, 0, scores[i], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Fashion Trend Score by Decades\")\nax.set_xlabel(\"Decades\")\nax.set_ylabel(\"Scores\")\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Remove the annotations from the cells that contain the center point of the bounding box in the heatmap.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_f32748c8f2734771/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndecades = [\"1960\", \"1970\", \"1980\", \"1990\", \"2000\", \"2010\", \"2020\", \"2030\"]\nscores = np.array([20, 25, 40, 35, 60, 65, 90, 30])\n\nfig, ax = plt.subplots()\nim = ax.imshow(scores.reshape(1,8), cmap='viridis', alpha=0.7)\n\nax.set_xticks(np.arange(len(decades)))\nax.set_xticklabels(decades)\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(scores)):\n    if i not in [1, 4]:\n        text = ax.text(i, 0, scores[i], ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Fashion Trend Score by Decades\")\nax.set_xlabel(\"Decades\")\nax.set_ylabel(\"Scores\")\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,1), (0,4)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_f32748c8f2734771/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_f32748c8f2734771/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_f32748c8f2734771/myplot.png"
    },
    {
        "id": "Heatmap_df694c3eee28c88d",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntravel_types = [\"Car Travel\", \"Train Travel\", \"Bus Travel\", \"Air Travel\", \"Bike Travel\", \"Boat Travel\", \"Foot Travel\", \"Camel Travel\", \"Horse Travel\"]\npopularity_scores = np.array([5, 15, 7, 30, 9, 20, 3, 8, 12])\n\nfig, ax = plt.subplots(figsize=(10,6))\nim = ax.imshow(popularity_scores.reshape(1,9), cmap='hot', alpha=0.7)\n\nax.set_xticks(np.arange(len(travel_types)), labels=travel_types)\nax.set_yticks([])\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(travel_types)):\n    text = ax.text(i, 0, popularity_scores[i], ha=\"center\", va=\"center\", color=\"white\")\n\nax.set_title(\"Popularity of different types of travel\")\nax.set_xlabel(\"Travel type\")\nax.set_ylabel(\"Popularity score\")\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the font size of the annotations within the cells that contain the center point of the bounding box to 12, and set the edge color of those cells to #e08666.",
        "Input_image": "./test_dataset/Heatmap/Heatmap_df694c3eee28c88d/Visual_figure.png",
        "Test_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\ntravel_types = [\"Car Travel\", \"Train Travel\", \"Bus Travel\", \"Air Travel\", \"Bike Travel\", \"Boat Travel\", \"Foot Travel\", \"Camel Travel\", \"Horse Travel\"]\npopularity_scores = np.array([5, 15, 7, 30, 9, 20, 3, 8, 12])\n\nfig, ax = plt.subplots(figsize=(10,6))\nim = ax.imshow(popularity_scores.reshape(1,9), cmap='hot', alpha=0.7)\n\nax.set_xticks(np.arange(len(travel_types)), labels=travel_types)\nax.set_yticks([])\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\nfor i in range(len(travel_types)):\n    text = ax.text(i, 0, popularity_scores[i], ha=\"center\", va=\"center\", color=\"white\")\n    if i in [1, 3, 5]:\n        text.set_fontsize(12)\n        ax.add_patch(plt.Rectangle((i - 0.5, -0.5), 1, 1, edgecolor=\"#e08666\", fill=False, lw=2))\n\nax.set_title(\"Popularity of different types of travel\")\nax.set_xlabel(\"Travel type\")\nax.set_ylabel(\"Popularity score\")\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "(0,1), (0,3), (0,5)",
        "Test_image": "./test_dataset/Heatmap/Heatmap_df694c3eee28c88d/Edit_figure.png",
        "Masked_image": "./test_dataset/Heatmap/Heatmap_df694c3eee28c88d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Heatmap/Heatmap_df694c3eee28c88d/myplot.png"
    },
    {
        "id": "Scatter_6c485e2a68550d4b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Students\nstudents = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\n\n# Social media usage (in hours per day)\nsocial_media_usage = [2, 3, 1, 4, 3.5, 2.5, 1.5, 1.5, 2, 3]\n\n# Sleep patterns (in hours per night)\nsleep_patterns = [7, 6, 8, 5, 6.5, 7.5, 8.5, 8, 7.5, 6.5]\n\n# Create scatter plot\nplt.figure(figsize=(8, 6))\nplt.scatter(social_media_usage, sleep_patterns, color='blue')\n\n# Label points\nfor i in range(len(social_media_usage)):\n    plt.text(social_media_usage[i], sleep_patterns[i], students[i])\n\n# Set x and y axis labels\nplt.xlabel('Social Media Usage (Hours/Day)')\nplt.ylabel('Sleep Patterns (Hours/Night)')\n\n# Set title\nplt.title('The Relationship between Social Media Usage and Sleep Patterns among College Students')\n\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the scatter points that contain the center point of the bounding box to #8e8705, and adjust their shape to a 'diamond'.",
        "Input_image": "./test_dataset/Scatter/Scatter_6c485e2a68550d4b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Students\nstudents = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\n\n# Social media usage (in hours per day)\nsocial_media_usage = [2, 3, 1, 4, 3.5, 2.5, 1.5, 1.5, 2, 3]\n\n# Sleep patterns (in hours per night)\nsleep_patterns = [7, 6, 8, 5, 6.5, 7.5, 8.5, 8, 7.5, 6.5]\n\n# Create scatter plot\nplt.figure(figsize=(8, 6))\ncustom_points = [1, 4, 7]\nfor i, (usage, sleep) in enumerate(zip(social_media_usage, sleep_patterns)):\n    if i in custom_points:\n        plt.scatter(usage, sleep, color='#8e8705', marker='D')\n    else:\n        plt.scatter(usage, sleep, color='blue')\n\n# Label points\nfor i in range(len(social_media_usage)):\n    plt.text(social_media_usage[i], sleep_patterns[i], students[i])\n\n# Set x and y axis labels\nplt.xlabel('Social Media Usage (Hours/Day)')\nplt.ylabel('Sleep Patterns (Hours/Night)')\n\n# Set title\nplt.title('The Relationship between Social Media Usage and Sleep Patterns among College Students')\n\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,4,7",
        "coordinate": "(3.0,6.0),(3.5,6.5),(1.5,8.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_6c485e2a68550d4b/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_6c485e2a68550d4b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_6c485e2a68550d4b/figure.png"
    },
    {
        "id": "Scatter_3b9f1bfd3154204e",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Defines country data\ndata = {\n    'Country': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'],\n    'GDP per Capita': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000],\n    'Happiness Score': [5.6, 6.8, 7.2, 7.9, 8.1, 8.3, 8.7, 8.9, 9.1, 9.3]\n}\n\n# Convert the data into a pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Create the scatter plot\nplt.figure(figsize=(10, 5))\nplt.scatter(df['GDP per Capita'], df['Happiness Score'], color='blue')\nplt.title('Global Happiness Index by Country')\nplt.xlabel('GDP per Capita ($)')\nplt.ylabel('Happiness Score')\nplt.grid(True)\n\nfor i, txt in enumerate(df['Country']):\n    plt.annotate(txt, (df['GDP per Capita'][i], df['Happiness Score'][i]))\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Increase the size of the points that contain the center point of the bounding box to 95.",
        "Input_image": "./test_dataset/Scatter/Scatter_3b9f1bfd3154204e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Defines country data\ndata = {\n    'Country': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'],\n    'GDP per Capita': [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000],\n    'Happiness Score': [5.6, 6.8, 7.2, 7.9, 8.1, 8.3, 8.7, 8.9, 9.1, 9.3]\n}\n\n# Convert the data into a pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Create the scatter plot\nplt.figure(figsize=(10, 5))\ncustom_points = [2, 5, 7]\ncustom_size = 95\nfor i, (gdp, happiness) in enumerate(zip(df['GDP per Capita'], df['Happiness Score'])):\n    if i in custom_points:\n        plt.scatter(gdp, happiness, color='blue', s=custom_size)\n    else:\n        plt.scatter(gdp, happiness, color='blue')\nplt.title('Global Happiness Index by Country')\nplt.xlabel('GDP per Capita ($)')\nplt.ylabel('Happiness Score')\nplt.grid(True)\n\nfor i, txt in enumerate(df['Country']):\n    plt.annotate(txt, (df['GDP per Capita'][i], df['Happiness Score'][i]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "2,5,7",
        "coordinate": "(30000.0,7.2),(60000.0,8.3),(80000.0,8.9)",
        "Test_image": "./test_dataset/Scatter/Scatter_3b9f1bfd3154204e/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_3b9f1bfd3154204e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_3b9f1bfd3154204e/figure.png"
    },
    {
        "id": "Scatter_e911b303acca9d56",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Depth measurements in meters\ndepth = [0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000]\n\n# Corresponding elevation changes in meters\nelevation_change = [0, -100, -200, -300, -400, -500, -600, -700, -800, -900]\n\n# Create the scatter plot\nplt.scatter(depth, elevation_change, color='b')\n\n# Adding labels and title\nplt.xlabel('Depth (meters)')\nplt.ylabel('Elevation Change (meters)')\nplt.title('Ocean Floor Elevation Changes Based on Depth')\n\n# Show the plot\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the points that contain the center point of the bounding box to #37d5a4, and set the edge width to 2.7.",
        "Input_image": "./test_dataset/Scatter/Scatter_e911b303acca9d56/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Depth measurements in meters\ndepth = [0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000]\n\n# Corresponding elevation changes in meters\nelevation_change = [0, -100, -200, -300, -400, -500, -600, -700, -800, -900]\n\n# Create the scatter plot\ncustom_points = [1, 3, 5, 7]\nfor i, (d, e) in enumerate(zip(depth, elevation_change)):\n    if i in custom_points:\n        plt.scatter(d, e, color='b', edgecolor='#37d5a4', linewidths=2.7)\n    else:\n        plt.scatter(d, e, color='b')\n\n# Adding labels and title\nplt.xlabel('Depth (meters)')\nplt.ylabel('Elevation Change (meters)')\nplt.title('Ocean Floor Elevation Changes Based on Depth')\n\n# Show the plot\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5,7",
        "coordinate": "(1000.0,-100.0),(3000.0,-300.0),(5000.0,-500.0),(7000.0,-700.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_e911b303acca9d56/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_e911b303acca9d56/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_e911b303acca9d56/figure.png"
    },
    {
        "id": "Scatter_8cedafc14d382854",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define data\nlocations = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\nheights = [0.2, 0.5, 0.8, 1.1, 1.4, 1.7, 2.0, 2.3, 2.6, 2.9]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot data\nax.scatter(locations, heights)\n\n# Set the title and labels for the plot\nax.set_title('Growth Patterns of Alien Plants on Exoplanet')\nax.set_xlabel('Terrain Locations')\nax.set_ylabel('Plant Heights (in meters)')\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the size of the scatter points that contain the center point of the bounding box to 64 and change their shape to 'diamond'.",
        "Input_image": "./test_dataset/Scatter/Scatter_8cedafc14d382854/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Define data\nlocations = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\nheights = [0.2, 0.5, 0.8, 1.1, 1.4, 1.7, 2.0, 2.3, 2.6, 2.9]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot data\ncustom_points = [1, 3, 5]\ncustom_size = 64\nfor i, (location, height) in enumerate(zip(locations, heights)):\n    if i in custom_points:\n        ax.scatter(location, height, s=custom_size, marker='D', color='#1f77b4')\n    else:\n        ax.scatter(location, height, color='#1f77b4')\n\n# Set the title and labels for the plot\nax.set_title('Growth Patterns of Alien Plants on Exoplanet')\nax.set_xlabel('Terrain Locations')\nax.set_ylabel('Plant Heights (in meters)')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(1.0,0.5),(3.0,1.1),(5.0,1.7)",
        "Test_image": "./test_dataset/Scatter/Scatter_8cedafc14d382854/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_8cedafc14d382854/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_8cedafc14d382854/figure.png"
    },
    {
        "id": "Scatter_9884767bb56893d0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare the data\ndata = {'Year': [2016, 2017, 2018, 2019, 2020, 2021],\n        'Software Sales': [10000, 12000, 14000, 10000, 12000, 16000],\n        'Software Use': [20000, 18000, 15000, 10000, 20000, 25000]}\ndf = pd.DataFrame(data)\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Plot the data\nax.scatter(df['Year'], df['Software Sales'], color='blue', marker='o', label='Software Sales')\nax.scatter(df['Year'], df['Software Use'], color='red', marker='o', label='Software Use')\n\n# Annotate each line with legend label at the end of the line\nax.text(df['Year'].iloc[-1], df['Software Sales'].iloc[-1], ' Software Sales', va='center')\nax.text(df['Year'].iloc[-1], df['Software Use'].iloc[-1], ' Software Use', va='center')\n\n# Annotate data values above the point on the chart figure\nfor i, txt in enumerate(df['Software Sales']):\n    ax.annotate(txt, (df['Year'][i], df['Software Sales'][i]))\nfor i, txt in enumerate(df['Software Use']):\n    ax.annotate(txt, (df['Year'][i], df['Software Use'][i]))\n\n# Add grid, labels, title and legend\nax.grid(True)\nax.set_facecolor('lightgray')\nax.set_xlabel('Year', fontsize=14)  # Change font size of x axis label\nax.set_ylabel('Count', fontsize=14)  # Change font size of y axis label\nax.set_title('Software Sales and Use over Years', fontsize=16)  # Change font size of title\nax.legend()\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the shape of the points that share the same legend as those containing the center point of the bounding box to 'star'. Also, update their edge color to #8a77f4 and set the edge width to 2.9.",
        "Input_image": "./test_dataset/Scatter/Scatter_9884767bb56893d0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare the data\ndata = {'Year': [2016, 2017, 2018, 2019, 2020, 2021],\n        'Software Sales': [10000, 12000, 14000, 10000, 12000, 16000],\n        'Software Use': [20000, 18000, 15000, 10000, 20000, 25000]}\ndf = pd.DataFrame(data)\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Plot the data\nax.scatter(df['Year'], df['Software Sales'], color='blue', marker='*', edgecolors='#8a77f4', linewidths=2.9, label='Software Sales')\nax.scatter(df['Year'], df['Software Use'], color='red', marker='o', label='Software Use')\n\n# Annotate each line with legend label at the end of the line\nax.text(df['Year'].iloc[-1], df['Software Sales'].iloc[-1], ' Software Sales', va='center')\nax.text(df['Year'].iloc[-1], df['Software Use'].iloc[-1], ' Software Use', va='center')\n\n# Annotate data values above the point on the chart figure\nfor i, txt in enumerate(df['Software Sales']):\n    ax.annotate(txt, (df['Year'][i], df['Software Sales'][i]))\nfor i, txt in enumerate(df['Software Use']):\n    ax.annotate(txt, (df['Year'][i], df['Software Use'][i]))\n\n# Add grid, labels, title and legend\nax.grid(True)\nax.set_facecolor('lightgray')\nax.set_xlabel('Year', fontsize=14)  # Change font size of x axis label\nax.set_ylabel('Count', fontsize=14)  # Change font size of y axis label\nax.set_title('Software Sales and Use over Years', fontsize=16)  # Change font size of title\nax.legend()\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "coordinate": "(2016.0,10000.0),(2017.0,12000.0),(2018.0,14000.0),(2019.0,10000.0),(2020.0,12000.0),(2021.0,16000.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_9884767bb56893d0/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_9884767bb56893d0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_9884767bb56893d0/myplot.png"
    },
    {
        "id": "Scatter_15c78ee727d28f36",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load the data\ndata = pd.DataFrame({\n    \"Culture\": [\"American\", \"Chinese\", \"Indian\", \"Japanese\", \"Mexican\", \"French\"],\n    \"Vegetarian\": [45, 50, 80, 60, 50, 40],\n    \"Seafood\": [60, 92, 40, 95, 70, 80],\n    \"Fast Food\": [85, 74, 50, 55, 65, 70]\n})\n\nfig, ax = plt.subplots()\n\n# Plot each dietary preference as a scatter plot\nfor column in [\"Vegetarian\", \"Seafood\", \"Fast Food\"]:\n    ax.scatter(data[\"Culture\"], data[column], label=column, marker='o')\n\n# Annotate each point with its corresponding value\nfor i, txt in enumerate(data[\"Vegetarian\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\nfor i, txt in enumerate(data[\"Seafood\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\nfor i, txt in enumerate(data[\"Fast Food\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\n\nax.set_xlabel('Culture', fontsize=15)\nax.set_ylabel('Preference (%)', fontsize=15)\nax.set_title('Food preferences by culture')\nax.legend()\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the edge color of the scatter points that share the same legend as those containing the center point of the bounding box to #743b27, and adjust the edge width to 2.2.",
        "Input_image": "./test_dataset/Scatter/Scatter_15c78ee727d28f36/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load the data\ndata = pd.DataFrame({\n    \"Culture\": [\"American\", \"Chinese\", \"Indian\", \"Japanese\", \"Mexican\", \"French\"],\n    \"Vegetarian\": [45, 50, 80, 60, 50, 40],\n    \"Seafood\": [60, 92, 40, 95, 70, 80],\n    \"Fast Food\": [85, 74, 50, 55, 65, 70]\n})\n\nfig, ax = plt.subplots()\n\n# Plot each dietary preference as a scatter plot\nfor column in [\"Vegetarian\", \"Seafood\", \"Fast Food\"]:\n    if column==\"Fast Food\":\n        ax.scatter(data[\"Culture\"], data[column], label=column, marker='o', edgecolors='#743b27', linewidths=2.2)\n    else:\n        ax.scatter(data[\"Culture\"], data[column], label=column, marker='o')\n# Annotate each point with its corresponding value\nfor i, txt in enumerate(data[\"Vegetarian\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\nfor i, txt in enumerate(data[\"Seafood\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\nfor i, txt in enumerate(data[\"Fast Food\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\n\nax.set_xlabel('Culture', fontsize=15)\nax.set_ylabel('Preference (%)', fontsize=15)\nax.set_title('Food preferences by culture')\nax.legend()\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "2",
        "coordinate": "(0.0,85.0),(1.0,74.0),(2.0,50.0),(3.0,55.0),(4.0,65.0),(5.0,70.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_15c78ee727d28f36/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_15c78ee727d28f36/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_15c78ee727d28f36/myplot.png"
    },
    {
        "id": "Scatter_e9c83c0d39d5ce12",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare the data\nprofession = [\"Software Engineers\", \"Actors\", \"Doctors\", \"Teachers\", \"Farmers\", \"Chefs\", \"Mechanics\", \"Lawyers\", \"Artists\"]\nscore = [56, 89, 67, 102, 73, 85, 92, 75, 66]\nx = np.arange(len(profession))\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Scatter plot with new fixed color\nscatter = ax.scatter(x, score, c='blue', marker='o')  # Changed 'c=score, cmap='viridis'' to 'c='blue''\n\n# Annotate data values above the point\nfor i, txt in enumerate(score):\n    ax.annotate(txt, (x[i], score[i]), ha='center')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(profession):\n    ax.annotate(txt, (x[i], score[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set labels and title\nax.set_xlabel('Profession')\nax.set_ylabel('Dietary Score')\nax.set_title('Dietary Score by Profession')\n\n# Add grids and set background color\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Tight layout and save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the points that contain the center point of the bounding box to #0737d4.",
        "Input_image": "./test_dataset/Scatter/Scatter_e9c83c0d39d5ce12/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare the data\nprofession = [\"Software Engineers\", \"Actors\", \"Doctors\", \"Teachers\", \"Farmers\", \"Chefs\", \"Mechanics\", \"Lawyers\", \"Artists\"]\nscore = [56, 89, 67, 102, 73, 85, 92, 75, 66]\nx = np.arange(len(profession))\n\n# Create the figure and the axes\nfig, ax = plt.subplots()\n\n# Scatter plot with new fixed color\ncustom_points = [1, 3, 5]\nfor i, (xi, sc) in enumerate(zip(x, score)):\n    if i in custom_points:\n        ax.scatter(xi, sc, c='#0737d4', marker='o')\n    else:\n        ax.scatter(xi, sc, c='blue', marker='o')\n\n# Annotate data values above the point\nfor i, txt in enumerate(score):\n    ax.annotate(txt, (x[i], score[i]), ha='center')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(profession):\n    ax.annotate(txt, (x[i], score[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set labels and title\nax.set_xlabel('Profession')\nax.set_ylabel('Dietary Score')\nax.set_title('Dietary Score by Profession')\n\n# Add grids and set background color\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Tight layout and save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(1.0,89.0),(3.0,102.0),(5.0,85.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_e9c83c0d39d5ce12/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_e9c83c0d39d5ce12/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_e9c83c0d39d5ce12/myplot.png"
    },
    {
        "id": "Scatter_598d0e2afd499396",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Provided data\ndata = {\n    \"Genre\": [\"Horror\", \"Comedy\", \"Drama\"],\n    \"2010\": [100, 200, 150],\n    \"2020\": [180, 170, 300]\n}\n\n# Convert the dictionary into DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Set the background color of the chart to white\nax.set_facecolor('white')\n\n# Plotting data\nfor index, row in df.iterrows():\n    ax.scatter([2010, 2020], [row['2010'], row['2020']], label=row['Genre'], marker='o')\n\n# Annotating data values above the point on the chart figure\nfor i, txt in enumerate(df['2010']):\n    ax.annotate(txt, (2010, df['2010'][i]))\nfor i, txt in enumerate(df['2020']):\n    ax.annotate(txt, (2020, df['2020'][i]))\n\n# Setting labels, title and grid\nax.set_xlabel('Year')\nax.set_ylabel('Values')\nax.set_title('Scatter Chart')\n\n# Change the color of the grid lines to light blue\nax.grid(True, color='lightblue', linestyle='--', linewidth=0.5)\n\n# Adding legend\nax.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the shape of the scatter points that share the same legend as those containing the center point of the bounding box to a 'star'.",
        "Input_image": "./test_dataset/Scatter/Scatter_598d0e2afd499396/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Provided data\ndata = {\n    \"Genre\": [\"Horror\", \"Comedy\", \"Drama\"],\n    \"2010\": [100, 200, 150],\n    \"2020\": [180, 170, 300]\n}\n\n# Convert the dictionary into DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Set the background color of the chart to white\nax.set_facecolor('white')\n\n# Plotting data\nfor index, row in df.iterrows():\n    if index in [0, 2]:  # Target indices\n        ax.scatter([2010, 2020], [row['2010'], row['2020']], label=row['Genre'], marker='*', s=100)\n    else:\n        ax.scatter([2010, 2020], [row['2010'], row['2020']], label=row['Genre'], marker='o')\n\n# Annotating data values above the point on the chart figure\nfor i, txt in enumerate(df['2010']):\n    ax.annotate(txt, (2010, df['2010'][i]))\nfor i, txt in enumerate(df['2020']):\n    ax.annotate(txt, (2020, df['2020'][i]))\n\n# Setting labels, title and grid\nax.set_xlabel('Year')\nax.set_ylabel('Values')\nax.set_title('Scatter Chart')\n\n# Change the color of the grid lines to light blue\nax.grid(True, color='lightblue', linestyle='--', linewidth=0.5)\n\n# Adding legend\nax.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0,2",
        "coordinate": "(2010.0,100.0),(2020.0,180.0),(2010.0,150.0),(2020.0,300.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_598d0e2afd499396/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_598d0e2afd499396/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_598d0e2afd499396/myplot.png"
    },
    {
        "id": "Scatter_0aaa18fe4203a6d9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\n\ndf = pd.DataFrame(data)\n\n# Set up the figure and axes\nfig, ax = plt.subplots()\n\n# Plot the data\nax.scatter(df[\"Time Period\"], df[\"App Usage\"], label='App Usage', marker='o', color='r')\nax.scatter(df[\"Time Period\"], df[\"Call Duration\"], label='Call Duration', marker='v', color='g')\nax.scatter(df[\"Time Period\"], df[\"Data Consumption\"], label='Data Consumption', marker='s', color='b')\n\n# Set the title and labels\nax.set_title('App usage, Call duration and Data Consumption over different time periods', fontsize=15)\nax.set_xlabel('Time Period', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Remove grid and set background color to white\nax.grid(False)\nax.set_facecolor('white') # Change background color here\n\n# Add legend\nax.legend()\n\n# Annotate data points\nfor i, txt in enumerate(df[\"App Usage\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"App Usage\"][i]))\nfor i, txt in enumerate(df[\"Call Duration\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Call Duration\"][i]))\nfor i, txt in enumerate(df[\"Data Consumption\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Data Consumption\"][i]))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the edge color of the scatter points that share the same legend as those containing the center point of the bounding box to #d77716, and set the edge width to 2.6. Also, add a shadow effect to these points with a 7.2-pixel offset and a foreground color of silver.",
        "Input_image": "./test_dataset/Scatter/Scatter_0aaa18fe4203a6d9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withStroke\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\n\ndf = pd.DataFrame(data)\n\n# Set up the figure and axes\nfig, ax = plt.subplots()\n\n# Target scatter indices\ncustom_points = [1, 3, 5]\n\n# Plot the data\nax.scatter(df[\"Time Period\"], df[\"App Usage\"], label='App Usage', marker='o', color='r', edgecolors='#d77716' if 0 in custom_points else 'r', linewidths=2.6 if 0 in custom_points else 1, path_effects=[withStroke(linewidth=7.2, foreground='silver')] if 0 in custom_points else None)\nax.scatter(df[\"Time Period\"], df[\"Call Duration\"], label='Call Duration', marker='v', color='g', edgecolors='#d77716' if 1 in custom_points else 'g', linewidths=2.6 if 1 in custom_points else 1, path_effects=[withStroke(linewidth=7.2, foreground='silver')] if 1 in custom_points else None)\nax.scatter(df[\"Time Period\"], df[\"Data Consumption\"], label='Data Consumption', marker='s', color='b', edgecolors='#d77716' if 2 in custom_points else 'b', linewidths=2.6 if 2 in custom_points else 1, path_effects=[withStroke(linewidth=7.2, foreground='silver')] if 2 in custom_points else None)\n\n# Set the title and labels\nax.set_title('App usage, Call duration and Data Consumption over different time periods', fontsize=15)\nax.set_xlabel('Time Period', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Remove grid and set background color to white\nax.grid(False)\nax.set_facecolor('white') # Change background color here\n\n# Add legend\nax.legend()\n\n# Annotate data points\nfor i, txt in enumerate(df[\"App Usage\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"App Usage\"][i]))\nfor i, txt in enumerate(df[\"Call Duration\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Call Duration\"][i]))\nfor i, txt in enumerate(df[\"Data Consumption\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Data Consumption\"][i]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1,3,5",
        "coordinate": "(0.0,15.0),(1.0,20.0),(2.0,25.0),(3.0,10.0),(4.0,5.0),(5.0,30.0),(6.0,8.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_0aaa18fe4203a6d9/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_0aaa18fe4203a6d9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_0aaa18fe4203a6d9/myplot.png"
    },
    {
        "id": "Scatter_e101072f791b217c",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ncity = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\npopulation_density = [5000, 7000, 4000, 9000, 6000, 7500, 5500, 8000, 6500, 5700]\ngdp_per_capita = [25000, 35000, 20000, 40000, 30000, 35000, 25000, 45000, 32000, 28000]\n\n# Create scatter plot\nplt.figure(figsize=(10,8))\nplt.scatter(population_density, gdp_per_capita, alpha=0.5)\n\n# Add labels and title\nplt.title(\"Correlation between Population Density and GDP per Capita\")\nplt.xlabel(\"Population Density (persons/sq km)\")\nplt.ylabel(\"GDP per Capita (USD)\")\n\n# Add data point labels\nfor i, txt in enumerate(city):\n    plt.annotate(txt, (population_density[i], gdp_per_capita[i]), \n                 textcoords=\"offset points\", xytext=(10,-10), ha='center')\n\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the scatter points that contain the center point of the bounding box to #e949df, and update their shape to 'square'.",
        "Input_image": "./test_dataset/Scatter/Scatter_e101072f791b217c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ncity = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\npopulation_density = [5000, 7000, 4000, 9000, 6000, 7500, 5500, 8000, 6500, 5700]\ngdp_per_capita = [25000, 35000, 20000, 40000, 30000, 35000, 25000, 45000, 32000, 28000]\n\n# Create scatter plot\nplt.figure(figsize=(10,8))\ncustom_points = [1, 3, 5]\nfor i, (density, gdp) in enumerate(zip(population_density, gdp_per_capita)):\n    if i in custom_points:\n        plt.scatter(density, gdp, color='#e949df', marker='s', alpha=0.5)\n    else:\n        plt.scatter(density, gdp, alpha=0.5,color='#1f77b4')#keep the initial color the same\n\n# Add labels and title\nplt.title(\"Correlation between Population Density and GDP per Capita\")\nplt.xlabel(\"Population Density (persons/sq km)\")\nplt.ylabel(\"GDP per Capita (USD)\")\n\n# Add data point labels\nfor i, txt in enumerate(city):\n    plt.annotate(txt, (population_density[i], gdp_per_capita[i]), \n                 textcoords=\"offset points\", xytext=(10,-10), ha='center')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(7000.0,35000.0),(9000.0,40000.0),(7500.0,35000.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_e101072f791b217c/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_e101072f791b217c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_e101072f791b217c/figure.png"
    },
    {
        "id": "Scatter_5f2d6dad992908d4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\ndata = {\"Type_of_Travel\":[\"Car Travel\",\"Train Travel\",\"Flight Travel\",\"Bus Travel\"],\n        \"Popularity\":[70,90,50,30]}\n\nfig, ax = plt.subplots()\n\n# Updated to set scatter points to blue\nax.scatter(data[\"Type_of_Travel\"], data[\"Popularity\"], marker='o', color='blue')\nfor i, txt in enumerate(data[\"Type_of_Travel\"]):\n    # Updated to set annotation text to red\n    ax.annotate(txt, (data[\"Type_of_Travel\"][i], data[\"Popularity\"][i]), color='red')\n    \nax.set_xlabel('Type of Travel', fontsize=15)\nax.set_ylabel('Popularity', fontsize=15)\nax.set_title('Popularity of Different Types of Travel')\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the scatter points that contain the center point of the bounding box to #ff33fd.",
        "Input_image": "./test_dataset/Scatter/Scatter_5f2d6dad992908d4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = {\"Type_of_Travel\":[\"Car Travel\",\"Train Travel\",\"Flight Travel\",\"Bus Travel\"],\n        \"Popularity\":[70,90,50,30]}\n\nfig, ax = plt.subplots()\n\n# Selecting target points\ncustom_points = [0, 2]\nfor i, (travel_type, popularity) in enumerate(zip(data[\"Type_of_Travel\"], data[\"Popularity\"])):\n    if i in custom_points:\n        ax.scatter(travel_type, popularity, marker='o', color='#ff33fd')\n    else:\n        ax.scatter(travel_type, popularity, marker='o', color='blue')\nfor i, txt in enumerate(data[\"Type_of_Travel\"]):\n    ax.annotate(txt, (data[\"Type_of_Travel\"][i], data[\"Popularity\"][i]), color='red')\n    \nax.set_xlabel('Type of Travel', fontsize=15)\nax.set_ylabel('Popularity', fontsize=15)\nax.set_title('Popularity of Different Types of Travel')\nax.grid(True)\nax.set_facecolor('gray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "0,2",
        "coordinate": "(0.0,70.0),(2.0,50.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_5f2d6dad992908d4/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_5f2d6dad992908d4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_5f2d6dad992908d4/myplot.png"
    },
    {
        "id": "Scatter_d58ae1c15c71db6a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# given data\ndemographic = ['Teenagers', 'Adults', 'Elderly', 'Infants']\nhours_of_sleep = [6.5, 7.3, 5.2, 14.8]\n\n# create figure and axis\nfig, ax = plt.subplots()\n\n# scatter plot\nscatter = ax.scatter(demographic, hours_of_sleep, marker='o', cmap='viridis')\n\n# labels\nax.set_xlabel('Demographic')\nax.set_ylabel('Hours of Sleep')\nax.set_title('Hours of Sleep by Demographic')\n\n# grid and background color\nax.grid(False)  # Remove grid lines\nax.set_facecolor('white')  # Change background color to white\n\n# annotate each point\nfor i, txt in enumerate(hours_of_sleep):\n    ax.annotate(txt, (demographic[i], hours_of_sleep[i]))\n\nplt.tight_layout()\n\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the scatter points that contain the center point of the bounding box to #d3bf37, and modify their shape to 'square'.",
        "Input_image": "./test_dataset/Scatter/Scatter_d58ae1c15c71db6a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# given data\ndemographic = ['Teenagers', 'Adults', 'Elderly', 'Infants']\nhours_of_sleep = [6.5, 7.3, 5.2, 14.8]\n\n# create figure and axis\nfig, ax = plt.subplots()\n\n# scatter plot\ncustom_points = [0, 2]  # Target points\nfor i, (demo, hours) in enumerate(zip(demographic, hours_of_sleep)):\n    if i in custom_points:\n        ax.scatter(demo, hours, color='#d3bf37', marker='s')  # Change color and shape for target points\n    else:\n        ax.scatter(demo, hours, color='#1f77b4', marker='o')  # Keep default settings for other points\n\n# labels\nax.set_xlabel('Demographic')\nax.set_ylabel('Hours of Sleep')\nax.set_title('Hours of Sleep by Demographic')\n\n# grid and background color\nax.grid(False)  # Remove grid lines\nax.set_facecolor('white')  # Change background color to white\n\n# annotate each point\nfor i, txt in enumerate(hours_of_sleep):\n    ax.annotate(txt, (demographic[i], hours_of_sleep[i]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "0,2",
        "coordinate": "(0.0,6.5),(2.0,5.2)",
        "Test_image": "./test_dataset/Scatter/Scatter_d58ae1c15c71db6a/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_d58ae1c15c71db6a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_d58ae1c15c71db6a/myplot.png"
    },
    {
        "id": "Scatter_389fec99d4cee379",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = {'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007],\n        'Climate Change Effects': [0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 2.0],\n        'Greenhouse Gas Emissions': [1.2, 1.1, 0.9, 0.5, 0.4, 0.3, 0.2, 1.5],\n        'Global Average Temperature': [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 1.0]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with markers and different line styles, and change the color as per the instructions\nax.scatter(df['Year'], df['Climate Change Effects'], marker='o', label='Climate Change Effects', linestyle='-', color='yellow')\nax.scatter(df['Year'], df['Greenhouse Gas Emissions'], marker='*', label='Greenhouse Gas Emissions', linestyle='--', color='purple')\nax.scatter(df['Year'], df['Global Average Temperature'], marker='^', label='Global Average Temperature', linestyle='-.', color='cyan')\n\n# Set the title and labels\nax.set_title('Yearly Climate Data')\nax.set_xlabel('Year')\nax.set_ylabel('Values')\n\n# Set the background color to gray\nax.set_facecolor('gray')\n\n# Add a grid\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Annotate data values above the points\nfor i, txt in enumerate(df['Climate Change Effects']):\n    ax.annotate(txt, (df['Year'][i], df['Climate Change Effects'][i]))\nfor i, txt in enumerate(df['Greenhouse Gas Emissions']):\n    ax.annotate(txt, (df['Year'][i], df['Greenhouse Gas Emissions'][i]))\nfor i, txt in enumerate(df['Global Average Temperature']):\n    ax.annotate(txt, (df['Year'][i], df['Global Average Temperature'][i]))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the scatter points that share the same legend as those containing the center point of the bounding box to 0.43.",
        "Input_image": "./test_dataset/Scatter/Scatter_389fec99d4cee379/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = {'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007],\n        'Climate Change Effects': [0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 2.0],\n        'Greenhouse Gas Emissions': [1.2, 1.1, 0.9, 0.5, 0.4, 0.3, 0.2, 1.5],\n        'Global Average Temperature': [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 1.0]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with markers and different line styles, and change the color as per the instructions\nax.scatter(df['Year'], df['Climate Change Effects'], marker='o', label='Climate Change Effects', linestyle='-', color='yellow',alpha=0.43)\nax.scatter(df['Year'], df['Greenhouse Gas Emissions'], marker='*', label='Greenhouse Gas Emissions', linestyle='--', color='purple')\nax.scatter(df['Year'], df['Global Average Temperature'], marker='^', label='Global Average Temperature', linestyle='-.', color='cyan')\n\n# Set the title and labels\nax.set_title('Yearly Climate Data')\nax.set_xlabel('Year')\nax.set_ylabel('Values')\n\n# Set the background color to gray\nax.set_facecolor('gray')\n\n# Add a grid\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Annotate data values above the points\nfor i, txt in enumerate(df['Climate Change Effects']):\n    ax.annotate(txt, (df['Year'][i], df['Climate Change Effects'][i]))\nfor i, txt in enumerate(df['Greenhouse Gas Emissions']):\n    ax.annotate(txt, (df['Year'][i], df['Greenhouse Gas Emissions'][i]))\nfor i, txt in enumerate(df['Global Average Temperature']):\n    ax.annotate(txt, (df['Year'][i], df['Global Average Temperature'][i]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "coordinate": "(2000.0,0.4),(2001.0,0.5),(2002.0,0.55),(2003.0,0.6),(2004.0,0.65),(2005.0,0.7),(2006.0,0.75),(2007.0,2.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_389fec99d4cee379/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_389fec99d4cee379/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_389fec99d4cee379/myplot.png"
    },
    {
        "id": "Scatter_1c9f6c4dc7e8467a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = {'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007],\n        'Climate Change Effects': [0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 2.0],\n        'Greenhouse Gas Emissions': [1.2, 1.1, 0.9, 0.5, 0.4, 0.3, 0.2, 1.5],\n        'Global Average Temperature': [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 1.0]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with markers and different line styles, and change the color as per the instructions\nax.scatter(df['Year'], df['Climate Change Effects'], marker='o', label='Climate Change Effects', linestyle='-', color='yellow')\nax.scatter(df['Year'], df['Greenhouse Gas Emissions'], marker='*', label='Greenhouse Gas Emissions', linestyle='--', color='purple')\nax.scatter(df['Year'], df['Global Average Temperature'], marker='^', label='Global Average Temperature', linestyle='-.', color='cyan')\n\n# Set the title and labels\nax.set_title('Yearly Climate Data')\nax.set_xlabel('Year')\nax.set_ylabel('Values')\n\n# Set the background color to gray\nax.set_facecolor('gray')\n\n# Add a grid\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Annotate data values above the points\nfor i, txt in enumerate(df['Climate Change Effects']):\n    ax.annotate(txt, (df['Year'][i], df['Climate Change Effects'][i]))\nfor i, txt in enumerate(df['Greenhouse Gas Emissions']):\n    ax.annotate(txt, (df['Year'][i], df['Greenhouse Gas Emissions'][i]))\nfor i, txt in enumerate(df['Global Average Temperature']):\n    ax.annotate(txt, (df['Year'][i], df['Global Average Temperature'][i]))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the transparency of the points that shares the same legend with the point containing the center point of the bounding box to 0.58 and set their shape to '>'.",
        "Input_image": "./test_dataset/Scatter/Scatter_1c9f6c4dc7e8467a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = {'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007],\n        'Climate Change Effects': [0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 2.0],\n        'Greenhouse Gas Emissions': [1.2, 1.1, 0.9, 0.5, 0.4, 0.3, 0.2, 1.5],\n        'Global Average Temperature': [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 1.0]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with markers and different line styles, and change the color as per the instructions\nax.scatter(df['Year'], df['Climate Change Effects'], marker='o', label='Climate Change Effects', linestyle='-', color='yellow')\nax.scatter(df['Year'], df['Greenhouse Gas Emissions'], marker='*', label='Greenhouse Gas Emissions', linestyle='--', color='purple')\nax.scatter(df['Year'], df['Global Average Temperature'], marker='>', label='Global Average Temperature', linestyle='-.', color='cyan', alpha=0.58)\n\n# Set the title and labels\nax.set_title('Yearly Climate Data')\nax.set_xlabel('Year')\nax.set_ylabel('Values')\n\n# Set the background color to gray\nax.set_facecolor('gray')\n\n# Add a grid\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Annotate data values above the points\nfor i, txt in enumerate(df['Climate Change Effects']):\n    ax.annotate(txt, (df['Year'][i], df['Climate Change Effects'][i]))\nfor i, txt in enumerate(df['Greenhouse Gas Emissions']):\n    ax.annotate(txt, (df['Year'][i], df['Greenhouse Gas Emissions'][i]))\nfor i, txt in enumerate(df['Global Average Temperature']):\n    ax.annotate(txt, (df['Year'][i], df['Global Average Temperature'][i]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "2",
        "coordinate": "(2000.0,0.6),(2001.0,0.65),(2002.0,0.7),(2003.0,0.75),(2004.0,0.8),(2005.0,0.85),(2006.0,0.9),(2007.0,1.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_1c9f6c4dc7e8467a/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_1c9f6c4dc7e8467a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_1c9f6c4dc7e8467a/myplot.png"
    },
    {
        "id": "Scatter_75cd76d363617051",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {'Age Groups': ['15-24', '25-34', '35-44', '45-54', '55-64', '65+'],\n        'Vegetables': [20, 30, 40, 50, 60, 70],\n        'Meat': [80, 70, 60, 50, 40, 30],\n        'Dairy': [100, 90, 80, 70, 60, 50]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot data\nax.scatter(df['Age Groups'], df['Vegetables'], marker='o', cmap='viridis', label='Vegetables')\nax.scatter(df['Age Groups'], df['Meat'], marker='s', cmap='plasma', label='Meat')\nax.scatter(df['Age Groups'], df['Dairy'], marker='^', cmap='inferno', label='Dairy')\n\n# Set the title and labels\nax.set_title('Food consumption by Age Groups', fontsize=14)\nax.set_xlabel('Age Groups', fontsize=12)\nax.set_ylabel('Consumption', fontsize=12)\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Add legend and grid\nax.legend()\nax.grid(True)\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df)):\n    ax.text(df['Age Groups'][i], df['Vegetables'][i], df['Vegetables'][i], ha='center', va='bottom')\n    ax.text(df['Age Groups'][i], df['Meat'][i], df['Meat'][i], ha='center', va='bottom')\n    ax.text(df['Age Groups'][i], df['Dairy'][i], df['Dairy'][i], ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the scatter points that share the same legend as those containing the center point of the bounding box to #821746. Additionally, apply a shadow effect to these points with an offset of 5.4 pixels and a foreground color of silver.",
        "Input_image": "./test_dataset/Scatter/Scatter_75cd76d363617051/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withStroke\nfrom matplotlib.collections import PathCollection\n# Data\ndata = {'Age Groups': ['15-24', '25-34', '35-44', '45-54', '55-64', '65+'],\n        'Vegetables': [20, 30, 40, 50, 60, 70],\n        'Meat': [80, 70, 60, 50, 40, 30],\n        'Dairy': [100, 90, 80, 70, 60, 50]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot data\nax.scatter(df['Age Groups'], df['Vegetables'], marker='o', cmap='viridis', label='Vegetables')\nax.scatter(df['Age Groups'], df['Meat'], marker='s', cmap='plasma', label='Meat')\nax.scatter(df['Age Groups'], df['Dairy'], marker='^', cmap='inferno', label='Dairy')\n\nscatter_plots = [child for child in plt.gca().get_children() if isinstance(child, PathCollection)]\nfor idx,scatter in enumerate(scatter_plots):\n    if idx==1:\n        scatter.set_color('#821746')\n        scatter.set_path_effects([withStroke(linewidth=5.4, foreground='silver')])\n# Set the title and labels\nax.set_title('Food consumption by Age Groups', fontsize=14)\nax.set_xlabel('Age Groups', fontsize=12)\nax.set_ylabel('Consumption', fontsize=12)\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Add legend and grid\nax.legend()\nax.grid(True)\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df)):\n    ax.text(df['Age Groups'][i], df['Vegetables'][i], df['Vegetables'][i], ha='center', va='bottom')\n    ax.text(df['Age Groups'][i], df['Meat'][i], df['Meat'][i], ha='center', va='bottom')\n    ax.text(df['Age Groups'][i], df['Dairy'][i], df['Dairy'][i], ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "coordinate": "(0.0,80.0),(1.0,70.0),(2.0,60.0),(3.0,50.0),(4.0,40.0),(5.0,30.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_75cd76d363617051/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_75cd76d363617051/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_75cd76d363617051/myplot.png"
    },
    {
        "id": "Scatter_4326aa3879a5dadc",
        "Input_code": "import matplotlib.pyplot as plt\n\n# ROI data\nx = [[0.5, 0.7, 0.8, 1.0], \n     [0.4, 0.6, 0.7, 0.9], \n     [0.3, 0.5, 0.6, 0.8], \n     [0.2, 0.4, 0.5, 0.7], \n     [0.1, 0.3, 0.4, 0.6], \n     [0.0, 0.2, 0.3, 0.5]]     \n\ny = [[0.3, 0.4, 0.6, 0.7], \n     [0.2, 0.3, 0.5, 0.6],\n     [0.4, 0.5, 0.7, 0.8], \n     [0.1, 0.2, 0.4, 0.5], \n     [0.0, 0.1, 0.3, 0.4], \n     [0.1, 0.2, 0.4, 0.5]] \n\n# plotting data for each ROI\nfor i in range(6):\n    plt.scatter(x[i], y[i], label=f'ROI {i+1}')\n\nplt.title('Hidden Structures in Brain Activity')\nplt.xlabel('Intensity of brain activity (x-axis)')\nplt.ylabel('Response to visual stimuli (y-axis)')\nplt.legend()\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the scatter points that share the same legend as those containing the center point of the bounding box to #824cb0. Also, update the edge color of these points to #4c70d3 and set the edge width to 2.2.",
        "Input_image": "./test_dataset/Scatter/Scatter_4326aa3879a5dadc/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# ROI data\nx = [[0.5, 0.7, 0.8, 1.0], \n     [0.4, 0.6, 0.7, 0.9], \n     [0.3, 0.5, 0.6, 0.8], \n     [0.2, 0.4, 0.5, 0.7], \n     [0.1, 0.3, 0.4, 0.6], \n     [0.0, 0.2, 0.3, 0.5]]     \n\ny = [[0.3, 0.4, 0.6, 0.7], \n     [0.2, 0.3, 0.5, 0.6],\n     [0.4, 0.5, 0.7, 0.8], \n     [0.1, 0.2, 0.4, 0.5], \n     [0.0, 0.1, 0.3, 0.4], \n     [0.1, 0.2, 0.4, 0.5]] \n\n# plotting data for each ROI\nfor i in range(6):\n    if i in [1, 3]:\n        plt.scatter(x[i], y[i], label=f'ROI {i+1}', color='#824cb0', edgecolor='#4c70d3', linewidths=2.2)\n    else:\n        plt.scatter(x[i], y[i], label=f'ROI {i+1}')\n\nplt.title('Hidden Structures in Brain Activity')\nplt.xlabel('Intensity of brain activity (x-axis)')\nplt.ylabel('Response to visual stimuli (y-axis)')\nplt.legend()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1,3",
        "coordinate": "(0.4,0.2),(0.6,0.3),(0.7,0.5),(0.9,0.6),(0.2,0.1),(0.4,0.2),(0.5,0.4),(0.7,0.5)",
        "Test_image": "./test_dataset/Scatter/Scatter_4326aa3879a5dadc/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_4326aa3879a5dadc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_4326aa3879a5dadc/figure.png"
    },
    {
        "id": "Scatter_7ec46e4ade1f7b52",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = {'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007],\n        'Climate Change Effects': [0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 2.0],\n        'Greenhouse Gas Emissions': [1.2, 1.1, 0.9, 0.5, 0.4, 0.3, 0.2, 1.5],\n        'Global Average Temperature': [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 1.0]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with markers and different line styles, and change the color as per the instructions\nax.scatter(df['Year'], df['Climate Change Effects'], marker='o', label='Climate Change Effects', linestyle='-', color='yellow')\nax.scatter(df['Year'], df['Greenhouse Gas Emissions'], marker='*', label='Greenhouse Gas Emissions', linestyle='--', color='purple')\nax.scatter(df['Year'], df['Global Average Temperature'], marker='^', label='Global Average Temperature', linestyle='-.', color='cyan')\n\n# Set the title and labels\nax.set_title('Yearly Climate Data')\nax.set_xlabel('Year')\nax.set_ylabel('Values')\n\n# Set the background color to gray\nax.set_facecolor('gray')\n\n# Add a grid\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Annotate data values above the points\nfor i, txt in enumerate(df['Climate Change Effects']):\n    ax.annotate(txt, (df['Year'][i], df['Climate Change Effects'][i]))\nfor i, txt in enumerate(df['Greenhouse Gas Emissions']):\n    ax.annotate(txt, (df['Year'][i], df['Greenhouse Gas Emissions'][i]))\nfor i, txt in enumerate(df['Global Average Temperature']):\n    ax.annotate(txt, (df['Year'][i], df['Global Average Temperature'][i]))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the transparency of the scatter points that share the same legend as those containing the center point of the bounding box to 0.48, and update their shape to 'diamond'.",
        "Input_image": "./test_dataset/Scatter/Scatter_7ec46e4ade1f7b52/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = {'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007],\n        'Climate Change Effects': [0.4, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 2.0],\n        'Greenhouse Gas Emissions': [1.2, 1.1, 0.9, 0.5, 0.4, 0.3, 0.2, 1.5],\n        'Global Average Temperature': [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 1.0]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with markers and different line styles, and change the color as per the instructions\nax.scatter(df['Year'], df['Climate Change Effects'], marker='o', label='Climate Change Effects', linestyle='-', color='yellow', alpha=0.48 if 0 in [0] else 1.0)\nax.scatter(df['Year'], df['Greenhouse Gas Emissions'], marker='*', label='Greenhouse Gas Emissions', linestyle='--', color='purple', alpha=0.48 if 1 in [1] else 1.0)\nax.scatter(df['Year'], df['Global Average Temperature'], marker='d', label='Global Average Temperature', linestyle='-.', color='cyan', alpha=0.48 if 2 in [2] else 1.0)\n\n# Set the title and labels\nax.set_title('Yearly Climate Data')\nax.set_xlabel('Year')\nax.set_ylabel('Values')\n\n# Set the background color to gray\nax.set_facecolor('gray')\n\n# Add a grid\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Annotate data values above the points\nfor i, txt in enumerate(df['Climate Change Effects']):\n    ax.annotate(txt, (df['Year'][i], df['Climate Change Effects'][i]))\nfor i, txt in enumerate(df['Greenhouse Gas Emissions']):\n    ax.annotate(txt, (df['Year'][i], df['Greenhouse Gas Emissions'][i]))\nfor i, txt in enumerate(df['Global Average Temperature']):\n    ax.annotate(txt, (df['Year'][i], df['Global Average Temperature'][i]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "2",
        "coordinate": "(2000.0,0.6),(2001.0,0.65),(2002.0,0.7),(2003.0,0.75),(2004.0,0.8),(2005.0,0.85),(2006.0,0.9),(2007.0,1.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_7ec46e4ade1f7b52/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_7ec46e4ade1f7b52/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_7ec46e4ade1f7b52/myplot.png"
    },
    {
        "id": "Scatter_8c7cb68dd6816088",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Specifying data\ncities = ['London', 'Sydney', 'Tokyo', 'Cairo', 'Moscow', 'Mumbai', 'New York', 'Rio de Janeiro', 'Vancouver', 'Johannesburg']\nrainfall = [50, 70, 100, 20, 40, 120, 80, 90, 60, 30]\nx = range(1, len(cities)+1)\n\n# Creating a scatter plot\nplt.scatter(x, rainfall)\n\n# Defining labels\nplt.xlabel('Cities')\nplt.ylabel('Rainfall (mm)')\nplt.title('Average Monthly Rainfall in Different Cities')\n\n# Setting the locations and labels of the x-axis\nplt.xticks(x, cities, rotation='vertical')\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the size of the scatter points that contain the center point of the bounding box to 95, and change their shape to 'diamond'.",
        "Input_image": "./test_dataset/Scatter/Scatter_8c7cb68dd6816088/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Specifying data\ncities = ['London', 'Sydney', 'Tokyo', 'Cairo', 'Moscow', 'Mumbai', 'New York', 'Rio de Janeiro', 'Vancouver', 'Johannesburg']\nrainfall = [50, 70, 100, 20, 40, 120, 80, 90, 60, 30]\nx = range(1, len(cities)+1)\n\n# Creating a scatter plot\ncustom_points = [1, 4, 7]\ncustom_size = 95\nfor i, (xi, rain) in enumerate(zip(x, rainfall)):\n    if i in custom_points:\n        plt.scatter(xi, rain, s=custom_size, marker='D', color='#1f77b4')\n    else:\n        plt.scatter(xi, rain, color='#1f77b4')\n\n# Defining labels\nplt.xlabel('Cities')\nplt.ylabel('Rainfall (mm)')\nplt.title('Average Monthly Rainfall in Different Cities')\n\n# Setting the locations and labels of the x-axis\nplt.xticks(x, cities, rotation='vertical')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,4,7",
        "coordinate": "(2.0,70.0),(5.0,40.0),(8.0,90.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_8c7cb68dd6816088/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_8c7cb68dd6816088/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_8c7cb68dd6816088/figure.png"
    },
    {
        "id": "Scatter_891b648ab20bc6fb",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {'Age Groups': ['15-24', '25-34', '35-44', '45-54', '55-64', '65+'],\n        'Vegetables': [20, 30, 40, 50, 60, 70],\n        'Meat': [80, 70, 60, 50, 40, 30],\n        'Dairy': [100, 90, 80, 70, 60, 50]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot data\nax.scatter(df['Age Groups'], df['Vegetables'], marker='o', cmap='viridis', label='Vegetables')\nax.scatter(df['Age Groups'], df['Meat'], marker='s', cmap='plasma', label='Meat')\nax.scatter(df['Age Groups'], df['Dairy'], marker='^', cmap='inferno', label='Dairy')\n\n# Set the title and labels\nax.set_title('Food consumption by Age Groups', fontsize=14)\nax.set_xlabel('Age Groups', fontsize=12)\nax.set_ylabel('Consumption', fontsize=12)\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Add legend and grid\nax.legend()\nax.grid(True)\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df)):\n    ax.text(df['Age Groups'][i], df['Vegetables'][i], df['Vegetables'][i], ha='center', va='bottom')\n    ax.text(df['Age Groups'][i], df['Meat'][i], df['Meat'][i], ha='center', va='bottom')\n    ax.text(df['Age Groups'][i], df['Dairy'][i], df['Dairy'][i], ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the scatter points that share the same legend as those containing the center point of the bounding box to #622a8e.",
        "Input_image": "./test_dataset/Scatter/Scatter_891b648ab20bc6fb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {'Age Groups': ['15-24', '25-34', '35-44', '45-54', '55-64', '65+'],\n        'Vegetables': [20, 30, 40, 50, 60, 70],\n        'Meat': [80, 70, 60, 50, 40, 30],\n        'Dairy': [100, 90, 80, 70, 60, 50]}\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot data\nax.scatter(df['Age Groups'], df['Vegetables'], marker='o', color='#622a8e', label='Vegetables')\nax.scatter(df['Age Groups'], df['Meat'], marker='s', cmap='plasma', label='Meat')\nax.scatter(df['Age Groups'], df['Dairy'], marker='^', cmap='inferno', label='Dairy')\n\n# Set the title and labels\nax.set_title('Food consumption by Age Groups', fontsize=14)\nax.set_xlabel('Age Groups', fontsize=12)\nax.set_ylabel('Consumption', fontsize=12)\n\n# Set the background color\nax.set_facecolor('gray')\n\n# Add legend and grid\nax.legend()\nax.grid(True)\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df)):\n    ax.text(df['Age Groups'][i], df['Vegetables'][i], df['Vegetables'][i], ha='center', va='bottom')\n    ax.text(df['Age Groups'][i], df['Meat'][i], df['Meat'][i], ha='center', va='bottom')\n    ax.text(df['Age Groups'][i], df['Dairy'][i], df['Dairy'][i], ha='center', va='bottom')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "coordinate": "(0.0,20.0),(1.0,30.0),(2.0,40.0),(3.0,50.0),(4.0,60.0),(5.0,70.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_891b648ab20bc6fb/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_891b648ab20bc6fb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_891b648ab20bc6fb/myplot.png"
    },
    {
        "id": "Scatter_75862949203f635f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create dataframe from given data\ndata = {\"Age Group\": [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"],\n        \"Gym Visits\": [12, 27, 45, 60, 30],\n        \"Outdoor Activities\": [35, 30, 25, 15, 5]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data\nscatter1 = ax.scatter(df[\"Age Group\"], df[\"Gym Visits\"], label='Gym Visits', linestyle='-', marker='o', color='r')\nscatter2 = ax.scatter(df[\"Age Group\"], df[\"Outdoor Activities\"], label='Outdoor Activities', linestyle='--', marker='x', color='b')\n\n# Annotation with increased font size\nannotation_font_size = 12  # New font size for annotations\nfor i, txt in enumerate(df[\"Gym Visits\"]):\n    ax.annotate(txt, (df[\"Age Group\"][i], df[\"Gym Visits\"][i]), fontsize=annotation_font_size)\nfor i, txt in enumerate(df[\"Outdoor Activities\"]):\n    ax.annotate(txt, (df[\"Age Group\"][i], df[\"Outdoor Activities\"][i]), fontsize=annotation_font_size)\n\n# Labels and title with increased font size\nlabel_title_font_size = 14  # New font size for labels and title\nax.set_xlabel('Age Group', fontsize=label_title_font_size)\nax.set_ylabel('Number of Activities', fontsize=label_title_font_size)\nax.set_title('Number of Activities by Age Group', fontsize=label_title_font_size)\n\n# Adding grid and changing background color\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Add legend\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the edge color of the scatter points that share the same legend as those containing the center point of the bounding box to #540934, and set the edge width to 2.8.",
        "Input_image": "./test_dataset/Scatter/Scatter_75862949203f635f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Create dataframe from given data\ndata = {\"Age Group\": [\"18-25\", \"26-35\", \"36-45\", \"46-55\", \"56-65\"],\n        \"Gym Visits\": [12, 27, 45, 60, 30],\n        \"Outdoor Activities\": [35, 30, 25, 15, 5]}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data\nscatter1 = ax.scatter(df[\"Age Group\"], df[\"Gym Visits\"], label='Gym Visits', linestyle='-', marker='o', color='r', edgecolors='#540934', linewidths=2.8)\nscatter2 = ax.scatter(df[\"Age Group\"], df[\"Outdoor Activities\"], label='Outdoor Activities', linestyle='--', marker='x', color='b')\n\n# Annotation with increased font size\nannotation_font_size = 12  # New font size for annotations\nfor i, txt in enumerate(df[\"Gym Visits\"]):\n    ax.annotate(txt, (df[\"Age Group\"][i], df[\"Gym Visits\"][i]), fontsize=annotation_font_size)\nfor i, txt in enumerate(df[\"Outdoor Activities\"]):\n    ax.annotate(txt, (df[\"Age Group\"][i], df[\"Outdoor Activities\"][i]), fontsize=annotation_font_size)\n\n# Labels and title with increased font size\nlabel_title_font_size = 14  # New font size for labels and title\nax.set_xlabel('Age Group', fontsize=label_title_font_size)\nax.set_ylabel('Number of Activities', fontsize=label_title_font_size)\nax.set_title('Number of Activities by Age Group', fontsize=label_title_font_size)\n\n# Adding grid and changing background color\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Add legend\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "coordinate": "(0.0,12.0),(1.0,27.0),(2.0,45.0),(3.0,60.0),(4.0,30.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_75862949203f635f/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_75862949203f635f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_75862949203f635f/myplot.png"
    },
    {
        "id": "Scatter_c472053bcad80ada",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Creating the DataFrame from given data\ndata = {\"Platform\": [\"Facebook\", \"Instagram\", \"Twitter\", \"Snapchat\", \"LinkedIn\", \"Pinterest\", \"Reddit\", \"WeChat\", \"WhatsApp\"],\n        \"2016\": [100, 80, 90, 70, 60, 50, 30, 20, 10],\n        \"2017\": [120, 110, 70, 100, 80, 75, 60, 40, 5],\n        \"2018\": [85, 130, 95, 70, 85, 55, 65, 45, 30]}\ndf = pd.DataFrame(data)\n\n# Plotting the scatter chart\nfig, ax = plt.subplots()\n\n# Adding grids\nax.grid(True)\n\n# Changing the background color\nax.set_facecolor('lightgray')\n\n# Plotting the data for each year\nfor year in [\"2016\", \"2017\", \"2018\"]:\n    ax.scatter(df[\"Platform\"], df[year], marker='o', alpha=0.5, label=year)\n\n    # Annotating data values\n    for i, txt in enumerate(df[year]):\n        ax.annotate(txt, (df[\"Platform\"][i], df[year][i]))\n\n# Setting the title, labels, and legend\nax.set_title('Platform Usage Over Years')\nax.set_xlabel('Platform')\nax.set_ylabel('Usage')\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the scatter points that share the same legend as those containing the center point of the bounding box to 0.54. Also, change their edge color to #e755c7 and set the edge width to 2.3.",
        "Input_image": "./test_dataset/Scatter/Scatter_c472053bcad80ada/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Creating the DataFrame from given data\ndata = {\"Platform\": [\"Facebook\", \"Instagram\", \"Twitter\", \"Snapchat\", \"LinkedIn\", \"Pinterest\", \"Reddit\", \"WeChat\", \"WhatsApp\"],\n        \"2016\": [100, 80, 90, 70, 60, 50, 30, 20, 10],\n        \"2017\": [120, 110, 70, 100, 80, 75, 60, 40, 5],\n        \"2018\": [85, 130, 95, 70, 85, 55, 65, 45, 30]}\ndf = pd.DataFrame(data)\n\n# Plotting the scatter chart\nfig, ax = plt.subplots()\n\n# Adding grids\nax.grid(True)\n\n# Changing the background color\nax.set_facecolor('lightgray')\n\n# Plotting the data for each year\nfor year in [\"2016\", \"2017\", \"2018\"]:\n    scatter = ax.scatter(df[\"Platform\"], df[year], marker='o', alpha=0.5, label=year)\n    if year == \"2017\":\n        scatter.set_alpha(0.54)\n        scatter.set_edgecolor('#e755c7')\n        scatter.set_linewidth(2.3)\n    # Annotating data values\n    for i, txt in enumerate(df[year]):\n        ax.annotate(txt, (df[\"Platform\"][i], df[year][i]))\n\n# Setting the title, labels, and legend\nax.set_title('Platform Usage Over Years')\nax.set_xlabel('Platform')\nax.set_ylabel('Usage')\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "coordinate": "(0.0,120.0),(1.0,110.0),(2.0,70.0),(3.0,100.0),(4.0,80.0),(5.0,75.0),(6.0,60.0),(7.0,40.0),(8.0,5.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_c472053bcad80ada/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_c472053bcad80ada/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_c472053bcad80ada/myplot.png"
    },
    {
        "id": "Scatter_71d0fdd82ba9f3bb",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nallergy_type = [\"Dust Mites\", \"Pollens\", \"Dairy\"]\nprevalence = [[15,17,13,16,20,18,15,20,17,25,12,15,13,18,17,20,16,19,17,16],\n              [25,28,24,23,22,30,34,33,32,30,40,35,39,36,38,32,30,28,27,25],\n              [20,22,25,20,18,17,16,15,17,30,18,18,20,19,14,15,16,20,18,20]]\n\n# Create the scatter chart\nfig, ax = plt.subplots()\n\nfor i, type in enumerate(allergy_type):\n    ax.scatter(np.arange(len(prevalence[i])), prevalence[i], label=type)\n\n# Add labels, title, legend, and grid\nax.set_xlabel('Time')\nax.set_ylabel('Prevalence')\nax.set_title('Prevalence of Different Allergies Over Time')\nax.legend()\nax.grid(True)\n\n# Annotate each point\nfor i, type in enumerate(allergy_type):\n    for j, p in enumerate(prevalence[i]):\n        ax.text(j, p, str(p))\n\n# Change the background color to white\nax.set_facecolor('white')  # Modified line\n\n# Tight layout and save figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the size of the scatter points that share the same legend as those containing the center point of the bounding box to 27, and adjust their transparency to 0.52.",
        "Input_image": "./test_dataset/Scatter/Scatter_71d0fdd82ba9f3bb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nallergy_type = [\"Dust Mites\", \"Pollens\", \"Dairy\"]\nprevalence = [[15,17,13,16,20,18,15,20,17,25,12,15,13,18,17,20,16,19,17,16],\n              [25,28,24,23,22,30,34,33,32,30,40,35,39,36,38,32,30,28,27,25],\n              [20,22,25,20,18,17,16,15,17,30,18,18,20,19,14,15,16,20,18,20]]\n\n# Create the scatter chart\nfig, ax = plt.subplots()\n\nfor i, type in enumerate(allergy_type):\n    if i == 1:  # Target scatter\n        ax.scatter(np.arange(len(prevalence[i])), prevalence[i], label=type, s=27, alpha=0.52)\n    else:\n        ax.scatter(np.arange(len(prevalence[i])), prevalence[i], label=type)\n\n# Add labels, title, legend, and grid\nax.set_xlabel('Time')\nax.set_ylabel('Prevalence')\nax.set_title('Prevalence of Different Allergies Over Time')\nax.legend()\nax.grid(True)\n\n# Annotate each point\nfor i, type in enumerate(allergy_type):\n    for j, p in enumerate(prevalence[i]):\n        ax.text(j, p, str(p))\n\n# Change the background color to white\nax.set_facecolor('white')  # Modified line\n\n# Tight layout and save figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "coordinate": "(0.0,25.0),(1.0,28.0),(2.0,24.0),(3.0,23.0),(4.0,22.0),(5.0,30.0),(6.0,34.0),(7.0,33.0),(8.0,32.0),(9.0,30.0),(10.0,40.0),(11.0,35.0),(12.0,39.0),(13.0,36.0),(14.0,38.0),(15.0,32.0),(16.0,30.0),(17.0,28.0),(18.0,27.0),(19.0,25.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_71d0fdd82ba9f3bb/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_71d0fdd82ba9f3bb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_71d0fdd82ba9f3bb/myplot.png"
    },
    {
        "id": "Scatter_20198f4ce370ad57",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = {\"Year\": [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"],\n        \"Number of Visits\": [5000, 4600, 4700, 4400, 7000, 6900, 4500],\n        \"Number of Books Borrowed\": [7000, 6000, 9000, 6500, 8000, 12000, 7000]}\n\n# Convert data to DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Create scatter plot for Number of Visits\nvisits = ax.scatter(df[\"Year\"], df[\"Number of Visits\"], marker=\"o\", color=\"blue\", label=\"Visits\")\n\n# Create scatter plot for Number of Books Borrowed\nbooks = ax.scatter(df[\"Year\"], df[\"Number of Books Borrowed\"], marker=\"x\", color=\"red\", label=\"Books Borrowed\")\n\n# Set labels and title\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Count\")\nax.set_title(\"Number of Visits and Books Borrowed Over Years\")\n\n# Annotate data points\nfor i, txt in enumerate(df[\"Number of Visits\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Number of Visits\"][i]))\n\nfor i, txt in enumerate(df[\"Number of Books Borrowed\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Number of Books Borrowed\"][i]))\n\n# Add grid and legend\nax.grid(True)\nax.legend()\n\n# Change background color\nax.set_facecolor('gray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Add a shadow effect to the scatter points that share the same legend as those containing the center point of the bounding box. Set the shadow offset to 7.9 pixels and use a silver color for the foreground.",
        "Input_image": "./test_dataset/Scatter/Scatter_20198f4ce370ad57/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withStroke\n\n# Define the data\ndata = {\"Year\": [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"],\n        \"Number of Visits\": [5000, 4600, 4700, 4400, 7000, 6900, 4500],\n        \"Number of Books Borrowed\": [7000, 6000, 9000, 6500, 8000, 12000, 7000]}\n\n# Convert data to DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Create scatter plot for Number of Visits\nvisits = ax.scatter(df[\"Year\"], df[\"Number of Visits\"], marker=\"o\", color=\"blue\", label=\"Visits\", path_effects=[withStroke(linewidth=7.9, foreground='silver')])\n\n# Create scatter plot for Number of Books Borrowed\nbooks = ax.scatter(df[\"Year\"], df[\"Number of Books Borrowed\"], marker=\"x\", color=\"red\", label=\"Books Borrowed\")\n\n# Set labels and title\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Count\")\nax.set_title(\"Number of Visits and Books Borrowed Over Years\")\n\n# Annotate data points\nfor i, txt in enumerate(df[\"Number of Visits\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Number of Visits\"][i]))\n\nfor i, txt in enumerate(df[\"Number of Books Borrowed\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Number of Books Borrowed\"][i]))\n\n# Add grid and legend\nax.grid(True)\nax.legend()\n\n# Change background color\nax.set_facecolor('gray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "coordinate": "(0.0,5000.0),(1.0,4600.0),(2.0,4700.0),(3.0,4400.0),(4.0,7000.0),(5.0,6900.0),(6.0,4500.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_20198f4ce370ad57/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_20198f4ce370ad57/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_20198f4ce370ad57/myplot.png"
    },
    {
        "id": "Scatter_5944bf945a5e2a3f",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\n\n# Data\ndepths = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\ntemperatures = [28.3, 27.8, 27.5, 26.9, 26.5, 26.2, 25.8, 25.4, 25.0, 24.6]\n\n# Create a scatter plot\nplt.figure(figsize=(8, 6))  # Optional: Set the figure size\nplt.scatter(temperatures, depths, color='blue')  # plot the data\nplt.gca().invert_yaxis()  # invert the y-axis to show depth increasing downwards\n\n# Set plot title and labels for axes\nplt.title(\"Ocean Temperature Variation Over Depth\")\nplt.xlabel(\"Temperature (\u00b0C)\")\nplt.ylabel(\"Depth (meters)\")\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the size of the scatter points that contain the center point of the bounding box to 89 and set their transparency to 0.53.",
        "Input_image": "./test_dataset/Scatter/Scatter_5944bf945a5e2a3f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ndepths = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\ntemperatures = [28.3, 27.8, 27.5, 26.9, 26.5, 26.2, 25.8, 25.4, 25.0, 24.6]\n\n# Create a scatter plot\nplt.figure(figsize=(8, 6))  # Optional: Set the figure size\ncustom_points = [1, 3, 5]\ncustom_size = 89\ncustom_alpha = 0.53\nfor i, (temp, depth) in enumerate(zip(temperatures, depths)):\n    if i in custom_points:\n        plt.scatter(temp, depth, color='blue', s=custom_size, alpha=custom_alpha)\n    else:\n        plt.scatter(temp, depth, color='blue')\nplt.gca().invert_yaxis()  # invert the y-axis to show depth increasing downwards\n\n# Set plot title and labels for axes\nplt.title(\"Ocean Temperature Variation Over Depth\")\nplt.xlabel(\"Temperature (\u00b0C)\")\nplt.ylabel(\"Depth (meters)\")\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(27.8,10.0),(26.9,30.0),(26.2,50.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_5944bf945a5e2a3f/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_5944bf945a5e2a3f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_5944bf945a5e2a3f/figure.png"
    },
    {
        "id": "Scatter_a09c0c42b2d4cf55",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ntemperature = [14.2, 16.4, 11.9, 15.2, 18.5, 22.1, 19.4, 25.1, 23.4, 18.1, 22.6, 17.2]\nrevenue = [215, 325, 185, 332, 406, 522, 412, 614, 544, 421, 445, 408]\n\n# Create scatter plot\nplt.scatter(temperature, revenue)\n\n# Labels and title\nplt.xlabel(\"Temperature (\u00b0C)\")\nplt.ylabel(\"Revenue ($)\")\nplt.title(\"Relationship between Temperature and Revenue\")\n\n# Show plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the shape of the points that contain the center point of the bounding box to 'star'. Additionally, update their edge color to #fad3ad and set the edge width to 1.8.",
        "Input_image": "./test_dataset/Scatter/Scatter_a09c0c42b2d4cf55/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ntemperature = [14.2, 16.4, 11.9, 15.2, 18.5, 22.1, 19.4, 25.1, 23.4, 18.1, 22.6, 17.2]\nrevenue = [215, 325, 185, 332, 406, 522, 412, 614, 544, 421, 445, 408]\n\n# Create scatter plot\ncustom_points = [1, 4, 7]\nfor i, (temp, rev) in enumerate(zip(temperature, revenue)):\n    if i in custom_points:\n        plt.scatter(temp, rev, marker='*', edgecolors='#fad3ad', linewidths=1.8, color='#1f77b4')\n    else:\n        plt.scatter(temp, rev, color='#1f77b4')\n\n# Labels and title\nplt.xlabel(\"Temperature (\u00b0C)\")\nplt.ylabel(\"Revenue ($)\")\nplt.title(\"Relationship between Temperature and Revenue\")\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,4,7",
        "coordinate": "(16.4,325.0),(18.5,406.0),(25.1,614.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_a09c0c42b2d4cf55/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_a09c0c42b2d4cf55/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_a09c0c42b2d4cf55/figure.png"
    },
    {
        "id": "Scatter_231ca808e958ead8",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the time points and entanglement values for each pair of particles\ntime = np.array([1,2,3,4,5])\nentanglement_pair1 = np.array([0.82, 0.75, 0.68, 0.61, 0.56])\nentanglement_pair2 = np.array([0.91, 0.85, 0.78, 0.72, 0.66])\nentanglement_pair3 = np.array([0.95, 0.89, 0.83, 0.77, 0.71])\n\n# Create the scatter plot\nplt.scatter(time, entanglement_pair1, label='Particle Pair 1')\nplt.scatter(time, entanglement_pair2, label='Particle Pair 2')\nplt.scatter(time, entanglement_pair3, label='Particle Pair 3')\n\nplt.xlabel('Time')\nplt.ylabel('Entanglement')\nplt.title('Quantum Entanglement in TimeSpace Theory')\nplt.legend()\nplt.grid(True)\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the shape of the points that share the same legend as those containing the center point of the bounding box to 'star'. Set their edge color to #e9b2c1 and adjust the edge width to 2.3.",
        "Input_image": "./test_dataset/Scatter/Scatter_231ca808e958ead8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the time points and entanglement values for each pair of particles\ntime = np.array([1,2,3,4,5])\nentanglement_pair1 = np.array([0.82, 0.75, 0.68, 0.61, 0.56])\nentanglement_pair2 = np.array([0.91, 0.85, 0.78, 0.72, 0.66])\nentanglement_pair3 = np.array([0.95, 0.89, 0.83, 0.77, 0.71])\n\n# Create the scatter plot\nplt.scatter(time, entanglement_pair1, label='Particle Pair 1', marker='*', edgecolors='#e9b2c1', linewidths=2.3)\nplt.scatter(time, entanglement_pair2, label='Particle Pair 2')\nplt.scatter(time, entanglement_pair3, label='Particle Pair 3')\n\nplt.xlabel('Time')\nplt.ylabel('Entanglement')\nplt.title('Quantum Entanglement in TimeSpace Theory')\nplt.legend()\nplt.grid(True)\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "coordinate": "(1.0,0.82),(2.0,0.75),(3.0,0.68),(4.0,0.61),(5.0,0.56)",
        "Test_image": "./test_dataset/Scatter/Scatter_231ca808e958ead8/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_231ca808e958ead8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_231ca808e958ead8/figure.png"
    },
    {
        "id": "Scatter_6c3f1b9af21ab610",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    \"Disaster\": [\"Earthquake\", \"Earthquake\", \"Earthquake\", \"Earthquake\", \"Earthquake\", \"Flood\", \"Flood\", \"Flood\", \"Flood\", \"Flood\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Tornado\", \"Tornado\", \"Tornado\", \"Tornado\", \"Tornado\"],\n    \"Local Economy Impact\": [5000, 8000, 12000, 7000, 13000, 4500, 3000, 7000, 3000, 4500, 4000, 2000, 9000, 2000, 4000, 3500, 1500, 6000, 1500, 3500],\n    \"Year\": [2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10,6))\n\n# Define a color for each disaster type\ndisaster_colors = {\n    \"Earthquake\": \"red\",\n    \"Flood\": \"blue\",\n    \"Hurricane\": \"green\",\n    \"Tornado\": \"purple\"\n}\n\ndisasters = df[\"Disaster\"].unique()\n\nfor disaster in disasters:\n    subset = df[df[\"Disaster\"] == disaster]\n    ax.scatter(subset[\"Year\"], subset[\"Local Economy Impact\"], label=disaster, color=disaster_colors[disaster])\n\nax.set_xlabel('Year')\nax.set_ylabel('Local Economy Impact')\nax.set_title('Impact of Natural Disasters on Local Economies')\nax.grid(True)\nax.set_facecolor('lightgray')\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the scatter points that share the same legend as those containing the center point of the bounding box to 0.42. Additionally, add a shadow effect to these points with an offset of 5.8 pixels and a foreground color of gold.",
        "Input_image": "./test_dataset/Scatter/Scatter_6c3f1b9af21ab610/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import withStroke\n\n# Given data\ndata = {\n    \"Disaster\": [\"Earthquake\", \"Earthquake\", \"Earthquake\", \"Earthquake\", \"Earthquake\", \"Flood\", \"Flood\", \"Flood\", \"Flood\", \"Flood\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Tornado\", \"Tornado\", \"Tornado\", \"Tornado\", \"Tornado\"],\n    \"Local Economy Impact\": [5000, 8000, 12000, 7000, 13000, 4500, 3000, 7000, 3000, 4500, 4000, 2000, 9000, 2000, 4000, 3500, 1500, 6000, 1500, 3500],\n    \"Year\": [2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10,6))\n\n# Define a color for each disaster type\ndisaster_colors = {\n    \"Earthquake\": \"red\",\n    \"Flood\": \"blue\",\n    \"Hurricane\": \"green\",\n    \"Tornado\": \"purple\"\n}\n\ndisasters = df[\"Disaster\"].unique()\n\nfor disaster in disasters:\n    subset = df[df[\"Disaster\"] == disaster]\n    if disaster == \"Hurricane\":\n        scatter = ax.scatter(subset[\"Year\"], subset[\"Local Economy Impact\"], label=disaster, color=disaster_colors[disaster], alpha=0.42, path_effects=[withStroke(linewidth=5.8, foreground='gold')])\n    else:\n        ax.scatter(subset[\"Year\"], subset[\"Local Economy Impact\"], label=disaster, color=disaster_colors[disaster])\n\nax.set_xlabel('Year')\nax.set_ylabel('Local Economy Impact')\nax.set_title('Impact of Natural Disasters on Local Economies')\nax.grid(True)\nax.set_facecolor('lightgray')\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "2",
        "coordinate": "(2000.0,4000.0),(2001.0,2000.0),(2002.0,9000.0),(2003.0,2000.0),(2004.0,4000.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_6c3f1b9af21ab610/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_6c3f1b9af21ab610/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_6c3f1b9af21ab610/myplot.png"
    },
    {
        "id": "Scatter_0eabb480357c2d21",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Initialize the data\nplanets = ['Planet A', 'Planet B', 'Planet C', 'Planet D', 'Planet E', 'Planet F']\nlightyears = [4.3, 7.1, 12.6, 3.9, 8.5, 5.2]\nprobability = [0.8, 0.5, 0.3, 0.9, 0.6, 0.7]\n\n# Create a scatter plot\nplt.figure(figsize=(10,6))\nplt.scatter(lightyears, probability, color='blue')\n\n# Annotate the points\nfor i in range(len(planets)):\n    plt.text(lightyears[i], probability[i], planets[i])\n\n# Add labels and title   \nplt.xlabel('Planetary distance from the nearest star (in light-years)')\nplt.ylabel('Probability of detecting alien life forms')\nplt.title('Alien life form distribution across different planets')\n\n# Show the plot\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the shape of the scatter points that contain the center point of the bounding box to 'star'. Also, set the edge color of these points to #da203c and adjust the edge width to 2.5.",
        "Input_image": "./test_dataset/Scatter/Scatter_0eabb480357c2d21/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Initialize the data\nplanets = ['Planet A', 'Planet B', 'Planet C', 'Planet D', 'Planet E', 'Planet F']\nlightyears = [4.3, 7.1, 12.6, 3.9, 8.5, 5.2]\nprobability = [0.8, 0.5, 0.3, 0.9, 0.6, 0.7]\n\n# Create a scatter plot\nplt.figure(figsize=(10,6))\ncustom_points = [1, 3, 5]\nfor i, (ly, prob) in enumerate(zip(lightyears, probability)):\n    if i in custom_points:\n        plt.scatter(ly, prob, marker='*', edgecolors='#da203c', linewidths=2.5, color='blue')\n    else:\n        plt.scatter(ly, prob, color='blue')\n\n# Annotate the points\nfor i in range(len(planets)):\n    plt.text(lightyears[i], probability[i], planets[i])\n\n# Add labels and title   \nplt.xlabel('Planetary distance from the nearest star (in light-years)')\nplt.ylabel('Probability of detecting alien life forms')\nplt.title('Alien life form distribution across different planets')\n\n# Show the plot\nplt.grid(True)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(7.1,0.5),(3.9,0.9),(5.2,0.7)",
        "Test_image": "./test_dataset/Scatter/Scatter_0eabb480357c2d21/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_0eabb480357c2d21/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_0eabb480357c2d21/figure.png"
    },
    {
        "id": "Scatter_a4324e0c69aaeb95",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Year Data\nyears = [1990, 1995, 2000, 2005, 2010, 2015, 2020]\n\n# Adoption Rates Data\ngen_x = [20, 30, 40, 55, 70, 80, 85]\nmillennials = [5, 15, 30, 50, 65, 80, 95]\ngen_z = [0, 1, 10, 30, 55, 70, 85]\nbaby_boomers = [50, 35, 20, 10, 5, 2, 1]\n\n# Plotting the Data\nplt.figure(figsize=(10,6))\nplt.scatter(years, gen_x, color='r', label='Generation X')\nplt.scatter(years, millennials, color='g', label='Millennials')\nplt.scatter(years, gen_z, color='b', label='Generation Z')\nplt.scatter(years, baby_boomers, color='y', label='Baby Boomers')\n\n# Adding Labels and Title\nplt.xlabel('Years')\nplt.ylabel('Adoption Rate (%)')\nplt.title('Technology Adoption Rates Among Different Generations')\n\n# Adding a Legend\nplt.legend()\n\n# Display the Plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the size of the scatter points that share the same legend as those containing the center point of the bounding box to 99. Additionally, apply a shadow effect to these points with an offset of 7.7 pixels and a gold foreground color.",
        "Input_image": "./test_dataset/Scatter/Scatter_a4324e0c69aaeb95/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import withStroke\n\n# Year Data\nyears = [1990, 1995, 2000, 2005, 2010, 2015, 2020]\n\n# Adoption Rates Data\ngen_x = [20, 30, 40, 55, 70, 80, 85]\nmillennials = [5, 15, 30, 50, 65, 80, 95]\ngen_z = [0, 1, 10, 30, 55, 70, 85]\nbaby_boomers = [50, 35, 20, 10, 5, 2, 1]\n\n# Plotting the Data\nplt.figure(figsize=(10,6))\n# Target scatter index\ncustom_points = [1, 3]  # Selecting Millennials and Generation Z for modification\nfor i, (data, color, label) in enumerate(zip([gen_x, millennials, gen_z, baby_boomers], ['r', 'g', 'b', 'y'], ['Generation X', 'Millennials', 'Generation Z', 'Baby Boomers'])):\n    if i in custom_points:\n        plt.scatter(years, data, color=color, label=label, s=99, path_effects=[withStroke(linewidth=7.7, foreground='gold')])\n    else:\n        plt.scatter(years, data, color=color, label=label)\n\n# Adding Labels and Title\nplt.xlabel('Years')\nplt.ylabel('Adoption Rate (%)')\nplt.title('Technology Adoption Rates Among Different Generations')\n\n# Adding a Legend\nplt.legend()\n\n# Display the Plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1,3",
        "coordinate": "(1990.0,5.0),(1995.0,15.0),(2000.0,30.0),(2005.0,50.0),(2010.0,65.0),(2015.0,80.0),(2020.0,95.0),(1990.0,50.0),(1995.0,35.0),(2000.0,20.0),(2005.0,10.0),(2010.0,5.0),(2015.0,2.0),(2020.0,1.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_a4324e0c69aaeb95/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_a4324e0c69aaeb95/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_a4324e0c69aaeb95/figure.png"
    },
    {
        "id": "Scatter_3b2838941d2aa301",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Year': [2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    'North America': [12.7, 13.5, 14.2, 15.0, 16.1, 14.8, 15.5],\n    'Europe': [15.6, 16.2, 17.1, 18.0, 20.0, 19.8, 22.0],\n    'Asia': [18.9, 22.3, 20.8, 23.5, 18.0, 25.5, 24.0]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Draw scatter plots\nfor column in df.columns[1:]:\n    ax.scatter(df['Year'], df[column], label=column)\n\n# Set chart title and labels\nax.set_title('Scatter Chart of Data over Years', fontsize=15)\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Value', fontsize=12)\n\n# Set grid lines and background color\nax.grid(False)  # Disable grid lines\nax.set_facecolor('white')  # Change background color to white\n\n# Set legend\nax.legend()\n\n# Annotate each line with the label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nfig.tight_layout()\nplt.savefig(\"myplot_no_grid_white_background.png\")",
        "Instruction": "Adjust the transparency of the scatter points that share the same legend as those containing the center point of the bounding box to 0.59. Additionally, add a shadow effect to these points with a 5.8-pixel offset and a silver foreground color.",
        "Input_image": "./test_dataset/Scatter/Scatter_3b2838941d2aa301/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withStroke\n\n# Define the data\ndata = {\n    'Year': [2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    'North America': [12.7, 13.5, 14.2, 15.0, 16.1, 14.8, 15.5],\n    'Europe': [15.6, 16.2, 17.1, 18.0, 20.0, 19.8, 22.0],\n    'Asia': [18.9, 22.3, 20.8, 23.5, 18.0, 25.5, 24.0]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Draw scatter plots\nfor idx, column in enumerate(df.columns[1:]):\n    scatter = ax.scatter(df['Year'], df[column], label=column)\n    if idx == 1:  # Targeting 'Europe' for modification\n        scatter.set_alpha(0.59)\n        scatter.set_path_effects([withStroke(linewidth=5.8, foreground='silver')])\n\n# Set chart title and labels\nax.set_title('Scatter Chart of Data over Years', fontsize=15)\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Value', fontsize=12)\n\n# Set grid lines and background color\nax.grid(False)  # Disable grid lines\nax.set_facecolor('white')  # Change background color to white\n\n# Set legend\nax.legend()\n\n# Annotate each line with the label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "coordinate": "(2013.0,15.6),(2014.0,16.2),(2015.0,17.1),(2016.0,18.0),(2017.0,20.0),(2018.0,19.8),(2019.0,22.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_3b2838941d2aa301/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_3b2838941d2aa301/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_3b2838941d2aa301/myplot_no_grid_white_background.png"
    },
    {
        "id": "Scatter_a36b13aee8b9b70c",
        "Input_code": "import matplotlib.pyplot as plt  #import matplotlib library\n\n# Define the data\nelevation = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]\nbiodiversity = [35, 45, 55, 60, 50, 40, 30, 25, 20, 15]\n\n# Create a scatter plot\nplt.scatter(elevation, biodiversity, color='g', label='Data points')\n\n# Add labels and title\nplt.xlabel('Elevation (meters)')\nplt.ylabel('Biodiversity Richness (species count)')\nplt.title('Biodiversity Richness in Tropical Rainforests at Different Elevations')\n\n# Show a legend\nplt.legend()\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the shape of the points in the scatter plot that contain the center point of the bounding box to 'square'. For these points, set the edge color to #bcf8c0 and the edge width to 1.7.",
        "Input_image": "./test_dataset/Scatter/Scatter_a36b13aee8b9b70c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Define the data\nelevation = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]\nbiodiversity = [35, 45, 55, 60, 50, 40, 30, 25, 20, 15]\n\n# Create a scatter plot\ncustom_points = [1, 3, 5, 7]\nfor i, (elev, bio) in enumerate(zip(elevation, biodiversity)):\n    if i in custom_points:\n        plt.scatter(elev, bio, color='g', marker='s', edgecolors='#bcf8c0', linewidths=1.7, label='Data points' if i == 1 else '')\n    else:\n        plt.scatter(elev, bio, color='g', label='Data points' if i == 0 else '')\n\n# Add labels and title\nplt.xlabel('Elevation (meters)')\nplt.ylabel('Biodiversity Richness (species count)')\nplt.title('Biodiversity Richness in Tropical Rainforests at Different Elevations')\n\n# Show a legend\nplt.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5,7",
        "coordinate": "(400.0,45.0),(800.0,60.0),(1200.0,40.0),(1600.0,25.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_a36b13aee8b9b70c/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_a36b13aee8b9b70c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_a36b13aee8b9b70c/figure.png"
    },
    {
        "id": "Scatter_674db0b587a284c3",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load the data\ndata = pd.DataFrame({\n    \"Culture\": [\"American\", \"Chinese\", \"Indian\", \"Japanese\", \"Mexican\", \"French\"],\n    \"Vegetarian\": [45, 50, 80, 60, 50, 40],\n    \"Seafood\": [60, 92, 40, 95, 70, 80],\n    \"Fast Food\": [85, 74, 50, 55, 65, 70]\n})\n\nfig, ax = plt.subplots()\n\n# Plot each dietary preference as a scatter plot\nfor column in [\"Vegetarian\", \"Seafood\", \"Fast Food\"]:\n    ax.scatter(data[\"Culture\"], data[column], label=column, marker='o')\n\n# Annotate each point with its corresponding value\nfor i, txt in enumerate(data[\"Vegetarian\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\nfor i, txt in enumerate(data[\"Seafood\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\nfor i, txt in enumerate(data[\"Fast Food\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\n\nax.set_xlabel('Culture', fontsize=15)\nax.set_ylabel('Preference (%)', fontsize=15)\nax.set_title('Food preferences by culture')\nax.legend()\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the size of the scatter points that share the same legend as those containing the center point of the bounding box to 98. Also, update their edge color to #1cb3da and set the edge width to 1.3.",
        "Input_image": "./test_dataset/Scatter/Scatter_674db0b587a284c3/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load the data\ndata = pd.DataFrame({\n    \"Culture\": [\"American\", \"Chinese\", \"Indian\", \"Japanese\", \"Mexican\", \"French\"],\n    \"Vegetarian\": [45, 50, 80, 60, 50, 40],\n    \"Seafood\": [60, 92, 40, 95, 70, 80],\n    \"Fast Food\": [85, 74, 50, 55, 65, 70]\n})\n\nfig, ax = plt.subplots()\n\n# Plot each dietary preference as a scatter plot\nfor column in [\"Vegetarian\", \"Seafood\", \"Fast Food\"]:\n    ax.scatter(data[\"Culture\"], data[column], label=column, marker='o', s=98 if column == \"Seafood\" else None, edgecolors='#1cb3da' if column == \"Seafood\" else None, linewidths=1.3 if column == \"Seafood\" else None)\n\n# Annotate each point with its corresponding value\nfor i, txt in enumerate(data[\"Vegetarian\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\nfor i, txt in enumerate(data[\"Seafood\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\nfor i, txt in enumerate(data[\"Fast Food\"]):\n    ax.annotate(txt, (data[\"Culture\"][i], txt))\n\nax.set_xlabel('Culture', fontsize=15)\nax.set_ylabel('Preference (%)', fontsize=15)\nax.set_title('Food preferences by culture')\nax.legend()\n\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfig.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "coordinate": "(0.0,60.0),(1.0,92.0),(2.0,40.0),(3.0,95.0),(4.0,70.0),(5.0,80.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_674db0b587a284c3/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_674db0b587a284c3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_674db0b587a284c3/myplot.png"
    },
    {
        "id": "Scatter_a688bda583e9e458",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ndistance = [5, 10, 15, 20, 25, 30, 35, 40, 45]\nfood_collected = [2, 4, 7, 9, 11, 13, 16, 18, 21]\n\n# Create scatter plot\nplt.scatter(distance, food_collected, color='r')\n\n# Add title and labels to the axes\nplt.title('Foraging Behavior of Ant Colony')\nplt.xlabel('Distance Traveled (mm)')\nplt.ylabel('Food Collected (mg)')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the shape of the points that contain the center point of the bounding box to a triangle.",
        "Input_image": "./test_dataset/Scatter/Scatter_a688bda583e9e458/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ndistance = [5, 10, 15, 20, 25, 30, 35, 40, 45]\nfood_collected = [2, 4, 7, 9, 11, 13, 16, 18, 21]\n\n# Create scatter plot\ncustom_points = [1, 3, 5]\nfor i, (d, f) in enumerate(zip(distance, food_collected)):\n    if i in custom_points:\n        plt.scatter(d, f, color='r', marker='^')\n    else:\n        plt.scatter(d, f, color='r')\n\n# Add title and labels to the axes\nplt.title('Foraging Behavior of Ant Colony')\nplt.xlabel('Distance Traveled (mm)')\nplt.ylabel('Food Collected (mg)')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(10.0,4.0),(20.0,9.0),(30.0,13.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_a688bda583e9e458/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_a688bda583e9e458/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_a688bda583e9e458/figure.png"
    },
    {
        "id": "Scatter_2f689dcb19345f58",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Social Media Users Data in millions\nfacebook_users = [2100, 2150, 2130, 2170, 2120, 2075, 2050, 2090, 2125, 2105, 2080, 2060]\ninstagram_users = [1000, 1050, 1080, 1060, 1100, 1085, 1095, 1120, 1112, 1135, 1160, 1140]\ntwitter_users = [600, 620, 630, 610, 590, 600, 595, 605, 610, 615, 600, 590]\n\n# Months\nmonths = list(range(1, 13))\n\n# Creating scatter plot\nplt.scatter(months, facebook_users, label='Facebook')\nplt.scatter(months, instagram_users, label='Instagram')\nplt.scatter(months, twitter_users, label='Twitter')\n\n# Adding title and labels\nplt.title('Active Users Trends on Social Media Platforms')\nplt.xlabel('Months')\nplt.ylabel('Users in Millions')\n\n# Displaying legend\nplt.legend()\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the size of the points that share the same legend as those containing the center point of the bounding box to 20. Also, change their edge color to red and set the edge width to 0.8.",
        "Input_image": "./test_dataset/Scatter/Scatter_2f689dcb19345f58/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Social Media Users Data in millions\nfacebook_users = [2100, 2150, 2130, 2170, 2120, 2075, 2050, 2090, 2125, 2105, 2080, 2060]\ninstagram_users = [1000, 1050, 1080, 1060, 1100, 1085, 1095, 1120, 1112, 1135, 1160, 1140]\ntwitter_users = [600, 620, 630, 610, 590, 600, 595, 605, 610, 615, 600, 590]\n\n# Months\nmonths = list(range(1, 13))\n\n# Creating scatter plot\nplt.scatter(months, facebook_users, label='Facebook', s=20, edgecolors='red', linewidths=0.8)\nplt.scatter(months, instagram_users, label='Instagram')\nplt.scatter(months, twitter_users, label='Twitter', s=20, edgecolors='red', linewidths=0.8)\n\n# Adding title and labels\nplt.title('Active Users Trends on Social Media Platforms')\nplt.xlabel('Months')\nplt.ylabel('Users in Millions')\n\n# Displaying legend\nplt.legend()\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_legend": "0,2",
        "coordinate": "(1.0,2100.0),(2.0,2150.0),(3.0,2130.0),(4.0,2170.0),(5.0,2120.0),(6.0,2075.0),(7.0,2050.0),(8.0,2090.0),(9.0,2125.0),(10.0,2105.0),(11.0,2080.0),(12.0,2060.0),(1.0,600.0),(2.0,620.0),(3.0,630.0),(4.0,610.0),(5.0,590.0),(6.0,600.0),(7.0,595.0),(8.0,605.0),(9.0,610.0),(10.0,615.0),(11.0,600.0),(12.0,590.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_2f689dcb19345f58/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_2f689dcb19345f58/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_2f689dcb19345f58/figure.png"
    },
    {
        "id": "Scatter_695dc9fe1e6db05d",
        "Input_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Data\nmicrobial_size = [1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0]\nmicrobial_abundance = [750, 600, 450, 400, 350, 300, 250, 200, 150, 100]\n\n# Creating scatter plot\nplt.figure(figsize=(8, 6))\nplt.scatter(microbial_size, microbial_abundance, c='blue')\n\n# Setting the title and labels\nplt.title(\"Relationship between Microbial Size and its Abundance\")\nplt.xlabel(\"Microbial Size (\u00b5m)\")\nplt.ylabel(\"Microbial Abundance (cells/mL)\")\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the size of the scatter points that contain the center point of the bounding box to 46, and change their color to #799e08.",
        "Input_image": "./test_dataset/Scatter/Scatter_695dc9fe1e6db05d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nmicrobial_size = [1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0]\nmicrobial_abundance = [750, 600, 450, 400, 350, 300, 250, 200, 150, 100]\n\n# Creating scatter plot\nplt.figure(figsize=(8, 6))\ncustom_points = [1, 3, 5]\ncustom_size = 46\ncustom_color = '#799e08'\nfor i, (size, abundance) in enumerate(zip(microbial_size, microbial_abundance)):\n    if i in custom_points:\n        plt.scatter(size, abundance, s=custom_size, color=custom_color)\n    else:\n        plt.scatter(size, abundance, c='blue')\n\n# Setting the title and labels\nplt.title(\"Relationship between Microbial Size and its Abundance\")\nplt.xlabel(\"Microbial Size (\u00b5m)\")\nplt.ylabel(\"Microbial Abundance (cells/mL)\")\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(2.0,600.0),(3.0,400.0),(4.0,300.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_695dc9fe1e6db05d/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_695dc9fe1e6db05d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_695dc9fe1e6db05d/figure.png"
    },
    {
        "id": "Scatter_8d7a42f85997c62d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Temperatures \ntemp_A = [30, 32, 34, 33, 30, 31]\ntemp_B = [29, 31, 30, 32, 33, 31]\ntemp_C = [28, 29, 30, 29, 28, 30]\ntemp_D = [31, 33, 32, 34, 33, 30]\ntemp_E = [32, 34, 33, 35, 34, 32]\n\n# Rainfalls\nrain_A = [150, 200, 120, 180, 100, 140]\nrain_B = [100, 120, 150, 130, 140, 110]\nrain_C = [80, 100, 90, 70, 80, 100]\nrain_D = [200, 220, 180, 240, 200, 180]\nrain_E = [250, 280, 230, 270, 250, 260]\n\nplt.figure(figsize=(10, 6))\n\n# Scatter plots\nplt.scatter(temp_A, rain_A, label = 'Region A')\nplt.scatter(temp_B, rain_B, label = 'Region B')\nplt.scatter(temp_C, rain_C, label = 'Region C')\nplt.scatter(temp_D, rain_D, label = 'Region D')\nplt.scatter(temp_E, rain_E, label = 'Region E')\n\n# Titles and labels\nplt.title('Rainfall vs Temperature in Tropical Regions')\nplt.xlabel('Temperature (\u00b0C)')\nplt.ylabel('Rainfall (mm)')\n\n# Legend\nplt.legend()\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Increase the size of the scatter points that share the same legend as those containing the center point of the bounding box to 36, and change their color to #66b815.",
        "Input_image": "./test_dataset/Scatter/Scatter_8d7a42f85997c62d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.collections import PathCollection\n# Temperatures \ntemp_A = [30, 32, 34, 33, 30, 31]\ntemp_B = [29, 31, 30, 32, 33, 31]\ntemp_C = [28, 29, 30, 29, 28, 30]\ntemp_D = [31, 33, 32, 34, 33, 30]\ntemp_E = [32, 34, 33, 35, 34, 32]\n\n# Rainfalls\nrain_A = [150, 200, 120, 180, 100, 140]\nrain_B = [100, 120, 150, 130, 140, 110]\nrain_C = [80, 100, 90, 70, 80, 100]\nrain_D = [200, 220, 180, 240, 200, 180]\nrain_E = [250, 280, 230, 270, 250, 260]\n\nplt.figure(figsize=(10, 6))\n\n# Scatter plots\ncustom_size = 36\ncustom_color = '#66b815'\ntarget_indices = [1, 3]  # Region B and D\nfor i, (temp, rain, label) in enumerate(zip([temp_A, temp_B, temp_C, temp_D, temp_E], [rain_A, rain_B, rain_C, rain_D, rain_E], ['Region A', 'Region B', 'Region C', 'Region D', 'Region E'])):\n    if i in target_indices:\n        plt.scatter(temp, rain, label=label,s=custom_size)\n\n    else:\n        plt.scatter(temp, rain, label=label)\n\nscatter_plots = [child for child in plt.gca().get_children() if isinstance(child, PathCollection)]\nfor idx,scatter in enumerate(scatter_plots):\n    if idx in target_indices:\n        scatter.set_color('#66b815')\n            \n\n\n# Titles and labels\nplt.title('Rainfall vs Temperature in Tropical Regions')\nplt.xlabel('Temperature (\u00b0C)')\nplt.ylabel('Rainfall (mm)')\n\n# Legend\nplt.legend()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1,3",
        "coordinate": "(29.0,100.0),(31.0,120.0),(30.0,150.0),(32.0,130.0),(33.0,140.0),(31.0,110.0),(31.0,200.0),(33.0,220.0),(32.0,180.0),(34.0,240.0),(33.0,200.0),(30.0,180.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_8d7a42f85997c62d/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_8d7a42f85997c62d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_8d7a42f85997c62d/figure.png"
    },
    {
        "id": "Scatter_43c76992d04a4ca4",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Age Groups\nage_groups = ['18-25', '26-35', '36-45', '46-55', '56-65']\n\n# Social Media Usage (hours per day)\nsocial_media_usage = [2, 3, 4, 6, 5]\n\n# Happiness Level (on a scale of 1-10)\nhappiness_level = [7, 6, 5, 4, 3]\n\n# Create a scatter plot\nplt.scatter(social_media_usage, happiness_level, color='b')\n\n# Label each data point with its age group\nfor i in range(len(age_groups)):\n    plt.text(social_media_usage[i], happiness_level[i], age_groups[i])\n\n# Add labels to the axes and a title\nplt.xlabel('Social Media Usage (hours per day)')\nplt.ylabel('Happiness Level (on a scale of 1-10)')\nplt.title('Impact of Social Media Usage on Happiness Levels Among Different Age Groups')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the size of the scatter points that contain the center point of the bounding box to 41. Additionally, update their edge color to #16549a and set the edge width to 1.7.",
        "Input_image": "./test_dataset/Scatter/Scatter_43c76992d04a4ca4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Age Groups\nage_groups = ['18-25', '26-35', '36-45', '46-55', '56-65']\n\n# Social Media Usage (hours per day)\nsocial_media_usage = [2, 3, 4, 6, 5]\n\n# Happiness Level (on a scale of 1-10)\nhappiness_level = [7, 6, 5, 4, 3]\n\n# Create a scatter plot\ncustom_points = [1, 3]\ncustom_size = 41\ncustom_edge_color = '#16549a'\ncustom_edge_width = 1.7\nfor i, (usage, happiness) in enumerate(zip(social_media_usage, happiness_level)):\n    if i in custom_points:\n        plt.scatter(usage, happiness, s=custom_size, edgecolors=custom_edge_color, linewidths=custom_edge_width, color='b')\n    else:\n        plt.scatter(usage, happiness, color='b')\n\n# Label each data point with its age group\nfor i in range(len(age_groups)):\n    plt.text(social_media_usage[i], happiness_level[i], age_groups[i])\n\n# Add labels to the axes and a title\nplt.xlabel('Social Media Usage (hours per day)')\nplt.ylabel('Happiness Level (on a scale of 1-10)')\nplt.title('Impact of Social Media Usage on Happiness Levels Among Different Age Groups')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3",
        "coordinate": "(3.0,6.0),(6.0,4.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_43c76992d04a4ca4/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_43c76992d04a4ca4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_43c76992d04a4ca4/figure.png"
    },
    {
        "id": "Scatter_845b7100b0a9dfeb",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = {\"Year\": [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"],\n        \"Number of Visits\": [5000, 4600, 4700, 4400, 7000, 6900, 4500],\n        \"Number of Books Borrowed\": [7000, 6000, 9000, 6500, 8000, 12000, 7000]}\n\n# Convert data to DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Create scatter plot for Number of Visits\nvisits = ax.scatter(df[\"Year\"], df[\"Number of Visits\"], marker=\"o\", color=\"blue\", label=\"Visits\")\n\n# Create scatter plot for Number of Books Borrowed\nbooks = ax.scatter(df[\"Year\"], df[\"Number of Books Borrowed\"], marker=\"x\", color=\"red\", label=\"Books Borrowed\")\n\n# Set labels and title\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Count\")\nax.set_title(\"Number of Visits and Books Borrowed Over Years\")\n\n# Annotate data points\nfor i, txt in enumerate(df[\"Number of Visits\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Number of Visits\"][i]))\n\nfor i, txt in enumerate(df[\"Number of Books Borrowed\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Number of Books Borrowed\"][i]))\n\n# Add grid and legend\nax.grid(True)\nax.legend()\n\n# Change background color\nax.set_facecolor('gray')\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the scatter points that share the same legend as those containing the center point of the bounding box to #e91583. Also, apply a shadow effect to these points, using a 7.2-pixel offset and setting the foreground color to gray.",
        "Input_image": "./test_dataset/Scatter/Scatter_845b7100b0a9dfeb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withStroke\n\n# Define the data\ndata = {\"Year\": [\"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"],\n        \"Number of Visits\": [5000, 4600, 4700, 4400, 7000, 6900, 4500],\n        \"Number of Books Borrowed\": [7000, 6000, 9000, 6500, 8000, 12000, 7000]}\n\n# Convert data to DataFrame\ndf = pd.DataFrame(data)\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Create scatter plot for Number of Visits\nvisits = ax.scatter(df[\"Year\"], df[\"Number of Visits\"], marker=\"o\", color=\"blue\", label=\"Visits\")\n\n# Create scatter plot for Number of Books Borrowed\nbooks = ax.scatter(df[\"Year\"], df[\"Number of Books Borrowed\"], marker=\"x\", color=\"red\", label=\"Books Borrowed\")\n\n# Set labels and title\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Count\")\nax.set_title(\"Number of Visits and Books Borrowed Over Years\")\n\n# Annotate data points\nfor i, txt in enumerate(df[\"Number of Visits\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Number of Visits\"][i]))\n\nfor i, txt in enumerate(df[\"Number of Books Borrowed\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Number of Books Borrowed\"][i]))\n\n# Add grid and legend\nax.grid(True)\n# Modify target scatter points\ncustom_color = '#e91583'\ncustom_effect = [withStroke(linewidth=7.2, foreground='gray')]\nvisits.set_color(custom_color)\nvisits.set_path_effects(custom_effect)\nax.legend()\n\n# Change background color\nax.set_facecolor('gray')\n\n\n# Save the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "0",
        "coordinate": "(0.0,5000.0),(1.0,4600.0),(2.0,4700.0),(3.0,4400.0),(4.0,7000.0),(5.0,6900.0),(6.0,4500.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_845b7100b0a9dfeb/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_845b7100b0a9dfeb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_845b7100b0a9dfeb/myplot.png"
    },
    {
        "id": "Scatter_f095588963fc0a54",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Specifying data\ncities = ['London', 'Sydney', 'Tokyo', 'Cairo', 'Moscow', 'Mumbai', 'New York', 'Rio de Janeiro', 'Vancouver', 'Johannesburg']\nrainfall = [50, 70, 100, 20, 40, 120, 80, 90, 60, 30]\nx = range(1, len(cities)+1)\n\n# Creating a scatter plot\nplt.scatter(x, rainfall)\n\n# Defining labels\nplt.xlabel('Cities')\nplt.ylabel('Rainfall (mm)')\nplt.title('Average Monthly Rainfall in Different Cities')\n\n# Setting the locations and labels of the x-axis\nplt.xticks(x, cities, rotation='vertical')\n\n# Displaying the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the size of the scatter points that contain the center point of the bounding box to 22 and update their shape to 'triangle'.",
        "Input_image": "./test_dataset/Scatter/Scatter_f095588963fc0a54/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Specifying data\ncities = ['London', 'Sydney', 'Tokyo', 'Cairo', 'Moscow', 'Mumbai', 'New York', 'Rio de Janeiro', 'Vancouver', 'Johannesburg']\nrainfall = [50, 70, 100, 20, 40, 120, 80, 90, 60, 30]\nx = range(1, len(cities)+1)\n\n# Creating a scatter plot\ncustom_points = [1, 4, 7]\nfor i, (xi, rain) in enumerate(zip(x, rainfall)):\n    if i in custom_points:\n        plt.scatter(xi, rain, s=22, marker='^', color='#1f77b4')\n    else:\n        plt.scatter(xi, rain, color='#1f77b4')\n\n# Defining labels\nplt.xlabel('Cities')\nplt.ylabel('Rainfall (mm)')\nplt.title('Average Monthly Rainfall in Different Cities')\n\n# Setting the locations and labels of the x-axis\nplt.xticks(x, cities, rotation='vertical')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,4,7",
        "coordinate": "(2.0,70.0),(5.0,40.0),(8.0,90.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_f095588963fc0a54/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_f095588963fc0a54/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_f095588963fc0a54/figure.png"
    },
    {
        "id": "Scatter_78129fb48ac862f0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    \"Disaster\": [\"Earthquake\", \"Earthquake\", \"Earthquake\", \"Earthquake\", \"Earthquake\", \"Flood\", \"Flood\", \"Flood\", \"Flood\", \"Flood\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Tornado\", \"Tornado\", \"Tornado\", \"Tornado\", \"Tornado\"],\n    \"Local Economy Impact\": [5000, 8000, 12000, 7000, 13000, 4500, 3000, 7000, 3000, 4500, 4000, 2000, 9000, 2000, 4000, 3500, 1500, 6000, 1500, 3500],\n    \"Year\": [2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10,6))\n\n# Define a color for each disaster type\ndisaster_colors = {\n    \"Earthquake\": \"red\",\n    \"Flood\": \"blue\",\n    \"Hurricane\": \"green\",\n    \"Tornado\": \"purple\"\n}\n\ndisasters = df[\"Disaster\"].unique()\n\nfor disaster in disasters:\n    subset = df[df[\"Disaster\"] == disaster]\n    ax.scatter(subset[\"Year\"], subset[\"Local Economy Impact\"], label=disaster, color=disaster_colors[disaster])\n\nax.set_xlabel('Year')\nax.set_ylabel('Local Economy Impact')\nax.set_title('Impact of Natural Disasters on Local Economies')\nax.grid(True)\nax.set_facecolor('lightgray')\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the size of the scatter points that share the same legend as those containing the center point of the bounding box to 73. Also, update the edge color of these points to #c402a4 and set the edge width to 1.9.",
        "Input_image": "./test_dataset/Scatter/Scatter_78129fb48ac862f0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Given data\ndata = {\n    \"Disaster\": [\"Earthquake\", \"Earthquake\", \"Earthquake\", \"Earthquake\", \"Earthquake\", \"Flood\", \"Flood\", \"Flood\", \"Flood\", \"Flood\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Hurricane\", \"Tornado\", \"Tornado\", \"Tornado\", \"Tornado\", \"Tornado\"],\n    \"Local Economy Impact\": [5000, 8000, 12000, 7000, 13000, 4500, 3000, 7000, 3000, 4500, 4000, 2000, 9000, 2000, 4000, 3500, 1500, 6000, 1500, 3500],\n    \"Year\": [2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004, 2000, 2001, 2002, 2003, 2004]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots(figsize=(10,6))\n\n# Define a color for each disaster type\ndisaster_colors = {\n    \"Earthquake\": \"red\",\n    \"Flood\": \"blue\",\n    \"Hurricane\": \"green\",\n    \"Tornado\": \"purple\"\n}\n\ndisasters = df[\"Disaster\"].unique()\n\ncustom_size = 73\ncustom_edge_color = '#c402a4'\ncustom_edge_width = 1.9\n\nfor disaster in disasters:\n    subset = df[df[\"Disaster\"] == disaster]\n    if disaster == \"Flood\":\n        ax.scatter(subset[\"Year\"], subset[\"Local Economy Impact\"], label=disaster, color=disaster_colors[disaster], s=custom_size, edgecolors=custom_edge_color, linewidths=custom_edge_width)\n    else:\n        ax.scatter(subset[\"Year\"], subset[\"Local Economy Impact\"], label=disaster, color=disaster_colors[disaster])\n\nax.set_xlabel('Year')\nax.set_ylabel('Local Economy Impact')\nax.set_title('Impact of Natural Disasters on Local Economies')\nax.grid(True)\nax.set_facecolor('lightgray')\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "coordinate": "(2000.0,4500.0),(2001.0,3000.0),(2002.0,7000.0),(2003.0,3000.0),(2004.0,4500.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_78129fb48ac862f0/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_78129fb48ac862f0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_78129fb48ac862f0/myplot.png"
    },
    {
        "id": "Scatter_f671105fc0df560e",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Datasets\niteration_number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nelevation = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n# Create a scatter plot\nplt.scatter(iteration_number, elevation)\n\n# Add labels to the axes\nplt.xlabel(\"Iteration Number\")\nplt.ylabel(\"Elevation (meters)\")\n\n# Add a title to the plot\nplt.title(\"Fractal landscape generation process\")\n\n# Display the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the size of the points that contain the center point of the bounding box to 84.",
        "Input_image": "./test_dataset/Scatter/Scatter_f671105fc0df560e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Datasets\niteration_number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nelevation = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n# Create a scatter plot\ncustom_points = [1, 3, 5]\ncustom_size = 84\nfor i, (iter_num, elev) in enumerate(zip(iteration_number, elevation)):\n    if i in custom_points:\n        plt.scatter(iter_num, elev, s=custom_size, color='#1f77b4')\n    else:\n        plt.scatter(iter_num, elev, color='#1f77b4')\n\n# Add labels to the axes\nplt.xlabel(\"Iteration Number\")\nplt.ylabel(\"Elevation (meters)\")\n\n# Add a title to the plot\nplt.title(\"Fractal landscape generation process\")\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(2.0,20.0),(4.0,40.0),(6.0,60.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_f671105fc0df560e/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_f671105fc0df560e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_f671105fc0df560e/figure.png"
    },
    {
        "id": "Scatter_aee5badf6ce92e6c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Year\": [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    \"Sparrow\": [2000, 2100, 2150, 7000, 2200, 2250, 2300, 2350, 2400],\n    \"Hummingbird\": [1000, 3500, 3700, 4000, 4100, 8000, 4200, 4300, 4400],\n    \"Eagle\": [500, 450, 400, 350, 300, 250, 200, 150, 100]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\nax.scatter(df[\"Year\"], df[\"Sparrow\"], label='Sparrow', marker='o', color='red')\nax.scatter(df[\"Year\"], df[\"Hummingbird\"], label='Hummingbird', marker='x', color='green')\nax.scatter(df[\"Year\"], df[\"Eagle\"], label='Eagle', marker='^', color='blue')\n\n# annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(df[\"Sparrow\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Sparrow\"][i]))\nfor i, txt in enumerate(df[\"Hummingbird\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Hummingbird\"][i]))\nfor i, txt in enumerate(df[\"Eagle\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Eagle\"][i]))\n\nax.set_title('Birds population over the years')\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.grid(True)\nax.set_facecolor('lightgray')\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the scatter points that share the same legend as those containing the center point of the bounding box to 0.75. Also, change their edge color to #cd56f1 and set the edge width to 2.6.",
        "Input_image": "./test_dataset/Scatter/Scatter_aee5badf6ce92e6c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Year\": [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    \"Sparrow\": [2000, 2100, 2150, 7000, 2200, 2250, 2300, 2350, 2400],\n    \"Hummingbird\": [1000, 3500, 3700, 4000, 4100, 8000, 4200, 4300, 4400],\n    \"Eagle\": [500, 450, 400, 350, 300, 250, 200, 150, 100]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n# Target scatter indices\ntarget_indices = [1, 2]  # Selecting Hummingbird and Eagle for modification\n\n# Plotting Sparrow\nax.scatter(df[\"Year\"], df[\"Sparrow\"], label='Sparrow', marker='o', color='red')\nax.scatter(df[\"Year\"], df[\"Hummingbird\"], label='Hummingbird', marker='x', color='green')\nax.scatter(df[\"Year\"], df[\"Eagle\"], label='Eagle', marker='^', color='blue', alpha=0.75, edgecolors='#cd56f1', linewidths=2.6)\n\n\n# annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(df[\"Sparrow\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Sparrow\"][i]))\nfor i, txt in enumerate(df[\"Hummingbird\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Hummingbird\"][i]))\nfor i, txt in enumerate(df[\"Eagle\"]):\n    ax.annotate(txt, (df[\"Year\"][i], df[\"Eagle\"][i]))\n\nax.set_title('Birds population over the years')\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.grid(True)\nax.set_facecolor('lightgray')\nax.legend()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "2",
        "coordinate": "(2012.0,500.0),(2013.0,450.0),(2014.0,400.0),(2015.0,350.0),(2016.0,300.0),(2017.0,250.0),(2018.0,200.0),(2019.0,150.0),(2020.0,100.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_aee5badf6ce92e6c/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_aee5badf6ce92e6c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_aee5badf6ce92e6c/myplot.png"
    },
    {
        "id": "Scatter_f46dd805019e1514",
        "Input_code": "import matplotlib.pyplot as plt\n\n# data points\nmonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nsunlight_duration = [4.5, 6.8, 7.2, 8.5, 10.3, 11.8, 12.6, 11.3, 9.6, 7.8, 6.1, 4.9]\n\n# create scatter plot\nplt.scatter(months, sunlight_duration)\n\n# set the labels\nplt.xlabel('Month')\nplt.ylabel('Sunlight Duration (hours)')\n\n# set the title\nplt.title('Daily sunlight duration in Antarctica throughout a year')\n\n# show the plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the shape of the points that contain the center point of the bounding box to 'diamond'. Additionally, add a shadow effect to these points with an offset of 6.7 pixels and set the foreground color to silver.",
        "Input_image": "./test_dataset/Scatter/Scatter_f46dd805019e1514/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import withStroke\n\n# data points\nmonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nsunlight_duration = [4.5, 6.8, 7.2, 8.5, 10.3, 11.8, 12.6, 11.3, 9.6, 7.8, 6.1, 4.9]\n\n# create scatter plot\ncustom_points = [1, 5, 9]\nfor i, (month, duration) in enumerate(zip(months, sunlight_duration)):\n    if i in custom_points:\n        plt.scatter(month, duration, marker='D', path_effects=[withStroke(linewidth=6.7, foreground='silver')], color='#1f77b4')\n    else:\n        plt.scatter(month, duration, color='#1f77b4')\n\n# set the labels\nplt.xlabel('Month')\nplt.ylabel('Sunlight Duration (hours)')\n\n# set the title\nplt.title('Daily sunlight duration in Antarctica throughout a year')\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,5,9",
        "coordinate": "(2.0,6.8),(6.0,11.8),(10.0,7.8)",
        "Test_image": "./test_dataset/Scatter/Scatter_f46dd805019e1514/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_f46dd805019e1514/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_f46dd805019e1514/figure.png"
    },
    {
        "id": "Scatter_c9a2400eb093ae95",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data in csv format\ndata = \"\"\"\nYear,Manned Missions,Unmanned Missions,Private Missions\n1960,5,10,0\n1970,20,30,0\n1980,15,35,0\n1990,10,40,1\n2000,5,45,3\n2010,2,50,10\n2020,1,55,25\n\"\"\"\n\n# Convert the data into DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Scatter plot for each column\nfor column in df.columns[1:]:\n    ax.scatter(df['Year'], df[column], label=column, alpha=0.5)\n\n# Set title and labels for axes\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number of Missions\")\nax.set_title(\"Number of Missions Over Years\")\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df.columns[1:])):\n    for x,y in zip(df['Year'],df[df.columns[i+1]]):\n        label = \"{:.2f}\".format(y)\n        plt.annotate(label, (x,y), textcoords=\"offset points\", xytext=(0,10), ha='center') \n\n# Add grids on the background\nax.grid(True)\n\n# Set the background color of the chart figure to light gray\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the final figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Update the edge color of the scatter points that share the same legend as those containing the center point of the bounding box to #ab4e79, and set the edge width to 1.6. Also, add a shadow effect to these points with a gold foreground color and an offset of 6.9 pixels.",
        "Input_image": "./test_dataset/Scatter/Scatter_c9a2400eb093ae95/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withStroke\n\n# Given data in csv format\ndata = \"\"\"\nYear,Manned Missions,Unmanned Missions,Private Missions\n1960,5,10,0\n1970,20,30,0\n1980,15,35,0\n1990,10,40,1\n2000,5,45,3\n2010,2,50,10\n2020,1,55,25\n\"\"\"\n\n# Convert the data into DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Scatter plot for each column\nfor column in df.columns[1:]:\n    scatter = ax.scatter(df['Year'], df[column], label=column, alpha=0.5)\n    if column == 'Unmanned Missions':\n        scatter.set_edgecolor('#ab4e79')\n        scatter.set_linewidth(1.6)\n        scatter.set_path_effects([withStroke(linewidth=6.9, foreground='gold')])\n\n# Set title and labels for axes\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number of Missions\")\nax.set_title(\"Number of Missions Over Years\")\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df.columns[1:])):\n    for x,y in zip(df['Year'],df[df.columns[i+1]]):\n        label = \"{:.2f}\".format(y)\n        plt.annotate(label, (x,y), textcoords=\"offset points\", xytext=(0,10), ha='center') \n\n# Add grids on the background\nax.grid(True)\n\n# Set the background color of the chart figure to light gray\nax.set_facecolor('lightgray')\n\n# Add legend\nax.legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the final figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "coordinate": "(1960.0,10.0),(1970.0,30.0),(1980.0,35.0),(1990.0,40.0),(2000.0,45.0),(2010.0,50.0),(2020.0,55.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_c9a2400eb093ae95/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_c9a2400eb093ae95/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_c9a2400eb093ae95/myplot.png"
    },
    {
        "id": "Scatter_730b781d0cb024fc",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\n\ndf = pd.DataFrame(data)\n\n# Set up the figure and axes\nfig, ax = plt.subplots()\n\n# Plot the data\nax.scatter(df[\"Time Period\"], df[\"App Usage\"], label='App Usage', marker='o', color='r')\nax.scatter(df[\"Time Period\"], df[\"Call Duration\"], label='Call Duration', marker='v', color='g')\nax.scatter(df[\"Time Period\"], df[\"Data Consumption\"], label='Data Consumption', marker='s', color='b')\n\n# Set the title and labels\nax.set_title('App usage, Call duration and Data Consumption over different time periods', fontsize=15)\nax.set_xlabel('Time Period', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Remove grid and set background color to white\nax.grid(False)\nax.set_facecolor('white') # Change background color here\n\n# Add legend\nax.legend()\n\n# Annotate data points\nfor i, txt in enumerate(df[\"App Usage\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"App Usage\"][i]))\nfor i, txt in enumerate(df[\"Call Duration\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Call Duration\"][i]))\nfor i, txt in enumerate(df[\"Data Consumption\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Data Consumption\"][i]))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the edge color of the scatter points that share the same legend as those containing the center point of the bounding box to #92cbb4, using an edge width of 2.7. Additionally, apply a shadow effect to these points with a gray color and an offset of 5.4 pixels.",
        "Input_image": "./test_dataset/Scatter/Scatter_730b781d0cb024fc/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withStroke\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\n\ndf = pd.DataFrame(data)\n\n# Set up the figure and axes\nfig, ax = plt.subplots()\n\n# Plot the data with modifications\nax.scatter(df[\"Time Period\"], df[\"App Usage\"], label='App Usage', marker='o', color='r', edgecolors='#92cbb4', linewidths=2.7, path_effects=[withStroke(linewidth=5.4, foreground='gray')])\nax.scatter(df[\"Time Period\"], df[\"Call Duration\"], label='Call Duration', marker='v', color='g')\nax.scatter(df[\"Time Period\"], df[\"Data Consumption\"], label='Data Consumption', marker='s', color='b')\n\n# Set the title and labels\nax.set_title('App usage, Call duration and Data Consumption over different time periods', fontsize=15)\nax.set_xlabel('Time Period', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Remove grid and set background color to white\nax.grid(False)\nax.set_facecolor('white') # Change background color here\n\n# Add legend\nax.legend()\n\n# Annotate data points\nfor i, txt in enumerate(df[\"App Usage\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"App Usage\"][i]))\nfor i, txt in enumerate(df[\"Call Duration\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Call Duration\"][i]))\nfor i, txt in enumerate(df[\"Data Consumption\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Data Consumption\"][i]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "0",
        "coordinate": "(0.0,120.0),(1.0,80.0),(2.0,150.0),(3.0,90.0),(4.0,70.0),(5.0,200.0),(6.0,50.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_730b781d0cb024fc/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_730b781d0cb024fc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_730b781d0cb024fc/myplot.png"
    },
    {
        "id": "Scatter_d883d561864e2c9a",
        "Input_code": "import matplotlib.pyplot as plt\n\n# temperature data\ntemp_data = [14.2, 16.4, 11.9, 15.2, 18.5, 22.1, 19.4, 25.1, 23.4, 18.1, 22.6, 17.2]\n\n# revenue data\nrevenue_data = [215, 325, 185, 332, 406, 522, 412, 614, 544, 421, 445, 408]\n\n# create the scatter plot\nplt.scatter(temp_data, revenue_data)\n\n# title and labels\nplt.title(\"Revenue Earned vs. Temperature\")\nplt.xlabel(\"Temperature (\u00b0C)\")\nplt.ylabel(\"Revenue Earned ($)\")\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the scatter points that contain the center point of the bounding box to #abc053.",
        "Input_image": "./test_dataset/Scatter/Scatter_d883d561864e2c9a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# temperature data\ntemp_data = [14.2, 16.4, 11.9, 15.2, 18.5, 22.1, 19.4, 25.1, 23.4, 18.1, 22.6, 17.2]\n\n# revenue data\nrevenue_data = [215, 325, 185, 332, 406, 522, 412, 614, 544, 421, 445, 408]\n\n# create the scatter plot\ncustom_points = [1, 5, 7]\nfor i, (temp, revenue) in enumerate(zip(temp_data, revenue_data)):\n    if i in custom_points:\n        plt.scatter(temp, revenue, color='#abc053')\n    else:\n        plt.scatter(temp, revenue, color='#1f77b4')\n\n# title and labels\nplt.title(\"Revenue Earned vs. Temperature\")\nplt.xlabel(\"Temperature (\u00b0C)\")\nplt.ylabel(\"Revenue Earned ($)\")\n\n# show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,5,7",
        "coordinate": "(16.4,325.0),(22.1,522.0),(25.1,614.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_d883d561864e2c9a/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_d883d561864e2c9a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_d883d561864e2c9a/figure.png"
    },
    {
        "id": "Scatter_504ce9dfcd5df487",
        "Input_code": "import matplotlib.pyplot as plt\n\n# data\ncoral_reef_m2 = [120, 150, 200, 180, 250, 220, 300, 280, 320, 350]\nbiodiversity_index = [3.2, 4.1, 2.8, 3.7, 4.6, 3.9, 5.2, 4.8, 5.5, 6.0]\n\n# create scatter plot\nplt.scatter(coral_reef_m2, biodiversity_index)\n\n# title and labels\nplt.title(\"Correlation between Coral Reef Coverage and Fish Biodiversity\")\nplt.xlabel(\"Coverage Area of Live Coral Reefs (m\u00b2)\")\nplt.ylabel(\"Biodiversity Index of Fish Species\")\n\n# show plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the scatter points that contain the center point of the bounding box to 0.66.",
        "Input_image": "./test_dataset/Scatter/Scatter_504ce9dfcd5df487/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# data\ncoral_reef_m2 = [120, 150, 200, 180, 250, 220, 300, 280, 320, 350]\nbiodiversity_index = [3.2, 4.1, 2.8, 3.7, 4.6, 3.9, 5.2, 4.8, 5.5, 6.0]\n\n# create scatter plot\ncustom_points = [1, 3, 5]\nfor i, (reef, bio) in enumerate(zip(coral_reef_m2, biodiversity_index)):\n    if i in custom_points:\n        plt.scatter(reef, bio, alpha=0.66, color='#1f77b4')\n    else:\n        plt.scatter(reef, bio, color='#1f77b4')\n\n# title and labels\nplt.title(\"Correlation between Coral Reef Coverage and Fish Biodiversity\")\nplt.xlabel(\"Coverage Area of Live Coral Reefs (m\u00b2)\")\nplt.ylabel(\"Biodiversity Index of Fish Species\")\n\n# show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(150.0,4.1),(180.0,3.7),(220.0,3.9)",
        "Test_image": "./test_dataset/Scatter/Scatter_504ce9dfcd5df487/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_504ce9dfcd5df487/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_504ce9dfcd5df487/figure.png"
    },
    {
        "id": "Scatter_724374ee36a9510d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\n\ndf = pd.DataFrame(data)\n\n# Set up the figure and axes\nfig, ax = plt.subplots()\n\n# Plot the data\nax.scatter(df[\"Time Period\"], df[\"App Usage\"], label='App Usage', marker='o', color='r')\nax.scatter(df[\"Time Period\"], df[\"Call Duration\"], label='Call Duration', marker='v', color='g')\nax.scatter(df[\"Time Period\"], df[\"Data Consumption\"], label='Data Consumption', marker='s', color='b')\n\n# Set the title and labels\nax.set_title('App usage, Call duration and Data Consumption over different time periods', fontsize=15)\nax.set_xlabel('Time Period', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Remove grid and set background color to white\nax.grid(False)\nax.set_facecolor('white') # Change background color here\n\n# Add legend\nax.legend()\n\n# Annotate data points\nfor i, txt in enumerate(df[\"App Usage\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"App Usage\"][i]))\nfor i, txt in enumerate(df[\"Call Duration\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Call Duration\"][i]))\nfor i, txt in enumerate(df[\"Data Consumption\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Data Consumption\"][i]))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the shape of the points that share the same legend as those containing the center point of the bounding box to a 'triangle'. Also, add a shadow effect to these points with a 6.0 pixel offset and a silver color.",
        "Input_image": "./test_dataset/Scatter/Scatter_724374ee36a9510d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import withStroke\n\n# Prepare data\ndata = {\n    \"Time Period\": [\"Morning\", \"Afternoon\", \"Evening\", \"Night\", \"Early Morning\", \"Late Night\", \"Midnight\"],\n    \"App Usage\": [120, 80, 150, 90, 70, 200, 50],\n    \"Call Duration\": [15, 20, 25, 10, 5, 30, 8],\n    \"Data Consumption\": [2.5, 3.0, 2.0, 1.5, 1.0, 3.5, 1.2]\n}\n\ndf = pd.DataFrame(data)\n\n# Set up the figure and axes\nfig, ax = plt.subplots()\n\n# Plot the data\nax.scatter(df[\"Time Period\"], df[\"App Usage\"], label='App Usage', marker='o', color='r')\nax.scatter(df[\"Time Period\"], df[\"Call Duration\"], label='Call Duration', marker='v', color='g')\nax.scatter(df[\"Time Period\"], df[\"Data Consumption\"], label='Data Consumption', marker='s', color='b', path_effects=[withStroke(linewidth=6.0, foreground='silver')])\n\n# Set the title and labels\nax.set_title('App usage, Call duration and Data Consumption over different time periods', fontsize=15)\nax.set_xlabel('Time Period', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Remove grid and set background color to white\nax.grid(False)\nax.set_facecolor('white') # Change background color here\n\n# Add legend\nax.legend()\n\n# Annotate data points\nfor i, txt in enumerate(df[\"App Usage\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"App Usage\"][i]))\nfor i, txt in enumerate(df[\"Call Duration\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Call Duration\"][i]))\nfor i, txt in enumerate(df[\"Data Consumption\"]):\n    ax.annotate(txt, (df[\"Time Period\"][i], df[\"Data Consumption\"][i]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "2",
        "coordinate": "(0.0,2.5),(1.0,3.0),(2.0,2.0),(3.0,1.5),(4.0,1.0),(5.0,3.5),(6.0,1.2)",
        "Test_image": "./test_dataset/Scatter/Scatter_724374ee36a9510d/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_724374ee36a9510d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_724374ee36a9510d/myplot.png"
    },
    {
        "id": "Scatter_903c24a4b48fcf9e",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ntemperature = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28] # degrees Celsius\nsuccessful_settlements = [15, 20, 30, 40, 50, 60, 70, 80, 85, 75, 60] # percentage\n\n# Create scatter plot\nplt.scatter(temperature, successful_settlements)\n\n# Add title and labels to the axes\nplt.title('Impact of Ocean Temperatures on Coral Breeding Success')\nplt.xlabel('Ocean Temperature (\u00b0C)')\nplt.ylabel('Successful Coral Larval Settlements (%)')\n\n# Show the plot\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the color of the points that contain the center point of the bounding box to #1e48ca, and adjust their transparency to 0.49.",
        "Input_image": "./test_dataset/Scatter/Scatter_903c24a4b48fcf9e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ntemperature = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28] # degrees Celsius\nsuccessful_settlements = [15, 20, 30, 40, 50, 60, 70, 80, 85, 75, 60] # percentage\n\n# Create scatter plot\ncustom_points = [1, 4, 7]\nfor i, (temp, settlement) in enumerate(zip(temperature, successful_settlements)):\n    if i in custom_points:\n        plt.scatter(temp, settlement, color='#1e48ca', alpha=0.49)\n    else:\n        plt.scatter(temp, settlement, color='#1f77b4')\n\n# Add title and labels to the axes\nplt.title('Impact of Ocean Temperatures on Coral Breeding Success')\nplt.xlabel('Ocean Temperature (\u00b0C)')\nplt.ylabel('Successful Coral Larval Settlements (%)')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,4,7",
        "coordinate": "(10.0,20.0),(16.0,50.0),(22.0,80.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_903c24a4b48fcf9e/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_903c24a4b48fcf9e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_903c24a4b48fcf9e/figure.png"
    },
    {
        "id": "Scatter_0834f77bc5c6609b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Creating lists for the type of pets and the number of pets owned\ntypes_of_pets = ['Dogs', 'Cats', 'Rabbits', 'Hamsters', 'Guinea Pigs', 'Birds', 'Fish', 'Reptiles']\nnumber_owned = [5, 8, 3, 7, 4, 6, 2, 1]\n\n# This code is utilized to create a scatter plot\nplt.figure(figsize=(10,6))\nplt.scatter(number_owned, types_of_pets)\n\n# This code is utilized to name the x-axis and y-axis respectively\nplt.xlabel('Number of Each Type of Pet Owned')\nplt.ylabel('Type of Small Pet')\n\n# This code is utilized to make each data point easier to comprehend\nfor i in range(len(number_owned)):\n    plt.text(number_owned[i], types_of_pets[i], (number_owned[i], types_of_pets[i]))\n\n# This code is utilized to give our scatter plot a title\nplt.title('Popularity of Different Types of Small Pets')\n\n# Finally, this code is utilized to showcase our scatter plot\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the shape of the points that contain the center point of the bounding box to 'triangle'. Additionally, apply a shadow effect to these points with a 5.1-pixel offset and a foreground color of gold.",
        "Input_image": "./test_dataset/Scatter/Scatter_0834f77bc5c6609b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import withStroke\n\n# Creating lists for the type of pets and the number of pets owned\ntypes_of_pets = ['Dogs', 'Cats', 'Rabbits', 'Hamsters', 'Guinea Pigs', 'Birds', 'Fish', 'Reptiles']\nnumber_owned = [5, 8, 3, 7, 4, 6, 2, 1]\n\n# This code is utilized to create a scatter plot\nplt.figure(figsize=(10,6))\ncustom_points = [1, 3, 5]\nfor i, (number, pet) in enumerate(zip(number_owned, types_of_pets)):\n    if i in custom_points:\n        plt.scatter(number, pet, marker='^', path_effects=[withStroke(linewidth=5.1, foreground='gold')], color='#1f77b4')\n    else:\n        plt.scatter(number, pet, color='#1f77b4')\n\n# This code is utilized to name the x-axis and y-axis respectively\nplt.xlabel('Number of Each Type of Pet Owned')\nplt.ylabel('Type of Small Pet')\n\n# This code is utilized to make each data point easier to comprehend\nfor i in range(len(number_owned)):\n    plt.text(number_owned[i], types_of_pets[i], (number_owned[i], types_of_pets[i]))\n\n# This code is utilized to give our scatter plot a title\nplt.title('Popularity of Different Types of Small Pets')\n\n# Finally, this code is utilized to showcase our scatter plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_point": "1,3,5",
        "coordinate": "(8.0,1.0),(7.0,3.0),(6.0,5.0)",
        "Test_image": "./test_dataset/Scatter/Scatter_0834f77bc5c6609b/Edit_figure.png",
        "Masked_image": "./test_dataset/Scatter/Scatter_0834f77bc5c6609b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Scatter/Scatter_0834f77bc5c6609b/figure.png"
    },
    {
        "id": "Plot_686d56667edaef0a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = \"\"\"\nCity,2017,2018,2019\nSan Francisco,850,1200,950\nNew York,700,800,1600\nBerlin,400,1200,800\n\"\"\"\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df.columns[1:], df.iloc[0,1:], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=df.iloc[0,0])\nl2, = ax.plot(df.columns[1:], df.iloc[1,1:], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=df.iloc[1,0])\nl3, = ax.plot(df.columns[1:], df.iloc[2,1:], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=df.iloc[2,0])\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.set_title('Population Trend of Cities Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df[\"City\"]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n                \n# Annotate data values above the point on the chart figure\nfor i in range(len(df.columns[1:])):\n    ax.annotate(df.iloc[0,i+1], (df.columns[i+1], df.iloc[0,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df.iloc[1,i+1], (df.columns[i+1], df.iloc[1,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df.iloc[2,i+1], (df.columns[i+1], df.iloc[2,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the line thickness of the plot that contains the center point of the bounding box to 1.598.",
        "Input_image": "./test_dataset/Plot/Plot_686d56667edaef0a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = \"\"\"\nCity,2017,2018,2019\nSan Francisco,850,1200,950\nNew York,700,800,1600\nBerlin,400,1200,800\n\"\"\"\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df.columns[1:], df.iloc[0,1:], marker='o', markersize=6, linestyle='-', linewidth=1.5980397175588072, color='blue', alpha=0.7, label=df.iloc[0,0])\nl2, = ax.plot(df.columns[1:], df.iloc[1,1:], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=df.iloc[1,0])\nl3, = ax.plot(df.columns[1:], df.iloc[2,1:], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=df.iloc[2,0])\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.set_title('Population Trend of Cities Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df[\"City\"]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n                \n# Annotate data values above the point on the chart figure\nfor i in range(len(df.columns[1:])):\n    ax.annotate(df.iloc[0,i+1], (df.columns[i+1], df.iloc[0,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df.iloc[1,i+1], (df.columns[i+1], df.iloc[1,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df.iloc[2,i+1], (df.columns[i+1], df.iloc[2,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_686d56667edaef0a/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_686d56667edaef0a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_686d56667edaef0a/myplot.png"
    },
    {
        "id": "Plot_f569875862507b8f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given CSV data\ndata = {'Year': [2014, 2015, 2016, 2017, 2018, 2019],\n        'AI_Research': [500, 480, 460, 550, 530, 510],\n        'Robotics': [700, 680, 660, 750, 730, 710],\n        'Neural_Networks': [1000, 900, 800, 1050, 950, 925],\n        'Data_Mining': [1200, 1100, 1000, 1250, 1150, 1125]}\ndf = pd.DataFrame(data)\n\n# Set up the figure and axis\nfig, ax = plt.subplots()\n\n# Define a monochrome blue color scheme\nblue_shades = ['#003f5c', '#2f4b7c', '#665191', '#a05195']\n\nax.plot('Year', 'AI_Research', data=df, marker='o', color=blue_shades[0], linewidth=2, linestyle='-', markersize=5, alpha=0.7, label='AI Research')\nax.plot('Year', 'Robotics', data=df, marker='v', color=blue_shades[1], linewidth=2, linestyle='--', markersize=5, alpha=0.7, label='Robotics')\nax.plot('Year', 'Neural_Networks', data=df, marker='s', color=blue_shades[2], linewidth=2, linestyle='-.', markersize=5, alpha=0.7, label='Neural Networks')\nax.plot('Year', 'Data_Mining', data=df, marker='D', color=blue_shades[3], linewidth=2, linestyle=':', markersize=5, alpha=0.7, label='Data Mining')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(df['AI_Research']):\n    ax.annotate('AI Research', (df['Year'][i], df['AI_Research'][i]))\nfor i, txt in enumerate(df['Robotics']):\n    ax.annotate('Robotics', (df['Year'][i], df['Robotics'][i]))\nfor i, txt in enumerate(df['Neural_Networks']):\n    ax.annotate('Neural Networks', (df['Year'][i], df['Neural_Networks'][i]))\nfor i, txt in enumerate(df['Data_Mining']):\n    ax.annotate('Data Mining', (df['Year'][i], df['Data_Mining'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('Trends in AI Research, Robotics, Neural Networks, and Data Mining')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the shape of the points for the line that contains the center point of the bounding box to 'square'.",
        "Input_image": "./test_dataset/Plot/Plot_f569875862507b8f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given CSV data\ndata = {'Year': [2014, 2015, 2016, 2017, 2018, 2019],\n        'AI_Research': [500, 480, 460, 550, 530, 510],\n        'Robotics': [700, 680, 660, 750, 730, 710],\n        'Neural_Networks': [1000, 900, 800, 1050, 950, 925],\n        'Data_Mining': [1200, 1100, 1000, 1250, 1150, 1125]}\ndf = pd.DataFrame(data)\n\n# Set up the figure and axis\nfig, ax = plt.subplots()\n\n# Define a monochrome blue color scheme\nblue_shades = ['#003f5c', '#2f4b7c', '#665191', '#a05195']\n\nax.plot('Year', 'AI_Research', data=df, marker='s', color=blue_shades[0], linewidth=2, linestyle='-', markersize=5, alpha=0.7, label='AI Research')\nax.plot('Year', 'Robotics', data=df, marker='v', color=blue_shades[1], linewidth=2, linestyle='--', markersize=5, alpha=0.7, label='Robotics')\nax.plot('Year', 'Neural_Networks', data=df, marker='s', color=blue_shades[2], linewidth=2, linestyle='-.', markersize=5, alpha=0.7, label='Neural Networks')\nax.plot('Year', 'Data_Mining', data=df, marker='D', color=blue_shades[3], linewidth=2, linestyle=':', markersize=5, alpha=0.7, label='Data Mining')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(df['AI_Research']):\n    ax.annotate('AI Research', (df['Year'][i], df['AI_Research'][i]))\nfor i, txt in enumerate(df['Robotics']):\n    ax.annotate('Robotics', (df['Year'][i], df['Robotics'][i]))\nfor i, txt in enumerate(df['Neural_Networks']):\n    ax.annotate('Neural Networks', (df['Year'][i], df['Neural_Networks'][i]))\nfor i, txt in enumerate(df['Data_Mining']):\n    ax.annotate('Data Mining', (df['Year'][i], df['Data_Mining'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('Trends in AI Research, Robotics, Neural Networks, and Data Mining')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_f569875862507b8f/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_f569875862507b8f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_f569875862507b8f/myplot.png"
    },
    {
        "id": "Plot_cbd76d6401d88566",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"\nYear,Africa,Asia,Europe\n2000,90,75,25\n2001,85,72,24\n2002,80,65,22\n2003,150,60,21\n2004,82,68,20\n2005,78,110,19\n2006,76,105,18\n2007,74,100,17\n2008,70,95,80\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = df[\"Year\"]\n\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue']\n\nfor i in range(1, df.shape[1]):\n    line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle=linestyles[i % len(linestyles)], linewidth=2, markersize=6, label=df.columns[i], color=colors[i % len(colors)], alpha=0.7)\n    ax.text(x.iloc[-1], df.iloc[-1, i], df.columns[i], ha='center', color=colors[i % len(colors)])\n\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.set_title('Population by Continent and Year')\nax.legend(loc='upper left', shadow=True)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Show the data points of the line that contains the center point of the bounding box using 'diamond' markers, and hide the data points of all the other lines.",
        "Input_image": "./test_dataset/Plot/Plot_cbd76d6401d88566/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"\nYear,Africa,Asia,Europe\n2000,90,75,25\n2001,85,72,24\n2002,80,65,22\n2003,150,60,21\n2004,82,68,20\n2005,78,110,19\n2006,76,105,18\n2007,74,100,17\n2008,70,95,80\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = df[\"Year\"]\n\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue']\n\nfor i in range(1, df.shape[1]):\n    if i == 2:\n        line, = ax.plot(x, df.iloc[:, i], marker='D', linestyle=linestyles[i % len(linestyles)], linewidth=2, markersize=6, label=df.columns[i], color=colors[i % len(colors)], alpha=0.7)\n    else:\n        line, = ax.plot(x, df.iloc[:, i], marker='', linestyle=linestyles[i % len(linestyles)], linewidth=2, markersize=6, label=df.columns[i], color=colors[i % len(colors)], alpha=0.7)\n    ax.text(x.iloc[-1], df.iloc[-1, i], df.columns[i], ha='center', color=colors[i % len(colors)])\n\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.set_title('Population by Continent and Year')\nax.legend(loc='upper left', shadow=True)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_cbd76d6401d88566/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_cbd76d6401d88566/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_cbd76d6401d88566/myplot.png"
    },
    {
        "id": "Plot_ae7d9a1c30625ec7",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    'Air Quality Index': [75, 70, 65, 80, 75, 60, 80, 70, 120, 70, 65, 90, 85, 70, 65, 120, 115, 60, 55, 70, 50]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot the data with custom linestyle, color, and markers\nax.plot(df['Year'], df['Air Quality Index'], linestyle='--', color='red', marker='o', markersize=5, alpha=0.7)\n\n# Annotate each line at the end of the line\nfor i, txt in enumerate(df['Air Quality Index']):\n    ax.annotate(txt, (df['Year'][i], df['Air Quality Index'][i]))\n\n# Add title, labels, and legend\nax.set_title('Air Quality Index Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Air Quality Index')\nax.legend(['Air Quality Index'])\n\n# Add grid and set the background color of the figure\nax.grid()\nfig.set_facecolor('white')  # Changed the background color to white\n\n# Tight layout and save the figure\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the rasterized state of the line that contains the center point of the bounding box to False. and for the same line: Set the transform of it to the Target_object to the Coordinate system of subfigure.",
        "Input_image": "./test_dataset/Plot/Plot_ae7d9a1c30625ec7/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    'Air Quality Index': [75, 70, 65, 80, 75, 60, 80, 70, 120, 70, 65, 90, 85, 70, 65, 120, 115, 60, 55, 70, 50]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot the data with custom linestyle, color, and markers\nline, = ax.plot(df['Year'], df['Air Quality Index'], linestyle='--', color='red', marker='o', markersize=5, alpha=0.7)\n\n# Set the rasterized state to False and transform to the coordinate system of subfigure\nline.set_rasterized(False)\nline.set_transform(ax.transData)\n\n# Annotate each line at the end of the line\nfor i, txt in enumerate(df['Air Quality Index']):\n    ax.annotate(txt, (df['Year'][i], df['Air Quality Index'][i]))\n\n# Add title, labels, and legend\nax.set_title('Air Quality Index Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Air Quality Index')\nax.legend(['Air Quality Index'])\n\n# Add grid and set the background color of the figure\nax.grid()\nfig.set_facecolor('white')  # Changed the background color to white\n\n# Tight layout and save the figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_ae7d9a1c30625ec7/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_ae7d9a1c30625ec7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_ae7d9a1c30625ec7/myplot.png"
    },
    {
        "id": "Plot_b37871ad244be758",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nYear,Low-income countries,Middle-income countries,High-income countries\n2000,50,150,500\n2010,80,250,450\n2020,60,300,400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nax.plot(df['Year'], df['Low-income countries'], marker='o', color='r', linestyle='-', linewidth=2, markersize=6, alpha=0.7, label='Low-income countries')\nax.plot(df['Year'], df['Middle-income countries'], marker='s', color='b', linestyle='--', linewidth=2, markersize=6, alpha=0.7, label='Middle-income countries')\nax.plot(df['Year'], df['High-income countries'], marker='v', color='g', linestyle=':', linewidth=2, markersize=6, alpha=0.7, label='High-income countries')\n\n# Annotating the lines\nfor i, txt in enumerate(df['Low-income countries']):\n    ax.annotate(txt, (df['Year'][i], df['Low-income countries'][i]))\nfor i, txt in enumerate(df['Middle-income countries']):\n    ax.annotate(txt, (df['Year'][i], df['Middle-income countries'][i]))\nfor i, txt in enumerate(df['High-income countries']):\n    ax.annotate(txt, (df['Year'][i], df['High-income countries'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number')\nax.set_title('Comparison of numbers in different income countries over years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Display the data points of the line that contains the center point of the bounding box as circles, and hide the data points of all other lines.",
        "Input_image": "./test_dataset/Plot/Plot_b37871ad244be758/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nYear,Low-income countries,Middle-income countries,High-income countries\n2000,50,150,500\n2010,80,250,450\n2020,60,300,400\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nax.plot(df['Year'], df['Low-income countries'], marker='', color='r', linestyle='-', linewidth=2, markersize=6, alpha=0.7, label='Low-income countries')\nax.plot(df['Year'], df['Middle-income countries'], marker='o', color='b', linestyle='--', linewidth=2, markersize=6, alpha=0.7, label='Middle-income countries')\nax.plot(df['Year'], df['High-income countries'], marker='', color='g', linestyle=':', linewidth=2, markersize=6, alpha=0.7, label='High-income countries')\n\n# Annotating the lines\nfor i, txt in enumerate(df['Low-income countries']):\n    ax.annotate(txt, (df['Year'][i], df['Low-income countries'][i]))\nfor i, txt in enumerate(df['Middle-income countries']):\n    ax.annotate(txt, (df['Year'][i], df['Middle-income countries'][i]))\nfor i, txt in enumerate(df['High-income countries']):\n    ax.annotate(txt, (df['Year'][i], df['High-income countries'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number')\nax.set_title('Comparison of numbers in different income countries over years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_b37871ad244be758/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_b37871ad244be758/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_b37871ad244be758/myplot.png"
    },
    {
        "id": "Plot_1744a68bb3d85e9b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\n# Data for plotting\ndata = \"\"\"\n\"Year\",\"Arctic Sea Levels (in meters)\",\"Antarctic Sea Levels (in meters)\",\"Global Average Sea Levels (in meters)\"\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60\n\"\"\"\ndf = pd.read_csv(io.StringIO(data), quotechar='\"')\n\nfig, ax = plt.subplots()\nax.plot(df[\"Year\"], df[\"Arctic Sea Levels (in meters)\"], label='Arctic', linestyle='-', color='red', marker='o', markersize=5, linewidth=2, alpha=1)\nax.plot(df[\"Year\"], df[\"Antarctic Sea Levels (in meters)\"], label='Antarctic', linestyle='--', color='blue', marker='v', markersize=5, linewidth=2, alpha=1)\nax.plot(df[\"Year\"], df[\"Global Average Sea Levels (in meters)\"], label='Global Average', linestyle='-.', color='green', marker='s', markersize=5, linewidth=2, alpha=1)\n\n# Change font sizes here\nax.set_xlabel('Year', fontsize=14)\nax.set_ylabel('Sea Level (in meters)', fontsize=14)\nax.set_title('Sea Level Changes from 2000 to 2020', fontsize=18)\nax.legend(loc='upper left', fontsize=12)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfor line, name in zip(ax.lines, ['Arctic', 'Antarctic', 'Global Average']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\nfig.savefig(\"myplot.png\")",
        "Instruction": "Set the visibility of the plot that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Plot/Plot_1744a68bb3d85e9b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\n# Data for plotting\ndata = \"\"\"\n\"Year\",\"Arctic Sea Levels (in meters)\",\"Antarctic Sea Levels (in meters)\",\"Global Average Sea Levels (in meters)\"\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60\n\"\"\"\ndf = pd.read_csv(io.StringIO(data), quotechar='\"')\n\nfig, ax = plt.subplots()\nax.plot(df[\"Year\"], df[\"Arctic Sea Levels (in meters)\"], label='Arctic', linestyle='-', color='red', marker='o', markersize=5, linewidth=2, alpha=1)\nax.plot(df[\"Year\"], df[\"Antarctic Sea Levels (in meters)\"], label='Antarctic', linestyle='--', color='blue', marker='v', markersize=5, linewidth=2, alpha=1)\nax.plot(df[\"Year\"], df[\"Global Average Sea Levels (in meters)\"], label='Global Average', linestyle='-.', color='green', marker='s', markersize=5, linewidth=2, alpha=1, visible=False)\n\n# Change font sizes here\nax.set_xlabel('Year', fontsize=14)\nax.set_ylabel('Sea Level (in meters)', fontsize=14)\nax.set_title('Sea Level Changes from 2000 to 2020', fontsize=18)\nax.legend(loc='upper left', fontsize=12)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfor line, name in zip(ax.lines, ['Arctic', 'Antarctic', 'Global Average']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\nfig.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_1744a68bb3d85e9b/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_1744a68bb3d85e9b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_1744a68bb3d85e9b/myplot.png"
    },
    {
        "id": "Plot_e53698458353ac3d",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = \"\"\"Year,Depression,Anxiety,Substance Abuse\n2000,75,90,60\n2001,70,95,55\n2002,65,100,50\n2003,60,105,70\n2004,55,110,40\n2005,70,115,50\n2006,65,120,80\n2007,60,125,35\n2008,80,130,60\"\"\"\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Depression\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=\"Depression\")\nl2, = ax.plot(df[\"Year\"], df[\"Anxiety\"], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=\"Anxiety\")\nl3, = ax.plot(df[\"Year\"], df[\"Substance Abuse\"], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=\"Substance Abuse\")\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\nax.set_title('Number of Cases of Different Mental Health Issues Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Depression', 'Anxiety', 'Substance Abuse']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Depression\"][i], (df[\"Year\"][i], df[\"Depression\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Anxiety\"][i], (df[\"Year\"][i], df[\"Anxiety\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Substance Abuse\"][i], (df[\"Year\"][i], df[\"Substance Abuse\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Remove grid\nax.grid(False)\n\n# Set background color to white\nax.set_facecolor('white')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Modify the line that contains the center point of the bounding box to have a dash-dot pattern ('-.'), set the line width to 2.2, and change its color to black.",
        "Input_image": "./test_dataset/Plot/Plot_e53698458353ac3d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = \"\"\"Year,Depression,Anxiety,Substance Abuse\n2000,75,90,60\n2001,70,95,55\n2002,65,100,50\n2003,60,105,70\n2004,55,110,40\n2005,70,115,50\n2006,65,120,80\n2007,60,125,35\n2008,80,130,60\"\"\"\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Depression\"], marker='o', markersize=6, linestyle='-.', linewidth=2.2, color='black', alpha=0.7, label=\"Depression\")\nl2, = ax.plot(df[\"Year\"], df[\"Anxiety\"], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=\"Anxiety\")\nl3, = ax.plot(df[\"Year\"], df[\"Substance Abuse\"], marker='s', markersize=6, linestyle='-.', linewidth=2.2, color='black', alpha=0.7, label=\"Substance Abuse\")\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\nax.set_title('Number of Cases of Different Mental Health Issues Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Depression', 'Anxiety', 'Substance Abuse']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Depression\"][i], (df[\"Year\"][i], df[\"Depression\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Anxiety\"][i], (df[\"Year\"][i], df[\"Anxiety\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Substance Abuse\"][i], (df[\"Year\"][i], df[\"Substance Abuse\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Remove grid\nax.grid(False)\n\n# Set background color to white\nax.set_facecolor('white')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_e53698458353ac3d/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_e53698458353ac3d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_e53698458353ac3d/myplot.png"
    },
    {
        "id": "Plot_8263dc9594a8d10c",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nyears = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008]\ncirculation = [200000, 210000, 250000, 255000, 260000, 180000, 210000, 215000, 180000]\n\nfig, ax = plt.subplots()\n\n# Plotting the data with modified colors\nax.plot(years, circulation, linestyle='--', linewidth=2, color='red', \n        marker='o', markersize=5, alpha=0.8, markeredgecolor='black', markerfacecolor='yellow')\n\n# Setting the labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Newspaper Circulation')\nax.set_title('Newspaper Circulation Over Years')\n\n# Annotating the line\nfor i, txt in enumerate(circulation):\n    ax.annotate(txt, (years[i], circulation[i]))\n\n# Adding a grid and setting a light grey background\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Saving the figure\nplt.tight_layout()\nfig.savefig(\"myplot.png\")",
        "Instruction": "Change the linestyle of the plot that contains the center point of the bounding box to 'dashdot'.",
        "Input_image": "./test_dataset/Plot/Plot_8263dc9594a8d10c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nyears = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008]\ncirculation = [200000, 210000, 250000, 255000, 260000, 180000, 210000, 215000, 180000]\n\nfig, ax = plt.subplots()\n\n# Plotting the data with modified colors\nax.plot(years, circulation, linestyle='solid', linewidth=2, color='red', \n        marker='o', markersize=5, alpha=0.8, markeredgecolor='black', markerfacecolor='yellow')\n\n# Setting the labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Newspaper Circulation')\nax.set_title('Newspaper Circulation Over Years')\n\n# Annotating the line\nfor i, txt in enumerate(circulation):\n    ax.annotate(txt, (years[i], circulation[i]))\n\n# Adding a grid and setting a light grey background\nax.grid(True)\nax.set_facecolor('lightgrey')\n\n# Saving the figure\nplt.tight_layout()\nfig.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_8263dc9594a8d10c/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_8263dc9594a8d10c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_8263dc9594a8d10c/myplot.png"
    },
    {
        "id": "Plot_7133e882cb923b9d",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = StringIO(\"\"\"\nHousehold,Vegetable Waste,Fruit Waste,Grain Waste\nHousehold 1,50,60,70\nHousehold 2,80,45,30\nHousehold 3,90,35,20\nHousehold 4,70,85,60\nHousehold 5,40,25,100\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\n\nfig, ax = plt.subplots(facecolor='white')  # Change background to white\n\nax.plot(df['Household'], df['Vegetable Waste'], label=\"Vegetable Waste\", color=\"red\", linewidth=2, linestyle='-', marker='o', markersize=8, alpha=0.8)\nax.plot(df['Household'], df['Fruit Waste'], label=\"Fruit Waste\", color=\"green\", linewidth=2, linestyle='--', marker='v', markersize=8, alpha=0.8)\nax.plot(df['Household'], df['Grain Waste'], label=\"Grain Waste\", color=\"blue\", linewidth=2, linestyle='-.', marker='^', markersize=8, alpha=0.8)\n\nfor col in [\"Vegetable Waste\", \"Fruit Waste\", \"Grain Waste\"]:\n    for x, y in zip(df['Household'], df[col]):\n        ax.text(x, y, str(y))\n\nax.set_title('Waste Distribution per Household')\nax.set_xlabel('Household')\nax.set_ylabel('Waste (kg)')\nax.legend(loc='upper left', shadow=True)\n\nax.grid(False)  # Remove grid lines\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the line that contains the center point of the bounding box to 0.372.",
        "Input_image": "./test_dataset/Plot/Plot_7133e882cb923b9d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = StringIO(\"\"\"\nHousehold,Vegetable Waste,Fruit Waste,Grain Waste\nHousehold 1,50,60,70\nHousehold 2,80,45,30\nHousehold 3,90,35,20\nHousehold 4,70,85,60\nHousehold 5,40,25,100\n\"\"\")\n\ndf = pd.read_csv(data, sep=\",\")\n\nfig, ax = plt.subplots(facecolor='white')  # Change background to white\n\nax.plot(df['Household'], df['Vegetable Waste'], label=\"Vegetable Waste\", color=\"red\", linewidth=2, linestyle='-', marker='o', markersize=8, alpha=0.3720594913748445)\nax.plot(df['Household'], df['Fruit Waste'], label=\"Fruit Waste\", color=\"green\", linewidth=2, linestyle='--', marker='v', markersize=8, alpha=0.8)\nax.plot(df['Household'], df['Grain Waste'], label=\"Grain Waste\", color=\"blue\", linewidth=2, linestyle='-.', marker='^', markersize=8, alpha=0.8)\n\nfor col in [\"Vegetable Waste\", \"Fruit Waste\", \"Grain Waste\"]:\n    for x, y in zip(df['Household'], df[col]):\n        ax.text(x, y, str(y))\n\nax.set_title('Waste Distribution per Household')\nax.set_xlabel('Household')\nax.set_ylabel('Waste (kg)')\nax.legend(loc='upper left', shadow=True)\n\nax.grid(False)  # Remove grid lines\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_7133e882cb923b9d/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_7133e882cb923b9d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_7133e882cb923b9d/myplot.png"
    },
    {
        "id": "Plot_de63f2da6339088d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\n# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Advancements': [100, 120, 450, 150, 200, 250, 1000, 900, 1100]}\ndf = pd.DataFrame(data)\n\n# Plot\nfig, ax = plt.subplots()\nax.plot(df['Year'], df['Advancements'], linestyle='--', linewidth=2, color='blue', marker='o', markersize=6, alpha=0.7, label='Advancements')\n\n# Grid\nax.grid(axis='both', color='0.95')\n\n# Labels, Title and Legend\nax.set_xlabel('Year')\nax.set_ylabel('Advancements')\nax.set_title('Yearly Advancements')\nax.legend()\n\n# Annotate\nfor i, txt in enumerate(df['Advancements']):\n    ax.annotate(txt, (df['Year'][i], df['Advancements'][i]))\n\n# Background Color\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the animated state of the plot that contains the center point of the bounding box to True. For these same lines, update the label to 'A new Label'.",
        "Input_image": "./test_dataset/Plot/Plot_de63f2da6339088d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\n# Required Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {'Year': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n        'Advancements': [100, 120, 450, 150, 200, 250, 1000, 900, 1100]}\ndf = pd.DataFrame(data)\n\n# Plot\nfig, ax = plt.subplots()\nline, = ax.plot(df['Year'], df['Advancements'], linestyle='--', linewidth=2, color='blue', marker='o', markersize=6, alpha=0.7, label='A new Label')\nline.set_animated(True)\n\n# Grid\nax.grid(axis='both', color='0.95')\n\n# Labels, Title and Legend\nax.set_xlabel('Year')\nax.set_ylabel('Advancements')\nax.set_title('Yearly Advancements')\nax.legend()\n\n# Annotate\nfor i, txt in enumerate(df['Advancements']):\n    ax.annotate(txt, (df['Year'][i], df['Advancements'][i]))\n\n# Background Color\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_de63f2da6339088d/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_de63f2da6339088d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_de63f2da6339088d/myplot.png"
    },
    {
        "id": "Plot_f5f7724a4513768c",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n# Data\ndata = \"\"\"Sport,2008,2012,2016\nBaseball,10000,11000,3000\nBasketball,5000,3000,5000\nFootball,15000,10000,20000\nGolf,8000,7000,9000\nTennis,6000,12000,8000\"\"\"\ndf = pd.read_csv(StringIO(data), index_col=0)\n\n# Plot\nfig, ax = plt.subplots()\n\n# Define a color map\ncolors = plt.cm.viridis(np.linspace(0, 1, len(df)))\n\nfor (sport, values), color in zip(df.iterrows(), colors):\n    ax.plot(values.index, values, marker='o', linestyle='--', label=sport, linewidth=2.0, alpha=0.7, color=color)\n    for x, y in zip(values.index, values):\n        ax.text(x, y, str(y), color=color)\n\n# Annotations\nfor line, name in zip(ax.lines, df.index):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1, y), xytext=(6, 0), color=line.get_color(), \n                xycoords=ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Players')\nax.set_title('Number of Players in Different Sports Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the transparency of the line that contains the center point of the bounding box to 0.35.",
        "Input_image": "./test_dataset/Plot/Plot_f5f7724a4513768c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data\ndata = \"\"\"Sport,2008,2012,2016\nBaseball,10000,11000,3000\nBasketball,5000,3000,5000\nFootball,15000,10000,20000\nGolf,8000,7000,9000\nTennis,6000,12000,8000\"\"\"\ndf = pd.read_csv(StringIO(data), index_col=0)\n\n# Plot\nfig, ax = plt.subplots()\n\n# Define a color map\ncolors = plt.cm.viridis(np.linspace(0, 1, len(df)))\n\nfor (sport, values), color in zip(df.iterrows(), colors):\n    if sport == 'Basketball':\n        ax.plot(values.index, values, marker='o', linestyle='--', label=sport, linewidth=2.0, alpha=0.35015627189676946, color=color)\n    else:\n        ax.plot(values.index, values, marker='o', linestyle='--', label=sport, linewidth=2.0, alpha=0.7, color=color)\n    for x, y in zip(values.index, values):\n        ax.text(x, y, str(y), color=color)\n\n# Annotations\nfor line, name in zip(ax.lines, df.index):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1, y), xytext=(6, 0), color=line.get_color(), \n                xycoords=ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Players')\nax.set_title('Number of Players in Different Sports Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_f5f7724a4513768c/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_f5f7724a4513768c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_f5f7724a4513768c/myplot.png"
    },
    {
        "id": "Plot_0454ae81fd576a3d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = '''Year,Pop,Rock,Jazz\n2000,45,65,30\n2001,42,70,28\n2002,40,68,25\n2003,43,60,27\n2004,38,72,24\n2005,37,80,22\n2006,55,77,20\n2007,52,85,18\n2008,62,90,16'''\n\n# create dataframe\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nline1, = ax.plot(df[\"Year\"], df[\"Pop\"], linestyle='-', linewidth=2, color='blue', marker='o', markersize=10, alpha=0.7)\nline2, = ax.plot(df[\"Year\"], df[\"Rock\"], linestyle='--', linewidth=2, color='green', marker='v', markersize=10, alpha=0.7)\nline3, = ax.plot(df[\"Year\"], df[\"Jazz\"], linestyle='-.', linewidth=2, color='red', marker='s', markersize=10, alpha=0.7)\n\n# Set the title and labels\nax.set_title('Music Trends Over Time')\nax.set_xlabel('Year')\nax.set_ylabel('Percentage')\n\n# Add a legend\nax.legend(['Pop', 'Rock', 'Jazz'])\n\n# annotate each line at the end\nax.annotate('Pop', (df[\"Year\"].iloc[-1], df[\"Pop\"].iloc[-1]))\nax.annotate('Rock', (df[\"Year\"].iloc[-1], df[\"Rock\"].iloc[-1]))\nax.annotate('Jazz', (df[\"Year\"].iloc[-1], df[\"Jazz\"].iloc[-1]))\n\n# Add grid\nax.grid(True)\n\n# Change the background color\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterized state of the section that contains the center point of the bounding box for the plot to True.",
        "Input_image": "./test_dataset/Plot/Plot_0454ae81fd576a3d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = '''Year,Pop,Rock,Jazz\n2000,45,65,30\n2001,42,70,28\n2002,40,68,25\n2003,43,60,27\n2004,38,72,24\n2005,37,80,22\n2006,55,77,20\n2007,52,85,18\n2008,62,90,16'''\n\n# create dataframe\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nline1, = ax.plot(df[\"Year\"], df[\"Pop\"], linestyle='-', linewidth=2, color='blue', marker='o', markersize=10, alpha=0.7, rasterized=True)\nline2, = ax.plot(df[\"Year\"], df[\"Rock\"], linestyle='--', linewidth=2, color='green', marker='v', markersize=10, alpha=0.7)\nline3, = ax.plot(df[\"Year\"], df[\"Jazz\"], linestyle='-.', linewidth=2, color='red', marker='s', markersize=10, alpha=0.7)\n\n# Set the title and labels\nax.set_title('Music Trends Over Time')\nax.set_xlabel('Year')\nax.set_ylabel('Percentage')\n\n# Add a legend\nax.legend(['Pop', 'Rock', 'Jazz'])\n\n# annotate each line at the end\nax.annotate('Pop', (df[\"Year\"].iloc[-1], df[\"Pop\"].iloc[-1]))\nax.annotate('Rock', (df[\"Year\"].iloc[-1], df[\"Rock\"].iloc[-1]))\nax.annotate('Jazz', (df[\"Year\"].iloc[-1], df[\"Jazz\"].iloc[-1]))\n\n# Add grid\nax.grid(True)\n\n# Change the background color\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_0454ae81fd576a3d/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_0454ae81fd576a3d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_0454ae81fd576a3d/myplot.png"
    },
    {
        "id": "Plot_39b7beefe5adba19",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = StringIO(\"\"\"\nRegion,2016,2017,2018\nNorth America,100,80,110\nEurope,90,130,120\nAsia,85,70,140\nAfrica,70,75,70\nSouth America,60,90,85\nAustralia,80,85,80\nMiddle East,65,60,90\nAntarctica,50,51,55\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black', 'purple']\nmarkers = ['.', 'o', 'v', '^', 's', 'p', '*', 'h']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(len(df)):\n    ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n            linestyle=choice(linestyles), \n            color=colors[i], \n            marker=markers[i], \n            markersize=10, \n            alpha=0.7, \n            label=df.loc[i, 'Region'])\n    \n    for j in range(1, len(df.columns)):\n        ax.annotate(df.loc[i, df.columns[j]], \n                    (df.columns[j], df.loc[i, df.columns[j]]))\n\nax.set_title('Region Population Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.legend(title='Region:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the color of the line that contains the center point of the bounding box to #3b6cab.",
        "Input_image": "./test_dataset/Plot/Plot_39b7beefe5adba19/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = StringIO(\"\"\"\nRegion,2016,2017,2018\nNorth America,100,80,110\nEurope,90,130,120\nAsia,85,70,140\nAfrica,70,75,70\nSouth America,60,90,85\nAustralia,80,85,80\nMiddle East,65,60,90\nAntarctica,50,51,55\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black', 'purple']\nmarkers = ['.', 'o', 'v', '^', 's', 'p', '*', 'h']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(len(df)):\n    if i == 2:  # Assuming 'Asia' is the target object based on its index\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n                linestyle=choice(linestyles), \n                color='#3b6cab', \n                marker=markers[i], \n                markersize=10, \n                alpha=0.7, \n                label=df.loc[i, 'Region'])\n    else:\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n                linestyle=choice(linestyles), \n                color=colors[i], \n                marker=markers[i], \n                markersize=10, \n                alpha=0.7, \n                label=df.loc[i, 'Region'])\n    \n    for j in range(1, len(df.columns)):\n        ax.annotate(df.loc[i, df.columns[j]], \n                    (df.columns[j], df.loc[i, df.columns[j]]))\n\nax.set_title('Region Population Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.legend(title='Region:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_39b7beefe5adba19/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_39b7beefe5adba19/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_39b7beefe5adba19/myplot.png"
    },
    {
        "id": "Plot_bc551901d4fb17fd",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data as a csv string\ndata = '''\"Vacation Type\",\"2018\",\"2019\",\"2020\"\n\"Cruise Vacations\",5000,6000,2500\n\"Road Trips\",6300,4500,9000\n\"Staycations\",4000,4200,8400'''\n\n# Read the csv data\ndf = pd.read_csv(StringIO(data), quotechar='\"')\n\n# Prepare the data for plotting\nx = df.columns[1:].astype(int)\ny_values = df.values[:, 1:].astype(int)\nlabels = df.values[:, 0]\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot each line\nfor y, label in zip(y_values, labels):\n    ax.plot(x, y, marker='o', label=label)\n    for i, v in enumerate(y):\n        ax.text(x[i], v+100, str(v), ha='center')  # Annotate data values\n\n# Set title and labels\nax.set_title('Vacation Trends over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of People')\n\n# Add legend, grid and set facecolor\nax.legend()\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the shape of the points in the line that contain the center point of the bounding box to a triangle.",
        "Input_image": "./test_dataset/Plot/Plot_bc551901d4fb17fd/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Given data as a csv string\ndata = '''\"Vacation Type\",\"2018\",\"2019\",\"2020\"\n\"Cruise Vacations\",5000,6000,2500\n\"Road Trips\",6300,4500,9000\n\"Staycations\",4000,4200,8400'''\n\n# Read the csv data\ndf = pd.read_csv(StringIO(data), quotechar='\"')\n\n# Prepare the data for plotting\nx = df.columns[1:].astype(int)\ny_values = df.values[:, 1:].astype(int)\nlabels = df.values[:, 0]\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot each line\nfor i, (y, label) in enumerate(zip(y_values, labels)):\n    if i == 1:  # Assuming 'Road Trips' is the second line\n        ax.plot(x, y, marker='^', label=label)\n    else:\n        ax.plot(x, y, marker='o', label=label)\n    for i, v in enumerate(y):\n        ax.text(x[i], v+100, str(v), ha='center')  # Annotate data values\n\n# Set title and labels\nax.set_title('Vacation Trends over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of People')\n\n# Add legend, grid and set facecolor\nax.legend()\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_bc551901d4fb17fd/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_bc551901d4fb17fd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_bc551901d4fb17fd/myplot.png"
    },
    {
        "id": "Plot_a526e1b239404df2",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Arctic Ice Cap,Antarctic Ice Cap,Greenland Ice Cap\n2000,13.2,13.6,2.9\n2001,13.5,13.9,3.2\n2002,13.7,13.5,3.0\n2003,10.2,13.0,2.7\n2004,10.5,13.5,3.0\n2005,10.9,14.0,3.3\n2006,10.7,13.6,3.1\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = ['skyblue', 'teal', 'navy']\nmarker = ['o', 'v', '^']\nmarkersize = 7\nalpha = 0.8\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    y = df[column].values[-1]\n    ax.annotate(column, xy=(1,y), xytext=(6,0), color=color[i], \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Set the title and labels\nax.set_title(\"Changes in Ice Cap Sizes from 2000 to 2006\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Size (in million square kilometers)\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Update the label of the plot that contains the center point of the bounding box to 'A new Label'.",
        "Input_image": "./test_dataset/Plot/Plot_a526e1b239404df2/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Arctic Ice Cap,Antarctic Ice Cap,Greenland Ice Cap\n2000,13.2,13.6,2.9\n2001,13.5,13.9,3.2\n2002,13.7,13.5,3.0\n2003,10.2,13.0,2.7\n2004,10.5,13.5,3.0\n2005,10.9,14.0,3.3\n2006,10.7,13.6,3.1\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = ['skyblue', 'teal', 'navy']\nmarker = ['o', 'v', '^']\nmarkersize = 7\nalpha = 0.8\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    label = 'A new Label' if i == 1 else column  # Changed label for one line\n    ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=label)\n    y = df[column].values[-1]\n    ax.annotate(column, xy=(1,y), xytext=(6,0), color=color[i], \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Set the title and labels\nax.set_title(\"Changes in Ice Cap Sizes from 2000 to 2006\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Size (in million square kilometers)\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_a526e1b239404df2/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_a526e1b239404df2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_a526e1b239404df2/myplot.png"
    },
    {
        "id": "Plot_55b824d0cfc5ee55",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = {\n    \"Year\": [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    \"Pop\": [100, 85, 90, 70, 90, 80, 70, 85, 100, 95, 70],\n    \"Rock\": [150, 130, 120, 140, 110, 150, 130, 120, 150, 130, 110],\n    \"Country\": [50, 55, 60, 70, 60, 55, 65, 70, 75, 80, 85],\n    \"Hip Hop\": [70, 80, 75, 85, 95, 90, 110, 100, 95, 105, 120]\n}\ndf = pd.DataFrame(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta']\nmarkers = ['.', 'o', 'v', '^', 's']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(1, len(df.columns)):\n    ax.plot(df['Year'], df[df.columns[i]], \n            linestyle=choice(linestyles), \n            color=colors[i-1], \n            marker=markers[i-1], \n            markersize=10, \n            alpha=0.7, \n            label=df.columns[i])\n    \n    ax.annotate(df.columns[i], \n                (df['Year'].iloc[-1], df[df.columns[i]].iloc[-1]))\n    \n# Set custom font sizes here\ntitle_fontsize = 16\nlabel_fontsize = 16\nlegend_fontsize = 12\n\nax.set_title('Music Genre Popularity Over Years', fontsize=title_fontsize)\nax.set_xlabel('Year', fontsize=label_fontsize)\nax.set_ylabel('Popularity', fontsize=label_fontsize)\nlegend = ax.legend(title='Genre:', fontsize=legend_fontsize)\nlegend.get_title().set_fontsize(legend_fontsize)  # Set the legend title font size\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the color of the plot element that contains the center point of the bounding box to #d1eacc. Additionally, set the edge color of this element to #1462b1.",
        "Input_image": "./test_dataset/Plot/Plot_55b824d0cfc5ee55/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = {\n    \"Year\": [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    \"Pop\": [100, 85, 90, 70, 90, 80, 70, 85, 100, 95, 70],\n    \"Rock\": [150, 130, 120, 140, 110, 150, 130, 120, 150, 130, 110],\n    \"Country\": [50, 55, 60, 70, 60, 55, 65, 70, 75, 80, 85],\n    \"Hip Hop\": [70, 80, 75, 85, 95, 90, 110, 100, 95, 105, 120]\n}\ndf = pd.DataFrame(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta']\nmarkers = ['.', 'o', 'v', '^', 's']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(1, len(df.columns)):\n    if i == 2:  # Assuming we're modifying the second line (Rock)\n        ax.plot(df['Year'], df[df.columns[i]], \n                linestyle=choice(linestyles), \n                color='#d1eacc', \n                marker=markers[i-1], \n                markersize=10, \n                alpha=0.7, \n                label=df.columns[i],\n                markeredgecolor='#1462b1')\n    else:\n        ax.plot(df['Year'], df[df.columns[i]], \n                linestyle=choice(linestyles), \n                color=colors[i-1], \n                marker=markers[i-1], \n                markersize=10, \n                alpha=0.7, \n                label=df.columns[i])\n    \n    ax.annotate(df.columns[i], \n                (df['Year'].iloc[-1], df[df.columns[i]].iloc[-1]))\n    \n# Set custom font sizes here\ntitle_fontsize = 16\nlabel_fontsize = 16\nlegend_fontsize = 12\n\nax.set_title('Music Genre Popularity Over Years', fontsize=title_fontsize)\nax.set_xlabel('Year', fontsize=label_fontsize)\nax.set_ylabel('Popularity', fontsize=label_fontsize)\nlegend = ax.legend(title='Genre:', fontsize=legend_fontsize)\nlegend.get_title().set_fontsize(legend_fontsize)  # Set the legend title font size\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_55b824d0cfc5ee55/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_55b824d0cfc5ee55/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_55b824d0cfc5ee55/myplot.png"
    },
    {
        "id": "Plot_2e3e90d98c227113",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Allergies': ['Peanuts', 'Dairy', 'Gluten', 'Shellfish', 'Pollen', 'Mold', 'Dust Mites'],\n    'Year1': [100, 50, 80, 70, 100, 90, 70],\n    'Year2': [80, 45, 75, 65, 50, 95, 60],\n    'Year3': [75, 50, 70, 40, 60, 110, 80],\n    'Year4': [150, 45, 72, 41, 110, 80, 70]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\nfor index, row in df.iterrows():\n    ax.plot(['Year1', 'Year2', 'Year3', 'Year4'], row[1:], label=row[0], marker='o')\n    for x, y in zip(['Year1', 'Year2', 'Year3', 'Year4'], row[1:]):\n        ax.text(x, y, f'{y}', ha='right')\n\nax.set_title('Allergies Over Years')\nax.set_xlabel('Years')\nax.set_ylabel('Allergies')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the marker style of the lines that contain the center point of the bounding box to 'v', and change the marker edge width for those lines to 0.51.",
        "Input_image": "./test_dataset/Plot/Plot_2e3e90d98c227113/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Allergies': ['Peanuts', 'Dairy', 'Gluten', 'Shellfish', 'Pollen', 'Mold', 'Dust Mites'],\n    'Year1': [100, 50, 80, 70, 100, 90, 70],\n    'Year2': [80, 45, 75, 65, 50, 95, 60],\n    'Year3': [75, 50, 70, 40, 60, 110, 80],\n    'Year4': [150, 45, 72, 41, 110, 80, 70]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\nfor index, row in df.iterrows():\n    if index == 2:  # Targeting the third line for modification\n        ax.plot(['Year1', 'Year2', 'Year3', 'Year4'], row[1:], label=row[0], marker='v', markeredgewidth=0.51)\n    else:\n        ax.plot(['Year1', 'Year2', 'Year3', 'Year4'], row[1:], label=row[0], marker='o')\n    for x, y in zip(['Year1', 'Year2', 'Year3', 'Year4'], row[1:]):\n        ax.text(x, y, f'{y}', ha='right')\n\nax.set_title('Allergies Over Years')\nax.set_xlabel('Years')\nax.set_ylabel('Allergies')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_2e3e90d98c227113/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_2e3e90d98c227113/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_2e3e90d98c227113/myplot.png"
    },
    {
        "id": "Plot_29f52c69577e69bd",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"\nCryptocurrency,2019,2020,2021\nBitcoin,14000,24000,29000\nEthereum,3000,3500,2500\nRipple,200,1000,500\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Cryptocurrency\"]))\n\nfor i in range(1, df.shape[1]):\n    line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle='-.', linewidth=2, markersize=8, label=df.columns[i], color='b', alpha=0.7)\n    for j in range(len(x)):\n        ax.text(j, df.iloc[j, i], df.columns[i], ha='center')\n\nax.set_xlabel('Cryptocurrency')\nax.set_ylabel('Values')\nax.set_title('Cryptocurrency Values Over Years')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Cryptocurrency\"])\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the plot that contains the center point of the bounding box to 0.44.",
        "Input_image": "./test_dataset/Plot/Plot_29f52c69577e69bd/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"\nCryptocurrency,2019,2020,2021\nBitcoin,14000,24000,29000\nEthereum,3000,3500,2500\nRipple,200,1000,500\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Cryptocurrency\"]))\n\nfor i in range(1, df.shape[1]):\n    if i == 2:  # Randomly selected index\n        line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle='-.', linewidth=2, markersize=8, label=df.columns[i], color='b', alpha=0.44)\n    else:\n        line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle='-.', linewidth=2, markersize=8, label=df.columns[i], color='b', alpha=0.7)\n    for j in range(len(x)):\n        ax.text(j, df.iloc[j, i], df.columns[i], ha='center')\n\nax.set_xlabel('Cryptocurrency')\nax.set_ylabel('Values')\nax.set_title('Cryptocurrency Values Over Years')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Cryptocurrency\"])\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_29f52c69577e69bd/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_29f52c69577e69bd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_29f52c69577e69bd/myplot.png"
    },
    {
        "id": "Plot_6e345db9fb534211",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = \"\"\"\nGenre,Popularity\nRock,80\nPop,90\nJazz,50\nCountry,70\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Plot\nfig, ax = plt.subplots()\nfor column in df.columns[1:]:\n    ax.plot(df['Genre'], df[column], marker='o', linestyle='-.', color='b', linewidth=2.0, markersize=10, alpha=0.7, label=column)\n    for x, y in zip(df['Genre'], df[column]):\n        ax.text(x, y, str(y), size=10, va=\"bottom\", ha=\"center\")\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Genre')\nax.set_ylabel('Popularity')\nax.set_title('Popularity of Different Music Genres')\nax.legend()\n\n# Changed background to white and removed gridlines\nax.grid(False)\nax.set_facecolor('white')  # Change background to white\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the color of the line that contains the center point of the bounding box to #7ebcca.",
        "Input_image": "./test_dataset/Plot/Plot_6e345db9fb534211/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = \"\"\"\nGenre,Popularity\nRock,80\nPop,90\nJazz,50\nCountry,70\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Plot\nfig, ax = plt.subplots()\nfor column in df.columns[1:]:\n    if column == 'Popularity':\n        ax.plot(df['Genre'], df[column], marker='o', linestyle='-.', color='#7ebcca', linewidth=2.0, markersize=10, alpha=0.7, label=column)\n    else:\n        ax.plot(df['Genre'], df[column], marker='o', linestyle='-.', color='b', linewidth=2.0, markersize=10, alpha=0.7, label=column)\n    for x, y in zip(df['Genre'], df[column]):\n        ax.text(x, y, str(y), size=10, va=\"bottom\", ha=\"center\")\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Genre')\nax.set_ylabel('Popularity')\nax.set_title('Popularity of Different Music Genres')\nax.legend()\n\n# Changed background to white and removed gridlines\nax.grid(False)\nax.set_facecolor('white')  # Change background to white\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_6e345db9fb534211/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_6e345db9fb534211/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_6e345db9fb534211/myplot.png"
    },
    {
        "id": "Plot_8ea26842b03ab88c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {'Year': [2017, 2018, 2019, 2020],\n        'Bird Species 1': [1000, 950, 900, 1200],\n        'Bird Species 2': [900, 1050, 1200, 1100],\n        'Bird Species 3': [800, 850, 750, 600]}\ndf = pd.DataFrame(data)\n\nplt.rc('lines', linewidth=2.5)\nfig, ax = plt.subplots()\n\n# Plot data\nline1, = ax.plot(df['Year'], df['Bird Species 1'], linestyle='-', color='red', marker='o', markersize=10, alpha=0.5, label='Bird Species 1')\nline2, = ax.plot(df['Year'], df['Bird Species 2'], linestyle='--', color='green', marker='v', markersize=10, alpha=0.5, label='Bird Species 2')\nline3, = ax.plot(df['Year'], df['Bird Species 3'], linestyle='-.', color='blue', marker='s', markersize=10, alpha=0.5, label='Bird Species 3')\n\n# Set title and labels\nax.set_title('Bird Species Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Count')\n\n# Set legend\nax.legend(loc='best')\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Save figure\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Update the transparency of the specified lines that contain the center point of the bounding box to 0.05. For those same lines, set the z-order to 10 and add a shadow effect with an offset of (3.41, 3.69).",
        "Input_image": "./test_dataset/Plot/Plot_8ea26842b03ab88c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Data\ndata = {'Year': [2017, 2018, 2019, 2020],\n        'Bird Species 1': [1000, 950, 900, 1200],\n        'Bird Species 2': [900, 1050, 1200, 1100],\n        'Bird Species 3': [800, 850, 750, 600]}\ndf = pd.DataFrame(data)\n\nplt.rc('lines', linewidth=2.5)\nfig, ax = plt.subplots()\n\n# Plot data\nline1, = ax.plot(df['Year'], df['Bird Species 1'], linestyle='-', color='red', marker='o', markersize=10, alpha=0.5, label='Bird Species 1')\nline2, = ax.plot(df['Year'], df['Bird Species 2'], linestyle='--', color='green', marker='v', markersize=10, alpha=0.05, label='Bird Species 2', zorder=10, path_effects=[SimpleLineShadow(offset=(3.41, 3.69)), Normal()])\nline3, = ax.plot(df['Year'], df['Bird Species 3'], linestyle='-.', color='blue', marker='s', markersize=10, alpha=0.5, label='Bird Species 3')\n\n# Set title and labels\nax.set_title('Bird Species Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Count')\n\n# Set legend\nax.legend(loc='best')\n\n# Set grid and background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Save figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_8ea26842b03ab88c/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_8ea26842b03ab88c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_8ea26842b03ab88c/myplot.png"
    },
    {
        "id": "Plot_1e6952b3b139f16b",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data\ndata = \"\"\"Year,Condominiums,Houses,Townhouses\n2000,3000,5000,4000\n2001,3500,7000,4500\n2002,5000,4500,4800\n2003,4500,4800,4200\n2004,4000,6000,4400\n2005,5000,5500,4600\n2006,7000,5300,4800\n2007,6600,5000,5000\n2008,5700,4400,5200\"\"\"\n\ndf = pd.read_csv(StringIO(data))\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\n# Change the colors here\ncolor = ['#1f77b4', '#ff7f0e', '#2ca02c']  # New color scheme: blue, orange, green\nmarker = ['o', 'v', '^']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines with new colors\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Property price trends over the years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Price\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label using new colors\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Change the shape of the data points on the line that contains the center point of the bounding box to 'circle'.",
        "Input_image": "./test_dataset/Plot/Plot_1e6952b3b139f16b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data\ndata = \"\"\"Year,Condominiums,Houses,Townhouses\n2000,3000,5000,4000\n2001,3500,7000,4500\n2002,5000,4500,4800\n2003,4500,4800,4200\n2004,4000,6000,4400\n2005,5000,5500,4600\n2006,7000,5300,4800\n2007,6600,5000,5000\n2008,5700,4400,5200\"\"\"\n\ndf = pd.read_csv(StringIO(data))\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\n# Change the colors here\ncolor = ['#1f77b4', '#ff7f0e', '#2ca02c']  # New color scheme: blue, orange, green\nmarker = ['o', 'o', '^']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines with new colors\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Property price trends over the years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Price\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label using new colors\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_1e6952b3b139f16b/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_1e6952b3b139f16b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_1e6952b3b139f16b/myplot.png"
    },
    {
        "id": "Plot_ab17b30cf683574a",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\n\"Software\",\"Q1\",\"Q2\",\"Q3\",\"Q4\"\n\"Antivirus\",100,75,325,90\n\"CRM\",150,300,280,315\n\"ERP\",200,175,205,225\n\"Graphic Design\",250,550,250,255\n\"\"\")\n\n# Load data into a DataFrame\ndf = pd.read_csv(data, quotechar='\"')\n\n# Create a figure and an axes\nfig, ax = plt.subplots()\n\n# Set the background color of the chart\nax.set_facecolor('lightgray')\n\n# Plot data\nfor index, row in df.iterrows():\n    ax.plot(['Q1', 'Q2', 'Q3', 'Q4'], row[1:], label=row[0], linestyle='-', linewidth=1.5, marker='o', markersize=4, alpha=0.7)\n\n# Set labels and title\nax.set(xlabel='Quarters', ylabel='Sales',\n       title='Software Sales Over Quarters')\n\n# Add legend and grid\nax.legend()\nax.grid()\n\n# Annotate each line with the corresponding legend label\nfor line, name in zip(ax.lines, df['Software']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Tight layout and save figure\nplt.tight_layout()\nfig.savefig(\"myplot.png\")",
        "Instruction": "Set the transform of the line that contains the center point of the bounding box to the Coordinate system of data. and for the same lines: Set the z-order of the same line to 8. and set the shadow effect of it  with a offset of (3.76,2.87).",
        "Input_image": "./test_dataset/Plot/Plot_ab17b30cf683574a/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Given data\ndata = StringIO(\"\"\"\n\"Software\",\"Q1\",\"Q2\",\"Q3\",\"Q4\"\n\"Antivirus\",100,75,325,90\n\"CRM\",150,300,280,315\n\"ERP\",200,175,205,225\n\"Graphic Design\",250,550,250,255\n\"\"\")\n\n# Load data into a DataFrame\ndf = pd.read_csv(data, quotechar='\"')\n\n# Create a figure and an axes\nfig, ax = plt.subplots()\n\n# Set the background color of the chart\nax.set_facecolor('lightgray')\n\n# Plot data\nfor index, row in df.iterrows():\n    if index == 1:  # Target object\n        line, = ax.plot(['Q1', 'Q2', 'Q3', 'Q4'], row[1:], label=row[0], linestyle='-', linewidth=1.5, marker='o', markersize=4, alpha=0.7, zorder=8, transform=ax.transData, path_effects=[SimpleLineShadow(offset=(3.76, 2.87)), Normal()])\n    else:\n        ax.plot(['Q1', 'Q2', 'Q3', 'Q4'], row[1:], label=row[0], linestyle='-', linewidth=1.5, marker='o', markersize=4, alpha=0.7)\n\n# Set labels and title\nax.set(xlabel='Quarters', ylabel='Sales',\n       title='Software Sales Over Quarters')\n\n# Add legend and grid\nax.legend()\nax.grid()\n\n# Annotate each line with the corresponding legend label\nfor line, name in zip(ax.lines, df['Software']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Tight layout and save figure\nplt.tight_layout()\nfig.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_ab17b30cf683574a/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_ab17b30cf683574a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_ab17b30cf683574a/myplot.png"
    },
    {
        "id": "Plot_287922ae7944b292",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = \"\"\"\nGadgets,Usage\nSmartphones,3500\nTablets,3000\nLaptops,4000\nSmart Watches,2500\nVR Headsets,1500\nGame Consoles,3500\nDrones,2000\nWireless Headphones,3000\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black', 'purple']\nmarkers = ['.', 'o', 'v', '^', 's', 'p', '*', 'h']\n\n# Plot\nfig, ax = plt.subplots()\nax.plot(df['Gadgets'], df['Usage'], \n        linestyle=choice(linestyles), \n        color=choice(colors), \n        marker=choice(markers), \n        markersize=10, \n        alpha=0.7, \n        linewidth = 2)\n\nax.annotate(df.loc[df.index[-1], 'Gadgets'], \n            (df.index[-1], df.loc[df.index[-1], 'Usage']))\n\nax.set_title('Gadget Usage')\nax.set_xlabel('Gadgets')\nax.set_ylabel('Usage')\nax.grid(False)  # Disable gridlines\nfig.set_facecolor('white')  # Change background to white\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the picker state of the plot that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Plot/Plot_287922ae7944b292/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = \"\"\"\nGadgets,Usage\nSmartphones,3500\nTablets,3000\nLaptops,4000\nSmart Watches,2500\nVR Headsets,1500\nGame Consoles,3500\nDrones,2000\nWireless Headphones,3000\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black', 'purple']\nmarkers = ['.', 'o', 'v', '^', 's', 'p', '*', 'h']\n\n# Plot\nfig, ax = plt.subplots()\nline, = ax.plot(df['Gadgets'], df['Usage'], \n        linestyle=choice(linestyles), \n        color=choice(colors), \n        marker=choice(markers), \n        markersize=10, \n        alpha=0.7, \n        linewidth = 2, \n        picker=False)\n\nax.annotate(df.loc[df.index[-1], 'Gadgets'], \n            (df.index[-1], df.loc[df.index[-1], 'Usage']))\n\nax.set_title('Gadget Usage')\nax.set_xlabel('Gadgets')\nax.set_ylabel('Usage')\nax.grid(False)  # Disable gridlines\nfig.set_facecolor('white')  # Change background to white\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')\n",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_287922ae7944b292/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_287922ae7944b292/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_287922ae7944b292/myplot.png"
    },
    {
        "id": "Plot_ddc5b70d5a82f69d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data for plotting\ndata = {\n    \"Technology\": [\"Smartphones\", \"Virtual Reality\", \"Artificial Intelligence\", \"Blockchain\"],\n    \"2017\": [100, 10, 20, 30],\n    \"2018\": [110, 20, 25, 25],\n    \"2019\": [115, 50, 60, 80]\n}\n\ndf = pd.DataFrame(data)\n\nyears = [\"2017\", \"2018\", \"2019\"]\n\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['red', 'blue', 'green', 'black']\nmarkers = ['o', 'v', '^', '<']\n\nfig, ax = plt.subplots()\n\nfor i, tech in enumerate(data[\"Technology\"]):\n    ax.plot(years, df.loc[i, years], linestyle=linestyles[i], color=colors[i], marker=markers[i],\n            linewidth=2, markersize=10, alpha=0.8, label=tech)\n    ax.text(2, df.loc[i, \"2019\"], tech, va='center')\n\nax.grid()\nax.set_facecolor('#ADD8E6')  # Light blue background color\n\nax.set(xlabel='Year', ylabel='Units sold (in million)',\n       title='Technology Sales Overview from 2017 to 2019')\nax.legend()\n\nplt.tight_layout()\nfig.savefig(\"myplot.png\")",
        "Instruction": "Set the clip box for the plot that contains the center point of the bounding box to the defined area starting at the point (195, 175) with a width of 221 and a height of 286, using the matplotlib.transforms.Bbox pattern. Additionally, change the z-order of this plot to 7 and apply a shadow effect with an offset of (3.98, 3.11).",
        "Input_image": "./test_dataset/Plot/Plot_ddc5b70d5a82f69d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Data for plotting\ndata = {\n    \"Technology\": [\"Smartphones\", \"Virtual Reality\", \"Artificial Intelligence\", \"Blockchain\"],\n    \"2017\": [100, 10, 20, 30],\n    \"2018\": [110, 20, 25, 25],\n    \"2019\": [115, 50, 60, 80]\n}\n\ndf = pd.DataFrame(data)\n\nyears = [\"2017\", \"2018\", \"2019\"]\n\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['red', 'blue', 'green', 'black']\nmarkers = ['o', 'v', '^', '<']\n\nfig, ax = plt.subplots()\n\nclip_box = Bbox.from_bounds(95, 75, 221, 286)\n\nfor i, tech in enumerate(data[\"Technology\"]):\n    if i == 1:  # Apply modifications to the second line\n        line, = ax.plot(years, df.loc[i, years], linestyle=linestyles[i], color=colors[i], marker=markers[i],\n                linewidth=2, markersize=10, alpha=0.8, label=tech, zorder=7,\n                path_effects=[SimpleLineShadow(offset=(3.98, 3.11)), Normal()])\n        line.set_clip_box(clip_box)\n    else:\n        ax.plot(years, df.loc[i, years], linestyle=linestyles[i], color=colors[i], marker=markers[i],\n                linewidth=2, markersize=10, alpha=0.8, label=tech)\n    ax.text(2, df.loc[i, \"2019\"], tech, va='center')\n\nax.grid()\nax.set_facecolor('#ADD8E6')  # Light blue background color\n\nax.set(xlabel='Year', ylabel='Units sold (in million)',\n       title='Technology Sales Overview from 2017 to 2019')\nax.legend()\n\nplt.tight_layout()\nfig.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_ddc5b70d5a82f69d/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_ddc5b70d5a82f69d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_ddc5b70d5a82f69d/myplot.png"
    },
    {
        "id": "Plot_d861165a228d694d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom io import StringIO\n\ndata = StringIO(\"\"\"\nSubject,Mathematics,Physics,Chemistry\nStudent1,85,92,76\nStudent2,82,89,78\nStudent3,80,91,80\nStudent4,78,95,82\nStudent5,96,90,84\nStudent6,94,88,86\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Subject\"]))\n\nlinestyles = ['-', '--', '-.', ':']\n\nfor i in range(1, df.shape[1]):\n    line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle=linestyles[i-1], linewidth=2, markersize=6, label=df.columns[i], alpha=0.7)\n    for j in range(len(x)):\n        ax.text(j, df.iloc[j, i], df.columns[i], ha='right')\n\nax.set_xlabel('Students')\nax.set_ylabel('Scores')\nax.set_title('Scores by Students and Subject')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Subject\"])\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the line style of the plot that contains the center point of the bounding box to ':'. Also, enable the picker state for same plots to be True.",
        "Input_image": "./test_dataset/Plot/Plot_d861165a228d694d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom io import StringIO\n\ndata = StringIO(\"\"\"\nSubject,Mathematics,Physics,Chemistry\nStudent1,85,92,76\nStudent2,82,89,78\nStudent3,80,91,80\nStudent4,78,95,82\nStudent5,96,90,84\nStudent6,94,88,86\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Subject\"]))\n\nlinestyles = ['-', '--', '-.', ':']\n\nfor i in range(1, df.shape[1]):\n    if i == 2:  # Assuming we're modifying the second line (Physics)\n        line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle=':', linewidth=2, markersize=6, label=df.columns[i], alpha=0.7, picker=True)\n    else:\n        line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle=linestyles[i-1], linewidth=2, markersize=6, label=df.columns[i], alpha=0.7)\n    for j in range(len(x)):\n        ax.text(j, df.iloc[j, i], df.columns[i], ha='right')\n\nax.set_xlabel('Students')\nax.set_ylabel('Scores')\nax.set_title('Scores by Students and Subject')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Subject\"])\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_d861165a228d694d/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_d861165a228d694d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_d861165a228d694d/myplot.png"
    },
    {
        "id": "Plot_a2566bef1dac63f2",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nPlatform,Year 1,Year 2,Year 3,Year 4,Year 5,Year 6,Year 7,Year 8,Year 9\nFacebook,5000,5500,3000,3500,4000,6000,6500,3000,3500\nTwitter,3000,3500,4000,3000,2500,2000,1500,1000,500\nInstagram,2000,4500,5000,5500,5000,4500,4000,8500,8000\nSnapchat,1000,2000,3000,2000,1000,800,600,400,200\nLinkedIn,2000,2500,3000,3500,4000,4500,5000,5500,6000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nplatforms = ['Facebook', 'Twitter', 'Instagram', 'Snapchat', 'LinkedIn']\n# Updated color palette for better contrast and visual appeal\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nlinestyles = ['-', '--', '-.', ':', '-']\nmarkers = ['o', 's', 'v', '^', 'd']\n\nfor i, platform in enumerate(platforms):\n    ax.plot(df.columns[1:], df.loc[i, df.columns[1:]],\n            marker=markers[i], color=colors[i], linestyle=linestyles[i], linewidth=2, markersize=6, alpha=0.7, label=platform)\n    for j, txt in enumerate(df.loc[i, df.columns[1:]]):\n        ax.annotate(txt, (df.columns[1:][j], txt))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Users')\nax.set_title('Number of Users per Social Media Platform Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the marker face color of the lines that contain the center point of the bounding box to #8fc8ba. and for the same line: Set the transform of it to the Coordinate system of data.",
        "Input_image": "./test_dataset/Plot/Plot_a2566bef1dac63f2/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nPlatform,Year 1,Year 2,Year 3,Year 4,Year 5,Year 6,Year 7,Year 8,Year 9\nFacebook,5000,5500,3000,3500,4000,6000,6500,3000,3500\nTwitter,3000,3500,4000,3000,2500,2000,1500,1000,500\nInstagram,2000,4500,5000,5500,5000,4500,4000,8500,8000\nSnapchat,1000,2000,3000,2000,1000,800,600,400,200\nLinkedIn,2000,2500,3000,3500,4000,4500,5000,5500,6000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nplatforms = ['Facebook', 'Twitter', 'Instagram', 'Snapchat', 'LinkedIn']\n# Updated color palette for better contrast and visual appeal\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nlinestyles = ['-', '--', '-.', ':', '-']\nmarkers = ['o', 's', 'v', '^', 'd']\n\nfor i, platform in enumerate(platforms):\n    if i == 2:  # Target object\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]],\n                marker=markers[i], color=colors[i], linestyle=linestyles[i], linewidth=2, markersize=6, alpha=0.7, label=platform, markerfacecolor='#8fc8ba', transform=ax.transData)\n    else:\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]],\n                marker=markers[i], color=colors[i], linestyle=linestyles[i], linewidth=2, markersize=6, alpha=0.7, label=platform)\n    for j, txt in enumerate(df.loc[i, df.columns[1:]]):\n        ax.annotate(txt, (df.columns[1:][j], txt))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Users')\nax.set_title('Number of Users per Social Media Platform Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_a2566bef1dac63f2/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_a2566bef1dac63f2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_a2566bef1dac63f2/myplot.png"
    },
    {
        "id": "Plot_bcd678881e821e0e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom io import StringIO\n\ncsv_data = StringIO(\"\"\"\n\"Year\",\"Phishing Attacks\",\"Malware Infections\"\n2012,500,1000\n2013,600,1100\n2014,700,1200\n2015,1300,900\n2016,1500,1600\n2017,1700,1400\n2018,2100,1500\n2019,1600,1800\n2020,1700,1900\n\"\"\")\n\ndata = np.genfromtxt(csv_data, delimiter=\",\", skip_header=1)\n\nfig, ax = plt.subplots(facecolor='lightgray')\n\nax.plot(data[:, 0], data[:, 1], label=\"Phishing Attacks\", color=\"red\", linewidth=2, linestyle='-', marker='o', markersize=8, alpha=0.8)\nax.plot(data[:, 0], data[:, 2], label=\"Malware Infections\", color=\"blue\", linewidth=2, linestyle='--', marker='v', markersize=8, alpha=0.8)\n\nfor i in range(1, 3):\n    for x, y in zip(data[:, 0], data[:, i]):\n        ax.text(x, y, str(y))\n\nax.set_title('Cyber Threats Over the Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Attacks')\nax.legend(loc='upper left', shadow=True)\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the picker state of the plot that contains the center point of the bounding box to False. For the same lines, apply a stroke to this plot with a linewidth of 3.47 and a foreground color of #e71179.",
        "Input_image": "./test_dataset/Plot/Plot_bcd678881e821e0e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.patheffects as path_effects\n\ncsv_data = StringIO(\"\"\"\n\"Year\",\"Phishing Attacks\",\"Malware Infections\"\n2012,500,1000\n2013,600,1100\n2014,700,1200\n2015,1300,900\n2016,1500,1600\n2017,1700,1400\n2018,2100,1500\n2019,1600,1800\n2020,1700,1900\n\"\"\")\n\ndata = np.genfromtxt(csv_data, delimiter=\",\", skip_header=1)\n\nfig, ax = plt.subplots(facecolor='lightgray')\n\nstroke_effect = path_effects.withStroke(linewidth=3.470874996160556, foreground='#e71179')\nax.plot(data[:, 0], data[:, 1], label=\"Phishing Attacks\", color=\"red\", linewidth=2, linestyle='-', marker='o', markersize=8, alpha=0.8, picker=False, path_effects=[stroke_effect])\nax.plot(data[:, 0], data[:, 2], label=\"Malware Infections\", color=\"blue\", linewidth=2, linestyle='--', marker='v', markersize=8, alpha=0.8)\n\nfor i in range(1, 3):\n    for x, y in zip(data[:, 0], data[:, i]):\n        ax.text(x, y, str(y))\n\nax.set_title('Cyber Threats Over the Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Attacks')\nax.legend(loc='upper left', shadow=True)\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_bcd678881e821e0e/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_bcd678881e821e0e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_bcd678881e821e0e/myplot.png"
    },
    {
        "id": "Plot_3fb69211b19d25be",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    'Earthquakes': [98, 90, 85, 78, 100, 75, 70, 68, 65, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42],\n    'Hurricanes': [15, 20, 25, 30, 35, 40, 100, 95, 90, 80, 70, 60, 55, 50, 45, 40, 35, 30, 25, 20],\n    'Floods': [50, 52, 55, 57, 60, 45, 42, 40, 38, 35, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55],\n    'Wildfires': [20, 25, 30, 35, 40, 100, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25],\n    'Tornados': [80, 70, 60, 50, 45, 35, 30, 28, 26, 25, 24, 23, 22, 21, 20, 19, 18, 100, 95, 90]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot data\nax.plot(df['Year'], df['Earthquakes'], linestyle='-', color='tab:blue', marker='o', markersize=4, label='Earthquakes', alpha=0.7)\nax.plot(df['Year'], df['Hurricanes'], linestyle='--', color='tab:orange', marker='v', markersize=4, label='Hurricanes', alpha=0.7)\nax.plot(df['Year'], df['Floods'], linestyle='-.', color='tab:green', marker='s', markersize=4, label='Floods', alpha=0.7)\nax.plot(df['Year'], df['Wildfires'], linestyle=':', color='tab:red', marker='^', markersize=4, label='Wildfires', alpha=0.7)\nax.plot(df['Year'], df['Tornados'], linestyle='-', color='tab:purple', marker='*', markersize=4, label='Tornados', alpha=0.7)\n\n# Annotate each line\nfor i, txt in enumerate(df['Earthquakes']):\n    ax.annotate('Earthquakes', (df['Year'][i], df['Earthquakes'][i]))\nfor i, txt in enumerate(df['Hurricanes']):\n    ax.annotate('Hurricanes', (df['Year'][i], df['Hurricanes'][i]))\nfor i, txt in enumerate(df['Floods']):\n    ax.annotate('Floods', (df['Year'][i], df['Floods'][i]))\nfor i, txt in enumerate(df['Wildfires']):\n    ax.annotate('Wildfires', (df['Year'][i], df['Wildfires'][i]))\nfor i, txt in enumerate(df['Tornados']):\n    ax.annotate('Tornados', (df['Year'][i], df['Tornados'][i]))\n\n# Set title and labels \nax.set_title('Natural Disasters Over the Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Occurrences')\n\n# Set grid and background color\nax.grid(False)  # Disable the grid\nax.set_facecolor('white')  # Change background color to white\n\n# Add legend\nax.legend()\n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Show the marker and change the marker edge color of the lines that contain the center point of the bounding box to #d17ef7.",
        "Input_image": "./test_dataset/Plot/Plot_3fb69211b19d25be/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    'Year': [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    'Earthquakes': [98, 90, 85, 78, 100, 75, 70, 68, 65, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42],\n    'Hurricanes': [15, 20, 25, 30, 35, 40, 100, 95, 90, 80, 70, 60, 55, 50, 45, 40, 35, 30, 25, 20],\n    'Floods': [50, 52, 55, 57, 60, 45, 42, 40, 38, 35, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55],\n    'Wildfires': [20, 25, 30, 35, 40, 100, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25],\n    'Tornados': [80, 70, 60, 50, 45, 35, 30, 28, 26, 25, 24, 23, 22, 21, 20, 19, 18, 100, 95, 90]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Plot data\nax.plot(df['Year'], df['Earthquakes'], linestyle='-', color='tab:blue', marker='o', markersize=4, label='Earthquakes', alpha=0.7, markeredgecolor='#d17ef7')\nax.plot(df['Year'], df['Hurricanes'], linestyle='--', color='tab:orange', marker='v', markersize=4, label='Hurricanes', alpha=0.7)\nax.plot(df['Year'], df['Floods'], linestyle='-.', color='tab:green', marker='s', markersize=4, label='Floods', alpha=0.7)\nax.plot(df['Year'], df['Wildfires'], linestyle=':', color='tab:red', marker='^', markersize=4, label='Wildfires', alpha=0.7)\nax.plot(df['Year'], df['Tornados'], linestyle='-', color='tab:purple', marker='*', markersize=4, label='Tornados', alpha=0.7)\n\n# Annotate each line\nfor i, txt in enumerate(df['Earthquakes']):\n    ax.annotate('Earthquakes', (df['Year'][i], df['Earthquakes'][i]))\nfor i, txt in enumerate(df['Hurricanes']):\n    ax.annotate('Hurricanes', (df['Year'][i], df['Hurricanes'][i]))\nfor i, txt in enumerate(df['Floods']):\n    ax.annotate('Floods', (df['Year'][i], df['Floods'][i]))\nfor i, txt in enumerate(df['Wildfires']):\n    ax.annotate('Wildfires', (df['Year'][i], df['Wildfires'][i]))\nfor i, txt in enumerate(df['Tornados']):\n    ax.annotate('Tornados', (df['Year'][i], df['Tornados'][i]))\n\n# Set title and labels \nax.set_title('Natural Disasters Over the Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Occurrences')\n\n# Set grid and background color\nax.grid(False)  # Disable the grid\nax.set_facecolor('white')  # Change background color to white\n\n# Add legend\nax.legend()\n\n# Tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')\n",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_3fb69211b19d25be/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_3fb69211b19d25be/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_3fb69211b19d25be/myplot.png"
    },
    {
        "id": "Plot_05a21e270881f1dd",
        "Input_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# data points\ntime = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00']\nplanets = ['Earth', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nvalues = [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0.384, 0.384, 0.384, 0.384, 0.384, 0.384, 0.384, 0.384],\n    [155, 155, 155, 155, 155, 155, 155, 155],\n    [236, 235, 229, 215, 195, 169, 138, 101],\n    [78, 79, 82, 86, 91, 97, 104, 111],\n    [628, 630, 633, 638, 644, 652, 661, 673],\n    [1275, 1277, 1279, 1285, 1295, 1307, 1322, 1338],\n    [2735, 2731, 2727, 2719, 2706, 2688, 2667, 2643],\n    [4355, 4348, 4340, 4324, 4300, 4270, 4231, 4186]\n]\n\n# creating data frame\ndf = pd.DataFrame(values, columns=time, index=planets)\n\n# plot lines\nplt.figure(figsize=(15,10))\nfor planet in planets:\n    plt.plot(time, df.loc[planet, :], label=planet)\n\nplt.xlabel('Time of the day')\nplt.ylabel('Distance from Earth (million km)')\nplt.title('Movements of celestial bodies over a 24-hour period')\nplt.legend()\nplt.grid()\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the thickness of the line that contains the center point of the bounding box to 2.",
        "Input_image": "./test_dataset/Plot/Plot_05a21e270881f1dd/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# data points\ntime = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00']\nplanets = ['Earth', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nvalues = [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0.384, 0.384, 0.384, 0.384, 0.384, 0.384, 0.384, 0.384],\n    [155, 155, 155, 155, 155, 155, 155, 155],\n    [236, 235, 229, 215, 195, 169, 138, 101],\n    [78, 79, 82, 86, 91, 97, 104, 111],\n    [628, 630, 633, 638, 644, 652, 661, 673],\n    [1275, 1277, 1279, 1285, 1295, 1307, 1322, 1338],\n    [2735, 2731, 2727, 2719, 2706, 2688, 2667, 2643],\n    [4355, 4348, 4340, 4324, 4300, 4270, 4231, 4186]\n]\n\n# creating data frame\ndf = pd.DataFrame(values, columns=time, index=planets)\n\n# plot lines\nplt.figure(figsize=(15,10))\nfor planet in planets:\n    if planet == 'Mercury':\n        plt.plot(time, df.loc[planet, :], label=planet, linewidth=2)  \n    else:\n        plt.plot(time, df.loc[planet, :], label=planet)\n\nplt.xlabel('Time of the day')\nplt.ylabel('Distance from Earth (million km)')\nplt.title('Movements of celestial bodies over a 24-hour period')\nplt.legend()\nplt.grid()\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_05a21e270881f1dd/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_05a21e270881f1dd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_05a21e270881f1dd/figure.png"
    },
    {
        "id": "Plot_acef59d925a05e30",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = StringIO(\"\"\"\nYear,Meat Consumption\n2010,50\n2011,52\n2012,80\n2013,55\n2014,70\n2015,40\n2016,75\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots(facecolor='grey')\n\nax.plot(df['Year'], df['Meat Consumption'], label=\"Meat Consumption\", color=\"blue\", linewidth=2, linestyle='-', marker='o', markersize=8, alpha=0.8)\n\nfor x, y in zip(df['Year'], df['Meat Consumption']):\n    ax.text(x, y, str(y))\n\nax.set_title('Yearly Meat Consumption')\nax.set_xlabel('Year')\nax.set_ylabel('Meat Consumption')\nax.legend(loc='upper left', shadow=True)\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the edge color of the lines that contain the center point of the bounding box to #bfddf5, and update their marker style to '<'.",
        "Input_image": "./test_dataset/Plot/Plot_acef59d925a05e30/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = StringIO(\"\"\"\nYear,Meat Consumption\n2010,50\n2011,52\n2012,80\n2013,55\n2014,70\n2015,40\n2016,75\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots(facecolor='grey')\n\nax.plot(df['Year'], df['Meat Consumption'], label=\"Meat Consumption\", color=\"blue\", linewidth=2, linestyle='-', marker='<', markersize=8, alpha=0.8, markeredgecolor='#bfddf5')\n\nfor x, y in zip(df['Year'], df['Meat Consumption']):\n    ax.text(x, y, str(y))\n\nax.set_title('Yearly Meat Consumption')\nax.set_xlabel('Year')\nax.set_ylabel('Meat Consumption')\nax.legend(loc='upper left', shadow=True)\n\nax.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_acef59d925a05e30/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_acef59d925a05e30/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_acef59d925a05e30/myplot.png"
    },
    {
        "id": "Plot_5b9132a0a0b859b4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data for plotting\ndata = \"\"\"\nYear,Pop,Rock,Jazz\n2014,50,70,30\n2015,55,95,32\n2016,60,50,34\n2017,65,105,40\n2018,70,60,45\n2019,73,55,70\n2020,50,65,73\n\"\"\"\ndf = pd.read_csv(StringIO(data), sep=',')\nYear = df['Year']\nPop = df['Pop']\nRock = df['Rock']\nJazz = df['Jazz']\n\nfig, ax = plt.subplots()\n\n# Plotting the data with different styles\nax.plot(Year, Pop, linestyle='-', color='red', marker='o', markersize=5, linewidth=2, alpha=0.7, label='Pop')\nax.plot(Year, Rock, linestyle='--', color='blue', marker='v', markersize=5, linewidth=2, alpha=0.7, label='Rock')\nax.plot(Year, Jazz, linestyle='-.', color='green', marker='s', markersize=5, linewidth=2, alpha=0.7, label='Jazz')\n\n# Setting up the labels, title\nax.set(xlabel='Year', ylabel='Genre Popularity',\n       title='Popularity of Genres over the Years')\n# Removed the grid with ax.grid(False) and set the background color to white with fig.set_facecolor('white')\nax.legend()\n\n# Annotating each line\nfor i, txt in enumerate(Pop):\n    ax.annotate('Pop', (Year[i], Pop[i]))\nfor i, txt in enumerate(Rock):\n    ax.annotate('Rock', (Year[i], Rock[i]))\nfor i, txt in enumerate(Jazz):\n    ax.annotate('Jazz', (Year[i], Jazz[i]))\n\nfig.set_facecolor('white')\n\n# Saving the figure\nplt.tight_layout()\nfig.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the plot that contains the center point of the bounding box to #88252a.",
        "Input_image": "./test_dataset/Plot/Plot_5b9132a0a0b859b4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Data for plotting\ndata = \"\"\"\nYear,Pop,Rock,Jazz\n2014,50,70,30\n2015,55,95,32\n2016,60,50,34\n2017,65,105,40\n2018,70,60,45\n2019,73,55,70\n2020,50,65,73\n\"\"\"\ndf = pd.read_csv(StringIO(data), sep=',')\nYear = df['Year']\nPop = df['Pop']\nRock = df['Rock']\nJazz = df['Jazz']\n\nfig, ax = plt.subplots()\n\n# Plotting the data with different styles\nax.plot(Year, Pop, linestyle='-', color='#88252a', marker='o', markersize=5, linewidth=2, alpha=0.7, label='Pop')\nax.plot(Year, Rock, linestyle='--', color='blue', marker='v', markersize=5, linewidth=2, alpha=0.7, label='Rock')\nax.plot(Year, Jazz, linestyle='-.', color='green', marker='s', markersize=5, linewidth=2, alpha=0.7, label='Jazz')\n\n# Setting up the labels, title\nax.set(xlabel='Year', ylabel='Genre Popularity',\n       title='Popularity of Genres over the Years')\n# Removed the grid with ax.grid(False) and set the background color to white with fig.set_facecolor('white')\nax.legend()\n\n# Annotating each line\nfor i, txt in enumerate(Pop):\n    ax.annotate('Pop', (Year[i], Pop[i]))\nfor i, txt in enumerate(Rock):\n    ax.annotate('Rock', (Year[i], Rock[i]))\nfor i, txt in enumerate(Jazz):\n    ax.annotate('Jazz', (Year[i], Jazz[i]))\n\nfig.set_facecolor('white')\n\n# Saving the figure\nplt.tight_layout()\nfig.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_5b9132a0a0b859b4/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_5b9132a0a0b859b4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_5b9132a0a0b859b4/myplot.png"
    },
    {
        "id": "Plot_3e68bc27e6eebcd4",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = {\n    \"Disease\": [\"Malaria\", \"Tuberculosis\", \"HIV/AIDS\", \"Cancer\", \"Diabetes\", \"Heart Disease\", \"Stroke\", \"Respiratory Infections\", \"Hepatitis\"],\n    \"Prevalence\": [10, 8, 6, 9, 12, 15, 18, 22, 20],\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = 'green'  # Line color changed to green\nmarker = 'o'\nmarkersize = 7\nalpha = 0.8\nlinestyle = '-.'\n\n# Plot the line\nax.plot(df[\"Disease\"], df[\"Prevalence\"], color=color, linewidth=linewidth, linestyle=linestyle, \n        marker=marker, markersize=markersize, alpha=alpha, label=\"Prevalence\",\n        markeredgecolor='red', markerfacecolor='yellow')  # Marker edge color and face color changed\nfor j, value in enumerate(df[\"Prevalence\"]):\n    ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Prevalence of Diseases\")\nax.set_xlabel(\"Disease\")\nax.set_ylabel(\"Prevalence\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate the line at the end of the line with the corresponding legend label\ny = ax.lines[0].get_ydata()[-1]\nax.annotate(\"Prevalence\", xy=(1,y), xytext=(6,0), color=ax.lines[0].get_color(), \n            xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n            size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Change the marker face color of the lines that contain the center point of the bounding box to #2c3446.",
        "Input_image": "./test_dataset/Plot/Plot_3e68bc27e6eebcd4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = {\n    \"Disease\": [\"Malaria\", \"Tuberculosis\", \"HIV/AIDS\", \"Cancer\", \"Diabetes\", \"Heart Disease\", \"Stroke\", \"Respiratory Infections\", \"Hepatitis\"],\n    \"Prevalence\": [10, 8, 6, 9, 12, 15, 18, 22, 20],\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = 'green'  # Line color changed to green\nmarker = 'o'\nmarkersize = 7\nalpha = 0.8\nlinestyle = '-.'\n\n# Plot the line\nax.plot(df[\"Disease\"], df[\"Prevalence\"], color=color, linewidth=linewidth, linestyle=linestyle, \n        marker=marker, markersize=markersize, alpha=alpha, label=\"Prevalence\",\n        markeredgecolor='red', markerfacecolor='#2c3446')  # Marker edge color and face color changed\nfor j, value in enumerate(df[\"Prevalence\"]):\n    ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Prevalence of Diseases\")\nax.set_xlabel(\"Disease\")\nax.set_ylabel(\"Prevalence\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate the line at the end of the line with the corresponding legend label\ny = ax.lines[0].get_ydata()[-1]\nax.annotate(\"Prevalence\", xy=(1,y), xytext=(6,0), color=ax.lines[0].get_color(), \n            xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n            size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_3e68bc27e6eebcd4/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_3e68bc27e6eebcd4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_3e68bc27e6eebcd4/myplot.png"
    },
    {
        "id": "Plot_858a709b8a402b8e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the csv data\ncsv_data = \"\"\"\nProfession,Commute Time (mins),Year\nDoctor,45,2010\nDoctor,49,2011\nDoctor,52,2012\nDoctor,55,2013\nDoctor,30,2014\nDoctor,35,2015\nLawyer,20,2010\nLawyer,15,2011\nLawyer,10,2012\nLawyer,35,2013\nLawyer,30,2014\nLawyer,25,2015\nEngineer,25,2010\nEngineer,30,2011\nEngineer,35,2012\nEngineer,40,2013\nEngineer,20,2014\nEngineer,45,2015\nTeacher,35,2010\nTeacher,40,2011\nTeacher,45,2012\nTeacher,50,2013\nTeacher,40,2014\nTeacher,40,2015\nChef,30,2010\nChef,35,2011\nChef,30,2012\nChef,35,2013\nChef,40,2014\nChef,45,2015\n\"\"\"\n\n# Convert the csv data into a DataFrame\ndf = pd.read_csv(StringIO(csv_data))\n\n# Create a figure and an axes\nfig, ax = plt.subplots()\n\n# Iterate over the professions and plot the data\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\nmarkers = ['o', 'v', '^', '<', '>']\nfor i, profession in enumerate(df['Profession'].unique()):\n    data = df[df['Profession'] == profession]\n    ax.plot(data['Year'], data['Commute Time (mins)'], color=colors[i], marker=markers[i], markersize=5, label=profession, linestyle='-', linewidth=1.5, alpha=0.8)\n\n# Set the title, labels, legend, and grid\nax.set_title('Commute Time by Profession Over Years', fontsize=20) # Change title font size to 20\nax.set_xlabel('Year', fontsize=16) # Change x-axis label font size to 16\nax.set_ylabel('Commute Time (mins)', fontsize=16) # Change y-axis label font size to 16\nax.legend()\nax.grid(True)\n\n# Change the background color\nax.set_facecolor('lightgrey')\n\n# Annotate each line at the end of the line\nfor line, name in zip(ax.lines, df['Profession'].unique()):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transformation of the plot that contains the center point of the bounding box to align with the axes' coordinate system.",
        "Input_image": "./test_dataset/Plot/Plot_858a709b8a402b8e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the csv data\ncsv_data = \"\"\"\nProfession,Commute Time (mins),Year\nDoctor,45,2010\nDoctor,49,2011\nDoctor,52,2012\nDoctor,55,2013\nDoctor,30,2014\nDoctor,35,2015\nLawyer,20,2010\nLawyer,15,2011\nLawyer,10,2012\nLawyer,35,2013\nLawyer,30,2014\nLawyer,25,2015\nEngineer,25,2010\nEngineer,30,2011\nEngineer,35,2012\nEngineer,40,2013\nEngineer,20,2014\nEngineer,45,2015\nTeacher,35,2010\nTeacher,40,2011\nTeacher,45,2012\nTeacher,50,2013\nTeacher,40,2014\nTeacher,40,2015\nChef,30,2010\nChef,35,2011\nChef,30,2012\nChef,35,2013\nChef,40,2014\nChef,45,2015\n\"\"\"\n\n# Convert the csv data into a DataFrame\ndf = pd.read_csv(StringIO(csv_data))\n\n# Create a figure and an axes\nfig, ax = plt.subplots()\n\n# Iterate over the professions and plot the data\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\nmarkers = ['o', 'v', '^', '<', '>']\nfor i, profession in enumerate(df['Profession'].unique()):\n    data = df[df['Profession'] == profession]\n    line, = ax.plot(data['Year'], data['Commute Time (mins)'], color=colors[i], marker=markers[i], markersize=5, label=profession, linestyle='-', linewidth=1.5, alpha=0.8)\n    if i == 2:  # Apply transform to specific line\n        line.set_transform(ax.transAxes)\n\n# Set the title, labels, legend, and grid\nax.set_title('Commute Time by Profession Over Years', fontsize=20) # Change title font size to 20\nax.set_xlabel('Year', fontsize=16) # Change x-axis label font size to 16\nax.set_ylabel('Commute Time (mins)', fontsize=16) # Change y-axis label font size to 16\nax.legend()\nax.grid(True)\n\n# Change the background color\nax.set_facecolor('lightgrey')\n\n# Annotate each line at the end of the line\nfor line, name in zip(ax.lines, df['Profession'].unique()):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_858a709b8a402b8e/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_858a709b8a402b8e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_858a709b8a402b8e/myplot.png"
    },
    {
        "id": "Plot_e2501eb9c4bb21de",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Load the data\ndata = StringIO(\"\"\"Exercise Type,Popularity\nYoga,15\nWeightlifting,35\nRunning,20\nCycling,40\nSwimming,25\"\"\")\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with different line styles, markers and colors\nl1, = ax.plot(df['Exercise Type'], df['Popularity'], linestyle='-', marker='o', color='blue', markersize=8, alpha=0.7, linewidth=2, label='Popularity')\n\nax.legend(loc='upper left', shadow=True)\n\n# Annotate the data points\nfor x, y in zip(df['Exercise Type'], df['Popularity']):\n    ax.text(x, y, str(y), color='blue', fontweight='bold')\n\n# Set labels, title, and grid\nax.set_xlabel('Exercise Type')\nax.set_ylabel('Popularity')\nax.set_title('Popularity of Different Exercise Types')\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('lightgray')\n\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the snap state of the element that contains the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Plot/Plot_e2501eb9c4bb21de/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Load the data\ndata = StringIO(\"\"\"Exercise Type,Popularity\nYoga,15\nWeightlifting,35\nRunning,20\nCycling,40\nSwimming,25\"\"\")\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with different line styles, markers and colors\nl1, = ax.plot(df['Exercise Type'], df['Popularity'], linestyle='-', marker='o', color='blue', markersize=8, alpha=0.7, linewidth=2, label='Popularity', snap=True)\n\nax.legend(loc='upper left', shadow=True)\n\n# Annotate the data points\nfor x, y in zip(df['Exercise Type'], df['Popularity']):\n    ax.text(x, y, str(y), color='blue', fontweight='bold')\n\n# Set labels, title, and grid\nax.set_xlabel('Exercise Type')\nax.set_ylabel('Popularity')\nax.set_title('Popularity of Different Exercise Types')\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('lightgray')\n\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_e2501eb9c4bb21de/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_e2501eb9c4bb21de/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_e2501eb9c4bb21de/myplot.png"
    },
    {
        "id": "Plot_44012ef09a009343",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = '''\\\nCountry,2017,2018,2019\nUSA,65,70,45\nUK,52,50,55\nGermany,58,53,59\nAustralia,45,46,43\nCanada,48,43,70\nChina,90,85,92\nIndia,100,98,105\nBrazil,40,38,40\n'''\n\n# Create a DataFrame from the data\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nfor country in df[\"Country\"]:\n    line, = ax.plot(df.columns[1:], df[df[\"Country\"] == country].values[0][1:], linestyle='-', linewidth=2, marker='o', markersize=10, alpha=0.7)\n\n# Set the title and labels\nax.set_title('Country Yearly Data')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend(df[\"Country\"])\n\n# Annotate each line at the end\nfor line, name in zip(ax.lines, df[\"Country\"]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Add grid\nax.grid(True)\n\n# Change the background color\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the marker face color of the lines that contain the center point of the bounding box to #cf3d85. Additionally, ensure that the rasterized state for these lines is set to False.",
        "Input_image": "./test_dataset/Plot/Plot_44012ef09a009343/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Define the data\ndata = '''\\\nCountry,2017,2018,2019\nUSA,65,70,45\nUK,52,50,55\nGermany,58,53,59\nAustralia,45,46,43\nCanada,48,43,70\nChina,90,85,92\nIndia,100,98,105\nBrazil,40,38,40\n'''\n\n# Create a DataFrame from the data\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Plot the data\nfor i, country in enumerate(df[\"Country\"]):\n    if i == 2:  # Targeting the third line for modification\n        line, = ax.plot(df.columns[1:], df[df[\"Country\"] == country].values[0][1:], linestyle='-', linewidth=2, marker='o', markersize=10, alpha=0.7, markerfacecolor='#cf3d85', rasterized=False)\n    else:\n        line, = ax.plot(df.columns[1:], df[df[\"Country\"] == country].values[0][1:], linestyle='-', linewidth=2, marker='o', markersize=10, alpha=0.7)\n\n# Set the title and labels\nax.set_title('Country Yearly Data')\nax.set_xlabel('Year')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend(df[\"Country\"])\n\n# Annotate each line at the end\nfor line, name in zip(ax.lines, df[\"Country\"]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Add grid\nax.grid(True)\n\n# Change the background color\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_44012ef09a009343/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_44012ef09a009343/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_44012ef09a009343/myplot.png"
    },
    {
        "id": "Plot_a9b67077a1e69195",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nYear,Smartphone Usage\n2016,60\n2017,65\n2018,130\n2019,70\n2020,80\n2021,40\n2022,90\n2023,45\n2024,75\n2025,105\n2026,50\n2027,35\n2028,65\n2029,75\n\"\"\")\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(data)\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Smartphone Usage\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=\"Smartphone Usage\")\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Smartphone Usage')\nax.set_title('Smartphone Usage Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Smartphone Usage']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n                \n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Smartphone Usage\"][i], (df[\"Year\"][i], df[\"Smartphone Usage\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the snap state of the line that contains the center point of the bounding box to False. and for the same line: Set the transform of the same lines to the Target_object to the Coordinate system of figure-inches.",
        "Input_image": "./test_dataset/Plot/Plot_a9b67077a1e69195/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nYear,Smartphone Usage\n2016,60\n2017,65\n2018,130\n2019,70\n2020,80\n2021,40\n2022,90\n2023,45\n2024,75\n2025,105\n2026,50\n2027,35\n2028,65\n2029,75\n\"\"\")\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(data)\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Smartphone Usage\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=\"Smartphone Usage\", snap=False)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Smartphone Usage')\nax.set_title('Smartphone Usage Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Smartphone Usage']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n                \n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Smartphone Usage\"][i], (df[\"Year\"][i], df[\"Smartphone Usage\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_a9b67077a1e69195/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_a9b67077a1e69195/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_a9b67077a1e69195/myplot.png"
    },
    {
        "id": "Plot_1c33bfa5b9586656",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nyears = ['2017', '2018', '2019']\nsprains_and_strains = [150, 220, 100]\nfractures = [100, 500, 90]\nburns = [70, 80, 70]\n\nfig, ax = plt.subplots()\n\n# Plotting the data with updated colors\nax.plot(years, sprains_and_strains, label='Sprains and Strains', linestyle='--', color='purple', marker='o', markersize=10, alpha=0.7)\nax.plot(years, fractures, label='Fractures', linestyle='-.', color='orange', marker='s', markersize=10, alpha=0.7)\nax.plot(years, burns, label='Burns', linestyle=':', color='black', marker='^', markersize=10, alpha=0.7)\n\n# Setting labels, title, and grid\nax.set(xlabel='Year', ylabel='Number of Injuries',\n       title='Number of Injuries by Type from 2017 to 2019')\nax.grid()\n\n# Adding legend and annotations\nax.legend()\nfor (i, j) in zip(years, sprains_and_strains):\n    ax.annotate('Sprains and Strains', (i, j))\nfor (i, j) in zip(years, fractures):\n    ax.annotate('Fractures', (i, j))\nfor (i, j) in zip(years, burns):\n    ax.annotate('Burns', (i, j))\n\n# Changing the background color to white\nax.set_facecolor('white')\n\nplt.tight_layout()\nfig.savefig(\"myplot_modified.png\")",
        "Instruction": "Display the data points of the line that contains the center point of the bounding box using 'circle' markers, and hide the data points for all the other lines.",
        "Input_image": "./test_dataset/Plot/Plot_1c33bfa5b9586656/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nyears = ['2017', '2018', '2019']\nsprains_and_strains = [150, 220, 100]\nfractures = [100, 500, 90]\nburns = [70, 80, 70]\n\nfig, ax = plt.subplots()\n\n# Plotting the data with updated colors\nax.plot(years, sprains_and_strains, label='Sprains and Strains', linestyle='--', color='purple', marker='', markersize=10, alpha=0.7)\nax.plot(years, fractures, label='Fractures', linestyle='-.', color='orange', marker='o', markersize=10, alpha=0.7)\nax.plot(years, burns, label='Burns', linestyle=':', color='black', marker='', markersize=10, alpha=0.7)\n\n# Setting labels, title, and grid\nax.set(xlabel='Year', ylabel='Number of Injuries',\n       title='Number of Injuries by Type from 2017 to 2019')\nax.grid()\n\n# Adding legend and annotations\nax.legend()\nfor (i, j) in zip(years, sprains_and_strains):\n    ax.annotate('Sprains and Strains', (i, j))\nfor (i, j) in zip(years, fractures):\n    ax.annotate('Fractures', (i, j))\nfor (i, j) in zip(years, burns):\n    ax.annotate('Burns', (i, j))\n\n# Changing the background color to white\nax.set_facecolor('white')\n\nplt.tight_layout()\nfig.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_1c33bfa5b9586656/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_1c33bfa5b9586656/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_1c33bfa5b9586656/myplot_modified.png"
    },
    {
        "id": "Plot_1814129be6b8c8d6",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data \ndata = StringIO(\"\"\"Year,Coal,Oil,Natural Gas\n2005,4500,5000,3800\n2006,4600,5100,3900\n2007,4450,5100,4000\n2008,4350,5500,4200\n2009,4300,5300,4250\n2010,4250,5200,4300\n2011,4300,5600,4400\n2012,4200,5800,4500\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plot\nfig, ax = plt.subplots()\n\nfor column in df.columns[1:]:\n    ax.plot(df['Year'], df[column], marker='o', linestyle='-.', linewidth=2, color='red', markersize=5, alpha=0.7, label=column)\n    for x, y in zip(df['Year'], df[column]):\n        ax.text(x, y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Energy Production (in Million Tonnes)')\nax.set_title('Energy Production from Different Sources Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Update the label of the lines that contain the center point of the bounding box to 'A new Label'. Additionally, set the snap state of these lines to True.",
        "Input_image": "./test_dataset/Plot/Plot_1814129be6b8c8d6/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data \ndata = StringIO(\"\"\"Year,Coal,Oil,Natural Gas\n2005,4500,5000,3800\n2006,4600,5100,3900\n2007,4450,5100,4000\n2008,4350,5500,4200\n2009,4300,5300,4250\n2010,4250,5200,4300\n2011,4300,5600,4400\n2012,4200,5800,4500\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plot\nfig, ax = plt.subplots()\n\nfor i, column in enumerate(df.columns[1:]):\n    if i == 1:  # Target object\n        ax.plot(df['Year'], df[column], marker='o', linestyle='-.', linewidth=2, color='red', markersize=5, alpha=0.7, label='A new Label', snap=True)\n    else:\n        ax.plot(df['Year'], df[column], marker='o', linestyle='-.', linewidth=2, color='red', markersize=5, alpha=0.7, label=column)\n    for x, y in zip(df['Year'], df[column]):\n        ax.text(x, y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Energy Production (in Million Tonnes)')\nax.set_title('Energy Production from Different Sources Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_1814129be6b8c8d6/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_1814129be6b8c8d6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_1814129be6b8c8d6/myplot.png"
    },
    {
        "id": "Plot_2d9d72a77fc83fb0",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = 'Year,Phishing Attacks,Malware Attacks,Ransomware Attacks\\n2015,5000,7000,2000\\n2016,6000,8500,4000\\n2017,8200,5000,8000\\n2018,9000,6500,5000\\n2019,7000,4000,10000\\n2020,10000,9000,12000\\n2021,9500,8500,14000'\ndf = pd.read_csv(StringIO(data))\n\n# Plot\nfig, ax = plt.subplots()\n\n# Define colors for each line\nline_colors = {'Phishing Attacks': 'red', 'Malware Attacks': 'green', 'Ransomware Attacks': 'blue'}\n\nfor column in df.columns[1:]:\n    ax.plot(df['Year'], df[column], marker='o', linestyle='-.', label=column, linewidth=2.5, color=line_colors[column], markersize=8, alpha=0.7)\n    for x, y in zip(df['Year'], df[column]):\n        ax.text(x, y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Attacks')\nax.set_title('Number of Different Cyber Attacks Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('white')  # Change background color to white\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the clip box of the line that contains the center point of the bounding box to a bounding that (x0,y0) is (140,111), and width is 194,height is 805 in a pattern of matplotlib.transforms.Bbox. and for the same line: Set the edge color of the same lines to the Target_object to #952ace.",
        "Input_image": "./test_dataset/Plot/Plot_2d9d72a77fc83fb0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.transforms import Bbox\n\n# Data\ndata = 'Year,Phishing Attacks,Malware Attacks,Ransomware Attacks\\n2015,5000,7000,2000\\n2016,6000,8500,4000\\n2017,8200,5000,8000\\n2018,9000,6500,5000\\n2019,7000,4000,10000\\n2020,10000,9000,12000\\n2021,9500,8500,14000'\ndf = pd.read_csv(StringIO(data))\n\n# Plot\nfig, ax = plt.subplots()\n\n# Define colors for each line\nline_colors = {'Phishing Attacks': 'red', 'Malware Attacks': 'green', 'Ransomware Attacks': 'blue'}\n\nclip_box = Bbox.from_bounds(140, 111, 194, 805)\nfor i, column in enumerate(df.columns[1:]):\n    line, = ax.plot(df['Year'], df[column], marker='o', linestyle='-.', label=column, linewidth=2.5, color=line_colors[column], markersize=8, alpha=0.7)\n    if i == 1:  # Apply modifications to the second line (Malware Attacks)\n        line.set_clip_box(clip_box)\n        line.set_markeredgecolor('#952ace')\n    for x, y in zip(df['Year'], df[column]):\n        ax.text(x, y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Attacks')\nax.set_title('Number of Different Cyber Attacks Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('white')  # Change background color to white\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_2d9d72a77fc83fb0/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_2d9d72a77fc83fb0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_2d9d72a77fc83fb0/myplot.png"
    },
    {
        "id": "Plot_fe866bbacbee68f2",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata_csv = '''Year,Smartphones,E-Waste Recycling,Computers,Household Appliances\n2015,100,200,300,400\n2016,90,210,280,390\n2017,85,220,275,385\n2018,120,230,250,380\n2019,110,240,260,370'''\n\n# Convert the CSV data to DataFrame\ndata = pd.read_csv(StringIO(data_csv))\n\n# Predefined colors for the products\ncolors = ['blue', 'green', 'red', 'purple']\n\n# Plot\nfig, ax = plt.subplots()\n\nfor (column, color) in zip(data.columns[1:], colors):\n    ax.plot(data['Year'], data[column], marker='o', linestyle='-.', linewidth=2.0, markersize=5.0, label=column, color=color)\n    for x, y in zip(data['Year'], data[column]):\n        ax.text(x, y, str(y), color=color)\n\n# Annotations\nfor (line, name) in zip(ax.lines, data.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1, y), xytext=(6, 0), color=line.get_color(), \n                xycoords=ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Quantity')\nax.set_title('Quantity of Different Products Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('white')  # Set the background color to white\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Update the style of the line that contains the center point of the bounding box to 'solid'.",
        "Input_image": "./test_dataset/Plot/Plot_fe866bbacbee68f2/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata_csv = '''Year,Smartphones,E-Waste Recycling,Computers,Household Appliances\n2015,100,200,300,400\n2016,90,210,280,390\n2017,85,220,275,385\n2018,120,230,250,380\n2019,110,240,260,370'''\n\n# Convert the CSV data to DataFrame\ndata = pd.read_csv(StringIO(data_csv))\n\n# Predefined colors for the products\ncolors = ['blue', 'green', 'red', 'purple']\n\n# Plot\nfig, ax = plt.subplots()\n\nfor (column, color) in zip(data.columns[1:], colors):\n    if column == 'E-Waste Recycling':\n        ax.plot(data['Year'], data[column], marker='o', linestyle='-', linewidth=2.0, markersize=5.0, label=column, color=color)\n    else:\n        ax.plot(data['Year'], data[column], marker='o', linestyle='-.', linewidth=2.0, markersize=5.0, label=column, color=color)\n    for x, y in zip(data['Year'], data[column]):\n        ax.text(x, y, str(y), color=color)\n\n# Annotations\nfor (line, name) in zip(ax.lines, data.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1, y), xytext=(6, 0), color=line.get_color(), \n                xycoords=ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Quantity')\nax.set_title('Quantity of Different Products Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('white')  # Set the background color to white\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_fe866bbacbee68f2/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_fe866bbacbee68f2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_fe866bbacbee68f2/myplot.png"
    },
    {
        "id": "Plot_ddc1a6889af23361",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Data in CSV format\ndata = StringIO(\"\"\"\nPlatforms,Facebook,Instagram,Snapchat\n2015,155,120,100\n2016,140,130,150\n2017,125,160,200\n2018,110,175,250\n2019,95,190,300\n2020,180,205,350\n2021,165,190,330\n2022,150,175,310\n\"\"\")\n\n# Read data using pandas\ndf = pd.read_csv(data)\n\n# Prepare figure and axes\nfig, ax = plt.subplots()\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Line styles\nline_styles = ['-', '--', '-.', ':']\n\n# Plot data\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df['Platforms'], df[column], label=column, linestyle=line_styles[i], linewidth=2, marker='o', markersize=5, alpha=0.7)\n    \n# Set labels, title and legend\nax.set_xlabel('Year')\nax.set_ylabel('User Count (in millions)')\nax.set_title('Social Media Platform Usage Over the Years')\nax.legend()\n\n# Annotations\nfor i, column in enumerate(df.columns[1:]):\n    ax.annotate(column, (df['Platforms'].iloc[-1], df[column].iloc[-1]))\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the animated state of the lines that contain the center point of the bounding box to False. Additionally, set the rasterized state of these lines to True.",
        "Input_image": "./test_dataset/Plot/Plot_ddc1a6889af23361/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Data in CSV format\ndata = StringIO(\"\"\"\nPlatforms,Facebook,Instagram,Snapchat\n2015,155,120,100\n2016,140,130,150\n2017,125,160,200\n2018,110,175,250\n2019,95,190,300\n2020,180,205,350\n2021,165,190,330\n2022,150,175,310\n\"\"\")\n\n# Read data using pandas\ndf = pd.read_csv(data)\n\n# Prepare figure and axes\nfig, ax = plt.subplots()\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Line styles\nline_styles = ['-', '--', '-.', ':']\n\n# Plot data\nfor i, column in enumerate(df.columns[1:]):\n    line, = ax.plot(df['Platforms'], df[column], label=column, linestyle=line_styles[i], linewidth=2, marker='o', markersize=5, alpha=0.7)\n    if i == 1:  # Apply changes to the second line (Instagram)\n        line.set_animated(False)\n        line.set_rasterized(True)\n    \n# Set labels, title and legend\nax.set_xlabel('Year')\nax.set_ylabel('User Count (in millions)')\nax.set_title('Social Media Platform Usage Over the Years')\nax.legend()\n\n# Annotations\nfor i, column in enumerate(df.columns[1:]):\n    ax.annotate(column, (df['Platforms'].iloc[-1], df[column].iloc[-1]))\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_ddc1a6889af23361/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_ddc1a6889af23361/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_ddc1a6889af23361/myplot.png"
    },
    {
        "id": "Plot_dadb50b876c511bc",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data for plotting\ndata = {\n    \"Year\": [\"2015\", \"2016\", \"2017\", \"2018\", \"2019\"],\n    \"Fiction\": [50, 70, 80, 40, 90],\n    \"Non-Fiction\": [80, 65, 70, 85, 60],\n    \"Academic\": [20, 40, 70, 30, 55],\n    \"Biographies\": [100, 80, 55, 60, 95],\n    \"Comics\": [30, 35, 40, 80, 40],\n    \"Magazines\": [55, 50, 30, 75, 60]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\nfor col in df.columns[1:]:\n    ax.plot(df['Year'], df[col], marker='o', markersize=6, linewidth=1.5, alpha=0.8, label=col)\n    ax.text(df['Year'].iloc[-1], df[col].iloc[-1], col, fontsize=9)\n\nax.set(xlabel='Year', ylabel='Sales',\n       title='Book Type Sales Over Years')\nax.grid()\nax.set_facecolor('gray')\n\nax.legend()\nplt.tight_layout()\nfig.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterized state of the plot that contains the center point of the bounding box to True. For the same data points, adjust the z-order to 7 and apply a shadow effect with an offset of (3.78, 2.49).",
        "Input_image": "./test_dataset/Plot/Plot_dadb50b876c511bc/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Data for plotting\ndata = {\n    \"Year\": [\"2015\", \"2016\", \"2017\", \"2018\", \"2019\"],\n    \"Fiction\": [50, 70, 80, 40, 90],\n    \"Non-Fiction\": [80, 65, 70, 85, 60],\n    \"Academic\": [20, 40, 70, 30, 55],\n    \"Biographies\": [100, 80, 55, 60, 95],\n    \"Comics\": [30, 35, 40, 80, 40],\n    \"Magazines\": [55, 50, 30, 75, 60]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\ntarget_object = [0, 2]  # Selecting Fiction and Academic for modification\nfor idx, col in enumerate(df.columns[1:]):\n    if idx in target_object:\n        ax.plot(df['Year'], df[col], marker='o', markersize=6, linewidth=1.5, alpha=0.8, label=col, rasterized=True, zorder=7, path_effects=[SimpleLineShadow(offset=(3.78, 2.49)), Normal()])\n    else:\n        ax.plot(df['Year'], df[col], marker='o', markersize=6, linewidth=1.5, alpha=0.8, label=col)\n    ax.text(df['Year'].iloc[-1], df[col].iloc[-1], col, fontsize=9)\n\nax.set(xlabel='Year', ylabel='Sales',\n       title='Book Type Sales Over Years')\nax.grid()\nax.set_facecolor('gray')\n\nax.legend()\nplt.tight_layout()\nfig.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Plot/Plot_dadb50b876c511bc/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_dadb50b876c511bc/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_dadb50b876c511bc/myplot.png"
    },
    {
        "id": "Plot_6b7942dea9f1a936",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = {\n    \"Year\": [\"2000\", \"2005\", \"2010\", \"2015\", \"2020\"],\n    \"Beef\": [50, 55, 52, 54, 60],\n    \"Poultry\": [30, 35, 37, 40, 80],\n    \"Pork\": [70, 75, 80, 78, 79],\n    \"Fish\": [40, 50, 60, 45, 48],\n    \"Lamb\": [10, 12, 14, 16, 30]\n}\n\n# Convert the data into a DataFrame\ndf = pd.DataFrame(data)\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Beef\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=\"Beef\")\nl2, = ax.plot(df[\"Year\"], df[\"Poultry\"], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=\"Poultry\")\nl3, = ax.plot(df[\"Year\"], df[\"Pork\"], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=\"Pork\")\nl4, = ax.plot(df[\"Year\"], df[\"Fish\"], marker='*', markersize=6, linestyle=':', linewidth=2, color='purple', alpha=0.7, label=\"Fish\")\nl5, = ax.plot(df[\"Year\"], df[\"Lamb\"], marker='D', markersize=6, linestyle='-', linewidth=2, color='brown', alpha=0.7, label=\"Lamb\")\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Consumption')\nax.set_title('Meat Consumption Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Beef', 'Poultry', 'Pork', 'Fish', 'Lamb']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Beef\"][i], (df[\"Year\"][i], df[\"Beef\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Poultry\"][i], (df[\"Year\"][i], df[\"Poultry\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Pork\"][i], (df[\"Year\"][i], df[\"Pork\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Fish\"][i], (df[\"Year\"][i], df[\"Fish\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Lamb\"][i], (df[\"Year\"][i], df[\"Lamb\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the label of the plot that contains the center point of the bounding box to 'A new Label'. For these same lines, change the z-order to 9 and add a shadow effect with an offset of (2.90, 3.04).",
        "Input_image": "./test_dataset/Plot/Plot_6b7942dea9f1a936/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# Define the data\ndata = {\n    \"Year\": [\"2000\", \"2005\", \"2010\", \"2015\", \"2020\"],\n    \"Beef\": [50, 55, 52, 54, 60],\n    \"Poultry\": [30, 35, 37, 40, 80],\n    \"Pork\": [70, 75, 80, 78, 79],\n    \"Fish\": [40, 50, 60, 45, 48],\n    \"Lamb\": [10, 12, 14, 16, 30]\n}\n\n# Convert the data into a DataFrame\ndf = pd.DataFrame(data)\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Beef\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=\"Beef\")\nl2, = ax.plot(df[\"Year\"], df[\"Poultry\"], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=\"A new Label\", zorder=9, path_effects=[SimpleLineShadow(offset=(2.90, 3.04)), Normal()])\nl3, = ax.plot(df[\"Year\"], df[\"Pork\"], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=\"Pork\")\nl4, = ax.plot(df[\"Year\"], df[\"Fish\"], marker='*', markersize=6, linestyle=':', linewidth=2, color='purple', alpha=0.7, label=\"Fish\")\nl5, = ax.plot(df[\"Year\"], df[\"Lamb\"], marker='D', markersize=6, linestyle='-', linewidth=2, color='brown', alpha=0.7, label=\"Lamb\")\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Consumption')\nax.set_title('Meat Consumption Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Beef', 'A new Label', 'Pork', 'Fish', 'Lamb']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Beef\"][i], (df[\"Year\"][i], df[\"Beef\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Poultry\"][i], (df[\"Year\"][i], df[\"Poultry\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Pork\"][i], (df[\"Year\"][i], df[\"Pork\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Fish\"][i], (df[\"Year\"][i], df[\"Fish\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Lamb\"][i], (df[\"Year\"][i], df[\"Lamb\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_6b7942dea9f1a936/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_6b7942dea9f1a936/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_6b7942dea9f1a936/myplot.png"
    },
    {
        "id": "Plot_ac685c441e214be1",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = \"\"\"\nCity,2017,2018,2019\nSan Francisco,850,1200,950\nNew York,700,800,1600\nBerlin,400,1200,800\n\"\"\"\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df.columns[1:], df.iloc[0,1:], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=df.iloc[0,0])\nl2, = ax.plot(df.columns[1:], df.iloc[1,1:], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=df.iloc[1,0])\nl3, = ax.plot(df.columns[1:], df.iloc[2,1:], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=df.iloc[2,0])\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.set_title('Population Trend of Cities Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df[\"City\"]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n                \n# Annotate data values above the point on the chart figure\nfor i in range(len(df.columns[1:])):\n    ax.annotate(df.iloc[0,i+1], (df.columns[i+1], df.iloc[0,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df.iloc[1,i+1], (df.columns[i+1], df.iloc[1,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df.iloc[2,i+1], (df.columns[i+1], df.iloc[2,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Make the plot that contains the center point of the bounding box animated by setting its animated state to True.",
        "Input_image": "./test_dataset/Plot/Plot_ac685c441e214be1/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = \"\"\"\nCity,2017,2018,2019\nSan Francisco,850,1200,950\nNew York,700,800,1600\nBerlin,400,1200,800\n\"\"\"\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df.columns[1:], df.iloc[0,1:], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=df.iloc[0,0])\nl2, = ax.plot(df.columns[1:], df.iloc[1,1:], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=df.iloc[1,0])\nl3, = ax.plot(df.columns[1:], df.iloc[2,1:], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=df.iloc[2,0])\n\n# Set animation for a selected line\nl2.set_animated(True)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.set_title('Population Trend of Cities Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df[\"City\"]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n                \n# Annotate data values above the point on the chart figure\nfor i in range(len(df.columns[1:])):\n    ax.annotate(df.iloc[0,i+1], (df.columns[i+1], df.iloc[0,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df.iloc[1,i+1], (df.columns[i+1], df.iloc[1,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df.iloc[2,i+1], (df.columns[i+1], df.iloc[2,i+1]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_ac685c441e214be1/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_ac685c441e214be1/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_ac685c441e214be1/myplot.png"
    },
    {
        "id": "Plot_fe7afc36e9cd1d8c",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given CSV data\ndata = {'Year': [2014, 2015, 2016, 2017, 2018, 2019],\n        'AI_Research': [500, 480, 460, 550, 530, 510],\n        'Robotics': [700, 680, 660, 750, 730, 710],\n        'Neural_Networks': [1000, 900, 800, 1050, 950, 925],\n        'Data_Mining': [1200, 1100, 1000, 1250, 1150, 1125]}\ndf = pd.DataFrame(data)\n\n# Set up the figure and axis\nfig, ax = plt.subplots()\n\n# Define a monochrome blue color scheme\nblue_shades = ['#003f5c', '#2f4b7c', '#665191', '#a05195']\n\nax.plot('Year', 'AI_Research', data=df, marker='o', color=blue_shades[0], linewidth=2, linestyle='-', markersize=5, alpha=0.7, label='AI Research')\nax.plot('Year', 'Robotics', data=df, marker='v', color=blue_shades[1], linewidth=2, linestyle='--', markersize=5, alpha=0.7, label='Robotics')\nax.plot('Year', 'Neural_Networks', data=df, marker='s', color=blue_shades[2], linewidth=2, linestyle='-.', markersize=5, alpha=0.7, label='Neural Networks')\nax.plot('Year', 'Data_Mining', data=df, marker='D', color=blue_shades[3], linewidth=2, linestyle=':', markersize=5, alpha=0.7, label='Data Mining')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(df['AI_Research']):\n    ax.annotate('AI Research', (df['Year'][i], df['AI_Research'][i]))\nfor i, txt in enumerate(df['Robotics']):\n    ax.annotate('Robotics', (df['Year'][i], df['Robotics'][i]))\nfor i, txt in enumerate(df['Neural_Networks']):\n    ax.annotate('Neural Networks', (df['Year'][i], df['Neural_Networks'][i]))\nfor i, txt in enumerate(df['Data_Mining']):\n    ax.annotate('Data Mining', (df['Year'][i], df['Data_Mining'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('Trends in AI Research, Robotics, Neural Networks, and Data Mining')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Show the marker and change the marker edge color of the lines that contain the center point of the bounding box to #2382b1. Also, enable the picker state for these lines by setting it to True.",
        "Input_image": "./test_dataset/Plot/Plot_fe7afc36e9cd1d8c/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given CSV data\ndata = {'Year': [2014, 2015, 2016, 2017, 2018, 2019],\n        'AI_Research': [500, 480, 460, 550, 530, 510],\n        'Robotics': [700, 680, 660, 750, 730, 710],\n        'Neural_Networks': [1000, 900, 800, 1050, 950, 925],\n        'Data_Mining': [1200, 1100, 1000, 1250, 1150, 1125]}\ndf = pd.DataFrame(data)\n\n# Set up the figure and axis\nfig, ax = plt.subplots()\n\n# Define a monochrome blue color scheme\nblue_shades = ['#003f5c', '#2f4b7c', '#665191', '#a05195']\n\nax.plot('Year', 'AI_Research', data=df, marker='o', color=blue_shades[0], linewidth=2, linestyle='-', markersize=5, alpha=0.7, label='AI Research', markeredgecolor='#2382b1', picker=True)\nax.plot('Year', 'Robotics', data=df, marker='v', color=blue_shades[1], linewidth=2, linestyle='--', markersize=5, alpha=0.7, label='Robotics')\nax.plot('Year', 'Neural_Networks', data=df, marker='s', color=blue_shades[2], linewidth=2, linestyle='-.', markersize=5, alpha=0.7, label='Neural Networks')\nax.plot('Year', 'Data_Mining', data=df, marker='D', color=blue_shades[3], linewidth=2, linestyle=':', markersize=5, alpha=0.7, label='Data Mining')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(df['AI_Research']):\n    ax.annotate('AI Research', (df['Year'][i], df['AI_Research'][i]))\nfor i, txt in enumerate(df['Robotics']):\n    ax.annotate('Robotics', (df['Year'][i], df['Robotics'][i]))\nfor i, txt in enumerate(df['Neural_Networks']):\n    ax.annotate('Neural Networks', (df['Year'][i], df['Neural_Networks'][i]))\nfor i, txt in enumerate(df['Data_Mining']):\n    ax.annotate('Data Mining', (df['Year'][i], df['Data_Mining'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('Trends in AI Research, Robotics, Neural Networks, and Data Mining')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_fe7afc36e9cd1d8c/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_fe7afc36e9cd1d8c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_fe7afc36e9cd1d8c/myplot.png"
    },
    {
        "id": "Plot_7003fc6a76cde1e2",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"Genetic Engineering Development,Year 2016,Year 2018,Year 2020\nCRISPR,100,150,130\nGene Therapy,80,70,100\nGenetic Modification,120,140,90\nGenome Mapping,90,85,75\nCloning,50,45,65\nSynthetic Biology,70,65,85\nBioinformatics,60,55,80\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = ['red', 'blue', 'green']\nmarker = ['o', 'v', '^']\nmarkersize = 8\nalpha = 0.9\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Genetic Engineering Development\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Genetic Engineering Development over Years\")\nax.set_xlabel(\"Technologies\")\nax.set_ylabel(\"Development Level\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the marker edge width of the lines that contain the center point of the bounding box to 1.79.",
        "Input_image": "./test_dataset/Plot/Plot_7003fc6a76cde1e2/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"Genetic Engineering Development,Year 2016,Year 2018,Year 2020\nCRISPR,100,150,130\nGene Therapy,80,70,100\nGenetic Modification,120,140,90\nGenome Mapping,90,85,75\nCloning,50,45,65\nSynthetic Biology,70,65,85\nBioinformatics,60,55,80\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = ['red', 'blue', 'green']\nmarker = ['o', 'v', '^']\nmarkersize = 8\nalpha = 0.9\nlinestyle = ['-', '--', '-.']\n\n# Randomly select a target object index\nselected_index = [0]  # Randomly chosen, 'CRISPR'\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    if i in selected_index:\n        ax.plot(df[\"Genetic Engineering Development\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n                marker=marker[i], markersize=markersize, markeredgewidth=1.79, alpha=alpha, label=column)\n    else:\n        ax.plot(df[\"Genetic Engineering Development\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n                marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Genetic Engineering Development over Years\")\nax.set_xlabel(\"Technologies\")\nax.set_ylabel(\"Development Level\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_7003fc6a76cde1e2/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_7003fc6a76cde1e2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_7003fc6a76cde1e2/myplot.png"
    },
    {
        "id": "Plot_2ea223ac55c6be4b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Create a DataFrame using the provided csv data\ndata = {\n    \"Year\": [2016, 2017, 2018, 2019],\n    \"Books Published\": [12000, 12500, 15000, 10000],\n    \"E-books Published\": [4000, 6000, 8000, 12000],\n    \"Revenue\": [20000000, 23000000, 30000000, 25000000]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plotting \"Books Published\" line\nl1, = ax.plot(df[\"Year\"], df[\"Books Published\"], color=\"blue\", linewidth=2, linestyle='-', marker='o', markersize=8, label=\"Books Published\")\n\n# Plotting \"E-books Published\" line\nl2, = ax.plot(df[\"Year\"], df[\"E-books Published\"], color=\"green\", linewidth=2, linestyle='--', marker='v', markersize=8, label=\"E-books Published\")\n\n# Plotting \"Revenue\" line\nl3, = ax.plot(df[\"Year\"], df[\"Revenue\"]/1000000, color=\"red\", linewidth=2, linestyle='-.', marker='s', markersize=8, label=\"Revenue (in millions)\")\n\n# Setting up labels, title, and legends\nax.set_xlabel('Year')\nax.set_ylabel('Number of Books / Revenue')\nax.set_title('Publishing Statistics Over The Years')\nax.legend()\n\n# Annotating each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Books Published', 'E-books Published', 'Revenue']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords=ax.get_yaxis_transform(),\n                textcoords=\"offset points\",\n                size=\"large\",\n                color=line.get_color(),\n                ha=\"right\")\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the lines that contain the center point of the bounding box to True. Additionally, change the color of these lines to #4693dd.",
        "Input_image": "./test_dataset/Plot/Plot_2ea223ac55c6be4b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Create a DataFrame using the provided csv data\ndata = {\n    \"Year\": [2016, 2017, 2018, 2019],\n    \"Books Published\": [12000, 12500, 15000, 10000],\n    \"E-books Published\": [4000, 6000, 8000, 12000],\n    \"Revenue\": [20000000, 23000000, 30000000, 25000000]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plotting \"Books Published\" line\nl1, = ax.plot(df[\"Year\"], df[\"Books Published\"], color=\"#4693dd\", linewidth=2, linestyle='-', marker='o', markersize=8, label=\"Books Published\", clip_on=True)\n\n# Plotting \"E-books Published\" line\nl2, = ax.plot(df[\"Year\"], df[\"E-books Published\"], color=\"green\", linewidth=2, linestyle='--', marker='v', markersize=8, label=\"E-books Published\")\n\n# Plotting \"Revenue\" line\nl3, = ax.plot(df[\"Year\"], df[\"Revenue\"]/1000000, color=\"red\", linewidth=2, linestyle='-.', marker='s', markersize=8, label=\"Revenue (in millions)\")\n\n# Setting up labels, title, and legends\nax.set_xlabel('Year')\nax.set_ylabel('Number of Books / Revenue')\nax.set_title('Publishing Statistics Over The Years')\nax.legend()\n\n# Annotating each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Books Published', 'E-books Published', 'Revenue']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords=ax.get_yaxis_transform(),\n                textcoords=\"offset points\",\n                size=\"large\",\n                color=line.get_color(),\n                ha=\"right\")\n\n# Adding grid and setting background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_2ea223ac55c6be4b/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_2ea223ac55c6be4b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_2ea223ac55c6be4b/myplot.png"
    },
    {
        "id": "Plot_10fef6d84af33374",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = \"\"\"Year,Depression,Anxiety,Substance Abuse\n2000,75,90,60\n2001,70,95,55\n2002,65,100,50\n2003,60,105,70\n2004,55,110,40\n2005,70,115,50\n2006,65,120,80\n2007,60,125,35\n2008,80,130,60\"\"\"\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Depression\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=\"Depression\")\nl2, = ax.plot(df[\"Year\"], df[\"Anxiety\"], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=\"Anxiety\")\nl3, = ax.plot(df[\"Year\"], df[\"Substance Abuse\"], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=\"Substance Abuse\")\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\nax.set_title('Number of Cases of Different Mental Health Issues Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Depression', 'Anxiety', 'Substance Abuse']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Depression\"][i], (df[\"Year\"][i], df[\"Depression\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Anxiety\"][i], (df[\"Year\"][i], df[\"Anxiety\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Substance Abuse\"][i], (df[\"Year\"][i], df[\"Substance Abuse\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Remove grid\nax.grid(False)\n\n# Set background color to white\nax.set_facecolor('white')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the style of the line that contains the center point of the bounding box to '-.', set the linewidth to 2.2, and adjust the color to black.",
        "Input_image": "./test_dataset/Plot/Plot_10fef6d84af33374/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = \"\"\"Year,Depression,Anxiety,Substance Abuse\n2000,75,90,60\n2001,70,95,55\n2002,65,100,50\n2003,60,105,70\n2004,55,110,40\n2005,70,115,50\n2006,65,120,80\n2007,60,125,35\n2008,80,130,60\"\"\"\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Depression\"], marker='o', markersize=6, linestyle='-.', linewidth=2.2, color='black', alpha=0.7, label=\"Depression\")\nl2, = ax.plot(df[\"Year\"], df[\"Anxiety\"], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=\"Anxiety\")\nl3, = ax.plot(df[\"Year\"], df[\"Substance Abuse\"], marker='s', markersize=6, linestyle='-.', linewidth=2.2, color='black', alpha=0.7, label=\"Substance Abuse\")\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\nax.set_title('Number of Cases of Different Mental Health Issues Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Depression', 'Anxiety', 'Substance Abuse']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Depression\"][i], (df[\"Year\"][i], df[\"Depression\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Anxiety\"][i], (df[\"Year\"][i], df[\"Anxiety\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Substance Abuse\"][i], (df[\"Year\"][i], df[\"Substance Abuse\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Remove grid\nax.grid(False)\n\n# Set background color to white\nax.set_facecolor('white')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Plot/Plot_10fef6d84af33374/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_10fef6d84af33374/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_10fef6d84af33374/myplot.png"
    },
    {
        "id": "Plot_acaa1c2ef61aa068",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nType of Clothing,2018,2019,2020\nCasual,500,2000,1000\nFormal,1000,500,2000\nSportswear,3000,2000,1000\nEthnic,2000,3000,2000\nLuxury,4000,2000,4000\n\"\"\")\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(data, sep=',')\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nstyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'red', 'green', 'orange', 'purple']\nmarkers = ['o', 'v', 's', 'p', '*']\nfor i, clothing_type in enumerate(df['Type of Clothing']):\n    ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], linestyle=styles[i%len(styles)], color=colors[i%len(colors)], \n            marker=markers[i%len(markers)], markersize=6, linewidth=2, alpha=0.7, label=clothing_type)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\nax.set_title('Sales of Different Types of Clothing Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df['Type of Clothing']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Remove grid\nax.grid(False)\n\n# Set background color to white\nax.set_facecolor('white') # Changed from 'lightgray' to 'white'\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the lines that contain the center point of the bounding box to 0.35. Also, show the marker and update the marker edge color for those lines to #07c832.",
        "Input_image": "./test_dataset/Plot/Plot_acaa1c2ef61aa068/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nType of Clothing,2018,2019,2020\nCasual,500,2000,1000\nFormal,1000,500,2000\nSportswear,3000,2000,1000\nEthnic,2000,3000,2000\nLuxury,4000,2000,4000\n\"\"\")\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(data, sep=',')\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nstyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'red', 'green', 'orange', 'purple']\nmarkers = ['o', 'v', 's', 'p', '*']\ntarget_object = [1]  # Randomly selecting 'Formal'\nfor i, clothing_type in enumerate(df['Type of Clothing']):\n    if i in target_object:\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], linestyle=styles[i%len(styles)], color=colors[i%len(colors)], \n                marker=markers[i%len(markers)], markersize=6, linewidth=2, alpha=0.35, markeredgecolor='#07c832', label=clothing_type)\n    else:\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], linestyle=styles[i%len(styles)], color=colors[i%len(colors)], \n                marker=markers[i%len(markers)], markersize=6, linewidth=2, alpha=0.7, label=clothing_type)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Sales')\nax.set_title('Sales of Different Types of Clothing Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df['Type of Clothing']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Remove grid\nax.grid(False)\n\n# Set background color to white\nax.set_facecolor('white') # Changed from 'lightgray' to 'white'\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_acaa1c2ef61aa068/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_acaa1c2ef61aa068/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_acaa1c2ef61aa068/myplot.png"
    },
    {
        "id": "Plot_eda73739fba6c11d",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = StringIO(\"\"\"\nTV Show Type,2017,2018,2019,2020,2021\nDrama,45,60,55,85,60\nComedy,50,80,75,85,50\nReality,60,45,70,50,55\nDocumentary,30,35,40,60,45\nTalk Show,40,70,80,50,60\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta']\nmarkers = ['.', 'o', 'v', '^', 's']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(len(df)):\n    ax.plot(df.columns[1:], df.iloc[i, 1:], \n            linestyle=choice(linestyles), \n            color=colors[i], \n            marker=markers[i], \n            markersize=10, \n            alpha=0.7, \n            label=df.iloc[i, 0])\n    \n    for j in range(1, len(df.columns)):\n        ax.annotate(df.iloc[i, 0], \n                    (df.columns[j], df.iloc[i, j]))\n\nax.set_title('TV Show Types Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Count')\nax.legend(title='TV Show Type:')\nax.grid(True)\n\n# Change the background color to white\nfig.set_facecolor('white') # This line was modified\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Increase the line thickness of the plot that contains the center point of the bounding box to 1.797.",
        "Input_image": "./test_dataset/Plot/Plot_eda73739fba6c11d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = StringIO(\"\"\"\nTV Show Type,2017,2018,2019,2020,2021\nDrama,45,60,55,85,60\nComedy,50,80,75,85,50\nReality,60,45,70,50,55\nDocumentary,30,35,40,60,45\nTalk Show,40,70,80,50,60\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta']\nmarkers = ['.', 'o', 'v', '^', 's']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(len(df)):\n    if i == 2:  # Randomly selected index for modification\n        ax.plot(df.columns[1:], df.iloc[i, 1:], \n                linestyle=choice(linestyles), \n                color=colors[i], \n                marker=markers[i], \n                markersize=10, \n                alpha=0.7, \n                label=df.iloc[i, 0],\n                linewidth=1.797249523291348)\n    else:\n        ax.plot(df.columns[1:], df.iloc[i, 1:], \n                linestyle=choice(linestyles), \n                color=colors[i], \n                marker=markers[i], \n                markersize=10, \n                alpha=0.7, \n                label=df.iloc[i, 0])\n    \n    for j in range(1, len(df.columns)):\n        ax.annotate(df.iloc[i, 0], \n                    (df.columns[j], df.iloc[i, j]))\n\nax.set_title('TV Show Types Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Count')\nax.legend(title='TV Show Type:')\nax.grid(True)\n\n# Change the background color to white\nfig.set_facecolor('white') # This line was modified\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_eda73739fba6c11d/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_eda73739fba6c11d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_eda73739fba6c11d/myplot.png"
    },
    {
        "id": "Plot_18f5e01ec6a74fc0",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Load the data\ndata = {\"Year\": [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008],\n        \"Arctic Ice Extent (million sq km)\": [13.5, 13.2, 13.0, 12.8, 12.3, 11.9, 11.6, 12.0, 11.5],\n        \"Antarctic Ice Extent (million sq km)\": [18.6, 18.2, 18.9, 18.0, 18.8, 17.9, 18.3, 17.5, 17.0]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with different line styles, markers and colors\nl1, = ax.plot(df['Year'], df['Arctic Ice Extent (million sq km)'], linestyle='-', marker='o', color='blue', markersize=8, alpha=0.7, label='Arctic Ice Extent')\nl2, = ax.plot(df['Year'], df['Antarctic Ice Extent (million sq km)'], linestyle='--', marker='v', color='red', markersize=8, alpha=0.7, label='Antarctic Ice Extent')\n\nax.legend(loc='upper left', shadow=True)\n\n# Annotate the data points\nfor x, y in zip(df['Year'], df['Arctic Ice Extent (million sq km)']):\n    ax.text(x, y, str(y), color='blue', fontweight='bold')\nfor x, y in zip(df['Year'], df['Antarctic Ice Extent (million sq km)']):\n    ax.text(x, y, str(y), color='red', fontweight='bold')\n\n# Set labels, title, and grid\nax.set_xlabel('Year')\nax.set_ylabel('Ice Extent (million sq km)')\nax.set_title('Arctic and Antarctic Ice Extents Over Time')\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('lightgray')\n\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the marker size of the lines that contain the center point of the bounding box to 9.63.",
        "Input_image": "./test_dataset/Plot/Plot_18f5e01ec6a74fc0/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Load the data\ndata = {\"Year\": [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008],\n        \"Arctic Ice Extent (million sq km)\": [13.5, 13.2, 13.0, 12.8, 12.3, 11.9, 11.6, 12.0, 11.5],\n        \"Antarctic Ice Extent (million sq km)\": [18.6, 18.2, 18.9, 18.0, 18.8, 17.9, 18.3, 17.5, 17.0]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with different line styles, markers and colors\nl1, = ax.plot(df['Year'], df['Arctic Ice Extent (million sq km)'], linestyle='-', marker='o', color='blue', markersize=8, alpha=0.7, label='Arctic Ice Extent')\nl2, = ax.plot(df['Year'], df['Antarctic Ice Extent (million sq km)'], linestyle='--', marker='v', color='red', markersize=9.63, alpha=0.7, label='Antarctic Ice Extent')\n\nax.legend(loc='upper left', shadow=True)\n\n# Annotate the data points\nfor x, y in zip(df['Year'], df['Arctic Ice Extent (million sq km)']):\n    ax.text(x, y, str(y), color='blue', fontweight='bold')\nfor x, y in zip(df['Year'], df['Antarctic Ice Extent (million sq km)']):\n    ax.text(x, y, str(y), color='red', fontweight='bold')\n\n# Set labels, title, and grid\nax.set_xlabel('Year')\nax.set_ylabel('Ice Extent (million sq km)')\nax.set_title('Arctic and Antarctic Ice Extents Over Time')\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('lightgray')\n\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_18f5e01ec6a74fc0/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_18f5e01ec6a74fc0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_18f5e01ec6a74fc0/myplot.png"
    },
    {
        "id": "Plot_40eff4b5e5996029",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = {\n    \"Category\": [\"Baking\", \"Grilling\", \"Roasting\", \"Stir-frying\", \"Steaming\", \"Deep-frying\", \"Boiling\", \"Saut\u00e9ing\", \"Poaching\"],\n    \"2016\": [50, 70, 85, 30, 60, 80, 75, 55, 40],\n    \"2017\": [60, 60, 100, 25, 65, 75, 70, 60, 45],\n    \"2018\": [40, 75, 90, 45, 64, 85, 68, 55, 50]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Category\"]))\n\ncolor_palette = ['blue', 'green', 'red']  # Defined color palette\nlinestyles = ['-', '--', '-.', ':']\n\nfor i in range(1, df.shape[1]):\n    line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle=linestyles[i % len(linestyles)], linewidth=2, markersize=6, label=df.columns[i], color=color_palette[i % len(color_palette)])  # Set line color from palette\n    for j in range(len(x)):\n        ax.text(j, df.iloc[j, i], df.columns[i], ha='center')\n\nax.set_xlabel('Category')\nax.set_ylabel('Values')\nax.set_title('Cooking Method Popularity by Year')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Category\"], rotation=45)\nax.grid(True, color='lightblue')  # Change grid color to light blue\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the marker style of the lines that contain the center point of the bounding box to 'x'.",
        "Input_image": "./test_dataset/Plot/Plot_40eff4b5e5996029/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = {\n    \"Category\": [\"Baking\", \"Grilling\", \"Roasting\", \"Stir-frying\", \"Steaming\", \"Deep-frying\", \"Boiling\", \"Saut\u00e9ing\", \"Poaching\"],\n    \"2016\": [50, 70, 85, 30, 60, 80, 75, 55, 40],\n    \"2017\": [60, 60, 100, 25, 65, 75, 70, 60, 45],\n    \"2018\": [40, 75, 90, 45, 64, 85, 68, 55, 50]\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Category\"]))\n\ncolor_palette = ['blue', 'green', 'red']  # Defined color palette\nlinestyles = ['-', '--', '-.', ':']\n\nfor i in range(1, df.shape[1]):\n    if i == 2:  # Randomly choose '2017' as Target_object\n        line, = ax.plot(x, df.iloc[:, i], marker='x', linestyle=linestyles[i % len(linestyles)], linewidth=2, markersize=6, label=df.columns[i], color=color_palette[i % len(color_palette)])  # Set line color from palette\n    else:\n        line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle=linestyles[i % len(linestyles)], linewidth=2, markersize=6, label=df.columns[i], color=color_palette[i % len(color_palette)])  # Set line color from palette\n    for j in range(len(x)):\n        ax.text(j, df.iloc[j, i], df.columns[i], ha='center')\n\nax.set_xlabel('Category')\nax.set_ylabel('Values')\nax.set_title('Cooking Method Popularity by Year')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Category\"], rotation=45)\nax.grid(True, color='lightblue')  # Change grid color to light blue\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_40eff4b5e5996029/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_40eff4b5e5996029/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_40eff4b5e5996029/myplot.png"
    },
    {
        "id": "Plot_b87df7c01cc3128e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nNatural Disasters,2000,2001,2002,2003,2004\nEarthquakes,200,300,250,150,100\nFloods,100,200,350,300,200\nVolcanic Eruptions,50,70,30,120,90\nWildfires,100,150,200,100,50\nHurricanes,150,250,200,400,350\n\"\"\")\ndf = pd.read_csv(data, index_col=0)\n\n# Plot\nfig, ax = plt.subplots()\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue', 'purple', 'orange']\nmarkers = ['.', ',', 'o', 'v', '^']\nlinewidths = [1.0, 1.5, 2.0, 2.5, 3.0]\nalphas = [0.7, 0.8, 0.9, 1.0, 0.6]\n\nfor idx, disaster in enumerate(df.index):\n    ax.plot(df.columns, df.loc[disaster], \n            linestyle=linestyles[idx % len(linestyles)], \n            color=colors[idx % len(colors)], \n            marker=markers[idx % len(markers)], \n            linewidth=linewidths[idx % len(linewidths)], \n            alpha=alphas[idx % len(alphas)], \n            label=disaster)\n    for x, y in zip(df.columns, df.loc[disaster]):\n        ax.text(int(x), y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.index):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Frequency')\nax.set_title('Frequency of Natural Disasters Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Show the data points of the line that contains the center point of the bounding box as 'diamond' shapes, and hide the data points of all other lines.",
        "Input_image": "./test_dataset/Plot/Plot_b87df7c01cc3128e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = StringIO(\"\"\"\nNatural Disasters,2000,2001,2002,2003,2004\nEarthquakes,200,300,250,150,100\nFloods,100,200,350,300,200\nVolcanic Eruptions,50,70,30,120,90\nWildfires,100,150,200,100,50\nHurricanes,150,250,200,400,350\n\"\"\")\ndf = pd.read_csv(data, index_col=0)\n\n# Plot\nfig, ax = plt.subplots()\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue', 'purple', 'orange']\nmarkers = ['', '', 'D', '', '']\nlinewidths = [1.0, 1.5, 2.0, 2.5, 3.0]\nalphas = [0.7, 0.8, 0.9, 1.0, 0.6]\n\nfor idx, disaster in enumerate(df.index):\n    ax.plot(df.columns, df.loc[disaster], \n            linestyle=linestyles[idx % len(linestyles)], \n            color=colors[idx % len(colors)], \n            marker=markers[idx % len(markers)], \n            linewidth=linewidths[idx % len(linewidths)], \n            alpha=alphas[idx % len(alphas)], \n            label=disaster)\n    for x, y in zip(df.columns, df.loc[disaster]):\n        ax.text(int(x), y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.index):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Frequency')\nax.set_title('Frequency of Natural Disasters Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_b87df7c01cc3128e/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_b87df7c01cc3128e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_b87df7c01cc3128e/myplot.png"
    },
    {
        "id": "Plot_52506c4a976d687b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Data\nfurniture_type = [\"Sofa\", \"Coffee Table\", \"Dining Table\", \"Bed\"]\nsales = [\n    [100, 120, 150, 200, 250, 150, 90, 80, 70, 60, 200, 300],\n    [50, 60, 70, 60, 50, 40, 30, 20, 25, 30, 35, 40],\n    [300, 350, 400, 200, 150, 100, 80, 250, 270, 275, 280, 285],\n    [140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 600, 500]\n]\nmonths = list(range(1, 13))\n\n# Plotting\nfig, ax = plt.subplots()\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue', 'orange']\n\nfor i, furniture in enumerate(furniture_type):\n    ax.plot(months, sales[i], linestyle=linestyles[i], color=colors[i], \n            marker='o', markersize=6, linewidth=1.5, alpha=0.7, label=furniture)\n    ax.annotate(furniture, (months[-1], sales[i][-1]), textcoords=\"offset points\", \n                xytext=(10,10), ha='center', fontsize=8, color=colors[i])\n\nax.set_facecolor('white')  # Changed background color to white\nax.grid(False)  # Removed the grid\nax.set_title('Monthly Sales of Furniture')\nax.set_xlabel('Month')\nax.set_ylabel('Sales')\nax.legend()\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the transparency of the line that contains the center point of the bounding box to 0.3758.",
        "Input_image": "./test_dataset/Plot/Plot_52506c4a976d687b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Data\nfurniture_type = [\"Sofa\", \"Coffee Table\", \"Dining Table\", \"Bed\"]\nsales = [\n    [100, 120, 150, 200, 250, 150, 90, 80, 70, 60, 200, 300],\n    [50, 60, 70, 60, 50, 40, 30, 20, 25, 30, 35, 40],\n    [300, 350, 400, 200, 150, 100, 80, 250, 270, 275, 280, 285],\n    [140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 600, 500]\n]\nmonths = list(range(1, 13))\n\n# Plotting\nfig, ax = plt.subplots()\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue', 'orange']\n\nfor i, furniture in enumerate(furniture_type):\n    if i == 2:  # Assuming 'Dining Table' is the target object based on the instruction\n        ax.plot(months, sales[i], linestyle=linestyles[i], color=colors[i], \n                marker='o', markersize=6, linewidth=1.5, alpha=0.3757564632411297, label=furniture)\n    else:\n        ax.plot(months, sales[i], linestyle=linestyles[i], color=colors[i], \n                marker='o', markersize=6, linewidth=1.5, alpha=0.7, label=furniture)\n    ax.annotate(furniture, (months[-1], sales[i][-1]), textcoords=\"offset points\", \n                xytext=(10,10), ha='center', fontsize=8, color=colors[i])\n\nax.set_facecolor('white')  # Changed background color to white\nax.grid(False)  # Removed the grid\nax.set_title('Monthly Sales of Furniture')\nax.set_xlabel('Month')\nax.set_ylabel('Sales')\nax.legend()\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_52506c4a976d687b/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_52506c4a976d687b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_52506c4a976d687b/myplot.png"
    },
    {
        "id": "Plot_4880210ec4989fa8",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\\\nYear,Asia,America,Europe\n2000,50,70,80\n2001,70,80,100\n2002,40,60,80\n2003,80,90,110\n2004,30,50,70\n2005,100,60,90\n2006,75,80,100\n2007,90,70,80\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nax.plot(df['Year'], df['Asia'], marker='o', color='r', linestyle='-', linewidth=2, markersize=6, alpha=0.7, label='Asia')\nax.plot(df['Year'], df['America'], marker='s', color='b', linestyle='--', linewidth=2, markersize=6, alpha=0.7, label='America')\nax.plot(df['Year'], df['Europe'], marker='v', color='g', linestyle=':', linewidth=2, markersize=6, alpha=0.7, label='Europe')\n\n# Annotating the lines\nfor i, txt in enumerate(df['Asia']):\n    ax.annotate(txt, (df['Year'][i], df['Asia'][i]))\nfor i, txt in enumerate(df['America']):\n    ax.annotate(txt, (df['Year'][i], df['America'][i]))\nfor i, txt in enumerate(df['Europe']):\n    ax.annotate(txt, (df['Year'][i], df['Europe'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('Value Over the Years by Region')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the transparency of the plot that contains the center point of the bounding box to 0.51. Also, change the linestyle of that plot to 'dashdot' for the same lines.",
        "Input_image": "./test_dataset/Plot/Plot_4880210ec4989fa8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\\\nYear,Asia,America,Europe\n2000,50,70,80\n2001,70,80,100\n2002,40,60,80\n2003,80,90,110\n2004,30,50,70\n2005,100,60,90\n2006,75,80,100\n2007,90,70,80\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nax.plot(df['Year'], df['Asia'], marker='o', color='r', linestyle='-.', linewidth=2, markersize=6, alpha=0.51, label='Asia')\nax.plot(df['Year'], df['America'], marker='s', color='b', linestyle='--', linewidth=2, markersize=6, alpha=0.7, label='America')\nax.plot(df['Year'], df['Europe'], marker='v', color='g', linestyle=':', linewidth=2, markersize=6, alpha=0.7, label='Europe')\n\n# Annotating the lines\nfor i, txt in enumerate(df['Asia']):\n    ax.annotate(txt, (df['Year'][i], df['Asia'][i]))\nfor i, txt in enumerate(df['America']):\n    ax.annotate(txt, (df['Year'][i], df['America'][i]))\nfor i, txt in enumerate(df['Europe']):\n    ax.annotate(txt, (df['Year'][i], df['Europe'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('Value Over the Years by Region')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')\n",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_4880210ec4989fa8/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_4880210ec4989fa8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_4880210ec4989fa8/myplot.png"
    },
    {
        "id": "Plot_f3607f61a13a431e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"Genetic Engineering Development,Year 2016,Year 2018,Year 2020\nCRISPR,100,150,130\nGene Therapy,80,70,100\nGenetic Modification,120,140,90\nGenome Mapping,90,85,75\nCloning,50,45,65\nSynthetic Biology,70,65,85\nBioinformatics,60,55,80\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = ['red', 'blue', 'green']\nmarker = ['o', 'v', '^']\nmarkersize = 8\nalpha = 0.9\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Genetic Engineering Development\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Genetic Engineering Development over Years\")\nax.set_xlabel(\"Technologies\")\nax.set_ylabel(\"Development Level\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Set the marker edge width of the lines that contain the center point of the bounding box to 1.33.",
        "Input_image": "./test_dataset/Plot/Plot_f3607f61a13a431e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"Genetic Engineering Development,Year 2016,Year 2018,Year 2020\nCRISPR,100,150,130\nGene Therapy,80,70,100\nGenetic Modification,120,140,90\nGenome Mapping,90,85,75\nCloning,50,45,65\nSynthetic Biology,70,65,85\nBioinformatics,60,55,80\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = ['red', 'blue', 'green']\nmarker = ['o', 'v', '^']\nmarkersize = 8\nalpha = 0.9\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Genetic Engineering Development\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column, markeredgewidth=1.33 if i == 0 else 1)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Genetic Engineering Development over Years\")\nax.set_xlabel(\"Technologies\")\nax.set_ylabel(\"Development Level\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_f3607f61a13a431e/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_f3607f61a13a431e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_f3607f61a13a431e/myplot.png"
    },
    {
        "id": "Plot_451d67f260b3f10f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = \"\"\"Year,Depression,Anxiety,Substance Abuse\n2000,75,90,60\n2001,70,95,55\n2002,65,100,50\n2003,60,105,70\n2004,55,110,40\n2005,70,115,50\n2006,65,120,80\n2007,60,125,35\n2008,80,130,60\"\"\"\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Depression\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=\"Depression\")\nl2, = ax.plot(df[\"Year\"], df[\"Anxiety\"], marker='v', markersize=6, linestyle='--', linewidth=2, color='red', alpha=0.7, label=\"Anxiety\")\nl3, = ax.plot(df[\"Year\"], df[\"Substance Abuse\"], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=\"Substance Abuse\")\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\nax.set_title('Number of Cases of Different Mental Health Issues Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Depression', 'Anxiety', 'Substance Abuse']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Depression\"][i], (df[\"Year\"][i], df[\"Depression\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Anxiety\"][i], (df[\"Year\"][i], df[\"Anxiety\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Substance Abuse\"][i], (df[\"Year\"][i], df[\"Substance Abuse\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the marker size for the lines that contain the center point of the bounding box to 11.80. Also, adjust the transformation of these lines to the transData coordinate system.",
        "Input_image": "./test_dataset/Plot/Plot_451d67f260b3f10f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = \"\"\"Year,Depression,Anxiety,Substance Abuse\n2000,75,90,60\n2001,70,95,55\n2002,65,100,50\n2003,60,105,70\n2004,55,110,40\n2005,70,115,50\n2006,65,120,80\n2007,60,125,35\n2008,80,130,60\"\"\"\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Year\"], df[\"Depression\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=\"Depression\")\nl2, = ax.plot(df[\"Year\"], df[\"Anxiety\"], marker='v', markersize=11.80, linestyle='--', linewidth=2, color='red', alpha=0.7, label=\"Anxiety\", transform=plt.gca().transData)\nl3, = ax.plot(df[\"Year\"], df[\"Substance Abuse\"], marker='s', markersize=6, linestyle='-.', linewidth=2, color='green', alpha=0.7, label=\"Substance Abuse\")\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Cases')\nax.set_title('Number of Cases of Different Mental Health Issues Over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Depression', 'Anxiety', 'Substance Abuse']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Depression\"][i], (df[\"Year\"][i], df[\"Depression\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Anxiety\"][i], (df[\"Year\"][i], df[\"Anxiety\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Substance Abuse\"][i], (df[\"Year\"][i], df[\"Substance Abuse\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_451d67f260b3f10f/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_451d67f260b3f10f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_451d67f260b3f10f/myplot.png"
    },
    {
        "id": "Plot_f74fe07282ff9cab",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([\n    [2012, 1000, 1100, 1200],\n    [2013, 1200, 1300, 1000],\n    [2014, 1500, 2100, 1300],\n    [2015, 2000, 1700, 1400],\n    [2016, 2500, 2300, 1500],\n    [2017, 3000, 2500, 1100],\n    [2018, 2900, 2700, 1800],\n    [2019, 3100, 2900, 2000],\n    [2020, 3150, 3100, 2100]\n])\n\nfig, ax = plt.subplots(facecolor='white')  # Change background color to white\n\nax.plot(data[:, 0], data[:, 1], label=\"Organic Vegetables\", color=\"red\", linewidth=2, linestyle='-', marker='o', markersize=8, alpha=0.8)\nax.plot(data[:, 0], data[:, 2], label=\"Organic Fruits\", color=\"green\", linewidth=2, linestyle='--', marker='v', markersize=8, alpha=0.8)\nax.plot(data[:, 0], data[:, 3], label=\"Organic Grains\", color=\"blue\", linewidth=2, linestyle='-.', marker='^', markersize=8, alpha=0.8)\n\nfor i in range(1, 4):\n    for x, y in zip(data[:, 0], data[:, i]):\n        ax.text(x, y, str(y))\n\nax.set_title('Organic Products Evolution')\nax.set_xlabel('Year')\nax.set_ylabel('Quantity')\nax.legend(loc='upper left', shadow=True)\n\nax.grid(True, color='lightgray')  # Set gridlines to light gray\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the line that contains the center point of the bounding box to #9c82f3.",
        "Input_image": "./test_dataset/Plot/Plot_f74fe07282ff9cab/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.array([\n    [2012, 1000, 1100, 1200],\n    [2013, 1200, 1300, 1000],\n    [2014, 1500, 2100, 1300],\n    [2015, 2000, 1700, 1400],\n    [2016, 2500, 2300, 1500],\n    [2017, 3000, 2500, 1100],\n    [2018, 2900, 2700, 1800],\n    [2019, 3100, 2900, 2000],\n    [2020, 3150, 3100, 2100]\n])\n\nfig, ax = plt.subplots(facecolor='white')  # Change background color to white\n\nax.plot(data[:, 0], data[:, 1], label=\"Organic Vegetables\", color=\"red\", linewidth=2, linestyle='-', marker='o', markersize=8, alpha=0.8)\nax.plot(data[:, 0], data[:, 2], label=\"Organic Fruits\", color=\"#9c82f3\", linewidth=2, linestyle='--', marker='v', markersize=8, alpha=0.8)\nax.plot(data[:, 0], data[:, 3], label=\"Organic Grains\", color=\"blue\", linewidth=2, linestyle='-.', marker='^', markersize=8, alpha=0.8)\n\nfor i in range(1, 4):\n    for x, y in zip(data[:, 0], data[:, i]):\n        ax.text(x, y, str(y))\n\nax.set_title('Organic Products Evolution')\nax.set_xlabel('Year')\nax.set_ylabel('Quantity')\nax.legend(loc='upper left', shadow=True)\n\nax.grid(True, color='lightgray')  # Set gridlines to light gray\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_f74fe07282ff9cab/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_f74fe07282ff9cab/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_f74fe07282ff9cab/myplot.png"
    },
    {
        "id": "Plot_372db60d81998671",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Given data\nhouseholds = ['Household A', 'Household B', 'Household C']\nwater_consumption = [45, 80, 22]\n\n# Create a figure and an axes\nfig, ax = plt.subplots()\n\n# Plot the data with specific style and markers\nax.plot(households, water_consumption, linestyle='--', color='blue', marker='o', markersize=10, linewidth=2, alpha=0.7)\n\n# Set the labels for x and y axes\nax.set_xlabel('Households')\nax.set_ylabel('Water Consumption (litres)')\n\n# Set the title of the plot\nax.set_title('Water Consumption of Different Households')\n\n# Add a grid\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add legend for the line\nax.legend(['Water Consumption'], loc='upper right')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(water_consumption):\n    ax.annotate(txt, (households[i], water_consumption[i]))\n\n# Add a tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the marker edge width of the plot elements containing the center point of the bounding box to 1.34. Additionally, set the picker state of these plot elements to False.",
        "Input_image": "./test_dataset/Plot/Plot_372db60d81998671/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Given data\nhouseholds = ['Household A', 'Household B', 'Household C']\nwater_consumption = [45, 80, 22]\n\n# Create a figure and an axes\nfig, ax = plt.subplots()\n\n# Plot the data with specific style and markers\nline, = ax.plot(households, water_consumption, linestyle='--', color='blue', marker='o', markersize=10, linewidth=2, alpha=0.7)\n\n# Set the marker edge width and picker state\nline.set_markeredgewidth(1.34)\nline.set_picker(False)\n\n# Set the labels for x and y axes\nax.set_xlabel('Households')\nax.set_ylabel('Water Consumption (litres)')\n\n# Set the title of the plot\nax.set_title('Water Consumption of Different Households')\n\n# Add a grid\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Add legend for the line\nax.legend(['Water Consumption'], loc='upper right')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor i, txt in enumerate(water_consumption):\n    ax.annotate(txt, (households[i], water_consumption[i]))\n\n# Add a tight layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_372db60d81998671/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_372db60d81998671/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_372db60d81998671/myplot.png"
    },
    {
        "id": "Plot_57265131427d2c66",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"\nYear,Number of Visits,Number of Books Borrowed\n2014,5000,7000\n2015,4600,6000\n2016,4700,9000\n2017,4400,6500\n2018,7000,8000\n2019,6900,12000\n2020,4500,7000\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Year\"]))\n\ncolors = ['red', 'green']  # Define colors for the lines\n\nfor i in range(1, df.shape[1]):\n    line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle='--', linewidth=2, \n                    color=colors[i-1], markersize=6, alpha=0.7, label=df.columns[i])\n    for j in range(len(x)):\n        ax.text(j, df.iloc[j, i], df.columns[i], ha='right', color=colors[i-1])\n\nax.set_xlabel('Year')\nax.set_ylabel('Counts')\nax.set_title('Number of Visits and Books Borrowed Over the Years')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Year\"])\nax.grid(True)\nax.set_facecolor('white') # Change the background color to white\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the line that contains the center point of the bounding box to 0.696.",
        "Input_image": "./test_dataset/Plot/Plot_57265131427d2c66/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"\nYear,Number of Visits,Number of Books Borrowed\n2014,5000,7000\n2015,4600,6000\n2016,4700,9000\n2017,4400,6500\n2018,7000,8000\n2019,6900,12000\n2020,4500,7000\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Year\"]))\n\ncolors = ['red', 'green']  # Define colors for the lines\n\nfor i in range(1, df.shape[1]):\n    if i == 1:\n        line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle='--', linewidth=2, \n                        color=colors[i-1], markersize=6, alpha=0.6962340656650128, label=df.columns[i])\n    else:\n        line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle='--', linewidth=2, \n                        color=colors[i-1], markersize=6, alpha=0.7, label=df.columns[i])\n    for j in range(len(x)):\n        ax.text(j, df.iloc[j, i], df.columns[i], ha='right', color=colors[i-1])\n\nax.set_xlabel('Year')\nax.set_ylabel('Counts')\nax.set_title('Number of Visits and Books Borrowed Over the Years')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Year\"])\nax.grid(True)\nax.set_facecolor('white') # Change the background color to white\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_57265131427d2c66/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_57265131427d2c66/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_57265131427d2c66/myplot.png"
    },
    {
        "id": "Plot_059166915f5ed640",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\n# Data for plotting\ndata = \"\"\"\n\"Year\",\"Arctic Sea Levels (in meters)\",\"Antarctic Sea Levels (in meters)\",\"Global Average Sea Levels (in meters)\"\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60\n\"\"\"\ndf = pd.read_csv(io.StringIO(data), quotechar='\"')\n\nfig, ax = plt.subplots()\nax.plot(df[\"Year\"], df[\"Arctic Sea Levels (in meters)\"], label='Arctic', linestyle='-', color='red', marker='o', markersize=5, linewidth=2, alpha=1)\nax.plot(df[\"Year\"], df[\"Antarctic Sea Levels (in meters)\"], label='Antarctic', linestyle='--', color='blue', marker='v', markersize=5, linewidth=2, alpha=1)\nax.plot(df[\"Year\"], df[\"Global Average Sea Levels (in meters)\"], label='Global Average', linestyle='-.', color='green', marker='s', markersize=5, linewidth=2, alpha=1)\n\n# Change font sizes here\nax.set_xlabel('Year', fontsize=14)\nax.set_ylabel('Sea Level (in meters)', fontsize=14)\nax.set_title('Sea Level Changes from 2000 to 2020', fontsize=18)\nax.legend(loc='upper left', fontsize=12)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nfor line, name in zip(ax.lines, ['Arctic', 'Antarctic', 'Global Average']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\nfig.savefig(\"myplot.png\")",
        "Instruction": "Set the visibility of the plot that contains the center point of the bounding box to False, affecting only that specific portion.",
        "Input_image": "./test_dataset/Plot/Plot_059166915f5ed640/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport io\n\n# Data for plotting\ndata = \"\"\"\n\"Year\",\"Arctic Sea Levels (in meters)\",\"Antarctic Sea Levels (in meters)\",\"Global Average Sea Levels (in meters)\"\n2000,0.10,0.08,0.09\n2001,0.12,0.09,0.10\n2002,0.15,0.10,0.12\n2003,0.18,0.12,0.14\n2004,0.20,0.13,0.15\n2005,0.25,0.16,0.18\n2006,0.28,0.19,0.21\n2007,0.30,0.20,0.23\n2008,0.33,0.25,0.27\n2009,0.35,0.26,0.29\n2010,0.30,0.30,0.31\n2011,0.35,0.33,0.34\n2012,0.40,0.35,0.36\n2013,0.38,0.38,0.39\n2014,0.42,0.40,0.41\n2015,0.45,0.45,0.45\n2016,0.50,0.42,0.46\n2017,0.52,0.50,0.51\n2018,0.55,0.52,0.53\n2019,0.60,0.55,0.57\n2020,0.65,0.57,0.60\n\"\"\"\ndf = pd.read_csv(io.StringIO(data), quotechar='\"')\n\nfig, ax = plt.subplots()\nax.plot(df[\"Year\"], df[\"Arctic Sea Levels (in meters)\"], label='Arctic', linestyle='-', color='red', marker='o', markersize=5, linewidth=2, alpha=1)\nax.plot(df[\"Year\"], df[\"Antarctic Sea Levels (in meters)\"], label='Antarctic', linestyle='--', color='blue', marker='v', markersize=5, linewidth=2, alpha=1)\nax.plot(df[\"Year\"], df[\"Global Average Sea Levels (in meters)\"], label='Global Average', linestyle='-.', color='green', marker='s', markersize=5, linewidth=2, alpha=1)\n\n# Change font sizes here\nax.set_xlabel('Year', fontsize=14)\nax.set_ylabel('Sea Level (in meters)', fontsize=14)\nax.set_title('Sea Level Changes from 2000 to 2020', fontsize=18)\nax.legend(loc='upper left', fontsize=12)\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Set the visibility of Antarctic line to False\nax.lines[1].set_visible(False)\n\nfor line, name in zip(ax.lines, ['Arctic', 'Antarctic', 'Global Average']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\nfig.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_059166915f5ed640/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_059166915f5ed640/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_059166915f5ed640/myplot.png"
    },
    {
        "id": "Plot_a9573f1caad58ab4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = '''Year,Artificial Intelligence,Robotics,Quantum Computing,Blockchain\n2000,50,70,10,5\n2001,55,65,12,7\n2002,60,55,15,10\n2003,65,50,20,20\n2004,70,60,25,40\n2005,75,55,40,30\n2006,80,60,60,25\n2007,85,70,80,20\n2008,90,50,100,23\n2009,100,60,50,27\n2010,150,70,60,30\n2011,140,80,70,35\n2012,130,100,80,40\n2013,170,120,90,45\n2014,200,140,110,50\n2015,230,160,120,55\n2016,260,180,70,60\n2017,290,200,75,65\n2018,320,220,80,70\n2019,350,240,85,75\n2020,380,260,90,80'''\n\ndf = pd.read_csv(StringIO(data))\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nax.plot(df['Year'], df['Artificial Intelligence'], marker='o', color='r', linestyle='-', linewidth=2, markersize=6, alpha=0.7, label='Artificial Intelligence')\nax.plot(df['Year'], df['Robotics'], marker='s', color='b', linestyle='--', linewidth=2, markersize=6, alpha=0.7, label='Robotics')\nax.plot(df['Year'], df['Quantum Computing'], marker='v', color='g', linestyle='-.', linewidth=2, markersize=6, alpha=0.7, label='Quantum Computing')\nax.plot(df['Year'], df['Blockchain'], marker='^', color='y', linestyle=':', linewidth=2, markersize=6, alpha=0.7, label='Blockchain')\n\n# Annotating the lines\nfor i, txt in enumerate(df['Artificial Intelligence']):\n    ax.annotate(txt, (df['Year'][i], df['Artificial Intelligence'][i]))\nfor i, txt in enumerate(df['Robotics']):\n    ax.annotate(txt, (df['Year'][i], df['Robotics'][i]))\nfor i, txt in enumerate(df['Quantum Computing']):\n    ax.annotate(txt, (df['Year'][i], df['Quantum Computing'][i]))\nfor i, txt in enumerate(df['Blockchain']):\n    ax.annotate(txt, (df['Year'][i], df['Blockchain'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Developments')\nax.set_title('Number of Developments in Different Tech Fields Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the shape of the points on the line that contains the center point of the bounding box to a triangle.",
        "Input_image": "./test_dataset/Plot/Plot_a9573f1caad58ab4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = '''Year,Artificial Intelligence,Robotics,Quantum Computing,Blockchain\n2000,50,70,10,5\n2001,55,65,12,7\n2002,60,55,15,10\n2003,65,50,20,20\n2004,70,60,25,40\n2005,75,55,40,30\n2006,80,60,60,25\n2007,85,70,80,20\n2008,90,50,100,23\n2009,100,60,50,27\n2010,150,70,60,30\n2011,140,80,70,35\n2012,130,100,80,40\n2013,170,120,90,45\n2014,200,140,110,50\n2015,230,160,120,55\n2016,260,180,70,60\n2017,290,200,75,65\n2018,320,220,80,70\n2019,350,240,85,75\n2020,380,260,90,80'''\n\ndf = pd.read_csv(StringIO(data))\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nax.plot(df['Year'], df['Artificial Intelligence'], marker='^', color='r', linestyle='-', linewidth=2, markersize=6, alpha=0.7, label='Artificial Intelligence')\nax.plot(df['Year'], df['Robotics'], marker='s', color='b', linestyle='--', linewidth=2, markersize=6, alpha=0.7, label='Robotics')\nax.plot(df['Year'], df['Quantum Computing'], marker='v', color='g', linestyle='-.', linewidth=2, markersize=6, alpha=0.7, label='Quantum Computing')\nax.plot(df['Year'], df['Blockchain'], marker='^', color='y', linestyle=':', linewidth=2, markersize=6, alpha=0.7, label='Blockchain')\n\n# Annotating the lines\nfor i, txt in enumerate(df['Artificial Intelligence']):\n    ax.annotate(txt, (df['Year'][i], df['Artificial Intelligence'][i]))\nfor i, txt in enumerate(df['Robotics']):\n    ax.annotate(txt, (df['Year'][i], df['Robotics'][i]))\nfor i, txt in enumerate(df['Quantum Computing']):\n    ax.annotate(txt, (df['Year'][i], df['Quantum Computing'][i]))\nfor i, txt in enumerate(df['Blockchain']):\n    ax.annotate(txt, (df['Year'][i], df['Blockchain'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Developments')\nax.set_title('Number of Developments in Different Tech Fields Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_a9573f1caad58ab4/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_a9573f1caad58ab4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_a9573f1caad58ab4/myplot.png"
    },
    {
        "id": "Plot_0015d65f007cecb5",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\n\"Media Type\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\"\n\"Television\",500,550,540,450,700\n\"Radio\",300,280,270,400,390\n\"Newspaper\",600,570,560,300,320\n\"Social Media\",500,700,900,1100,1500\n\"Magazines\",700,600,500,800,400\n\"Books\",400,350,450,400,500\n\"\"\")\ndf = pd.read_csv(data, quotechar='\"')\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nyears = df.columns[1:]\nmedia_types = df['Media Type'].values\ncolors = ['r', 'g', 'b', 'c', 'm', 'y']\nmarkers = ['o', 's', 'v', '^', '<', '>']\nlinestyles = ['-', '--', '-.', ':']\n\nfor i, media_type in enumerate(media_types):\n    ax.plot(years, df.loc[i, years], marker=markers[i], color=colors[i], linestyle=linestyles[i%4], linewidth=2, markersize=6, alpha=0.7, label=media_type)\n    for j, year in enumerate(years):\n        ax.annotate(df.loc[i, year], (year, df.loc[i, year]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Audience')\nax.set_title('Number of Audience for Different Media Types Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the color of the line that contains the center point of the bounding box to #e117c1.",
        "Input_image": "./test_dataset/Plot/Plot_0015d65f007cecb5/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\n\"Media Type\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\"\n\"Television\",500,550,540,450,700\n\"Radio\",300,280,270,400,390\n\"Newspaper\",600,570,560,300,320\n\"Social Media\",500,700,900,1100,1500\n\"Magazines\",700,600,500,800,400\n\"Books\",400,350,450,400,500\n\"\"\")\ndf = pd.read_csv(data, quotechar='\"')\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nyears = df.columns[1:]\nmedia_types = df['Media Type'].values\ncolors = ['r', 'g', 'b', 'c', 'm', 'y']\nmarkers = ['o', 's', 'v', '^', '<', '>']\nlinestyles = ['-', '--', '-.', ':']\n\nfor i, media_type in enumerate(media_types):\n    if i == 3:  # Assuming 'Social Media' is the 4th media type (index 3)\n        ax.plot(years, df.loc[i, years], marker=markers[i], color='#e117c1', linestyle=linestyles[i%4], linewidth=2, markersize=6, alpha=0.7, label=media_type)\n    else:\n        ax.plot(years, df.loc[i, years], marker=markers[i], color=colors[i], linestyle=linestyles[i%4], linewidth=2, markersize=6, alpha=0.7, label=media_type)\n    for j, year in enumerate(years):\n        ax.annotate(df.loc[i, year], (year, df.loc[i, year]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Audience')\nax.set_title('Number of Audience for Different Media Types Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "3",
        "Test_image": "./test_dataset/Plot/Plot_0015d65f007cecb5/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_0015d65f007cecb5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_0015d65f007cecb5/myplot.png"
    },
    {
        "id": "Plot_f02beac076ebcc98",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Earthquake,Tsunami,Hurricane\n2014,56,44,70\n2015,52,48,75\n2016,41,55,80\n2017,40,62,85\n2018,70,60,78\n2019,65,77,70\n2020,60,80,65\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\ncolor = ['red', 'blue', 'green']\nmarker = ['o', 'v', '^']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(df[\"Year\"][j], value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Natural Disasters Over the Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number of Occurrences\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Set the transparency of the plot that contains the center point of the bounding box to 0.31. Additionally, disable the clipping state for the same lines.",
        "Input_image": "./test_dataset/Plot/Plot_f02beac076ebcc98/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Earthquake,Tsunami,Hurricane\n2014,56,44,70\n2015,52,48,75\n2016,41,55,80\n2017,40,62,85\n2018,70,60,78\n2019,65,77,70\n2020,60,80,65\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\ncolor = ['red', 'blue', 'green']\nmarker = ['o', 'v', '^']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\ntarget_object = 0  # Randomly selected line index\ntarget_years = [2015, 2019]  # Randomly selected years\n\nfor i, column in enumerate(df.columns[1:]):\n    line_alpha = 0.31 if i == target_object else alpha\n    line, = ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n                    marker=marker[i], markersize=markersize, alpha=line_alpha, label=column)\n    if i == target_object:\n        for j, value in enumerate(df[column]):\n            if df[\"Year\"][j] in target_years:\n                ax.text(df[\"Year\"][j], value, str(value), ha='center', va='bottom', clip_on=False)\n    else:\n        for j, value in enumerate(df[column]):\n            ax.text(df[\"Year\"][j], value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Natural Disasters Over the Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number of Occurrences\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_f02beac076ebcc98/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_f02beac076ebcc98/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_f02beac076ebcc98/myplot.png"
    },
    {
        "id": "Plot_5536861b286057a9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Arctic Ice Cap,Antarctic Ice Cap,Greenland Ice Cap\n2000,13.2,13.6,2.9\n2001,13.5,13.9,3.2\n2002,13.7,13.5,3.0\n2003,10.2,13.0,2.7\n2004,10.5,13.5,3.0\n2005,10.9,14.0,3.3\n2006,10.7,13.6,3.1\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = ['skyblue', 'teal', 'navy']\nmarker = ['o', 'v', '^']\nmarkersize = 7\nalpha = 0.8\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    y = df[column].values[-1]\n    ax.annotate(column, xy=(1,y), xytext=(6,0), color=color[i], \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Set the title and labels\nax.set_title(\"Changes in Ice Cap Sizes from 2000 to 2006\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Size (in million square kilometers)\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Change the label of the plot that contains the center point of the bounding box to 'Label_44'.",
        "Input_image": "./test_dataset/Plot/Plot_5536861b286057a9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Arctic Ice Cap,Antarctic Ice Cap,Greenland Ice Cap\n2000,13.2,13.6,2.9\n2001,13.5,13.9,3.2\n2002,13.7,13.5,3.0\n2003,10.2,13.0,2.7\n2004,10.5,13.5,3.0\n2005,10.9,14.0,3.3\n2006,10.7,13.6,3.1\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = ['skyblue', 'teal', 'navy']\nmarker = ['o', 'v', '^']\nmarkersize = 7\nalpha = 0.8\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\ntarget_object = 1\nfor i, column in enumerate(df.columns[1:]):\n    if i == target_object:\n        ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n                marker=marker[i], markersize=markersize, alpha=alpha, label='Label_44')\n    else:\n        ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n                marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    y = df[column].values[-1]\n    ax.annotate(column, xy=(1,y), xytext=(6,0), color=color[i], \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Set the title and labels\nax.set_title(\"Changes in Ice Cap Sizes from 2000 to 2006\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Size (in million square kilometers)\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_5536861b286057a9/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_5536861b286057a9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_5536861b286057a9/myplot.png"
    },
    {
        "id": "Plot_037ae8fa3d470af3",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = np.array([2014, 2015, 2016, 2017, 2018, 2019, 2020])\nremote_workers = np.array([200, 250, 220, 180, 210, 190, 1000])\n\n# Plot\nfig, ax = plt.subplots()\nax.plot(years, remote_workers, color='tab:blue', linestyle='-', linewidth=2, marker='o', markersize=6, alpha=0.7)\n\nax.annotate('Remote Workers', xy=(2020, 1000), xytext=(2020, 1000), ha='right')\n\n# Title and labels\nax.set_title('Number of Remote Workers Over the Years')\nax.set_xlabel('Year')\nax.set_ylabel('Remote Workers (in thousands)')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the lines that contain the center point of the bounding box to 0.14. Also, ensure that the snap state for these lines is set to False.",
        "Input_image": "./test_dataset/Plot/Plot_037ae8fa3d470af3/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = np.array([2014, 2015, 2016, 2017, 2018, 2019, 2020])\nremote_workers = np.array([200, 250, 220, 180, 210, 190, 1000])\n\n# Plot\nfig, ax = plt.subplots()\nline, = ax.plot(years, remote_workers, color='tab:blue', linestyle='-', linewidth=2, marker='o', markersize=6, alpha=0.14)\nline.set_snap(False)\n\nax.annotate('Remote Workers', xy=(2020, 1000), xytext=(2020, 1000), ha='right')\n\n# Title and labels\nax.set_title('Number of Remote Workers Over the Years')\nax.set_xlabel('Year')\nax.set_ylabel('Remote Workers (in thousands)')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_037ae8fa3d470af3/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_037ae8fa3d470af3/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_037ae8fa3d470af3/myplot.png"
    },
    {
        "id": "Plot_aaee298e32f83d0b",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Tourist Arrivals (millions),Local Economy Revenue (billion dollars)\n2015,50,30\n2016,75,45\n2017,120,70\n2018,35,20\n2019,80,50\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2\ncolor = ['blue', 'orange']\nmarker = ['o', 'v']\nmarkersize = 8\nalpha = 0.7\nlinestyle = ['-', ':']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Tourist Arrivals and Local Economy Revenue (2015-2019)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Value\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(4,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Set the z-order of the plot that contains the center point of the bounding box to 13. Also, add a shadow effect to the same plot with an offset of (2.51, 3.41).",
        "Input_image": "./test_dataset/Plot/Plot_aaee298e32f83d0b/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Tourist Arrivals (millions),Local Economy Revenue (billion dollars)\n2015,50,30\n2016,75,45\n2017,120,70\n2018,35,20\n2019,80,50\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2\ncolor = ['blue', 'orange']\nmarker = ['o', 'v']\nmarkersize = 8\nalpha = 0.7\nlinestyle = ['-', ':']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    if i == 0:  # Randomly selected index\n        ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n                marker=marker[i], markersize=markersize, alpha=alpha, label=column, zorder=13, \n                path_effects=[SimpleLineShadow(offset=(2.51, 3.41)), Normal()])\n    else:\n        ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n                marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Tourist Arrivals and Local Economy Revenue (2015-2019)\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Value\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(4,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_aaee298e32f83d0b/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_aaee298e32f83d0b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_aaee298e32f83d0b/myplot.png"
    },
    {
        "id": "Plot_4b722d703af75999",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Sport\": [\"Football\", \"Baseball\", \"Basketball\", \"Swimming\", \"Running\", \"Golf\"],\n    \"2008\": [90, 80, 70, 50, 30, 40],\n    \"2012\": [68, 60, 90, 75, 60, 30],\n    \"2016\": [85, 70, 65, 60, 40, 60]\n}\n\ndf = pd.DataFrame(data)\n\nstyles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue', 'purple', 'orange', 'black']\nmarkers = ['.', 'o', 'v', '^', 's', '*']\n\nplt.rc('lines', linewidth=2.5)\nfig, ax = plt.subplots()\n\nfor i in range(len(df)):\n    ax.plot(df.columns[1:], df.iloc[i, 1:], linestyle=styles[i % len(styles)], color=colors[i % len(colors)], \n            marker=markers[i % len(markers)], markersize=10, alpha=0.7, label=df.iloc[i,0])\n    ax.text(2, df.iloc[i, -1], df.iloc[i, 0])\n\nax.set_title('Sports Popularity Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Popularity')\nax.legend(loc='upper right', title=\"Sports\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the style of the line that contains the center point of the bounding box to 'solid'.",
        "Input_image": "./test_dataset/Plot/Plot_4b722d703af75999/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = {\n    \"Sport\": [\"Football\", \"Baseball\", \"Basketball\", \"Swimming\", \"Running\", \"Golf\"],\n    \"2008\": [90, 80, 70, 50, 30, 40],\n    \"2012\": [68, 60, 90, 75, 60, 30],\n    \"2016\": [85, 70, 65, 60, 40, 60]\n}\n\ndf = pd.DataFrame(data)\n\nstyles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue', 'purple', 'orange', 'black']\nmarkers = ['.', 'o', 'v', '^', 's', '*']\n\nplt.rc('lines', linewidth=2.5)\nfig, ax = plt.subplots()\n\nfor i in range(len(df)):\n    if i == 2:\n        ax.plot(df.columns[1:], df.iloc[i, 1:], linestyle='-', color=colors[i % len(colors)], \n                marker=markers[i % len(markers)], markersize=10, alpha=0.7, label=df.iloc[i,0])\n    else:\n        ax.plot(df.columns[1:], df.iloc[i, 1:], linestyle=styles[i % len(styles)], color=colors[i % len(colors)], \n                marker=markers[i % len(markers)], markersize=10, alpha=0.7, label=df.iloc[i,0])\n    ax.text(2, df.iloc[i, -1], df.iloc[i, 0])\n\nax.set_title('Sports Popularity Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Popularity')\nax.legend(loc='upper right', title=\"Sports\")\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_4b722d703af75999/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_4b722d703af75999/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_4b722d703af75999/myplot.png"
    },
    {
        "id": "Plot_db1fa9185fda0b98",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = StringIO(\"\"\"\nAge_Group,Hours_Weekdays,Hours_Weekends,Hours_Holidays\nUnder_20,30,15,45\n20_to_30,35,20,60\n30_to_40,40,25,55\nAbove_40,20,10,30\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan']\nmarkers = ['.', 'o', 'v', '^']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(len(df)):\n    ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n            linestyle=choice(linestyles), \n            color=colors[i], \n            marker=markers[i], \n            markersize=10, \n            alpha=0.7, \n            label=df.loc[i, 'Age_Group'])\n    \n    for j in range(1, len(df.columns)):\n        ax.annotate(df.loc[i, df.columns[j]], \n                    (df.columns[j], df.loc[i, df.columns[j]]))\n\nax.set_title('Hours Spent by Age Group')\nax.set_xlabel('Time Category')\nax.set_ylabel('Hours')\nax.legend(title='Age Group:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Show the data points as 'squares' for the line that contains the center point of the bounding box, and hide the data points for all other lines.",
        "Input_image": "./test_dataset/Plot/Plot_db1fa9185fda0b98/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = StringIO(\"\"\"\nAge_Group,Hours_Weekdays,Hours_Weekends,Hours_Holidays\nUnder_20,30,15,45\n20_to_30,35,20,60\n30_to_40,40,25,55\nAbove_40,20,10,30\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan']\nmarkers = ['', 's', '', '']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(len(df)):\n    ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n            linestyle=choice(linestyles), \n            color=colors[i], \n            marker=markers[i], \n            markersize=10, \n            alpha=0.7, \n            label=df.loc[i, 'Age_Group'])\n    \n    for j in range(1, len(df.columns)):\n        ax.annotate(df.loc[i, df.columns[j]], \n                    (df.columns[j], df.loc[i, df.columns[j]]))\n\nax.set_title('Hours Spent by Age Group')\nax.set_xlabel('Time Category')\nax.set_ylabel('Hours')\nax.legend(title='Age Group:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_db1fa9185fda0b98/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_db1fa9185fda0b98/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_db1fa9185fda0b98/myplot.png"
    },
    {
        "id": "Plot_4ae6714bf494ae25",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\n\"Workout Regimes\",\"Year 1\",\"Year 2\",\"Year 3\"\n\"Yoga\",100,75,95\n\"Crossfit\",200,120,50\n\"Zumba\",300,310,290\n\"\"\")\n\n# Read data into pandas DataFrame\ndf = pd.read_csv(data, quotechar='\"')\n\n# Create figure and axes objects\nfig, ax = plt.subplots()\n\n# Remove the grid lines\n# ax.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)  # This line was removed\n\n# Set the background color of the chart figure to white\nax.set_facecolor('white')  # Changed 'lightgray' to 'white'\n\n# Plot data\nfor row in df.itertuples(index=False):\n    ax.plot([\"Year 1\", \"Year 2\", \"Year 3\"], [row[1], row[2], row[3]], \n            label=row[0], linestyle='--', linewidth=2, marker='o', markersize=6, alpha=0.7)\n\n# Add title and labels\nax.set_title('Workout Regimes Over Three Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Participants')\n\n# Add legend and annotation\nfor line, name in zip(ax.lines, df[\"Workout Regimes\"]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=10, va=\"center\")\n\nax.legend(loc='best')\n\n# Ensure layout is tight\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the z-order of the line that contains the center point of the bounding box to 14.Also, set the shadow effect of the same line with a offset of (3.02,3.37), and stroke it with a linewidth of 4.7412855747313785 and a #38a834 foreground color.",
        "Input_image": "./test_dataset/Plot/Plot_4ae6714bf494ae25/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\nimport matplotlib.patheffects as path_effects\n\n# Given data\ndata = StringIO(\"\"\"\n\"Workout Regimes\",\"Year 1\",\"Year 2\",\"Year 3\"\n\"Yoga\",100,75,95\n\"Crossfit\",200,120,50\n\"Zumba\",300,310,290\n\"\"\")\n\n# Read data into pandas DataFrame\ndf = pd.read_csv(data, quotechar='\"')\n\n# Create figure and axes objects\nfig, ax = plt.subplots()\n\n# Set the background color of the chart figure to white\nax.set_facecolor('white')\n\n# Plot data\nfor i, row in enumerate(df.itertuples(index=False)):\n    if i == 1:  # Target object\n        stroke_effect = path_effects.withStroke(linewidth=4.7412855747313785, foreground='#38a834')\n        shadow_effect = path_effects.SimpleLineShadow(offset=(3.02, 3.37))\n        ax.plot([\"Year 1\", \"Year 2\", \"Year 3\"], [row[1], row[2], row[3]], \n                label=row[0], linestyle='--', linewidth=2, marker='o', markersize=6, alpha=0.7,\n                zorder=14, path_effects=[stroke_effect, shadow_effect])\n    else:\n        ax.plot([\"Year 1\", \"Year 2\", \"Year 3\"], [row[1], row[2], row[3]], \n                label=row[0], linestyle='--', linewidth=2, marker='o', markersize=6, alpha=0.7)\n\n# Add title and labels\nax.set_title('Workout Regimes Over Three Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Participants')\n\n# Add legend and annotation\nfor line, name in zip(ax.lines, df[\"Workout Regimes\"]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=10, va=\"center\")\n\nax.legend(loc='best')\n\n# Ensure layout is tight\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_4ae6714bf494ae25/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_4ae6714bf494ae25/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_4ae6714bf494ae25/myplot.png"
    },
    {
        "id": "Plot_39fd04e6b4c836c9",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\nType of Vacation,2005,2006,2007,2008,2009\nBeach Vacation,5000,5250,4800,4600,6600\nCruise,2000,2300,2600,2400,2300\nSafari,1000,1100,1500,1400,1100\nSki Trip,3000,2800,2600,2700,2400\nCamping,4000,4200,3800,3600,5200\n\"\"\")\n\ndf = pd.read_csv(data, index_col='Type of Vacation')\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\ncolor = ['red', 'blue', 'green', 'purple', 'orange']\nmarker = ['o', 'v', '^', '<', '>']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.', ':', '-']\n\n# Plot the lines\nfor i, (index, row) in enumerate(df.iterrows()):\n    ax.plot(row.index, row.values, color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=index)\n    for j, value in enumerate(row.values):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Popularity of Different Types of Vacation from 2005 to 2009\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number of People\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.index):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(4,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Set the animated state of the plot that contains the center point of the bounding box to True. For the same lines, also change the snap state of the plot to False.",
        "Input_image": "./test_dataset/Plot/Plot_39fd04e6b4c836c9/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\nType of Vacation,2005,2006,2007,2008,2009\nBeach Vacation,5000,5250,4800,4600,6600\nCruise,2000,2300,2600,2400,2300\nSafari,1000,1100,1500,1400,1100\nSki Trip,3000,2800,2600,2700,2400\nCamping,4000,4200,3800,3600,5200\n\"\"\")\n\ndf = pd.read_csv(data, index_col='Type of Vacation')\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\ncolor = ['red', 'blue', 'green', 'purple', 'orange']\nmarker = ['o', 'v', '^', '<', '>']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.', ':', '-']\n\n# Plot the lines\nfor i, (index, row) in enumerate(df.iterrows()):\n    line, = ax.plot(row.index, row.values, color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=index)\n    if i == 1:  # Apply to the second line\n        line.set_animated(True)\n        line.set_snap(False)\n    for j, value in enumerate(row.values):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Popularity of Different Types of Vacation from 2005 to 2009\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number of People\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.index):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(4,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_39fd04e6b4c836c9/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_39fd04e6b4c836c9/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_39fd04e6b4c836c9/myplot.png"
    },
    {
        "id": "Plot_a939d256ac1698a8",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = {\n    \"Social Media Platform\": [\"Facebook\", \"Twitter\", \"Instagram\", \"LinkedIn\", \"Snapchat\", \"Reddit\", \"WhatsApp\"],\n    \"2016\": [2000, 1000, 500, 800, 700, 300, 1500],\n    \"2017\": [1800, 1200, 750, 850, 900, 400, 1600],\n    \"2018\": [1500, 1300, 1000, 900, 1200, 350, 1700],\n    \"2019\": [2000, 1100, 1500, 1200, 1000, 500, 2000],\n    \"2020\": [1900, 1400, 3000, 1100, 1200, 1000, 1800],\n    \"2021\": [1600, 800, 2500, 1000, 1500, 600, 2000]\n}\ndf = pd.DataFrame(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\nmarkers = ['.', 'o', 'v', '^', 's', 'p', '*', 'h']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(len(df)):\n    ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n            linestyle=choice(linestyles), \n            color=colors[i], \n            marker=markers[i], \n            markersize=10, \n            alpha=0.7, \n            label=df.loc[i, 'Social Media Platform'])\n    \n    for j in range(1, len(df.columns)):\n        ax.annotate(df.loc[i, df.columns[j]], \n                    (df.columns[j], df.loc[i, df.columns[j]]))\n\nax.set_title('Social Media Usage Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Users (in millions)')\nax.legend(title='Platform:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the style of the line that includes the center point of the bounding box to 'dashdot'.",
        "Input_image": "./test_dataset/Plot/Plot_a939d256ac1698a8/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = {\n    \"Social Media Platform\": [\"Facebook\", \"Twitter\", \"Instagram\", \"LinkedIn\", \"Snapchat\", \"Reddit\", \"WhatsApp\"],\n    \"2016\": [2000, 1000, 500, 800, 700, 300, 1500],\n    \"2017\": [1800, 1200, 750, 850, 900, 400, 1600],\n    \"2018\": [1500, 1300, 1000, 900, 1200, 350, 1700],\n    \"2019\": [2000, 1100, 1500, 1200, 1000, 500, 2000],\n    \"2020\": [1900, 1400, 3000, 1100, 1200, 1000, 1800],\n    \"2021\": [1600, 800, 2500, 1000, 1500, 600, 2000]\n}\ndf = pd.DataFrame(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black']\nmarkers = ['.', 'o', 'v', '^', 's', 'p', '*', 'h']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(len(df)):\n    if i in[2,3]:  # Change the style of the line corresponding to the Target_object to 'dashdot'\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n                linestyle='-.', \n                color=colors[i], \n                marker=markers[i], \n                markersize=10, \n                alpha=0.7, \n                label=df.loc[i, 'Social Media Platform'])\n    else:\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n                linestyle=choice(linestyles), \n                color=colors[i], \n                marker=markers[i], \n                markersize=10, \n                alpha=0.7, \n                label=df.loc[i, 'Social Media Platform'])\n    \n    for j in range(1, len(df.columns)):\n        ax.annotate(df.loc[i, df.columns[j]], \n                    (df.columns[j], df.loc[i, df.columns[j]]))\n\nax.set_title('Social Media Usage Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Users (in millions)')\nax.legend(title='Platform:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_a939d256ac1698a8/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_a939d256ac1698a8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_a939d256ac1698a8/myplot.png"
    },
    {
        "id": "Plot_735ef28be2ce6cb7",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = {\"Region\": [\"North America\", \"Latin America\", \"Europe\", \"Africa\", \"Asia\", \"Australia\", \"Antarctica\", \"East Asia\", \"Middle East\"],\n        \"Home schooling rate\": [5, 8, 10, 3, 7, 11, 1, 6, 4]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Region\"]))\n\n# Changed line color to green and marker color to red\nline, = ax.plot(x, df[\"Home schooling rate\"], marker='o', linestyle='-', linewidth=2, markersize=6, color='green', markerfacecolor='red', alpha=0.8, label=\"Home schooling rate\")\nfor i in range(len(x)):\n    ax.text(i, df[\"Home schooling rate\"][i], df[\"Home schooling rate\"][i], ha='center')\n\nax.set_xlabel('Region')\nax.set_ylabel('Home Schooling Rate (%)')\nax.set_title('Home Schooling Rates by Region')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Region\"], rotation=45)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the marker style of the lines that contain the center point of the bounding box to 'D'. For these same lines, set the z-order to 3 and add a shadow effect with an offset of (2.39, 3.87).",
        "Input_image": "./test_dataset/Plot/Plot_735ef28be2ce6cb7/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\ndata = {\"Region\": [\"North America\", \"Latin America\", \"Europe\", \"Africa\", \"Asia\", \"Australia\", \"Antarctica\", \"East Asia\", \"Middle East\"],\n        \"Home schooling rate\": [5, 8, 10, 3, 7, 11, 1, 6, 4]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(len(df[\"Region\"]))\n\n# Changed line color to green and marker color to red\nline, = ax.plot(x, df[\"Home schooling rate\"], marker='D', linestyle='-', linewidth=2, markersize=6, color='green', markerfacecolor='red', alpha=0.8, label=\"Home schooling rate\", zorder=3, path_effects=[SimpleLineShadow(offset=(2.39, 3.87)), Normal()])\nfor i in range(len(x)):\n    ax.text(i, df[\"Home schooling rate\"][i], df[\"Home schooling rate\"][i], ha='center')\n\nax.set_xlabel('Region')\nax.set_ylabel('Home Schooling Rate (%)')\nax.set_title('Home Schooling Rates by Region')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.set_xticklabels(df[\"Region\"], rotation=45)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_735ef28be2ce6cb7/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_735ef28be2ce6cb7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_735ef28be2ce6cb7/myplot.png"
    },
    {
        "id": "Plot_9ca69653d6fd5d29",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Creating a DataFrame from the given csv data\ndata = {\"Households\": [\"Single Household\", \"Couple Household\", \"Family Household\", \"Multi-Generational Household\", \"Shared Housing\", \"Student Housing\", \"Retired Household\"],\n        \"2018\": [350, 500, 800, 1200, 600, 250, 700],\n        \"2019\": [330, 400, 600, 1300, 700, 150, 650],\n        \"2020\": [500, 420, 1200, 850, 650, 200, 700]}\ndf = pd.DataFrame(data)\n\n# Setting the style of the plot\nplt.style.use('seaborn-whitegrid')\n\n# Creating the figure and the axes\nfig, ax = plt.subplots()\n\n# Plotting the data\nfor i in range(len(df)):\n    ax.plot(df.columns[1:], df.iloc[i, 1:], label=df.iloc[i, 0], linewidth=1.5, linestyle='-', marker='o', markersize=5, alpha=0.7)\n\n# Setting the title and labels\nax.set_title('Household types over the years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of households')\n\n# Setting the legend\nax.legend(loc='upper left')\n\n# Changing the background color\nax.set_facecolor('lightgray')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the transparency of the line that contains the center point of the bounding box to 0.4746, and set the line width to 2.5.",
        "Input_image": "./test_dataset/Plot/Plot_9ca69653d6fd5d29/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Creating a DataFrame from the given csv data\ndata = {\"Households\": [\"Single Household\", \"Couple Household\", \"Family Household\", \"Multi-Generational Household\", \"Shared Housing\", \"Student Housing\", \"Retired Household\"],\n        \"2018\": [350, 500, 800, 1200, 600, 250, 700],\n        \"2019\": [330, 400, 600, 1300, 700, 150, 650],\n        \"2020\": [500, 420, 1200, 850, 650, 200, 700]}\ndf = pd.DataFrame(data)\n\n# Setting the style of the plot\nplt.style.use('seaborn-whitegrid')\n\n# Creating the figure and the axes\nfig, ax = plt.subplots()\n\n# Plotting the data\nfor i in range(len(df)):\n    if i in [2,5]:  # Assuming the third line is selected for modification\n        ax.plot(df.columns[1:], df.iloc[i, 1:], label=df.iloc[i, 0], linewidth=2.5, linestyle='-', marker='o', markersize=5, alpha=0.4746112085699437)\n    else:\n        ax.plot(df.columns[1:], df.iloc[i, 1:], label=df.iloc[i, 0], linewidth=1.5, linestyle='-', marker='o', markersize=5, alpha=0.7)\n\n# Setting the title and labels\nax.set_title('Household types over the years')\nax.set_xlabel('Year')\nax.set_ylabel('Number of households')\n\n# Setting the legend\nax.legend(loc='upper left')\n\n# Changing the background color\nax.set_facecolor('lightgray')\n\n# Saving the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_9ca69653d6fd5d29/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_9ca69653d6fd5d29/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_9ca69653d6fd5d29/myplot.png"
    },
    {
        "id": "Plot_d76e189baeddab39",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data\ndata = {\n    \"Species\": [\"Tuna\", \"Shark\", \"Cod\", \"Salmon\", \"Herring\"],\n    \"2000\": [500000, 400000, 350000, 500000, 400000],\n    \"2005\": [400000, 300000, 300000, 550000, 350000],\n    \"2010\": [350000, 350000, 250000, 500000, 325000],\n    \"2015\": [250000, 200000, 150000, 450000, 300000]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot each species over the years\nfor species in df[\"Species\"].unique():\n    ax.plot(df.columns[1:], df[df[\"Species\"] == species].values[0][1:], label=species)\n\n# Set the chart title and labels\nax.set_title('Species Population Over the Years', fontsize=15)\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Population', fontsize=12)\n\n# Add legends\nax.legend()\n\n# Set background to white and remove grid\nax.set_facecolor('white')  # Change face color to white\nax.grid(False)             # Disable gridlines\n\n# Add annotations\nfor i, txt in enumerate(df[\"Species\"]):\n    ax.annotate(txt, (df.columns[-1], df.iloc[i][-1]))\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the snap state of the line that contains the center point of the bounding box to True. and for the same lines: Set the z-order of the same line to 17.Set the shadow effect of the same lines to the Target_object with a offset of (2.84,3.29).",
        "Input_image": "./test_dataset/Plot/Plot_d76e189baeddab39/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.patheffects import SimpleLineShadow, Normal\n\n# The given data\ndata = {\n    \"Species\": [\"Tuna\", \"Shark\", \"Cod\", \"Salmon\", \"Herring\"],\n    \"2000\": [500000, 400000, 350000, 500000, 400000],\n    \"2005\": [400000, 300000, 300000, 550000, 350000],\n    \"2010\": [350000, 350000, 250000, 500000, 325000],\n    \"2015\": [250000, 200000, 150000, 450000, 300000]\n}\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot each species over the years\nfor i, species in enumerate(df[\"Species\"].unique()):\n    line, = ax.plot(df.columns[1:], df[df[\"Species\"] == species].values[0][1:], label=species)\n    if i == 1:  # Apply modifications to the second line (Shark)\n        line.set_snap(True)\n        line.set_zorder(17)\n        line.set_path_effects([SimpleLineShadow(offset=(2.84, 3.29)), Normal()])\n\n# Set the chart title and labels\nax.set_title('Species Population Over the Years', fontsize=15)\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Population', fontsize=12)\n\n# Add legends\nax.legend()\n\n# Set background to white and remove grid\nax.set_facecolor('white')  # Change face color to white\nax.grid(False)             # Disable gridlines\n\n# Add annotations\nfor i, txt in enumerate(df[\"Species\"]):\n    ax.annotate(txt, (df.columns[-1], df.iloc[i][-1]))\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_d76e189baeddab39/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_d76e189baeddab39/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_d76e189baeddab39/myplot.png"
    },
    {
        "id": "Plot_7afab186b481f73d",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Let's define our data\ndata = {\n    \"Decade\": [1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040],\n    \"Fashion Trend 1\": [20, 30, 100, 40, 60, 50, 30, 70, 90],\n    \"Fashion Trend 2\": [50, 60, 40, 70, 100, 80, 60, 50, 40],\n    \"Fashion Trend 3\": [80, 70, 60, 90, 50, 100, 40, 80, 100],\n}\n\n# Convert dictionary to pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Set the face color of the figure\nfig.patch.set_facecolor('gray')\n\n# Draw each line with different settings\nax.plot(df['Decade'], df['Fashion Trend 1'], color='red', linestyle='-', marker='o', markersize=5, linewidth=2, alpha=0.7, label='Fashion Trend 1')\nax.plot(df['Decade'], df['Fashion Trend 2'], color='blue', linestyle='--', marker='v', markersize=5, linewidth=2, alpha=0.7, label='Fashion Trend 2')\nax.plot(df['Decade'], df['Fashion Trend 3'], color='green', linestyle='-.', marker='^', markersize=5, linewidth=2, alpha=0.7, label='Fashion Trend 3')\n\n# Set the title and labels for the chart\nax.set_title('Fashion Trends Over the Decades')\nax.set_xlabel('Decade')\nax.set_ylabel('Popularity')\n\n# Add a legend\nax.legend()\n\n# Add grid\nax.grid(True)\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Fashion Trend 1', 'Fashion Trend 2', 'Fashion Trend 3']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=10, va=\"center\")\n\n# Save the final figure\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the face color of the plot that contains the center point of the bounding box to #d96b86. Additionally, show the marker and set the marker edge color for those same lines to #fcbac3.",
        "Input_image": "./test_dataset/Plot/Plot_7afab186b481f73d/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Let's define our data\ndata = {\n    \"Decade\": [1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040],\n    \"Fashion Trend 1\": [20, 30, 100, 40, 60, 50, 30, 70, 90],\n    \"Fashion Trend 2\": [50, 60, 40, 70, 100, 80, 60, 50, 40],\n    \"Fashion Trend 3\": [80, 70, 60, 90, 50, 100, 40, 80, 100],\n}\n\n# Convert dictionary to pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Set the face color of the figure\nfig.patch.set_facecolor('gray')\n\n# Draw each line with different settings\nax.plot(df['Decade'], df['Fashion Trend 1'], color='red', linestyle='-', marker='o', markersize=5, linewidth=2, alpha=0.7, label='Fashion Trend 1', markerfacecolor='#d96b86', markeredgecolor='#fcbac3')\nax.plot(df['Decade'], df['Fashion Trend 2'], color='blue', linestyle='--', marker='v', markersize=5, linewidth=2, alpha=0.7, label='Fashion Trend 2')\nax.plot(df['Decade'], df['Fashion Trend 3'], color='green', linestyle='-.', marker='^', markersize=5, linewidth=2, alpha=0.7, label='Fashion Trend 3')\n\n# Set the title and labels for the chart\nax.set_title('Fashion Trends Over the Decades')\nax.set_xlabel('Decade')\nax.set_ylabel('Popularity')\n\n# Add a legend\nax.legend()\n\n# Add grid\nax.grid(True)\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Fashion Trend 1', 'Fashion Trend 2', 'Fashion Trend 3']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=10, va=\"center\")\n\n# Save the final figure\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_7afab186b481f73d/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_7afab186b481f73d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_7afab186b481f73d/myplot.png"
    },
    {
        "id": "Plot_c4ff1d6175ba4f46",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\n\"Software\",\"Q1\",\"Q2\",\"Q3\",\"Q4\"\n\"Antivirus\",100,75,325,90\n\"CRM\",150,300,280,315\n\"ERP\",200,175,205,225\n\"Graphic Design\",250,550,250,255\n\"\"\")\n\n# Load data into a DataFrame\ndf = pd.read_csv(data, quotechar='\"')\n\n# Create a figure and an axes\nfig, ax = plt.subplots()\n\n# Set the background color of the chart\nax.set_facecolor('lightgray')\n\n# Plot data\nfor index, row in df.iterrows():\n    ax.plot(['Q1', 'Q2', 'Q3', 'Q4'], row[1:], label=row[0], linestyle='-', linewidth=1.5, marker='o', markersize=4, alpha=0.7)\n\n# Set labels and title with updated font sizes\nax.set_xlabel('Quarters', fontsize=16)\nax.set_ylabel('Sales', fontsize=16)\nax.set_title('Software Sales Over Quarters', fontsize=20)\n\n# Add legend and grid\nax.legend()\nax.grid()\n\n# Annotate each line with the corresponding legend label\nfor line, name in zip(ax.lines, df['Software']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Tight layout and save figure\nplt.tight_layout()\nfig.savefig(\"myplot.png\")",
        "Instruction": "Set the transform of the line that contains the center point of the bounding box to the Coordinate system of subfigure. and for the same line: Stroke it with a linewidth of 4.646232360197592 and a #957b84 foreground color.",
        "Input_image": "./test_dataset/Plot/Plot_c4ff1d6175ba4f46/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\nimport matplotlib.patheffects as path_effects\n\n# Given data\ndata = StringIO(\"\"\"\n\"Software\",\"Q1\",\"Q2\",\"Q3\",\"Q4\"\n\"Antivirus\",100,75,325,90\n\"CRM\",150,300,280,315\n\"ERP\",200,175,205,225\n\"Graphic Design\",250,550,250,255\n\"\"\")\n\n# Load data into a DataFrame\ndf = pd.read_csv(data, quotechar='\"')\n\n# Create a figure and an axes\nfig, ax = plt.subplots()\n\n# Set the background color of the chart\nax.set_facecolor('lightgray')\n\n# Plot data\nfor index, row in df.iterrows():\n    stroke_effect = path_effects.withStroke(linewidth=4.646232360197592, foreground='#957b84') if index == 1 else None\n    ax.plot(['Q1', 'Q2', 'Q3', 'Q4'], row[1:], label=row[0], linestyle='-', linewidth=1.5, marker='o', markersize=4, alpha=0.7, path_effects=[stroke_effect] if stroke_effect else None)\n\n# Set labels and title with updated font sizes\nax.set_xlabel('Quarters', fontsize=16)\nax.set_ylabel('Sales', fontsize=16)\nax.set_title('Software Sales Over Quarters', fontsize=20)\n\n# Add legend and grid\nax.legend()\nax.grid()\n\n# Annotate each line with the corresponding legend label\nfor line, name in zip(ax.lines, df['Software']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Tight layout and save figure\nplt.tight_layout()\nfig.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_c4ff1d6175ba4f46/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_c4ff1d6175ba4f46/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_c4ff1d6175ba4f46/myplot.png"
    },
    {
        "id": "Plot_ee7fbdb8e31d3a89",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"\nTechnology,Usage\n\"Smartphones\",45\n\"Artificial Intelligence\",88\n\"Solar Power\",35\n\"Electric Vehicles\",78\n\"5G Network\",50\n\"Blockchain\",30\n\"Virtual Reality\",65\n\"Quantum Computing\",25\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Plotting the data\nfig, ax = plt.subplots()\n\n# Modifying the color properties of the plot\nax.plot(df['Technology'], df['Usage'], marker='o', color='green', linestyle='-', linewidth=2, markersize=6, alpha=0.7, markerfacecolor='yellow', markeredgecolor='red', label='Usage')\n\n# Annotating the lines\nfor i, txt in enumerate(df['Usage']):\n    ax.annotate(txt, (df['Technology'][i], df['Usage'][i]))\n\nax.set_xlabel('Technology')\nax.set_ylabel('Usage (%)')\nax.set_title('Usage of Different Technologies')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the picker state of the lines that contain the center point of the bounding box to True. Also, change the snap state for the same lines to True.",
        "Input_image": "./test_dataset/Plot/Plot_ee7fbdb8e31d3a89/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"\nTechnology,Usage\n\"Smartphones\",45\n\"Artificial Intelligence\",88\n\"Solar Power\",35\n\"Electric Vehicles\",78\n\"5G Network\",50\n\"Blockchain\",30\n\"Virtual Reality\",65\n\"Quantum Computing\",25\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Plotting the data\nfig, ax = plt.subplots()\n\n# Modifying the color properties of the plot\nline, = ax.plot(df['Technology'], df['Usage'], marker='o', color='green', linestyle='-', linewidth=2, markersize=6, alpha=0.7, markerfacecolor='yellow', markeredgecolor='red', label='Usage')\nline.set_picker(True)\nline.set_snap(True)\n\n# Annotating the lines\nfor i, txt in enumerate(df['Usage']):\n    ax.annotate(txt, (df['Technology'][i], df['Usage'][i]))\n\nax.set_xlabel('Technology')\nax.set_ylabel('Usage (%)')\nax.set_title('Usage of Different Technologies')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_ee7fbdb8e31d3a89/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_ee7fbdb8e31d3a89/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_ee7fbdb8e31d3a89/myplot.png"
    },
    {
        "id": "Plot_b3921e437fee4dfb",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = \"\"\"\nGadgets,Usage\nSmartphones,3500\nTablets,3000\nLaptops,4000\nSmart Watches,2500\nVR Headsets,1500\nGame Consoles,3500\nDrones,2000\nWireless Headphones,3000\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black', 'purple']\nmarkers = ['.', 'o', 'v', '^', 's', 'p', '*', 'h']\n\n# Plot\nfig, ax = plt.subplots()\nax.plot(df['Gadgets'], df['Usage'], \n        linestyle=choice(linestyles), \n        color=choice(colors), \n        marker=choice(markers), \n        markersize=10, \n        alpha=0.7, \n        linewidth = 2)\n\nax.annotate(df.loc[df.index[-1], 'Gadgets'], \n            (df.index[-1], df.loc[df.index[-1], 'Usage']))\n\nax.set_title('Gadget Usage')\nax.set_xlabel('Gadgets')\nax.set_ylabel('Usage')\nax.grid(False)  # Disable gridlines\nfig.set_facecolor('white')  # Change background to white\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Highlight the plot that contains the center point of the bounding box by applying a stroke with a linewidth of 4.227 and a foreground color of #03a40e.",
        "Input_image": "./test_dataset/Plot/Plot_b3921e437fee4dfb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\nimport matplotlib.patheffects as path_effects  # \u5bfc\u5165path_effects\n\n# Data\ndata = \"\"\"\nGadgets,Usage\nSmartphones,3500\nTablets,3000\nLaptops,4000\nSmart Watches,2500\nVR Headsets,1500\nGame Consoles,3500\nDrones,2000\nWireless Headphones,3000\n\"\"\"\ndf = pd.read_csv(StringIO(data))\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black', 'purple']\nmarkers = ['.', 'o', 'v', '^', 's', 'p', '*', 'h']\n\n# Plot\nfig, ax = plt.subplots()\nstroke_effect = path_effects.withStroke(linewidth=4.227085197757196, foreground='#03a40e')\n\nax.plot(df['Gadgets'], df['Usage'], \n        linestyle=choice(linestyles), \n        color=choice(colors), \n        marker=choice(markers), \n        markersize=10, \n        alpha=0.7, \n        linewidth = 2,\n        path_effects=[stroke_effect]\n        )\n\n\n# Annotate with stroke effect\nax.annotate(df.loc[df.index[-1], 'Gadgets'], \n            (df.index[-1], df.loc[df.index[-1], 'Usage'])\n            )  # Apply stroke effect\n\nax.set_title('Gadget Usage')\nax.set_xlabel('Gadgets')\nax.set_ylabel('Usage')\nax.grid(False)  # Disable gridlines\nfig.set_facecolor('white')  # Change background to white\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')\n",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_b3921e437fee4dfb/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_b3921e437fee4dfb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_b3921e437fee4dfb/myplot.png"
    },
    {
        "id": "Plot_eb1bd2c0287d84b4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {'City': ['New York', 'Los Angeles', 'Chicago', 'Houston'],\n        '2017': [75, 85, 60, 80],\n        '2018': [85, 70, 65, 75],\n        '2019': [70, 90, 60, 85]}\ndf = pd.DataFrame(data)\n\n# Plot\nplt.rc('lines', linewidth=2.5)\nfig, ax = plt.subplots()\nax.set_facecolor('lightgray')  # Set background color\nax.grid(True)  # Add grid lines\n\n# Line styles\nlinestyles = ['-', '--', '-.', ':']\n\n# Plot each city's data\nfor i, city in enumerate(df['City']):\n    ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], linestyle=linestyles[i % len(linestyles)],\n            marker='o', markersize=5, label=city, alpha=0.7)\n\n# Annotate each line\nfor i, line in enumerate(ax.get_lines()):\n    y = line.get_ydata()[-1]\n    ax.annotate(df['City'][i], (2, y), textcoords=\"offset points\", xytext=(5,0), ha='left')\n\n# Labels, title, legend\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('City Data over the Years')\nax.legend()\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the style of the line that contains the center point of the bounding box to 'dotted'.",
        "Input_image": "./test_dataset/Plot/Plot_eb1bd2c0287d84b4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {'City': ['New York', 'Los Angeles', 'Chicago', 'Houston'],\n        '2017': [75, 85, 60, 80],\n        '2018': [85, 70, 65, 75],\n        '2019': [70, 90, 60, 85]}\ndf = pd.DataFrame(data)\n\n# Plot\nplt.rc('lines', linewidth=2.5)\nfig, ax = plt.subplots()\nax.set_facecolor('lightgray')  # Set background color\nax.grid(True)  # Add grid lines\n\n# Line styles\nlinestyles = ['-', '--', '-.', ':']\n\n# Plot each city's data\nfor i, city in enumerate(df['City']):\n    if i == 1:  # Assuming 'Los Angeles' is the target object based on its index\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], linestyle=':',\n                marker='o', markersize=5, label=city, alpha=0.7)\n    else:\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], linestyle=linestyles[i % len(linestyles)],\n                marker='o', markersize=5, label=city, alpha=0.7)\n\n# Annotate each line\nfor i, line in enumerate(ax.get_lines()):\n    y = line.get_ydata()[-1]\n    ax.annotate(df['City'][i], (2, y), textcoords=\"offset points\", xytext=(5,0), ha='left')\n\n# Labels, title, legend\nax.set_xlabel('Year')\nax.set_ylabel('Value')\nax.set_title('City Data over the Years')\nax.legend()\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_eb1bd2c0287d84b4/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_eb1bd2c0287d84b4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_eb1bd2c0287d84b4/myplot.png"
    },
    {
        "id": "Plot_f673befae4c4a865",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = '''\\\nYear,Crime Rate\n2000,5000\n2001,4500\n2002,8000\n2003,3000\n2004,7000\n2005,6000\n2006,2000\n2007,5000\n'''\ndf = pd.read_csv(StringIO(data))\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nax.plot(df['Year'], df['Crime Rate'], marker='o', color='b', linestyle='-', linewidth=2, markersize=6, alpha=0.7, label='Crime Rate')\n\n# Annotating the lines\nfor i, txt in enumerate(df['Crime Rate']):\n    ax.annotate(txt, (df['Year'][i], df['Crime Rate'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Crime Rate')\nax.set_title('Crime Rate Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the linewidth of the plot that contains the center point of the bounding box to 1.58. Also, enable the rasterized state for that plot by setting it to True.",
        "Input_image": "./test_dataset/Plot/Plot_f673befae4c4a865/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = '''\\\nYear,Crime Rate\n2000,5000\n2001,4500\n2002,8000\n2003,3000\n2004,7000\n2005,6000\n2006,2000\n2007,5000\n'''\ndf = pd.read_csv(StringIO(data))\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nline, = ax.plot(df['Year'], df['Crime Rate'], marker='o', color='b', linestyle='-', linewidth=1.58, markersize=6, alpha=0.7, label='Crime Rate', rasterized=True)\n\n# Annotating the lines\nfor i, txt in enumerate(df['Crime Rate']):\n    ax.annotate(txt, (df['Year'][i], df['Crime Rate'][i]))\n\nax.set_xlabel('Year')\nax.set_ylabel('Crime Rate')\nax.set_title('Crime Rate Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_f673befae4c4a865/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_f673befae4c4a865/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_f673befae4c4a865/myplot.png"
    },
    {
        "id": "Plot_6deee20d2c4902a4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Given data\ndata = StringIO(\"\"\"\nYear,AI Research Papers,AI Investments\n2005,100,150\n2006,150,300\n2007,300,500\n2008,500,700\n2009,700,1300\n2010,1300,650\n2011,650,800\n2012,800,1000\n\"\"\")\n\ndf = pd.read_csv(data)\n\nplt.rc('lines', linewidth=2.5)\nfig, ax = plt.subplots()\n\n# Set the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Plotting data with different line styles, colors, markers, marker sizes, and transparency levels.\nline1, = ax.plot(df['Year'], df['AI Research Papers'], linestyle='-', color='red', marker='o', markersize=8, alpha=0.8, label='AI Research Papers')\nline2, = ax.plot(df['Year'], df['AI Investments'], linestyle='--', color='blue', marker='v', markersize=8, alpha=0.8, label='AI Investments')\n\n# Setting title, labels and legends\nax.set_title('AI Research Papers and Investments over the years')\nax.set_xlabel('Year')\nax.set_ylabel('Count')\nax.legend()\n\n# Adding grid\nax.grid(True)\n\n# Annotating the lines\nfor x, y in zip(df['Year'], df['AI Research Papers']):\n    ax.text(x, y, 'AI Research Papers', color=line1.get_color(), ha='right')\n\nfor x, y in zip(df['Year'], df['AI Investments']):\n    ax.text(x, y, 'AI Investments', color=line2.get_color(), ha='right')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the rasterized state of the line that contains the center point of the bounding box to False. and for the same lines: Stroke the same lines to the Target_object with a linewidth of 4.449089049276784 and a #9f8451 foreground color.",
        "Input_image": "./test_dataset/Plot/Plot_6deee20d2c4902a4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\nimport matplotlib.patheffects as path_effects\n\n# Given data\ndata = StringIO(\"\"\"\nYear,AI Research Papers,AI Investments\n2005,100,150\n2006,150,300\n2007,300,500\n2008,500,700\n2009,700,1300\n2010,1300,650\n2011,650,800\n2012,800,1000\n\"\"\")\n\ndf = pd.read_csv(data)\n\nplt.rc('lines', linewidth=2.5)\nfig, ax = plt.subplots()\n\n# Set the background color of the chart figure\nax.set_facecolor('lightgray')\n\n# Plotting data with different line styles, colors, markers, marker sizes, and transparency levels.\nstroke_effect = path_effects.withStroke(linewidth=4.449089049276784, foreground='#9f8451')\nline1, = ax.plot(df['Year'], df['AI Research Papers'], linestyle='-', color='red', marker='o', markersize=8, alpha=0.8, label='AI Research Papers', rasterized=False, path_effects=[stroke_effect])\nline2, = ax.plot(df['Year'], df['AI Investments'], linestyle='--', color='blue', marker='v', markersize=8, alpha=0.8, label='AI Investments')\n\n# Setting title, labels and legends\nax.set_title('AI Research Papers and Investments over the years')\nax.set_xlabel('Year')\nax.set_ylabel('Count')\nax.legend()\n\n# Adding grid\nax.grid(True)\n\n# Annotating the lines\nfor x, y in zip(df['Year'], df['AI Research Papers']):\n    ax.text(x, y, 'AI Research Papers', color=line1.get_color(), ha='right')\n\nfor x, y in zip(df['Year'], df['AI Investments']):\n    ax.text(x, y, 'AI Investments', color=line2.get_color(), ha='right')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_6deee20d2c4902a4/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_6deee20d2c4902a4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_6deee20d2c4902a4/myplot.png"
    },
    {
        "id": "Plot_ee653a03fb3ddc23",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Data\ndata = StringIO(\"\"\"\nDiets,2015,2020\nVegan,30,90\nKeto,60,40\nIntermittent Fasting,20,100\nPaleo,70,30\nGluten Free,50,70\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plot\nfig, ax = plt.subplots()\n\nfor column in df.columns[1:]:\n    ax.plot(df['Diets'], df[column], marker='o', linestyle='--', label=column, linewidth=2.0, color='blue', markersize=6, alpha=0.7)\n    for x, y in zip(df['Diets'], df[column]):\n        ax.text(x, y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Diets')\nax.set_ylabel('Number of People')\nax.set_title('Popularity of Diets in 2015 and 2020')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Change the shape of the data points for the line that contains the center point of the bounding box to 'square'.",
        "Input_image": "./test_dataset/Plot/Plot_ee653a03fb3ddc23/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Data\ndata = StringIO(\"\"\"\nDiets,2015,2020\nVegan,30,90\nKeto,60,40\nIntermittent Fasting,20,100\nPaleo,70,30\nGluten Free,50,70\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plot\nfig, ax = plt.subplots()\n\nfor i, column in enumerate(df.columns[1:]):\n    if i == 0:\n        ax.plot(df['Diets'], df[column], marker='s', linestyle='--', label=column, linewidth=2.0, color='blue', markersize=6, alpha=0.7)\n    else:\n        ax.plot(df['Diets'], df[column], marker='o', linestyle='--', label=column, linewidth=2.0, color='blue', markersize=6, alpha=0.7)\n    for x, y in zip(df['Diets'], df[column]):\n        ax.text(x, y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Diets')\nax.set_ylabel('Number of People')\nax.set_title('Popularity of Diets in 2015 and 2020')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_ee653a03fb3ddc23/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_ee653a03fb3ddc23/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_ee653a03fb3ddc23/myplot.png"
    },
    {
        "id": "Plot_9ae13712af768e50",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"\nYear,Organic Vegetables,Organic Fruits,Organic Grains\n2012,100,110,95\n2013,95,105,90\n2014,80,115,85\n2015,85,130,70\n2016,70,135,65\n2017,75,145,60\n2018,110,155,55\n2019,115,165,50\n\"\"\"\n# Read data into pandas dataframe\ndf = pd.read_csv(StringIO(data))\n\n# Create a plot figure\nfig, ax = plt.subplots()\n\n# Define colors for each series\ncolors = {'Organic Vegetables': 'green', 'Organic Fruits': 'red', 'Organic Grains': 'purple'}\n\n# Plot each column in dataframe with a unique color and solid line\nfor column in df.columns[1:]:\n    ax.plot(df['Year'], df[column], marker='o', linestyle='-', color=colors[column], linewidth=2, markersize=5, alpha=0.7, label=column)\n\n# Annotate each line with corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(),\n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Add details to the plot\nax.set_xlabel('Year')\nax.set_ylabel('Quantity')\nax.set_title('Organic Food Trends Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Save the plot as a PNG file\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the line thickness for the plot that contains the center point of the bounding box to 1.547.",
        "Input_image": "./test_dataset/Plot/Plot_9ae13712af768e50/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Given data\ndata = \"\"\"\nYear,Organic Vegetables,Organic Fruits,Organic Grains\n2012,100,110,95\n2013,95,105,90\n2014,80,115,85\n2015,85,130,70\n2016,70,135,65\n2017,75,145,60\n2018,110,155,55\n2019,115,165,50\n\"\"\"\n# Read data into pandas dataframe\ndf = pd.read_csv(StringIO(data))\n\n# Create a plot figure\nfig, ax = plt.subplots()\n\n# Define colors for each series\ncolors = {'Organic Vegetables': 'green', 'Organic Fruits': 'red', 'Organic Grains': 'purple'}\n\n# Plot each column in dataframe with a unique color and solid line\nfor column in df.columns[1:]:\n    ax.plot(df['Year'], df[column], marker='o', linestyle='-', color=colors[column], linewidth=2, markersize=5, alpha=0.7, label=column)\n\n# Annotate each line with corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(),\n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\n# Add details to the plot\nax.set_xlabel('Year')\nax.set_ylabel('Quantity')\nax.set_title('Organic Food Trends Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Save the plot as a PNG file\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_9ae13712af768e50/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_9ae13712af768e50/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_9ae13712af768e50/myplot.png"
    },
    {
        "id": "Plot_0fa8b1adadaa7f97",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = StringIO(\"\"\"\nYear,Africa,Asia,South America\n1990,150,120,80\n2000,140,115,75\n2010,130,110,70\n2020,90,105,65\n2025,70,200,60\n2030,65,195,55\n2035,60,110,50\n2040,70,120,45\n2045,80,130,40\n2050,90,140,35\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta']\nmarkers = ['.', 'o', 'v', '^', 's']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(df.shape[1]-1):\n    ax.plot(df['Year'], df.iloc[:, i+1], \n            linestyle=choice(linestyles), \n            color=colors[i], \n            marker=markers[i], \n            markersize=10, \n            alpha=0.7, \n            label=df.columns[i+1])\n    \n    ax.annotate(df.columns[i+1], \n                (df['Year'].iat[-1], df.iloc[-1, i+1]))\n\nax.set_title('Population Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.legend(title='Continent:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the transparency of the lines that contain the center point of the bounding box to 0.08. For the same lines, set the marker edge width to 1.59.",
        "Input_image": "./test_dataset/Plot/Plot_0fa8b1adadaa7f97/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = StringIO(\"\"\"\nYear,Africa,Asia,South America\n1990,150,120,80\n2000,140,115,75\n2010,130,110,70\n2020,90,105,65\n2025,70,200,60\n2030,65,195,55\n2035,60,110,50\n2040,70,120,45\n2045,80,130,40\n2050,90,140,35\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta']\nmarkers = ['.', 'o', 'v', '^', 's']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(df.shape[1]-1):\n    if i == 1:  # Target object\n        ax.plot(df['Year'], df.iloc[:, i+1], \n                linestyle=choice(linestyles), \n                color=colors[i], \n                marker=markers[i], \n                markersize=10, \n                alpha=0.08, \n                markeredgewidth=1.59, \n                label=df.columns[i+1])\n    else:\n        ax.plot(df['Year'], df.iloc[:, i+1], \n                linestyle=choice(linestyles), \n                color=colors[i], \n                marker=markers[i], \n                markersize=10, \n                alpha=0.7, \n                label=df.columns[i+1])\n    \n    ax.annotate(df.columns[i+1], \n                (df['Year'].iat[-1], df.iloc[-1, i+1]))\n\nax.set_title('Population Over Years')\nax.set_xlabel('Year')\nax.set_ylabel('Population')\nax.legend(title='Continent:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_0fa8b1adadaa7f97/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_0fa8b1adadaa7f97/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_0fa8b1adadaa7f97/myplot.png"
    },
    {
        "id": "Plot_1fdf2428141f3844",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data\ndata = \"\"\"Year,Condominiums,Houses,Townhouses\n2000,3000,5000,4000\n2001,3500,7000,4500\n2002,5000,4500,4800\n2003,4500,4800,4200\n2004,4000,6000,4400\n2005,5000,5500,4600\n2006,7000,5300,4800\n2007,6600,5000,5000\n2008,5700,4400,5200\"\"\"\n\ndf = pd.read_csv(StringIO(data))\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\n# Change the colors here\ncolor = ['#1f77b4', '#ff7f0e', '#2ca02c']  # New color scheme: blue, orange, green\nmarker = ['o', 'v', '^']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines with new colors\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Property price trends over the years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Price\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label using new colors\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Change the clipping state of the plot that contains the center point of the bounding box to False. Also, for those same lines, disable the picker state of the corresponding plots.",
        "Input_image": "./test_dataset/Plot/Plot_1fdf2428141f3844/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# The given data\ndata = \"\"\"Year,Condominiums,Houses,Townhouses\n2000,3000,5000,4000\n2001,3500,7000,4500\n2002,5000,4500,4800\n2003,4500,4800,4200\n2004,4000,6000,4400\n2005,5000,5500,4600\n2006,7000,5300,4800\n2007,6600,5000,5000\n2008,5700,4400,5200\"\"\"\n\ndf = pd.read_csv(StringIO(data))\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\n# Change the colors here\ncolor = ['#1f77b4', '#ff7f0e', '#2ca02c']  # New color scheme: blue, orange, green\nmarker = ['o', 'v', '^']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines with new colors\nfor i, column in enumerate(df.columns[1:]):\n    line, = ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    if i == 1:  # Apply changes to the second line\n        line.set_clip_on(False)\n        line.set_picker(False)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Property price trends over the years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Price\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label using new colors\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_1fdf2428141f3844/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_1fdf2428141f3844/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_1fdf2428141f3844/myplot.png"
    },
    {
        "id": "Plot_f724148c952240c7",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Load the data\ndata = {'Year': [2015, 2016, 2017, 2018, 2019],\n        'Internet': [250, 320, 500, 480, 700],\n        'Cloud Storage': [100, 200, 300, 100, 320],\n        'Online Shopping': [50, 100, 200, 50, 220],\n        'Video Streaming': [30, 60, 90, 30, 110],\n        'Social Media': [10, 20, 30, 10, 50]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with different line styles, markers and colors\nl1, = ax.plot(df['Year'], df['Internet'], linestyle='-', marker='o', color='blue', markersize=8, alpha=0.7, label='Internet')\nl2, = ax.plot(df['Year'], df['Cloud Storage'], linestyle='--', marker='v', color='red', markersize=8, alpha=0.7, label='Cloud Storage')\nl3, = ax.plot(df['Year'], df['Online Shopping'], linestyle='-.', marker='s', color='green', markersize=8, alpha=0.7, label='Online Shopping')\nl4, = ax.plot(df['Year'], df['Video Streaming'], linestyle=':', marker='^', color='purple', markersize=8, alpha=0.7, label='Video Streaming')\nl5, = ax.plot(df['Year'], df['Social Media'], linestyle='-', marker='*', color='orange', markersize=8, alpha=0.7, label='Social Media')\n\nax.legend(loc='upper left', shadow=True)\n\n# Annotate the data points\nfor x, y in zip(df['Year'], df['Internet']):\n    ax.text(x, y, str(y), color='blue', fontweight='bold')\nfor x, y in zip(df['Year'], df['Cloud Storage']):\n    ax.text(x, y, str(y), color='red', fontweight='bold')\nfor x, y in zip(df['Year'], df['Online Shopping']):\n    ax.text(x, y, str(y), color='green', fontweight='bold')\nfor x, y in zip(df['Year'], df['Video Streaming']):\n    ax.text(x, y, str(y), color='purple', fontweight='bold')\nfor x, y in zip(df['Year'], df['Social Media']):\n    ax.text(x, y, str(y), color='orange', fontweight='bold')\n\n# Set labels, title, and grid\nax.set_xlabel('Year')\nax.set_ylabel('Usage')\nax.set_title('Service Usage Over Time')\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('lightgray')\n\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the clipping state of the lines that contain the center point of the bounding box to True. Also, ensure that the rasterized state of those lines is set to False.",
        "Input_image": "./test_dataset/Plot/Plot_f724148c952240c7/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Load the data\ndata = {'Year': [2015, 2016, 2017, 2018, 2019],\n        'Internet': [250, 320, 500, 480, 700],\n        'Cloud Storage': [100, 200, 300, 100, 320],\n        'Online Shopping': [50, 100, 200, 50, 220],\n        'Video Streaming': [30, 60, 90, 30, 110],\n        'Social Media': [10, 20, 30, 10, 50]}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Plot the data with different line styles, markers and colors\nl1, = ax.plot(df['Year'], df['Internet'], linestyle='-', marker='o', color='blue', markersize=8, alpha=0.7, label='Internet')\nl2, = ax.plot(df['Year'], df['Cloud Storage'], linestyle='--', marker='v', color='red', markersize=8, alpha=0.7, label='Cloud Storage')\nl3, = ax.plot(df['Year'], df['Online Shopping'], linestyle='-.', marker='s', color='green', markersize=8, alpha=0.7, label='Online Shopping')\nl4, = ax.plot(df['Year'], df['Video Streaming'], linestyle=':', marker='^', color='purple', markersize=8, alpha=0.7, label='Video Streaming')\nl5, = ax.plot(df['Year'], df['Social Media'], linestyle='-', marker='*', color='orange', markersize=8, alpha=0.7, label='Social Media')\n\n# Set clipping and rasterized state for the target object\nl1.set_clip_on(True)\nl1.set_rasterized(False)\n\nax.legend(loc='upper left', shadow=True)\n\n# Annotate the data points\nfor x, y in zip(df['Year'], df['Internet']):\n    ax.text(x, y, str(y), color='blue', fontweight='bold')\nfor x, y in zip(df['Year'], df['Cloud Storage']):\n    ax.text(x, y, str(y), color='red', fontweight='bold')\nfor x, y in zip(df['Year'], df['Online Shopping']):\n    ax.text(x, y, str(y), color='green', fontweight='bold')\nfor x, y in zip(df['Year'], df['Video Streaming']):\n    ax.text(x, y, str(y), color='purple', fontweight='bold')\nfor x, y in zip(df['Year'], df['Social Media']):\n    ax.text(x, y, str(y), color='orange', fontweight='bold')\n\n# Set labels, title, and grid\nax.set_xlabel('Year')\nax.set_ylabel('Usage')\nax.set_title('Service Usage Over Time')\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('lightgray')\n\n# Adjust layout and save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_f724148c952240c7/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_f724148c952240c7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_f724148c952240c7/myplot.png"
    },
    {
        "id": "Plot_e8f16468c1033805",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Define the data\ndata = StringIO(\"\"\"\nTime,Homemade Bread,Homemade Pasta,Homemade Soup\n2000,100,120,80\n2010,110,90,70\n2020,210,120,60\n2030,100,220,90\n2040,110,100,70\n2050,210,120,75\n\"\"\")\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(data)\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Time\"], df[\"Homemade Bread\"], marker='o', markersize=6, linestyle='-', linewidth=3, color='blue', alpha=0.7, label=\"Homemade Bread\")\nl2, = ax.plot(df[\"Time\"], df[\"Homemade Pasta\"], marker='v', markersize=6, linestyle='--', linewidth=3, color='red', alpha=0.7, label=\"Homemade Pasta\")\nl3, = ax.plot(df[\"Time\"], df[\"Homemade Soup\"], marker='s', markersize=6, linestyle='-.', linewidth=3, color='green', alpha=0.7, label=\"Homemade Soup\")\n\n# Set labels and title with a larger font size\nlabel_fontsize = 14\ntitle_fontsize = 16\nlegend_fontsize = 12\n\nax.set_xlabel('Time', fontsize=label_fontsize)\nax.set_ylabel('Number of Meals', fontsize=label_fontsize)\nax.set_title('Number of Homemade Meals Over Time', fontsize=title_fontsize)\n\n# Add a legend with a larger font size\nax.legend(fontsize=legend_fontsize)\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Homemade Bread', 'Homemade Pasta', 'Homemade Soup']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=legend_fontsize,  # Change the size here\n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Time\"])):\n    ax.annotate(df[\"Homemade Bread\"][i], (df[\"Time\"][i], df[\"Homemade Bread\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Homemade Pasta\"][i], (df[\"Time\"][i], df[\"Homemade Pasta\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Homemade Soup\"][i], (df[\"Time\"][i], df[\"Homemade Soup\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the snap state of the plot that contains the center point of the bounding box to False. For the same lines, apply a stroke to the plot corresponding to the center point with a linewidth of 4.7037 and a foreground color of #63919c.",
        "Input_image": "./test_dataset/Plot/Plot_e8f16468c1033805/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.patheffects as path_effects\n\n# Define the data\ndata = StringIO(\"\"\"\nTime,Homemade Bread,Homemade Pasta,Homemade Soup\n2000,100,120,80\n2010,110,90,70\n2020,210,120,60\n2030,100,220,90\n2040,110,100,70\n2050,210,120,75\n\"\"\")\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(data)\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nstroke_effect = path_effects.withStroke(linewidth=4.703688618948051, foreground='#63919c')\nl1, = ax.plot(df[\"Time\"], df[\"Homemade Bread\"], marker='o', markersize=6, linestyle='-', linewidth=3, color='blue', alpha=0.7, label=\"Homemade Bread\", snap=False, path_effects=[stroke_effect])\nl2, = ax.plot(df[\"Time\"], df[\"Homemade Pasta\"], marker='v', markersize=6, linestyle='--', linewidth=3, color='red', alpha=0.7, label=\"Homemade Pasta\")\nl3, = ax.plot(df[\"Time\"], df[\"Homemade Soup\"], marker='s', markersize=6, linestyle='-.', linewidth=3, color='green', alpha=0.7, label=\"Homemade Soup\")\n\n# Set labels and title with a larger font size\nlabel_fontsize = 14\ntitle_fontsize = 16\nlegend_fontsize = 12\n\nax.set_xlabel('Time', fontsize=label_fontsize)\nax.set_ylabel('Number of Meals', fontsize=label_fontsize)\nax.set_title('Number of Homemade Meals Over Time', fontsize=title_fontsize)\n\n# Add a legend with a larger font size\nax.legend(fontsize=legend_fontsize)\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Homemade Bread', 'Homemade Pasta', 'Homemade Soup']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=legend_fontsize,  # Change the size here\n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Time\"])):\n    ax.annotate(df[\"Homemade Bread\"][i], (df[\"Time\"][i], df[\"Homemade Bread\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Homemade Pasta\"][i], (df[\"Time\"][i], df[\"Homemade Pasta\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Homemade Soup\"][i], (df[\"Time\"][i], df[\"Homemade Soup\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_e8f16468c1033805/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_e8f16468c1033805/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_e8f16468c1033805/myplot.png"
    },
    {
        "id": "Plot_a3fea41d8b56a673",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = '''\\\nHousehold,Water_Consumption\nHousehold1,100\nHousehold2,120\nHousehold3,50\nHousehold4,140\nHousehold5,130\nHousehold6,180\nHousehold7,70\nHousehold8,200\n'''\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Household\"], df[\"Water_Consumption\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='blue', alpha=0.7, label=\"Water Consumption\")\n\n# Set labels and title\nax.set_xlabel('Household')\nax.set_ylabel('Water Consumption')\nax.set_title('Water Consumption of Different Households')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Water Consumption']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Household\"])):\n    ax.annotate(df[\"Water_Consumption\"][i], (df[\"Household\"][i], df[\"Water_Consumption\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the animated state of the plot that contains the center point of the bounding box to False. Also, for these same lines, change the linestyle to '-.'.",
        "Input_image": "./test_dataset/Plot/Plot_a3fea41d8b56a673/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = '''\\\nHousehold,Water_Consumption\nHousehold1,100\nHousehold2,120\nHousehold3,50\nHousehold4,140\nHousehold5,130\nHousehold6,180\nHousehold7,70\nHousehold8,200\n'''\n\n# Convert the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data\nl1, = ax.plot(df[\"Household\"], df[\"Water_Consumption\"], marker='o', markersize=6, linestyle='-.', linewidth=2, color='blue', alpha=0.7, label=\"Water Consumption\")\nl1.set_animated(False)\n# Set labels and title\nax.set_xlabel('Household')\nax.set_ylabel('Water Consumption')\nax.set_title('Water Consumption of Different Households')\n\n# Add a legend\nax.legend()\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Water Consumption']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(), \n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Household\"])):\n    ax.annotate(df[\"Water_Consumption\"][i], (df[\"Household\"][i], df[\"Water_Consumption\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color\nax.set_facecolor('lightgray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_a3fea41d8b56a673/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_a3fea41d8b56a673/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_a3fea41d8b56a673/myplot.png"
    },
    {
        "id": "Plot_d5c17757a9ddd8cb",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = '''\\\nYear,Sparrow,Eagle,Swan\n2010,1500,2000,1800\n2011,1700,2100,2200\n2012,1650,3500,2200\n2013,1800,2100,4000\n2014,1900,2000,1800\n2015,1550,2200,2100\n2016,1750,4000,2200\n2017,1600,2150,1800\n'''\n\n# Read the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data with updated colors\nl1, = ax.plot(df[\"Year\"], df[\"Sparrow\"], marker='o', markersize=6, linestyle='-', linewidth=2, color='purple', alpha=0.7, label=\"Sparrow\")  # Changed color to 'purple'\nl2, = ax.plot(df[\"Year\"], df[\"Eagle\"], marker='v', markersize=6, linestyle='--', linewidth=2, color='orange', alpha=0.7, label=\"Eagle\")  # Changed color to 'orange'\nl3, = ax.plot(df[\"Year\"], df[\"Swan\"], marker='s', markersize=6, linestyle='-.', linewidth=2, color='cyan', alpha=0.7, label=\"Swan\")  # Changed color to 'cyan'\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Birds')\nax.set_title('Number of Birds over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Sparrow', 'Eagle', 'Swan']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(),  # The color will automatically match the line color\n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Sparrow\"][i], (df[\"Year\"][i], df[\"Sparrow\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Eagle\"][i], (df[\"Year\"][i], df[\"Eagle\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Swan\"][i], (df[\"Year\"][i], df[\"Swan\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color to white\nax.set_facecolor('white')  # Changed background color to 'white'\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"myplot.png\")",
        "Instruction": "Adjust the marker size of the lines that contain the center point of the bounding box to 10.76. Additionally, set the picker state of those same lines to False.",
        "Input_image": "./test_dataset/Plot/Plot_d5c17757a9ddd8cb/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\n# Define the data\ndata = '''\\\nYear,Sparrow,Eagle,Swan\n2010,1500,2000,1800\n2011,1700,2100,2200\n2012,1650,3500,2200\n2013,1800,2100,4000\n2014,1900,2000,1800\n2015,1550,2200,2100\n2016,1750,4000,2200\n2017,1600,2150,1800\n'''\n\n# Read the data into a DataFrame\ndf = pd.read_csv(StringIO(data))\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Plot the data with updated colors\nl1, = ax.plot(df[\"Year\"], df[\"Sparrow\"], marker='o', markersize=10.76, linestyle='-', linewidth=2, color='purple', alpha=0.7, label=\"Sparrow\", picker=False)  # Changed color to 'purple'\nl2, = ax.plot(df[\"Year\"], df[\"Eagle\"], marker='v', markersize=6, linestyle='--', linewidth=2, color='orange', alpha=0.7, label=\"Eagle\")  # Changed color to 'orange'\nl3, = ax.plot(df[\"Year\"], df[\"Swan\"], marker='s', markersize=6, linestyle='-.', linewidth=2, color='cyan', alpha=0.7, label=\"Swan\")  # Changed color to 'cyan'\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Birds')\nax.set_title('Number of Birds over the Years')\n\n# Add a legend\nax.legend()\n\n# Annotate each line with the corresponding legend label\nfor line, name in zip(ax.lines, ['Sparrow', 'Eagle', 'Swan']):\n    y = line.get_ydata()[-1]\n    ax.annotate(name,\n                xy=(1,y),\n                xytext=(6,0), \n                xycoords = ax.get_yaxis_transform(), \n                textcoords=\"offset points\",\n                size=\"large\", \n                color=line.get_color(),  # The color will automatically match the line color\n                weight='bold')\n\n# Annotate data values above the point on the chart figure\nfor i in range(len(df[\"Year\"])):\n    ax.annotate(df[\"Sparrow\"][i], (df[\"Year\"][i], df[\"Sparrow\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Eagle\"][i], (df[\"Year\"][i], df[\"Eagle\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n    ax.annotate(df[\"Swan\"][i], (df[\"Year\"][i], df[\"Swan\"][i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\n\n# Add grid\nax.grid(True)\n\n# Set background color to white\nax.set_facecolor('white')  # Changed background color to 'white'\n\n# Adjust layout\nplt.tight_layout()\n\n# Save the figure\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_d5c17757a9ddd8cb/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_d5c17757a9ddd8cb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_d5c17757a9ddd8cb/myplot.png"
    },
    {
        "id": "Plot_60ed55b26a09d953",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\\\nTechnology,2017,2018,2019,2020,2021\nSmartphones,180,210,230,200,180\nDesktop Computers,150,100,90,95,100\nLaptops,100,120,110,130,110\nTablets,50,100,150,100,150\nSmart Watches,10,20,30,20,10\n\"\"\")\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\n# Updated color to shades of blue\ncolor = ['#003f5c', '#2f4b7c', '#665191', '#a05195', '#d45087']\nmarker = ['o', 'v', '^', '<', '>']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.', ':', '-']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Technology\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom', color=color[i])  # Text color also updated\n\n# Set the title and labels\nax.set_title(\"Usage of Different Technologies from 2017 to 2021\")\nax.set_xlabel(\"Technology\")\nax.set_ylabel(\"Usage\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot_blue_shades.png')",
        "Instruction": "Change the transparency of the line that contains the center point of the bounding box to 0.6534.",
        "Input_image": "./test_dataset/Plot/Plot_60ed55b26a09d953/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\\\nTechnology,2017,2018,2019,2020,2021\nSmartphones,180,210,230,200,180\nDesktop Computers,150,100,90,95,100\nLaptops,100,120,110,130,110\nTablets,50,100,150,100,150\nSmart Watches,10,20,30,20,10\n\"\"\")\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\n# Updated color to shades of blue\ncolor = ['#003f5c', '#2f4b7c', '#665191', '#a05195', '#d45087']\nmarker = ['o', 'v', '^', '<', '>']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.', ':', '-']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    if i == 2:  # Assuming we're modifying the third line (Laptops)\n        ax.plot(df[\"Technology\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n                marker=marker[i], markersize=markersize, alpha=0.6533829537304259, label=column)\n    else:\n        ax.plot(df[\"Technology\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n                marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(j, value, str(value), ha='center', va='bottom', color=color[i])  # Text color also updated\n\n# Set the title and labels\nax.set_title(\"Usage of Different Technologies from 2017 to 2021\")\nax.set_xlabel(\"Technology\")\nax.set_ylabel(\"Usage\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')\n",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_60ed55b26a09d953/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_60ed55b26a09d953/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_60ed55b26a09d953/myplot_blue_shades.png"
    },
    {
        "id": "Plot_43e19285dd7f6685",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = {\n    \"Disease\": [\"Malaria\", \"Tuberculosis\", \"HIV/AIDS\", \"Cancer\", \"Diabetes\", \"Heart Disease\", \"Stroke\", \"Respiratory Infections\", \"Hepatitis\"],\n    \"Prevalence\": [10, 8, 6, 9, 12, 15, 18, 22, 20],\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = 'green'  # Line color changed to green\nmarker = 'o'\nmarkersize = 7\nalpha = 0.8\nlinestyle = '-.'\n\n# Plot the line\nax.plot(df[\"Disease\"], df[\"Prevalence\"], color=color, linewidth=linewidth, linestyle=linestyle, \n        marker=marker, markersize=markersize, alpha=alpha, label=\"Prevalence\",\n        markeredgecolor='red', markerfacecolor='yellow')  # Marker edge color and face color changed\nfor j, value in enumerate(df[\"Prevalence\"]):\n    ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Prevalence of Diseases\")\nax.set_xlabel(\"Disease\")\nax.set_ylabel(\"Prevalence\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate the line at the end of the line with the corresponding legend label\ny = ax.lines[0].get_ydata()[-1]\nax.annotate(\"Prevalence\", xy=(1,y), xytext=(6,0), color=ax.lines[0].get_color(), \n            xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n            size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Change the marker face color of the lines that contain the center point of the bounding box to #797a08.",
        "Input_image": "./test_dataset/Plot/Plot_43e19285dd7f6685/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = {\n    \"Disease\": [\"Malaria\", \"Tuberculosis\", \"HIV/AIDS\", \"Cancer\", \"Diabetes\", \"Heart Disease\", \"Stroke\", \"Respiratory Infections\", \"Hepatitis\"],\n    \"Prevalence\": [10, 8, 6, 9, 12, 15, 18, 22, 20],\n}\n\ndf = pd.DataFrame(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 2.0\ncolor = 'green'  # Line color changed to green\nmarker = 'o'\nmarkersize = 7\nalpha = 0.8\nlinestyle = '-.'\n\n\n\n# Plot the line\nax.plot(df[\"Disease\"], df[\"Prevalence\"], color=color, linewidth=linewidth, linestyle=linestyle, \n        marker=marker, markersize=markersize, alpha=alpha, label=\"Prevalence\",\n        markerfacecolor=\"#797a08\", markeredgecolor='red')  # Marker edge color and face color changed\n\nfor j, value in enumerate(df[\"Prevalence\"]):\n        ax.text(j, value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Prevalence of Diseases\")\nax.set_xlabel(\"Disease\")\nax.set_ylabel(\"Prevalence\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate the line at the end of the line with the corresponding legend label\ny = ax.lines[0].get_ydata()[-1]\nax.annotate(\"Prevalence\", xy=(1,y), xytext=(6,0), color=ax.lines[0].get_color(), \n            xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n            size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Plot/Plot_43e19285dd7f6685/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_43e19285dd7f6685/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_43e19285dd7f6685/myplot.png"
    },
    {
        "id": "Plot_e4f6e3b04f1f8b0f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\n\n# Data\ndata = StringIO(\"\"\"\nPlant Species,Spring,Summer,Autumn,Winter\nRose,50,75,30,15\nSunflower,80,100,20,5\nMaple,30,50,70,40\nCactus,10,30,10,20\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['b', 'g', 'r', 'c', 'm']\nmarkers = ['.', 'o', 'v', '^', 's']\n\n# Plot\nfig, ax = plt.subplots()\nfor i in range(len(df)):\n    ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n            linestyle=choice(linestyles), \n            color=colors[i % len(colors)], \n            marker=markers[i % len(markers)], \n            markersize=10, \n            alpha=0.7, \n            label=df.loc[i, 'Plant Species'])\n\n    for j in range(1, len(df.columns)):\n        ax.annotate(df.loc[i, df.columns[j]], \n                    (df.columns[j], df.loc[i, df.columns[j]]))\n\nax.set_title('Plant Growth Over Seasons')\nax.set_xlabel('Season')\nax.set_ylabel('Growth')\nax.legend(title='Plant Species:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "To modify the plot, set the clip box for the portion at the center point of the bounding box using the coordinates (20, 240), a width of 787, and a height of 159, following the matplotlib transforms.Bbox format. Also, ensure the snap state for the same portion is set to True.",
        "Input_image": "./test_dataset/Plot/Plot_e4f6e3b04f1f8b0f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom random import choice\nfrom matplotlib.transforms import Bbox\n\n# Data\ndata = StringIO(\"\"\"\nPlant Species,Spring,Summer,Autumn,Winter\nRose,50,75,30,15\nSunflower,80,100,20,5\nMaple,30,50,70,40\nCactus,10,30,10,20\n\"\"\")\ndf = pd.read_csv(data)\n\n# Variables for variety\nlinestyles = ['-', '--', '-.', ':']\ncolors = ['b', 'g', 'r', 'c', 'm']\nmarkers = ['.', 'o', 'v', '^', 's']\n\n# Plot\nfig, ax = plt.subplots()\nclip_box = Bbox.from_bounds(20, 240, 787, 159)\nfor i in range(len(df)):\n    line, = ax.plot(df.columns[1:], df.loc[i, df.columns[1:]], \n            linestyle=choice(linestyles), \n            color=colors[i % len(colors)], \n            marker=markers[i % len(markers)], \n            markersize=10, \n            alpha=0.7, \n            label=df.loc[i, 'Plant Species'])\n    if i == 1:  # Apply clip box and snap state to specific line\n        line.set_clip_box(clip_box)\n        line.set_snap(True)\n    for j in range(1, len(df.columns)):\n        ax.annotate(df.loc[i, df.columns[j]], \n                    (df.columns[j], df.loc[i, df.columns[j]]))\n\nax.set_title('Plant Growth Over Seasons')\nax.set_xlabel('Season')\nax.set_ylabel('Growth')\nax.legend(title='Plant Species:')\nax.grid(True)\nfig.set_facecolor('lightgrey')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_e4f6e3b04f1f8b0f/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_e4f6e3b04f1f8b0f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_e4f6e3b04f1f8b0f/myplot.png"
    },
    {
        "id": "Plot_bb89f63f0a282634",
        "Input_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {\n    \"\": [\"Homecooked Meals\", \"Restaurant Meals\", \"Online Food Delivery\", \"Meal Kits\", \"Instant Meals\", \"Traditional Recipes\", \"Experimental Cooking\", \"Healthy Meals\"],\n    \"Prep Time\": [100, 65, 40, 85, 60, 120, 80, 95],\n    \"Cooking Time\": [75, 90, 55, 70, 85, 100, 60, 80],\n    \"Serving Size\": [80, 55, 60, 68, 75, 95, 70, 85]\n}\ndf = pd.DataFrame(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\n# Variables for line styles and colors\nline_styles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue', 'purple', 'cyan', 'magenta', 'yellow', 'orange']\n\n# Plotting each column with different style\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[column], linestyle=line_styles[i % len(line_styles)], color=colors[i % len(colors)], \n            linewidth=2, marker='o', markersize=5, alpha=0.7, label=column)\n\n# Adding title and labels\nax.set_title('Preparation and Serving Time for Different Meals')\nax.set_xlabel('Meal Types')\nax.set_ylabel('Time (minutes)')\n\n# Setting xticks\nax.set_xticks(np.arange(len(df[\"\"])))\nax.set_xticklabels(df[\"\"])\n\n# Setting the background color\nax.set_facecolor('lightgray')\n\n# Adding grid\nax.grid(True)\n\n# Adding legend\nax.legend()\n\n# Annotating each line\nfor i, txt in enumerate(df['Prep Time']):\n    ax.annotate('Prep Time', (i, txt), textcoords=\"offset points\", xytext=(10,10), ha='center')\nfor i, txt in enumerate(df['Cooking Time']):\n    ax.annotate('Cooking Time', (i, txt), textcoords=\"offset points\", xytext=(10,10), ha='center')\nfor i, txt in enumerate(df['Serving Size']):\n    ax.annotate('Serving Size', (i, txt), textcoords=\"offset points\", xytext=(10,10), ha='center')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the transparency of the line that contains the center point of the bounding box to 0.463 and set its linewidth to 2.2.",
        "Input_image": "./test_dataset/Plot/Plot_bb89f63f0a282634/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport pandas as pd\nimport numpy as np\n\n# Given data\ndata = {\n    \"\": [\"Homecooked Meals\", \"Restaurant Meals\", \"Online Food Delivery\", \"Meal Kits\", \"Instant Meals\", \"Traditional Recipes\", \"Experimental Cooking\", \"Healthy Meals\"],\n    \"Prep Time\": [100, 65, 40, 85, 60, 120, 80, 95],\n    \"Cooking Time\": [75, 90, 55, 70, 85, 100, 60, 80],\n    \"Serving Size\": [80, 55, 60, 68, 75, 95, 70, 85]\n}\ndf = pd.DataFrame(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\n# Variables for line styles and colors\nline_styles = ['-', '--', '-.', ':']\ncolors = ['red', 'green', 'blue', 'purple', 'cyan', 'magenta', 'yellow', 'orange']\n\n# Plotting each column with different style\nfor i, column in enumerate(df.columns[1:]):\n    if i == 1:\n        ax.plot(df[column], linestyle=line_styles[i % len(line_styles)], color=colors[i % len(colors)], \n                linewidth=2.2, marker='o', markersize=5, alpha=0.46301191249280654, label=column)\n    else:\n        ax.plot(df[column], linestyle=line_styles[i % len(line_styles)], color=colors[i % len(colors)], \n                linewidth=2, marker='o', markersize=5, alpha=0.7, label=column)\n\n# Adding title and labels\nax.set_title('Preparation and Serving Time for Different Meals')\nax.set_xlabel('Meal Types')\nax.set_ylabel('Time (minutes)')\n\n# Setting xticks\nax.set_xticks(np.arange(len(df[\"\"])))\nax.set_xticklabels(df[\"\"])\n\n# Setting the background color\nax.set_facecolor('lightgray')\n\n# Adding grid\nax.grid(True)\n\n# Adding legend\nax.legend()\n\n# Annotating each line\nfor i, txt in enumerate(df['Prep Time']):\n    ax.annotate('Prep Time', (i, txt), textcoords=\"offset points\", xytext=(10,10), ha='center')\nfor i, txt in enumerate(df['Cooking Time']):\n    ax.annotate('Cooking Time', (i, txt), textcoords=\"offset points\", xytext=(10,10), ha='center')\nfor i, txt in enumerate(df['Serving Size']):\n    ax.annotate('Serving Size', (i, txt), textcoords=\"offset points\", xytext=(10,10), ha='center')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_bb89f63f0a282634/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_bb89f63f0a282634/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_bb89f63f0a282634/myplot.png"
    },
    {
        "id": "Plot_9145016e502df807",
        "Input_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nPlatform,Year 1,Year 2,Year 3,Year 4,Year 5,Year 6,Year 7,Year 8,Year 9\nFacebook,5000,5500,3000,3500,4000,6000,6500,3000,3500\nTwitter,3000,3500,4000,3000,2500,2000,1500,1000,500\nInstagram,2000,4500,5000,5500,5000,4500,4000,8500,8000\nSnapchat,1000,2000,3000,2000,1000,800,600,400,200\nLinkedIn,2000,2500,3000,3500,4000,4500,5000,5500,6000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nplatforms = ['Facebook', 'Twitter', 'Instagram', 'Snapchat', 'LinkedIn']\n# Updated color palette for better contrast and visual appeal\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nlinestyles = ['-', '--', '-.', ':', '-']\nmarkers = ['o', 's', 'v', '^', 'd']\n\nfor i, platform in enumerate(platforms):\n    ax.plot(df.columns[1:], df.loc[i, df.columns[1:]],\n            marker=markers[i], color=colors[i], linestyle=linestyles[i], linewidth=2, markersize=6, alpha=0.7, label=platform)\n    for j, txt in enumerate(df.loc[i, df.columns[1:]]):\n        ax.annotate(txt, (df.columns[1:][j], txt))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Users')\nax.set_title('Number of Users per Social Media Platform Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Update the label of the lines that contain the center point of the bounding box to 'A new Label'. For these same lines, change the marker style to 'D'.",
        "Input_image": "./test_dataset/Plot/Plot_9145016e502df807/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Given data\ndata = StringIO(\"\"\"\nPlatform,Year 1,Year 2,Year 3,Year 4,Year 5,Year 6,Year 7,Year 8,Year 9\nFacebook,5000,5500,3000,3500,4000,6000,6500,3000,3500\nTwitter,3000,3500,4000,3000,2500,2000,1500,1000,500\nInstagram,2000,4500,5000,5500,5000,4500,4000,8500,8000\nSnapchat,1000,2000,3000,2000,1000,800,600,400,200\nLinkedIn,2000,2500,3000,3500,4000,4500,5000,5500,6000\n\"\"\")\ndf = pd.read_csv(data)\n\n# Plotting the data\nfig, ax = plt.subplots()\n\nplatforms = ['Facebook', 'Twitter', 'Instagram', 'Snapchat', 'LinkedIn']\n# Updated color palette for better contrast and visual appeal\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nlinestyles = ['-', '--', '-.', ':', '-']\nmarkers = ['o', 's', 'v', '^', 'd']\n\nfor i, platform in enumerate(platforms):\n    if i == 1:  # Target object\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]],\n                marker='D', color=colors[i], linestyle=linestyles[i], linewidth=2, markersize=6, alpha=0.7, label='A new Label')\n    else:\n        ax.plot(df.columns[1:], df.loc[i, df.columns[1:]],\n                marker=markers[i], color=colors[i], linestyle=linestyles[i], linewidth=2, markersize=6, alpha=0.7, label=platform)\n    for j, txt in enumerate(df.loc[i, df.columns[1:]]):\n        ax.annotate(txt, (df.columns[1:][j], txt))\n\nax.set_xlabel('Year')\nax.set_ylabel('Number of Users')\nax.set_title('Number of Users per Social Media Platform Over the Years')\nax.legend(loc='best')\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_9145016e502df807/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_9145016e502df807/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_9145016e502df807/myplot.png"
    },
    {
        "id": "Plot_9bb9f27b25c8b78f",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Earthquake,Tsunami,Hurricane\n2014,56,44,70\n2015,52,48,75\n2016,41,55,80\n2017,40,62,85\n2018,70,60,78\n2019,65,77,70\n2020,60,80,65\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\ncolor = ['red', 'blue', 'green']\nmarker = ['o', 'v', '^']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.']\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha, label=column)\n    for j, value in enumerate(df[column]):\n        ax.text(df[\"Year\"][j], value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Natural Disasters Over the Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number of Occurrences\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('myplot.png')",
        "Instruction": "Adjust the transparency of the lines associated with the center point of the bounding box to 0.88. Also, set the clipping box for these lines to a bounding box defined by the coordinates (386, 300) for the lower-left corner, with a width of 191 and a height of 623, as per the pattern of matplotlib.transforms.Bbox.",
        "Input_image": "./test_dataset/Plot/Plot_9bb9f27b25c8b78f/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom matplotlib.transforms import Bbox\n\n# The given data\ndata = StringIO(\"\"\"\nYear,Earthquake,Tsunami,Hurricane\n2014,56,44,70\n2015,52,48,75\n2016,41,55,80\n2017,40,62,85\n2018,70,60,78\n2019,65,77,70\n2020,60,80,65\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\n# Set the parameters\nlinewidth = 1.5\ncolor = ['red', 'blue', 'green']\nmarker = ['o', 'v', '^']\nmarkersize = 5\nalpha = 0.7\nlinestyle = ['-', '--', '-.']\n\n# Define the clip box\nclip_box = Bbox.from_bounds(386, 300, 191, 623)\n\n# Plot the lines\nfor i, column in enumerate(df.columns[1:]):\n    alpha_value = 0.88 if i == 1 else alpha  # Changed transparency for one line\n    line, = ax.plot(df[\"Year\"], df[column], color=color[i], linewidth=linewidth, linestyle=linestyle[i], \n            marker=marker[i], markersize=markersize, alpha=alpha_value, label=column)\n    if i == 1:  # Apply clip box to specific line\n        line.set_clip_box(clip_box)\n    for j, value in enumerate(df[column]):\n        ax.text(df[\"Year\"][j], value, str(value), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title(\"Natural Disasters Over the Years\")\nax.set_xlabel(\"Year\")\nax.set_ylabel(\"Number of Occurrences\")\nax.legend()\n\n# Add grid and set the background color\nax.grid(True)\nax.set_facecolor('lightgray')\n\n# Annotate each line at the end of the line with the corresponding legend label\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_9bb9f27b25c8b78f/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_9bb9f27b25c8b78f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_9bb9f27b25c8b78f/myplot.png"
    },
    {
        "id": "Plot_bdf08e07dc4cd92e",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = {\n    \"Rose\": [25, 30, 27, 40, 15],\n    \"Daisy\": [15, 18, 20, 22, 50],\n    \"Lily\": [10, 7, 5, 3, 25],\n    \"Sunflower\": [35, 38, 40, 42, 80],\n    \"Orchid\": [20, 45, 25, 50, 30]\n}\n\n# Define the x-axis values\nx = np.arange(5)\n\n# Define the line styles\nstyles = ['-', '--', '-.', ':', '-']\n\n# Create a new figure\nfig, ax = plt.subplots()\n\n# Plot each line\nfor i, (species, growth) in enumerate(data.items()):\n    ax.plot(x, growth, label=species, linestyle=styles[i], marker='o', markersize=5)\n\n# Set the chart title and labels\nax.set_title('Growth Patterns of Different Plant Species')\nax.set_xlabel('Time')\nax.set_ylabel('Growth')\n\n# Add a legend\nax.legend(loc='upper left')\n\n# Remove grid\nax.grid(False)  # Changed from True to False\n\n# Set background color to white\nax.set_facecolor('white')  # Changed from 'lightgray' to 'white'\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the color of the line that includes the center point of the bounding box to #182651.",
        "Input_image": "./test_dataset/Plot/Plot_bdf08e07dc4cd92e/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = {\n    \"Rose\": [25, 30, 27, 40, 15],\n    \"Daisy\": [15, 18, 20, 22, 50],\n    \"Lily\": [10, 7, 5, 3, 25],\n    \"Sunflower\": [35, 38, 40, 42, 80],\n    \"Orchid\": [20, 45, 25, 50, 30]\n}\n\n# Define the x-axis values\nx = np.arange(5)\n\n# Define the line styles\nstyles = ['-', '--', '-.', ':', '-']\n\n# Create a new figure\nfig, ax = plt.subplots()\n\n# Plot each line\nfor i, (species, growth) in enumerate(data.items()):\n    if species == 'Daisy':\n        ax.plot(x, growth, label=species, linestyle=styles[i], marker='o', markersize=5, color='#182651')\n    else:\n        ax.plot(x, growth, label=species, linestyle=styles[i], marker='o', markersize=5)\n\n# Set the chart title and labels\nax.set_title('Growth Patterns of Different Plant Species')\nax.set_xlabel('Time')\nax.set_ylabel('Growth')\n\n# Add a legend\nax.legend(loc='upper left')\n\n# Remove grid\nax.grid(False)  # Changed from True to False\n\n# Set background color to white\nax.set_facecolor('white')  # Changed from 'lightgray' to 'white'\n\n# Save the figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_bdf08e07dc4cd92e/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_bdf08e07dc4cd92e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_bdf08e07dc4cd92e/myplot.png"
    },
    {
        "id": "Plot_7df1cda18b363b67",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\ndata = StringIO(\"\"\"\nYear,Number of Migrants\n2000,1000000\n2001,950000\n2002,920000\n2003,1500000\n2004,1300000\n2005,1800000\n2006,1100000\n2007,1200000\n2008,900000\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nl1, = ax.plot(df[\"Year\"], df[\"Number of Migrants\"], linestyle='--', linewidth=2, color='blue', marker='o', markersize=10, alpha=0.7)\n\nax.legend([l1], ['Number of Migrants'], loc='upper right', shadow=True)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Migrants')\nax.set_title('Number of Migrants over Years')\n\n# Change the color of the grid to red\nax.grid(True, color='red')\n\nax.set_facecolor('lightgray')\n\n# annotate each line\nfor x, y in zip(df[\"Year\"], df[\"Number of Migrants\"]):\n    ax.text(x, y, 'Number of Migrants')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Change the clipping state of the plot that contains the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Plot/Plot_7df1cda18b363b67/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom io import StringIO\n\ndata = StringIO(\"\"\"\nYear,Number of Migrants\n2000,1000000\n2001,950000\n2002,920000\n2003,1500000\n2004,1300000\n2005,1800000\n2006,1100000\n2007,1200000\n2008,900000\n\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nl1, = ax.plot(df[\"Year\"], df[\"Number of Migrants\"], linestyle='--', linewidth=2, color='blue', marker='o', markersize=10, alpha=0.7)\nl1.set_clip_on(False)\n\nax.legend([l1], ['Number of Migrants'], loc='upper right', shadow=True)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Migrants')\nax.set_title('Number of Migrants over Years')\n\n# Change the color of the grid to red\nax.grid(True, color='red')\n\nax.set_facecolor('lightgray')\n\n# annotate each line\nfor x, y in zip(df[\"Year\"], df[\"Number of Migrants\"]):\n    ax.text(x, y, 'Number of Migrants')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "0",
        "Test_image": "./test_dataset/Plot/Plot_7df1cda18b363b67/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_7df1cda18b363b67/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_7df1cda18b363b67/myplot.png"
    },
    {
        "id": "Plot_d3d16e54f148c842",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"Month,Refrigerator,Washing Machine,Dishwasher,Air Conditioner\n1,100,80,60,100\n2,105,85,65,105\n3,110,95,70,50\n4,90,100,75,55\n5,95,120,80,60\n6,140,90,85,65\n7,150,70,90,70\n8,160,80,95,75\n9,100,90,100,80\n10,200,180,105,85\n11,210,190,110,90\n12,190,200,115,95\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(1, len(df[\"Month\"])+1)\n\nfor i in range(1, df.shape[1]):\n    line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle='--', linewidth=2, markersize=6, label=df.columns[i])\n    ax.text(len(x), df.iloc[-1, i], df.columns[i], ha='right')\n\nax.set_xlabel('Month')\nax.set_ylabel('Usage')\nax.set_title('Monthly Usage of Home Appliances')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"myplot.png\")",
        "Instruction": "Set the rasterized state of the plot that contains the center point of the bounding box to False. and for the same line: Set the snap state of it to the Target_object to False.",
        "Input_image": "./test_dataset/Plot/Plot_d3d16e54f148c842/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndata = StringIO(\"\"\"Month,Refrigerator,Washing Machine,Dishwasher,Air Conditioner\n1,100,80,60,100\n2,105,85,65,105\n3,110,95,70,50\n4,90,100,75,55\n5,95,120,80,60\n6,140,90,85,65\n7,150,70,90,70\n8,160,80,95,75\n9,100,90,100,80\n10,200,180,105,85\n11,210,190,110,90\n12,190,200,115,95\"\"\")\n\ndf = pd.read_csv(data)\n\nfig, ax = plt.subplots()\n\nx = np.arange(1, len(df[\"Month\"])+1)\n\nfor i in range(1, df.shape[1]):\n    line, = ax.plot(x, df.iloc[:, i], marker='o', linestyle='--', linewidth=2, markersize=6, label=df.columns[i])\n    ax.text(len(x), df.iloc[-1, i], df.columns[i], ha='right')\n    if i == 2:  # Apply changes to the third line (Washing Machine)\n        line.set_rasterized(False)\n        line.set_snap(False)\n\nax.set_xlabel('Month')\nax.set_ylabel('Usage')\nax.set_title('Monthly Usage of Home Appliances')\nax.legend(loc='upper right', shadow=True)\nax.set_xticks(x)\nax.grid(True)\nax.set_facecolor('lightgray')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Plot/Plot_d3d16e54f148c842/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_d3d16e54f148c842/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_d3d16e54f148c842/myplot.png"
    },
    {
        "id": "Plot_2bd71c870f620ee4",
        "Input_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {\n    \"Year\": [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    \"Sparrow\": [2000, 2100, 2150, 7000, 2200, 2250, 2300, 2350, 2400],\n    \"Hummingbird\": [1000, 3500, 3700, 4000, 4100, 8000, 4200, 4300, 4400],\n    \"Eagle\": [500, 450, 400, 350, 300, 250, 200, 150, 100]\n}\ndf = pd.DataFrame(data)\n\n# Plot\nfig, ax = plt.subplots()\n\nfor column in df.columns[1:]:\n    ax.plot(df['Year'], df[column], marker='o', linestyle=':', linewidth=2.0, label=column, alpha=0.7)\n    for x, y in zip(df['Year'], df[column]):\n        ax.text(x, y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Bird Population')\nax.set_title('Bird Population Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('myplot.png')",
        "Instruction": "Set the clipping state of the plot that contains the center point of the bounding box to True. Additionally, adjust the linewidth of that plot to 1.20 for the same lines.",
        "Input_image": "./test_dataset/Plot/Plot_2bd71c870f620ee4/Visual_figure.png",
        "Test_code": "from io import StringIO\nimport numpy as np\n\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data\ndata = {\n    \"Year\": [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020],\n    \"Sparrow\": [2000, 2100, 2150, 7000, 2200, 2250, 2300, 2350, 2400],\n    \"Hummingbird\": [1000, 3500, 3700, 4000, 4100, 8000, 4200, 4300, 4400],\n    \"Eagle\": [500, 450, 400, 350, 300, 250, 200, 150, 100]\n}\ndf = pd.DataFrame(data)\n\n# Plot\nfig, ax = plt.subplots()\n\nfor i, column in enumerate(df.columns[1:]):\n    linewidth = 1.20 if i == 1 else 2.0  # Changed linewidth for one line\n    ax.plot(df['Year'], df[column], marker='o', linestyle=':', linewidth=linewidth, label=column, alpha=0.7, clip_on=True)\n    for x, y in zip(df['Year'], df[column]):\n        ax.text(x, y, str(y))\n\n# Annotations\nfor line, name in zip(ax.lines, df.columns[1:]):\n    y = line.get_ydata()[-1]\n    ax.annotate(name, xy=(1,y), xytext=(6,0), color=line.get_color(), \n                xycoords = ax.get_yaxis_transform(), textcoords=\"offset points\",\n                size=14, va=\"center\")\n\nax.set_xlabel('Year')\nax.set_ylabel('Bird Population')\nax.set_title('Bird Population Over the Years')\nax.legend()\nax.grid(True)\nax.set_facecolor('gray')\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1",
        "Test_image": "./test_dataset/Plot/Plot_2bd71c870f620ee4/Edit_figure.png",
        "Masked_image": "./test_dataset/Plot/Plot_2bd71c870f620ee4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Plot/Plot_2bd71c870f620ee4/myplot.png"
    },
    {
        "id": "Histogram_bd6f114f6f46d632",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nsizes = [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0]\nfrequency = [30, 55, 48, 42, 38, 20, 15, 10, 5, 2]\n\n# Create histogram\nplt.hist(sizes, weights=frequency, bins=len(sizes), edgecolor='black')\n\n# Add labels and title\nplt.xlabel(\"Dust Particle Sizes in Micrometers\")\nplt.ylabel(\"Frequency of Dust Particles\")\nplt.title(\"Size distribution of cosmic dust particles in an interstellar cloud\")\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a stroke to the bars that contain the center point of the bounding box, setting the line width to 2.31 and the foreground color to #2d756c. Additionally, ensure the snap state of these bars is set to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_bd6f114f6f46d632/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Data\nsizes = [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0]\nfrequency = [30, 55, 48, 42, 38, 20, 15, 10, 5, 2]\n\n# Create histogram\nn, bins, patches = plt.hist(sizes, weights=frequency, bins=len(sizes), edgecolor='black')\n\n# Stroke effect\nstroke_effect = path_effects.withStroke(linewidth=2.314886360277401, foreground='#2d756c')\n\n# Apply modifications to selected bars\nfor patch in patches[1:3]:\n    patch.set_path_effects([stroke_effect])\n    patch.set_snap(False)\n\n# Add labels and title\nplt.xlabel(\"Dust Particle Sizes in Micrometers\")\nplt.ylabel(\"Frequency of Dust Particles\")\nplt.title(\"Size distribution of cosmic dust particles in an interstellar cloud\")\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,2",
        "Test_image": "./test_dataset/Histogram/Histogram_bd6f114f6f46d632/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_bd6f114f6f46d632/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_bd6f114f6f46d632/figure.png"
    },
    {
        "id": "Histogram_e31ed10e41aed586",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # Representative points for each bin (range)\ny = [15, 22, 30, 18, 12, 7, 5, 3, 2, 1] # Frequency of each range\n\n# Create bins for histogram\nbins = np.arange(11) - 0.5 # shifts the bins to left for correct alignment \n\n# Create histogram\nplt.hist(x, weights=y, bins=bins, edgecolor='black')\n\n# Add labels\nplt.xlabel('Growth Rate in cm/day')\nplt.ylabel('Frequency')\nplt.title('Distribution of Psychedelic Mushroom Growth Rates')\n\n# Make x-axis labels more readable\nplt.xticks(range(0, 10))\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, using a shadow offset of (2.59, 2.78) and a shadow color of gold. Also, update the facecolor of those same bars to #fc4dec.",
        "Input_image": "./test_dataset/Histogram/Histogram_e31ed10e41aed586/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Data\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # Representative points for each bin (range)\ny = [15, 22, 30, 18, 12, 7, 5, 3, 2, 1] # Frequency of each range\n\n# Create bins for histogram\nbins = np.arange(11) - 0.5 # shifts the bins to left for correct alignment \n\n# Create histogram\nn, bins, patches = plt.hist(x, weights=y, bins=bins, edgecolor='black')\n\n# Apply modifications to selected bars\nfor idx, patch in enumerate(patches):\n    if idx in [2, 4]:\n        patch.set_facecolor('#fc4dec')\n        patch.set_path_effects([SimplePatchShadow(offset=(2.59,2.78), shadow_rgbFace='gold'), Normal()])\n\n# Add labels\nplt.xlabel('Growth Rate in cm/day')\nplt.ylabel('Frequency')\nplt.title('Distribution of Psychedelic Mushroom Growth Rates')\n\n# Make x-axis labels more readable\nplt.xticks(range(0, 10))\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,4",
        "Test_image": "./test_dataset/Histogram/Histogram_e31ed10e41aed586/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_e31ed10e41aed586/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_e31ed10e41aed586/figure.png"
    },
    {
        "id": "Histogram_9c65bd9555565cf2",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for energy consumption levels and frequencies\nenergy_levels = ['100-500 GWh', '500-1000 GWh', '1000-1500 GWh', '1500-2000 GWh', '2000-2500 GWh']\nfrequencies = [20, 35, 25, 15, 10]\n\n# Plotting the histogram\nplt.bar(energy_levels, frequencies, color='blue')\n\n# Labeling the axes\nplt.xlabel('Energy Consumption Levels (GWh)', fontsize=12)\nplt.ylabel('Number of Countries', fontsize=12)\n\n# Setting the title\nplt.title('Energy Consumption Trends Over 10 Years', fontsize=16)\n\n# Rotating the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, using an offset of (2.50, 2.46) and a shadow color of gold. Also, change the line color of these bars to #b11a94.",
        "Input_image": "./test_dataset/Histogram/Histogram_9c65bd9555565cf2/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Data points for energy consumption levels and frequencies\nenergy_levels = ['100-500 GWh', '500-1000 GWh', '1000-1500 GWh', '1500-2000 GWh', '2000-2500 GWh']\nfrequencies = [20, 35, 25, 15, 10]\n\n# Plotting the histogram\nbars = plt.bar(energy_levels, frequencies, color='blue', edgecolor='black')\n\n# Applying shadow and linecolor effects to the target objects\nfor idx, bar in enumerate(bars):\n    if idx in [1,3]:\n        bar.set_path_effects([SimplePatchShadow(offset=(2.50,2.46), shadow_rgbFace='gold'), Normal()])\n        bar.set_edgecolor('#b11a94')\n\n# Labeling the axes\nplt.xlabel('Energy Consumption Levels (GWh)', fontsize=12)\nplt.ylabel('Number of Countries', fontsize=12)\n\n# Setting the title\nplt.title('Energy Consumption Trends Over 10 Years', fontsize=16)\n\n# Rotating the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_9c65bd9555565cf2/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_9c65bd9555565cf2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_9c65bd9555565cf2/figure.png"
    },
    {
        "id": "Histogram_c3635c9981790d92",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set intervals, must be the same amount of elements\ntemperature_intervals = [\"-2 to -1\",\"-1 to 0\",\"0 to 1\", \"1 to 2\", \"2 to 3\", \"3 to 4\", \"4 to 5\", \"5 to 6\"]\nintervals_freq = np.array([10, 15, 20, 30, 35, 25, 18, 12])\n\n# Preparing data for histogram\ntemp_data = []\nfor i, interval in enumerate(temperature_intervals):\n    lower, upper = map(float, interval.split(' to '))\n    temp_data.extend(list(np.random.uniform(lower, upper, intervals_freq[i])))\n\n# Create histogram\nplt.hist(temp_data, bins=len(temperature_intervals), edgecolor='black')\n\n# Set the labels and title\nplt.xlabel(\"Temperature Intervals (in Celsius)\")\nplt.ylabel(\"Frequency of Temperature Intervals\")\nplt.title(\"Ocean Temperature Variability in the Arctic Ocean\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a gold shadow effect to the bars that include the center point of the bounding box, with an offset of (2.12, 3.68). Also, show a annotation label for these bars using 'A new Label'.",
        "Input_image": "./test_dataset/Histogram/Histogram_c3635c9981790d92/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Set intervals, must be the same amount of elements\ntemperature_intervals = [\"-2 to -1\",\"-1 to 0\",\"0 to 1\", \"1 to 2\", \"2 to 3\", \"3 to 4\", \"4 to 5\", \"5 to 6\"]\nintervals_freq = np.array([10, 15, 20, 30, 35, 25, 18, 12])\n\n# Preparing data for histogram\ntemp_data = []\nfor i, interval in enumerate(temperature_intervals):\n    lower, upper = map(float, interval.split(' to '))\n    temp_data.extend(list(np.random.uniform(lower, upper, intervals_freq[i])))\n\n# Create histogram\nn, bins, patches = plt.hist(temp_data, bins=len(temperature_intervals), edgecolor='black')\n\n# Set the shadow effect and label for the selected bars\nfor idx, patch in enumerate(patches):\n    if idx in [1, 3]:  # Example indices for modification\n        patch.set_path_effects([SimplePatchShadow(offset=(2.12,3.68), shadow_rgbFace='gold'), Normal()])\n        plt.text(bins[idx], n[idx], 'A new Label', ha='center', va='bottom')\n\n# Set the labels and title\nplt.xlabel(\"Temperature Intervals (in Celsius)\")\nplt.ylabel(\"Frequency of Temperature Intervals\")\nplt.title(\"Ocean Temperature Variability in the Arctic Ocean\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_c3635c9981790d92/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_c3635c9981790d92/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_c3635c9981790d92/figure.png"
    },
    {
        "id": "Histogram_a2f8978da4e003ca",
        "Input_code": "# Necessary Libraries\nimport matplotlib.pyplot as plt\n\n# Data\nmolecular_weights = ['200-250', '251-300', '301-350', '351-400', '401-450', '451-500', '501-550']\nfrequencies = [15, 28, 42, 35, 18, 8, 4]\n\n# Plotting\nplt.figure(figsize=(10,6)) # Adjust size of plot as necessary\nplt.bar(molecular_weights, frequencies, color='blue', alpha=0.7)\n\n# Labels\nplt.xlabel('Molecular Weight Range')\nplt.ylabel('Frequency')\nplt.title('Histogram of Molecular Weights')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the fill color of the bars that contain the center point of the bounding box to a gradient from #c063ee to #e1d212 by order. Additionally, apply a soft glow effect to these bars with an intensity of 0.3577 and a glow color of '#0bf6ac'.",
        "Input_image": "./test_dataset/Histogram/Histogram_a2f8978da4e003ca/Visual_figure.png",
        "Test_code": "# Necessary Libraries\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Data\nmolecular_weights = ['200-250', '251-300', '301-350', '351-400', '401-450', '451-500', '501-550']\nfrequencies = [15, 28, 42, 35, 18, 8, 4]\n\n# Plotting\nplt.figure(figsize=(10,6)) # Adjust size of plot as necessary\nbars = plt.bar(molecular_weights, frequencies, color='blue', alpha=0.7)\n\n# Set the fill color of the bars to a gradient\ngradient = LinearSegmentedColormap.from_list('gradient', ['#c063ee', '#e1d212'])\nfor idx, bar in enumerate(bars):\n    if idx in {1, 3, 5}:\n        bar.set_color(gradient(idx / len(bars)))\n\n# Add a soft glow effect to the bars\nfor idx, bar in enumerate(bars):\n    if idx in {1, 3, 5}:\n        bar.set_alpha(0.35771072830821427)\n        bar.set_edgecolor('#0bf6ac')\n        bar.set_linewidth(2)\n\n# Labels\nplt.xlabel('Molecular Weight Range')\nplt.ylabel('Frequency')\nplt.title('Histogram of Molecular Weights')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3,5",
        "Test_image": "./test_dataset/Histogram/Histogram_a2f8978da4e003ca/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_a2f8978da4e003ca/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_a2f8978da4e003ca/figure.png"
    },
    {
        "id": "Histogram_14835ec7251a7dfd",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for survival outcomes and counts\nsurvival_outcomes = ['Survived', 'Did not survive']\ncounts = [342, 549]\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nax.bar(survival_outcomes, counts, color=['green','red'])\n\n# Labeling the axes\nplt.xlabel('Survival Outcomes')\nplt.ylabel('Count')\n\n# Setting the title\nplt.title('Survival Rate of Shipwreck Passengers')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the bars that contain the center point of the bounding box to False. Similarly, set the snap state of the corresponding bars to False as well.",
        "Input_image": "./test_dataset/Histogram/Histogram_14835ec7251a7dfd/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points for survival outcomes and counts\nsurvival_outcomes = ['Survived', 'Did not survive']\ncounts = [342, 549]\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nbars = ax.bar(survival_outcomes, counts, color=['green','red'])\n\n# Labeling the axes\nplt.xlabel('Survival Outcomes')\nplt.ylabel('Count')\n\n# Setting the title\nplt.title('Survival Rate of Shipwreck Passengers')\n\n# Modifying the animated and snap state of the first bar\nbars[0].set_animated(False)\nbars[0].set_snap(False)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Histogram/Histogram_14835ec7251a7dfd/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_14835ec7251a7dfd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_14835ec7251a7dfd/figure.png"
    },
    {
        "id": "Histogram_cf495e36a3e5e461",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points\nelevation_ranges = [\"-8000 to -6000\", \"-6000 to -4000\", \"-4000 to -2000\", \"-2000 to 0\", \"0 to 2000\", \"2000 to 4000\", \"4000 to 6000\", \"6000 to 8000\"]\nfrequency = [5, 12, 18, 22, 25, 20, 15, 8]\n\n# Convert elevation ranges to numeric mid-points for plotting\nelevation_midpoints = [-7000, -5000, -3000, -1000, 1000, 3000, 5000, 7000]\n\n# Plot histogram\nplt.figure(figsize=(10,6))\nplt.hist(elevation_midpoints, weights=frequency, bins=8, edgecolor='black', alpha=0.7)\n\n# Label axes and set the title\nplt.xlabel('Elevation Ranges (one unit in x-axis = 1000m interval)')\nplt.ylabel('Frequency of Elevation Ranges')\nplt.xticks(elevation_midpoints, elevation_ranges, rotation='vertical')\nplt.title('Moon Surface Elevation Analysis')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the bars that contain the center point of the bounding box to 0.5676, and fill them with a horizontal texture. Additionally, apply a frosted glass effect to these bars and reduce their transparency to 0.6887.",
        "Input_image": "./test_dataset/Histogram/Histogram_cf495e36a3e5e461/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\n# Data points\nelevation_ranges = [\"-8000 to -6000\", \"-6000 to -4000\", \"-4000 to -2000\", \"-2000 to 0\", \"0 to 2000\", \"2000 to 4000\", \"4000 to 6000\", \"6000 to 8000\"]\nfrequency = [5, 12, 18, 22, 25, 20, 15, 8]\n\n# Convert elevation ranges to numeric mid-points for plotting\nelevation_midpoints = [-7000, -5000, -3000, -1000, 1000, 3000, 5000, 7000]\n\n# Plot histogram\nplt.figure(figsize=(10,6))\nn, bins, patches = plt.hist(elevation_midpoints, weights=frequency, bins=8, edgecolor='black', alpha=0.7)\n\n# Target objects\nfor idx, patch in enumerate(patches):\n    if idx in {1, 3, 5}:\n        patch.set_alpha(0.5675630802065798)\n        patch.set_hatch('||')\n\n# Add a frosted glass effect to the bars in the histogram corresponding to the Target_object\nfor idx, patch in enumerate(patches):\n    if idx in {1, 3, 5}:\n        patch.set_alpha(0.6887072796663174)\n\n# Label axes and set the title\nplt.xlabel('Elevation Ranges (one unit in x-axis = 1000m interval)')\nplt.ylabel('Frequency of Elevation Ranges')\nplt.xticks(elevation_midpoints, elevation_ranges, rotation='vertical')\nplt.title('Moon Surface Elevation Analysis')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3,5",
        "Test_image": "./test_dataset/Histogram/Histogram_cf495e36a3e5e461/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_cf495e36a3e5e461/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_cf495e36a3e5e461/figure.png"
    },
    {
        "id": "Histogram_47cf4b5f080fbea8",
        "Input_code": "import matplotlib.pyplot as plt\n\n# X values: Frequency array (0 to 1.2 with a step size of 0.1)\nx_values = [i*0.1 for i in range(13)]\n\n# Y values: Corresponding frequencies mentioned \ny_values = [25, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85]\n\nplt.figure(figsize=(10, 5))  # Create a new figure with a specific size (optional)\n\n# Creating histogram using plt.hist() function\nplt.hist(x_values[:-1], \n         bins=x_values, \n         weights=y_values, \n         alpha=0.7, \n         color='blue', \n         edgecolor='black')\n\nplt.title('Distribution of Electron Densities in Molecular Structure') # Adding title to the plot\n\nplt.xlabel('Electron Density (e/\u00c5\u00b3)') # Adding x-label\nplt.ylabel('Frequency of Electron Densities') # Adding y-label\n\nplt.grid(True) # Adding a grid\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Stroke the bars that contain the center point of the bounding box, using an additional line with intensity of 2 and the color #757134. Additionally, set the bars' edge color to #857134.",
        "Input_image": "./test_dataset/Histogram/Histogram_47cf4b5f080fbea8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import withStroke\n# X values: Frequency array (0 to 1.2 with a step size of 0.1)\nx_values = [i*0.1 for i in range(13)]\n\n# Y values: Corresponding frequencies mentioned \ny_values = [25, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85]\n\nplt.figure(figsize=(10, 5))  # Create a new figure with a specific size (optional)\n\n# Creating histogram using plt.hist() function\nn, bins, patches = plt.hist(x_values[:-1], \n         bins=x_values, \n         weights=y_values, \n         alpha=0.7, \n         color='blue', \n         edgecolor='black')\n\n# Adding a soft glow effect to the bars in the histogram corresponding to the Target_object\nfor idx, patch in enumerate(plt.gca().patches):\n    if idx in {2, 5, 8}:\n        patch.set_path_effects([withStroke(linewidth=2, foreground='#757134')])\n        patch.set_edgecolor('#857134')\n        \n\n\nplt.title('Distribution of Electron Densities in Molecular Structure') # Adding title to the plot\n\nplt.xlabel('Electron Density (e/\u00c5\u00b3)') # Adding x-label\nplt.ylabel('Frequency of Electron Densities') # Adding y-label\n\nplt.grid(True) # Adding a grid\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,8",
        "Test_image": "./test_dataset/Histogram/Histogram_47cf4b5f080fbea8/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_47cf4b5f080fbea8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_47cf4b5f080fbea8/figure.png"
    },
    {
        "id": "Histogram_9750397774fbe172",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Genetic clustering scores dataset\nclustering_scores = [0.36, 0.75, 0.42, 0.91, 0.63, 0.28, 0.87, 0.54, 0.69, 0.81, 0.71, 0.59, 0.95, 0.44, 0.60, 0.59, 0.71, 0.23, 0.69, 0.54, 0.76, 0.67, 0.82, 0.97, 0.26, 0.64, 0.58, 0.56, 0.59, 0.88, 0.29, 0.30, 0.66, 0.53, 0.65, 0.72, 0.50, 0.78, 0.49, 0.73]\n\n# Creating histogram plot\nplt.hist(clustering_scores, bins=10, color='skyblue', edgecolor='black')\n\n# Add grid\nplt.grid(True)\n\n# Add labels and title\nplt.xlabel('Clustering Scores')\nplt.ylabel('Frequency')\nplt.title('Genetic Clustering Scores Distribution')\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the opacity of the bars that contain the center point of the bounding box to 0.5362, and apply a diagonal stripe pattern on them.",
        "Input_image": "./test_dataset/Histogram/Histogram_9750397774fbe172/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport matplotlib.patheffects as pe\n\n# Genetic clustering scores dataset\nclustering_scores = [0.36, 0.75, 0.42, 0.91, 0.63, 0.28, 0.87, 0.54, 0.69, 0.81, 0.71, 0.59, 0.95, 0.44, 0.60, 0.59, 0.71, 0.23, 0.69, 0.54, 0.76, 0.67, 0.82, 0.97, 0.26, 0.64, 0.58, 0.56, 0.59, 0.88, 0.29, 0.30, 0.66, 0.53, 0.65, 0.72, 0.50, 0.78, 0.49, 0.73]\n\n# Creating histogram plot\nplt.hist(clustering_scores, bins=10, color='skyblue', edgecolor='black')\n\n# Add grid\nplt.grid(True)\n\n# Add labels and title\nplt.xlabel('Clustering Scores')\nplt.ylabel('Frequency')\nplt.title('Genetic Clustering Scores Distribution')\n\n# Modify the opacity and overlay a diagonal stripe pattern for the bars corresponding to the Target_object\ntarget_indices = {2, 5, 7}\nopacity = 0.5362196456927101\nfor i, bar in enumerate(plt.gca().patches):\n    if i in target_indices:\n        bar.set_alpha(opacity)\n        bar.set_hatch('////')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_9750397774fbe172/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_9750397774fbe172/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_9750397774fbe172/figure.png"
    },
    {
        "id": "Histogram_d5af61e50af588fd",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# specify the data points\ndepth_ranges = ['0-5', '6-10', '11-15', '16-20', '21-25']\nfrequency = [12, 8, 15, 10, 5]\n\n# plot the histogram\nplt.figure(figsize=[10,8])\nplt.bar(depth_ranges, frequency, color='skyblue')\n\n# set plot title and labels\nplt.title('Distribution of Coral Species Within Different Depth Zones')\nplt.xlabel('Depth Ranges (in Meters)')\nplt.ylabel('Frequency of Coral Species')\n\n# display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Increase the height of the bars that include the center point of the bounding box to 1.4 times their original height.",
        "Input_image": "./test_dataset/Histogram/Histogram_d5af61e50af588fd/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# specify the data points\ndepth_ranges = ['0-5', '6-10', '11-15', '16-20', '21-25']\nfrequency = [12, 8, 15, 10, 5]\n\n# plot the histogram\nplt.figure(figsize=[10,8])\nbars = plt.bar(depth_ranges, frequency, color='skyblue')\n\n# set plot title and labels\nplt.title('Distribution of Coral Species Within Different Depth Zones')\nplt.xlabel('Depth Ranges (in Meters)')\nplt.ylabel('Frequency of Coral Species')\n\n# Increase the height of the bars in the histogram corresponding to the Target_object by 1.4 times their original height\ntarget_indices = {1, 3}\nfor i, bar in enumerate(plt.gca().patches):\n    if i in target_indices:\n        bar.set_height(bar.get_height() * 1.4)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_d5af61e50af588fd/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_d5af61e50af588fd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_d5af61e50af588fd/figure.png"
    },
    {
        "id": "Histogram_bbeb73fffd38ab13",
        "Input_code": "# Import required libraries\nimport matplotlib.pyplot as plt\n\n# Data points\nstar_formation_rates = [1.5, 2.3, 3.1, 4.0, 4.9, 5.8, 6.7, 7.6, 8.5, 9.4, 10.3, 11.2, 12.1, 13.0, 13.9, \n                        14.8, 15.7, 16.6, 17.5, 18.4, 19.3, 20.2, 21.1, 22.0, 22.9, 23.8, 24.7, 25.6, 26.5, 27.4]\n\n# Create the histogram\nplt.hist(star_formation_rates, bins=10, edgecolor='black')\n\n# Label the axes\nplt.xlabel('Star Formation Rate (Solar Masses per Year)')\nplt.ylabel('Number of Star Formation Regions')\n\n# Provide a title\nplt.title('Histogram: Distribution of Galactic Star Formation Regions')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box of the bars that contain the center point of the bounding box to a new bounding box defined by the coordinates (40, 243), with a width of 122 and a height of 836, using `matplotlib.transforms.Bbox`. Also, change the linestyle of these bars to 'dashdot'.",
        "Input_image": "./test_dataset/Histogram/Histogram_bbeb73fffd38ab13/Visual_figure.png",
        "Test_code": "# Import required libraries\nimport matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Data points\nstar_formation_rates = [1.5, 2.3, 3.1, 4.0, 4.9, 5.8, 6.7, 7.6, 8.5, 9.4, 10.3, 11.2, 12.1, 13.0, 13.9, \n                        14.8, 15.7, 16.6, 17.5, 18.4, 19.3, 20.2, 21.1, 22.0, 22.9, 23.8, 24.7, 25.6, 26.5, 27.4]\n\n# Create the histogram\nn, bins, patches = plt.hist(star_formation_rates, bins=10, edgecolor='black')\n\n# Set the clip box and linestyle for the first bar\nbbox = Bbox.from_bounds(40, 243, 122, 836)\npatches[0].set_clip_box(bbox)\npatches[0].set_linestyle('dashdot')\n\n# Label the axes\nplt.xlabel('Star Formation Rate (Solar Masses per Year)')\nplt.ylabel('Number of Star Formation Regions')\n\n# Provide a title\nplt.title('Histogram: Distribution of Galactic Star Formation Regions')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Histogram/Histogram_bbeb73fffd38ab13/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_bbeb73fffd38ab13/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_bbeb73fffd38ab13/figure.png"
    },
    {
        "id": "Histogram_456c5537f0563b7c",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Temperatures and Frequency \ntemp_intervals = ['5-8', '8-11', '11-14', '14-17', '17-20', '20-23', '23-26']\nfrequency = [12, 28, 42, 50, 38, 25, 10]\n\nplt.figure(figsize=(10, 6))  \nplt.hist(range(len(frequency)), weights=frequency, bins=7, alpha=0.75, color='steelblue',edgecolor='black')\n\n# Set x-axis labels as Temperature intervals\nplt.xticks(range(len(frequency)), temp_intervals)\n\n# xlabel and ylabel\nplt.xlabel('Temperature Intervals in \u00b0C')\nplt.ylabel('Frequency of Temperature Readings')\n\n# set a title \nplt.title('Ocean Currents and Marine Life Biodiversity')\n\n# display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box of the bars that contain the center point of the bounding box to a region defined by the top-left corner at (252, 172), with a width of 344 and a height of 752, using matplotlib.transforms.Bbox. Also, update the line color of the Target_object to #98a468.",
        "Input_image": "./test_dataset/Histogram/Histogram_456c5537f0563b7c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\n\n# Temperatures and Frequency \ntemp_intervals = ['5-8', '8-11', '11-14', '14-17', '17-20', '20-23', '23-26']\nfrequency = [12, 28, 42, 50, 38, 25, 10]\n\nplt.figure(figsize=(10, 6))  \nhist = plt.hist(range(len(frequency)), weights=frequency, bins=7, alpha=0.75, color='steelblue',edgecolor='black')\n\n# Set x-axis labels as Temperature intervals\nplt.xticks(range(len(frequency)), temp_intervals)\n\n# xlabel and ylabel\nplt.xlabel('Temperature Intervals in \u00b0C')\nplt.ylabel('Frequency of Temperature Readings')\n\n# set a title \nplt.title('Ocean Currents and Marine Life Biodiversity')\n\n# Set clip box and linecolor for the first bar\nfor idx,rect in enumerate(plt.gca().patches):\n    if idx in [1,2,3]:\n        rect.set_clip_box(mtransforms.Bbox.from_bounds(252, 172, 344, 752))\n        rect.set_edgecolor('#98a468')\n\n# display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,2,3",
        "Test_image": "./test_dataset/Histogram/Histogram_456c5537f0563b7c/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_456c5537f0563b7c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_456c5537f0563b7c/figure.png"
    },
    {
        "id": "Histogram_d479155f563a2a7b",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Combined box office earnings data\nearnings = [250, 400, 300, 500, 350, 150, 200, 300, 250, 400, 100, 150, 200, 250, 300, 300, 350, 400, 450, 500, 200, 250, 300, 350, 400]\n\n# Create the histogram\nplt.figure(figsize=(8, 6))\nplt.hist(earnings, bins=10, edgecolor='black')\nplt.xticks(range(0, 601, 100))  # Adjust the X-axis tick intervals as needed\nplt.xlabel('Box Office Earnings ($ millions)')\nplt.ylabel('Frequency')\nplt.title('Distribution of Box Office Earnings')\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a soft glow effect to the bars that contain the center point of the bounding box, with a glow intensity of 0.5866 and a color of '#a6ef8b'. Additionally, reduce the height of these bars to 60% of their original height.",
        "Input_image": "./test_dataset/Histogram/Histogram_d479155f563a2a7b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Combined box office earnings data\nearnings = [250, 400, 300, 500, 350, 150, 200, 300, 250, 400, 100, 150, 200, 250, 300, 300, 350, 400, 450, 500, 200, 250, 300, 350, 400]\n\n# Create the histogram\nplt.figure(figsize=(8, 6))\nn, bins, patches = plt.hist(earnings, bins=10, edgecolor='black')\nplt.xticks(range(0, 601, 100))  # Adjust the X-axis tick intervals as needed\nplt.xlabel('Box Office Earnings ($ millions)')\nplt.ylabel('Frequency')\nplt.title('Distribution of Box Office Earnings')\n\n# Add a soft glow effect to the bars in the histogram corresponding to the Target_object\nfor idx, patch in enumerate(patches):\n    if idx in {1, 3, 5}:\n        patch.set_alpha(0.5866029864914237)\n        patch.set_facecolor('#a6ef8b')\n\n# Reduce the height of the bars in the histogram corresponding to the Target_object by 0.6 times their original height\nfor idx, patch in enumerate(patches):\n    if idx in {1, 3, 5}:\n        patch.set_height(patch.get_height() * 0.6)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3,5",
        "Test_image": "./test_dataset/Histogram/Histogram_d479155f563a2a7b/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_d479155f563a2a7b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_d479155f563a2a7b/figure.png"
    },
    {
        "id": "Histogram_4d5125c5d566d8fb",
        "Input_code": "# importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Satisfaction levels (mid-point of each range)\nsatisfaction_levels = [10, 30, 50, 70, 90]\n\n# Number of employees in each satisfaction level\nemployees = [10, 25, 50, 75, 30]\n\nplt.figure(figsize=(10, 6)) # Set the figure size\nplt.bar(satisfaction_levels, employees, width=15, color='skyblue', edgecolor='black') # Plot the data\nplt.title('Employee Satisfaction Levels Over Time') # Set the plot title\nplt.xlabel('Satisfaction Level (%)') # Set the x-axis label\nplt.ylabel('Number of Employees') # Set the y-axis label\n\n# Customize x-axis ticks\nplt.xticks([10, 30, 50, 70, 90], ['0-20%', '20-40%', '40-60%', '60-80%', '80-100%'])\n\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the linestyle of the bars that contain the center point of the bounding box to '--'.",
        "Input_image": "./test_dataset/Histogram/Histogram_4d5125c5d566d8fb/Visual_figure.png",
        "Test_code": "# importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Satisfaction levels (mid-point of each range)\nsatisfaction_levels = [10, 30, 50, 70, 90]\n\n# Number of employees in each satisfaction level\nemployees = [10, 25, 50, 75, 30]\n\nplt.figure(figsize=(10, 6)) # Set the figure size\nbars = plt.bar(satisfaction_levels, employees, width=15, color='skyblue', edgecolor='black') # Plot the data\nplt.title('Employee Satisfaction Levels Over Time') # Set the plot title\nplt.xlabel('Satisfaction Level (%)') # Set the x-axis label\nplt.ylabel('Number of Employees') # Set the y-axis label\n\n# Customize x-axis ticks\nplt.xticks([10, 30, 50, 70, 90], ['0-20%', '20-40%', '40-60%', '60-80%', '80-100%'])\n\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_linestyle('--')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_4d5125c5d566d8fb/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_4d5125c5d566d8fb/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_4d5125c5d566d8fb/figure.png"
    },
    {
        "id": "Histogram_65592c7c8dd17f12",
        "Input_code": "# Necessary libraries\nimport matplotlib.pyplot as plt\n\n# Data\nice_thickness = [1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.2, 4.5, 4.8, 5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9, 7.2, 7.5, 7.8, 8.1, 8.4, 8.7, 9.0, 9.3, 9.6, 9.9]\nfrequency = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n\n# Creating Histogram\nplt.hist(ice_thickness, weights=frequency, bins=20, alpha=0.7, color='b')\n\n# Labels and Title\nplt.title('Arctic Ice Thickness Over the Past Decade')\nplt.xlabel('Ice Thickness (meters)')\nplt.ylabel('Frequency of Measurements')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the line width of the histogram that contains the center point of the bounding box to 2.27 and set its visibility to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_65592c7c8dd17f12/Visual_figure.png",
        "Test_code": "# Necessary libraries\nimport matplotlib.pyplot as plt\n\n# Data\nice_thickness = [1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.2, 4.5, 4.8, 5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9, 7.2, 7.5, 7.8, 8.1, 8.4, 8.7, 9.0, 9.3, 9.6, 9.9]\nfrequency = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n\n# Creating Histogram\nn, bins, patches = plt.hist(ice_thickness, weights=frequency, bins=20, alpha=0.7, color='b')\n\n# Modifying specific bars\nfor i in [5, 10, 15]:  # Example indices\n    patches[i].set_linewidth(2.27)\n    patches[i].set_visible(False)\n\n# Labels and Title\nplt.title('Arctic Ice Thickness Over the Past Decade')\nplt.xlabel('Ice Thickness (meters)')\nplt.ylabel('Frequency of Measurements')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "5,10,15",
        "Test_image": "./test_dataset/Histogram/Histogram_65592c7c8dd17f12/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_65592c7c8dd17f12/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_65592c7c8dd17f12/figure.png"
    },
    {
        "id": "Histogram_2c384439cbb4ec32",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\nminerals = ['Silica', 'Iron Oxide', 'Aluminum Oxide', 'Calcium Sulfate', 'Magnesium Oxide']\nfrequency = [43, 29, 18, 35, 22]\n\n# Creating an array with indices of mineral types\nx = np.arange(len(minerals))\n\n# Creating the histogram\nplt.bar(x, frequency, align='center', alpha=0.7)\n\n# Adding labels\nplt.xlabel('Mineral Types')\nplt.ylabel('Frequency of Mineral Occurrence')\nplt.title('Martian Soil Composition Analysis')\n\n# Displaying mineral names on the x-axis\nplt.xticks(x, minerals)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the bars that contain the center point of the bounding box to #b89d41.",
        "Input_image": "./test_dataset/Histogram/Histogram_2c384439cbb4ec32/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\nminerals = ['Silica', 'Iron Oxide', 'Aluminum Oxide', 'Calcium Sulfate', 'Magnesium Oxide']\nfrequency = [43, 29, 18, 35, 22]\n\n# Creating an array with indices of mineral types\nx = np.arange(len(minerals))\n\n# Creating the histogram\nbars = plt.bar(x, frequency, align='center', alpha=0.7)\n\n# Adding labels\nplt.xlabel('Mineral Types')\nplt.ylabel('Frequency of Mineral Occurrence')\nplt.title('Martian Soil Composition Analysis')\n\n# Displaying mineral names on the x-axis\nplt.xticks(x, minerals)\n\n# Set the linecolor of the object corresponding to the Target_object to #b89d41\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_edgecolor('#b89d41')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_2c384439cbb4ec32/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_2c384439cbb4ec32/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_2c384439cbb4ec32/figure.png"
    },
    {
        "id": "Histogram_48f3b80ea6a8bef8",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nstress_levels = ['Low (0-3)', 'Moderate (4-7)', 'High (8-10)']\nfrequencies = [10, 25, 15]\n\n# Create histogram\nplt.bar(stress_levels, frequencies, color = ['green', 'yellow', 'red'])\n\n# Add title and labels\nplt.title('Distribution of Exam Stress Levels Among Students')\nplt.xlabel('Stress Levels')\nplt.ylabel('Number of Students')\n\n# Show Plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the xlabel of the bars that contain the center point of the bounding box to 'A new Label' and set their rasterized state to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_48f3b80ea6a8bef8/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nstress_levels = ['Low (0-3)', 'Moderate (4-7)', 'High (8-10)']\nfrequencies = [10, 25, 15]\nnew_stress_levels=['Low (0-3)', 'A new Label', 'High (8-10)']\n# Create histogram\nbars = plt.bar(new_stress_levels, frequencies, color = ['green', 'yellow', 'red'])\n\n# Modify the label and rasterized state of the target object\nfor idx, bar in enumerate(bars):\n    if idx == 1:  \n        bar.set_rasterized(False)\n\n# Add title and labels\nplt.title('Distribution of Exam Stress Levels Among Students')\nplt.xlabel('Stress Levels')\nplt.ylabel('Number of Students')\n\n# Show Plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1",
        "Test_image": "./test_dataset/Histogram/Histogram_48f3b80ea6a8bef8/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_48f3b80ea6a8bef8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_48f3b80ea6a8bef8/figure.png"
    },
    {
        "id": "Histogram_0971509e938bdf0c",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# x: Luminosity levels ranges, y: Frequencies\nx = ['100-150', '151-200', '201-250', '251-300', '301-350']\ny = [5, 12, 8, 4, 3]\n\n# Convert the x ranges to midpoints for better representation on histogram\nx_midpoints = [(int(range.split('-')[0]) + int(range.split('-')[1])) / 2 for range in x]\nx_tick_locations = np.arange(len(x))\n\n# Creating the histogram\nplt.bar(x_tick_locations, y, align='center')\n\n# Setting x-ticks to represent ranges\nplt.xticks(x_tick_locations, x)\n\n# Labels and title\nplt.xlabel('Luminosity Level Ranges')\nplt.ylabel('Frequency of Luminosity Observations')\nplt.title('Histogram of Firework Display Luminosity in Different Galaxies')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Modify the histogram by adding a stroke to the bars that contain the center point of the bounding box, with a linewidth of 4.04 and a foreground color of #d8e521. Also, make sure to disable the rasterized state for these bars.",
        "Input_image": "./test_dataset/Histogram/Histogram_0971509e938bdf0c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as path_effects\n\n# x: Luminosity levels ranges, y: Frequencies\nx = ['100-150', '151-200', '201-250', '251-300', '301-350']\ny = [5, 12, 8, 4, 3]\n\n# Convert the x ranges to midpoints for better representation on histogram\nx_midpoints = [(int(range.split('-')[0]) + int(range.split('-')[1])) / 2 for range in x]\nx_tick_locations = np.arange(len(x))\n\n# Creating the histogram\nbars = plt.bar(x_tick_locations, y, align='center')\n\n# Setting x-ticks to represent ranges\nplt.xticks(x_tick_locations, x)\n\n# Labels and title\nplt.xlabel('Luminosity Level Ranges')\nplt.ylabel('Frequency of Luminosity Observations')\nplt.title('Histogram of Firework Display Luminosity in Different Galaxies')\n\n# Apply stroke effect and set rasterized state to False for selected bars\nstroke_effect = path_effects.withStroke(linewidth=4.0366243179288865, foreground='#d8e521')\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_path_effects([stroke_effect])\n        bar.set_rasterized(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_0971509e938bdf0c/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_0971509e938bdf0c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_0971509e938bdf0c/figure.png"
    },
    {
        "id": "Histogram_0176b10abb3580a5",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ngenres = ['Pop', 'Rock', 'Hip-Hop', 'Electronic', 'Country', 'R&B', 'Jazz', 'Reggae', 'Classical', 'Alternative']\ncount = [150, 120, 80, 60, 40, 30, 20, 10, 5, 5]\n\n# Create histogram\nplt.figure(figsize=(10,6))\nplt.bar(genres, count, color='blue', alpha=0.7)\n\n# Set title and labels\nplt.title('Distribution of Music Genres')\nplt.xlabel('Music Genres')\nplt.ylabel('Number of Songs')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the xlabel of the bars that contain the center point of the bounding box to 'A new Label'. Also, set the picking state of these bars to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_0176b10abb3580a5/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ngenres = ['Pop', 'Rock', 'Hip-Hop', 'Electronic', 'Country', 'R&B', 'Jazz', 'Reggae', 'Classical', 'Alternative']\ncount = [150, 120, 80, 60, 40, 30, 20, 10, 5, 5]\ntarget_indices=[2]\nnew_genres=[lable if idx not in target_indices else 'A new Label' for idx,lable in enumerate(genres)]\n# Create histogram\nplt.figure(figsize=(10,6))\nbars = plt.bar(new_genres, count, color='blue', alpha=0.7)\n\n# Set title and labels\nplt.title('Distribution of Music Genres')\nplt.xlabel('Music Genres')\nplt.ylabel('Number of Songs')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Modify the label and picker state of the target object\nfor idx, bar in enumerate(bars):\n    if idx in [2]:  # Targeting Hip-Hop and R&B\n        bar.set_picker(False)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Histogram/Histogram_0176b10abb3580a5/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_0176b10abb3580a5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_0176b10abb3580a5/figure.png"
    },
    {
        "id": "Histogram_3b7488808e49ac2f",
        "Input_code": "import matplotlib.pyplot as plt\n\n#Given data\nelevation_ranges = ['1000-1100', '1100-1200', '1200-1300', '1300-1400', '1400-1500', '1500-1600', '1600-1700', '1700-1800']\nfrequency_samples = [12, 18, 25, 30, 28, 20, 15, 10]\n\n# Creating the histogram\nplt.figure(figsize=(10,6)) # To make sure the labels are readable\nplt.bar(elevation_ranges, frequency_samples, color='green', alpha=0.7)\n\n# Let's set up titles and labels\nplt.title('Alien Planet Terrain Elevation Analysis')\nplt.xlabel('Elevation Ranges (in meters)')\nplt.ylabel('Frequency of Terrain Samples')\n\n# Displaying the histogram\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, using a gray color with an offset of (2.97, 3.56) units. Also, enable the animated state for these bars.",
        "Input_image": "./test_dataset/Histogram/Histogram_3b7488808e49ac2f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n#Given data\nelevation_ranges = ['1000-1100', '1100-1200', '1200-1300', '1300-1400', '1400-1500', '1500-1600', '1600-1700', '1700-1800']\nfrequency_samples = [12, 18, 25, 30, 28, 20, 15, 10]\n\n# Creating the histogram\nplt.figure(figsize=(10,6)) # To make sure the labels are readable\nbars = plt.bar(elevation_ranges, frequency_samples, color='green', alpha=0.7)\n\n# Applying shadow effect and setting animated state for selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_path_effects([SimplePatchShadow(offset=(2.97,3.56), shadow_rgbFace='gray'), Normal()])\n        bar.set_animated(True)\n\n# Let's set up titles and labels\nplt.title('Alien Planet Terrain Elevation Analysis')\nplt.xlabel('Elevation Ranges (in meters)')\nplt.ylabel('Frequency of Terrain Samples')\n\n# Displaying the histogram\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_3b7488808e49ac2f/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_3b7488808e49ac2f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_3b7488808e49ac2f/figure.png"
    },
    {
        "id": "Histogram_5d6c3249a2baf9ce",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Crater Depths (m)\ndepths = [103, 117, 126, 139, 147, 155, 162, 175, 182, 194, 206, 215, 223, 236, 244, 253, 262, 279,\n          288, 297, 306, 312, 325, 334, 345, 356, 363, 375, 384, 392, 403, 414, 423, 435, 446, 456,\n          463, 475, 484, 495, 506, 517, 525, 536, 546, 553, 565, 576, 584, 595, 606, 617, 624, 636]\n\n# Create the Histogram\nplt.hist(depths, bins='auto', color='#0504aa', alpha=0.7, rwidth=0.85)\n\n# Label the plot\nplt.grid(axis='y', alpha=0.75)\nplt.xlabel('Crater Depth (m)')\nplt.ylabel('Frequency')\nplt.title('Distribution of Crater Depths on Martian Surface')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the bars that contain the center point of the bounding box to #ba5184, and set their line color to #53f154.",
        "Input_image": "./test_dataset/Histogram/Histogram_5d6c3249a2baf9ce/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Crater Depths (m)\ndepths = [103, 117, 126, 139, 147, 155, 162, 175, 182, 194, 206, 215, 223, 236, 244, 253, 262, 279,\n          288, 297, 306, 312, 325, 334, 345, 356, 363, 375, 384, 392, 403, 414, 423, 435, 446, 456,\n          463, 475, 484, 495, 506, 517, 525, 536, 546, 553, 565, 576, 584, 595, 606, 617, 624, 636]\n\n# Create the Histogram\nn, bins, patches = plt.hist(depths, bins='auto', color='#0504aa', alpha=0.7, rwidth=0.85)\n\n# Modify specific bars\nfor i in range(len(patches)):\n    if i in [5, 10, 15]:  # Example indices to modify\n        patches[i].set_facecolor('#ba5184')\n        patches[i].set_edgecolor('#53f154')\n\n# Label the plot\nplt.grid(axis='y', alpha=0.75)\nplt.xlabel('Crater Depth (m)')\nplt.ylabel('Frequency')\nplt.title('Distribution of Crater Depths on Martian Surface')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "5,10,15",
        "Test_image": "./test_dataset/Histogram/Histogram_5d6c3249a2baf9ce/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_5d6c3249a2baf9ce/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_5d6c3249a2baf9ce/figure.png"
    },
    {
        "id": "Histogram_a70dacc8e9085f62",
        "Input_code": "# First, we import the necessary library for data visualization - matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\n# Next, we establish our data. \n# The depths of the underwater features (our bins for the histogram) are stored in bin_ranges.\n# The corresponding frequencies of these depth measurements are stored in frequency.\nbin_ranges = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\nfrequency = [15, 23, 32, 27, 18, 12, 8, 5, 2]\n\n# We then create a new figure for the plot with a specified size.\nplt.figure(figsize=(10, 6))\n\n# The hist() function is called to create the histogram. \n# We use the bin_ranges (minus the last item) as the data, the full bin_ranges for the bins, and the corresponding frequencies as the weights.\n# The edgecolor parameter sets the color of the line between bins, and the alpha parameter sets the transparency.\nplt.hist(bin_ranges[:-1], bins=bin_ranges, weights=frequency, edgecolor='black', alpha=0.7)\n\n# We label our x and y-axes and give our histogram a title.\nplt.xlabel('Depth of underwater features (meters)')\nplt.ylabel('Frequency of Depth Measurements')\nplt.title('Histogram of Seafloor Mapping Sonar Data')\n\n# Finally, we insert a grid for easier visualization and display the plot.\nplt.grid(axis='y', linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the fill color of the bars that contain the center point of the bounding box to a gradient that transitions from #988ebc to #91163e. Set their transparency to 0.765 and add a dotted texture.",
        "Input_image": "./test_dataset/Histogram/Histogram_a70dacc8e9085f62/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\nbin_ranges = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\nfrequency = [15, 23, 32, 27, 18, 12, 8, 5, 2]\n\nplt.figure(figsize=(10, 6))\n\n# Create the histogram\nn, bins, patches = plt.hist(bin_ranges[:-1], bins=bin_ranges, weights=frequency, edgecolor='black', alpha=0.7)\n\n# Define the gradient\ncmap = LinearSegmentedColormap.from_list('custom_gradient', ['#988ebc', '#91163e'])\n\n# Apply modifications to the target objects\nfor idx, patch in enumerate(patches):\n    if idx in {2, 5}:\n        # Set gradient fill color\n        patch.set_facecolor(cmap(idx / len(patches)))\n        # Set transparency\n        patch.set_alpha(0.7659923375570998)\n        # Set dotted texture\n        patch.set_hatch('..')\n\nplt.xlabel('Depth of underwater features (meters)')\nplt.ylabel('Frequency of Depth Measurements')\nplt.title('Histogram of Seafloor Mapping Sonar Data')\nplt.grid(axis='y', linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Histogram/Histogram_a70dacc8e9085f62/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_a70dacc8e9085f62/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_a70dacc8e9085f62/figure.png"
    },
    {
        "id": "Histogram_448617d85610bca8",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data points\nstar_cluster_density = np.array([5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\nfrequency_of_sectors = np.array([12, 18, 25, 30, 22, 15, 10, 8, 4, 2])\n\n# Create bins for histogram\nbins = np.linspace(star_cluster_density.min(), star_cluster_density.max(), 10)\n\n# Create histogram\nplt.hist(star_cluster_density, bins, weights=frequency_of_sectors, alpha=0.7, color='skyblue', edgecolor='black')\n\n# Plot labels and title\nplt.xlabel('Star Cluster Density (clusters per square kiloparsec)')\nplt.ylabel('Frequency of Galactic Sectors')\nplt.title('Density of Massive Star Clusters Along the Galactic Spiral Arms')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the bars that contain the center point of the bounding box to False. Also, change the snap state of those bars to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_448617d85610bca8/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data points\nstar_cluster_density = np.array([5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\nfrequency_of_sectors = np.array([12, 18, 25, 30, 22, 15, 10, 8, 4, 2])\n\n# Create bins for histogram\nbins = np.linspace(star_cluster_density.min(), star_cluster_density.max(), 10)\n\n# Create histogram\nn, bins, patches = plt.hist(star_cluster_density, bins, weights=frequency_of_sectors, alpha=0.7, color='skyblue', edgecolor='black')\n\n# Modify the clipping and snap state of the selected bars\nfor patch in patches:\n    patch.set_clip_on(False)\n    patch.set_snap(False)\n\n# Plot labels and title\nplt.xlabel('Star Cluster Density (clusters per square kiloparsec)')\nplt.ylabel('Frequency of Galactic Sectors')\nplt.title('Density of Massive Star Clusters Along the Galactic Spiral Arms')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,1,2,3,4,5,6,7,8,9",
        "Test_image": "./test_dataset/Histogram/Histogram_448617d85610bca8/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_448617d85610bca8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_448617d85610bca8/figure.png"
    },
    {
        "id": "Histogram_9b555b7c30c09bd2",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nx = [\"400-425\", \"425-450\", \"450-475\", \"475-500\", \"500-525\", \"525-550\", \"550-575\", \"575-600\", \"600-625\", \"625-650\"]\ny = [15, 18, 22, 28, 32, 35, 30, 25, 20, 18]\n\n# Generate the histogram\nplt.bar(x, y, color='blue', alpha=0.7)\n\n# Set the title and labels\nplt.title('Colorful Interstellar Nebulae Formation Patterns')\nplt.xlabel('Color Wavelength Ranges (in nanometers)')\nplt.ylabel('Frequency of Color Wavelengths')\n\n# Show the figure with homogeneously distributed color bars\nplt.xticks(rotation='vertical')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the histogram that contains the center point of the bounding box to False, and also make the visibility of that histogram False.",
        "Input_image": "./test_dataset/Histogram/Histogram_9b555b7c30c09bd2/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nx = [\"400-425\", \"425-450\", \"450-475\", \"475-500\", \"500-525\", \"525-550\", \"550-575\", \"575-600\", \"600-625\", \"625-650\"]\ny = [15, 18, 22, 28, 32, 35, 30, 25, 20, 18]\n\n# Generate the histogram\nbars = plt.bar(x, y, color='blue', alpha=0.7)\n\n# Set the title and labels\nplt.title('Colorful Interstellar Nebulae Formation Patterns')\nplt.xlabel('Color Wavelength Ranges (in nanometers)')\nplt.ylabel('Frequency of Color Wavelengths')\n\n# Modify the animated state and visibility of the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [2, 5]:\n        bar.set_animated(False)\n        bar.set_visible(False)\n\n# Show the figure with homogeneously distributed color bars\nplt.xticks(rotation='vertical')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Histogram/Histogram_9b555b7c30c09bd2/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_9b555b7c30c09bd2/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_9b555b7c30c09bd2/figure.png"
    },
    {
        "id": "Histogram_feb8bd885212c71b",
        "Input_code": "# Start by importing necessary libraries for data visualization \nimport matplotlib.pyplot as plt \n\n# Set the data points\ndata = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150]\n\n# Create the histogram using the hist() function\nplt.hist(data, bins=10, edgecolor='black') \n\n# Set the title and labels \nplt.title('Distribution of Twilight Transition Times') \nplt.xlabel('Time Interval (Minutes)') \nplt.ylabel('Frequency') \n\n# Show the plot \nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Lower the height of the bars that contain the center point of the bounding box to 70% of their original height. Also, change their fill color to a gradient that transitions from #1b848d to #85235c in order.",
        "Input_image": "./test_dataset/Histogram/Histogram_feb8bd885212c71b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Set the data points\ndata = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150]\n\n# Create the histogram using the hist() function\nn, bins, patches = plt.hist(data, bins=10, edgecolor='black')\n\n# Define the gradient\ncmap = LinearSegmentedColormap.from_list('gradient', ['#1b848d', '#85235c'])\n\n# Select target objects randomly\ntarget_objects = [2, 5, 7]\n\n# Reduce the height of the bars in the histogram corresponding to the Target_object by 0.7 times their original height\nfor idx in target_objects:\n    patches[idx].set_height(patches[idx].get_height() * 0.7)\n\n# Set the fill color of the bars in the histogram corresponding to the Target_object to a gradient transitioning from #1b848d to #85235c\nfor idx in target_objects:\n    patches[idx].set_facecolor(cmap(idx / len(patches)))\n\n# Set the title and labels\nplt.title('Distribution of Twilight Transition Times')\nplt.xlabel('Time Interval (Minutes)')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_feb8bd885212c71b/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_feb8bd885212c71b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_feb8bd885212c71b/figure.png"
    },
    {
        "id": "Histogram_8d38df4103c8520f",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt \n\n# Temperature Intervals\ntemp_intervals = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]\n\n# Frequencies\nfrequencies = [5, 9, 14, 18, 20, 16, 12, 8, 6, 2]\n\n# Plot Histogram using the plt.hist() method\nplt.figure(figsize=(10, 6)) # Setting the figure size\nplt.hist(temp_intervals, weights=frequencies, bins=len(temp_intervals), color='blue', edgecolor='black') \n\n# Setting the chart title and labels\nplt.title('Distribution of Fluid Temperature levels in a Jet Engine System', fontsize=15)\nplt.xlabel('Temperature (in Kelvin)', fontsize=12)\nplt.ylabel('Frequency of Observations', fontsize=12)\n\n# Ensuring the plot displays\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a dashed outline around the bars that contain the center point of the bounding box, using a line thickness of 0.69 and the color '#88e721'. Also, set the transparency of these bars to 0.80 and apply a horizontal texture fill.",
        "Input_image": "./test_dataset/Histogram/Histogram_8d38df4103c8520f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n\n# Temperature Intervals\ntemp_intervals = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]\n\n# Frequencies\nfrequencies = [5, 9, 14, 18, 20, 16, 12, 8, 6, 2]\n\n# Plot Histogram using the plt.hist() method\nplt.figure(figsize=(10, 6)) # Setting the figure size\nbars = plt.hist(temp_intervals, weights=frequencies, bins=len(temp_intervals), color='blue', edgecolor='black')\n\n# Setting the chart title and labels\nplt.title('Distribution of Fluid Temperature levels in a Jet Engine System', fontsize=15)\nplt.xlabel('Temperature (in Kelvin)', fontsize=12)\nplt.ylabel('Frequency of Observations', fontsize=12)\n\n# Modifying the bars\nfor idx, patch in enumerate(plt.gca().patches):\n    if idx in {2, 5, 7}:\n        patch.set_edgecolor('#88e721')\n        patch.set_linewidth(0.69)\n        patch.set_linestyle('dashed')\n\nfor idx, patch in enumerate(plt.gca().patches):\n    if idx in {2, 5, 7}:\n        patch.set_alpha(0.8008671410678536)\n        patch.set_hatch('---')\n\n# Ensuring the plot displays\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_8d38df4103c8520f/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_8d38df4103c8520f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_8d38df4103c8520f/figure.png"
    },
    {
        "id": "Histogram_0951abb7da171057",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvortex_strength_intervals_midpoints = [0.15, 0.25, 0.35, 0.45]\nfrequency = [12, 18, 15, 9]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Create a bar plot\nax.bar(vortex_strength_intervals_midpoints, frequency, width=0.1)\n\n# Set the x-axis labels as intervals\nax.set_xticks([0.15, 0.25, 0.35, 0.45])\nax.set_xticklabels(['0.1-0.2', '0.2-0.3', '0.3-0.4', '0.4-0.5'])\n\n# Set the title and labels\nax.set_title('Magnitude Distribution of Vortex Strengths within Ocean Vortex Dynamics')\nax.set_xlabel('Vortex Strength Intervals')\nax.set_ylabel('Frequency of Occurrence')\n\n# Render the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clip box for the bars that contain the center point of the bounding box to the area defined by the coordinates (383, 477), a width of 755, and a height of 504, using the matplotlib.transforms.Bbox pattern. Also, make sure to set the visibility of those bars to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_0951abb7da171057/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.transforms import Bbox\n\n# Data\nvortex_strength_intervals_midpoints = [0.15, 0.25, 0.35, 0.45]\nfrequency = [12, 18, 15, 9]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots()\n\n# Create a bar plot\nbars = ax.bar(vortex_strength_intervals_midpoints, frequency, width=0.1)\n\n# Set the x-axis labels as intervals\nax.set_xticks([0.15, 0.25, 0.35, 0.45])\nax.set_xticklabels(['0.1-0.2', '0.2-0.3', '0.3-0.4', '0.4-0.5'])\n\n# Set the title and labels\nax.set_title('Magnitude Distribution of Vortex Strengths within Ocean Vortex Dynamics')\nax.set_xlabel('Vortex Strength Intervals')\nax.set_ylabel('Frequency of Occurrence')\n\n# Modify the clip box and visibility of the target object\nbbox = Bbox.from_bounds(383, 477, 755, 504)\nbars[1].set_clip_box(bbox)\nbars[1].set_visible(False)\n\n# Render the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1",
        "Test_image": "./test_dataset/Histogram/Histogram_0951abb7da171057/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_0951abb7da171057/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_0951abb7da171057/figure.png"
    },
    {
        "id": "Histogram_954049759b9d2d63",
        "Input_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Data for the histogram\nmicrobe_abundance = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950]\nfrequency = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]\n\nplt.hist(microbe_abundance, weights=frequency, bins=10, color='c', edgecolor='black')\nplt.xlabel('Oceanic Microbe Abundance Levels per ml')\nplt.ylabel('Frequency of Samples with Microbe Abundance Levels')\nplt.title('Distribution of Oceanic Microbe Abundance Levels')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the clipping state of the bars that contain the center point of the bounding box to False, and set their linestyle to 'dashed'.",
        "Input_image": "./test_dataset/Histogram/Histogram_954049759b9d2d63/Visual_figure.png",
        "Test_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Data for the histogram\nmicrobe_abundance = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950]\nfrequency = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]\n\nn, bins, patches = plt.hist(microbe_abundance, weights=frequency, bins=10, color='c', edgecolor='black')\nfor i in range(len(patches)):\n    if i in [2, 5]:\n        patches[i].set_clip_on(False)\n        patches[i].set_linestyle('dashed')\nplt.xlabel('Oceanic Microbe Abundance Levels per ml')\nplt.ylabel('Frequency of Samples with Microbe Abundance Levels')\nplt.title('Distribution of Oceanic Microbe Abundance Levels')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Histogram/Histogram_954049759b9d2d63/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_954049759b9d2d63/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_954049759b9d2d63/figure.png"
    },
    {
        "id": "Histogram_a90eb30bf0ab6b49",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nsizes = [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0]\nfrequency = [30, 55, 48, 42, 38, 20, 15, 10, 5, 2]\n\n# Create histogram\nplt.hist(sizes, weights=frequency, bins=len(sizes), edgecolor='black')\n\n# Add labels and title\nplt.xlabel(\"Dust Particle Sizes in Micrometers\")\nplt.ylabel(\"Frequency of Dust Particles\")\nplt.title(\"Size distribution of cosmic dust particles in an interstellar cloud\")\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Stroke the bars that contain the center point of the bounding box with a linewidth of 4.96 and a foreground color of #c53ee0. Also, adjust the clip box for these bars to a bounding box starting at the bottom-left corner (146, 41) with a width of 120 and a height of 471, as per the matplotlib.transforms.Bbox format.",
        "Input_image": "./test_dataset/Histogram/Histogram_a90eb30bf0ab6b49/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.transforms as transforms\nfrom matplotlib.patheffects import withStroke\n# Data\nsizes = [0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0]\nfrequency = [30, 55, 48, 42, 38, 20, 15, 10, 5, 2]\n\n# Create histogram\nn, bins, patches = plt.hist(sizes, weights=frequency, bins=len(sizes), edgecolor='black')\n\n# Stroke and clip box settings\nstroke_effect = withStroke(linewidth=4.959841094106958, foreground='#c53ee0')\nclip_box = transforms.Bbox.from_bounds(146, 41, 120, 471)\n\n# Apply modifications to selected bars\nfor idx, patch in enumerate(patches):\n    if idx in [2, 5]:  # Example indices, modify as needed\n        patch.set_path_effects([stroke_effect])\n        patch.set_clip_box(clip_box)\n\n# Add labels and title\nplt.xlabel(\"Dust Particle Sizes in Micrometers\")\nplt.ylabel(\"Frequency of Dust Particles\")\nplt.title(\"Size distribution of cosmic dust particles in an interstellar cloud\")\n\n# Display plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Histogram/Histogram_a90eb30bf0ab6b49/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_a90eb30bf0ab6b49/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_a90eb30bf0ab6b49/figure.png"
    },
    {
        "id": "Histogram_2100e6e91e0270c7",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Given data points\nmicrobial_abundance = [120, 135, 148, 155, 169, 178, 185, 192, 205, 212, 227, 235, 242, 256, 264, 278, 285, \n                       292, 305, 312, 326, 332, 345, 353, 367, 372, 388, 395, 402, 417, 422, 436, 443, 458, \n                       465, 472, 485, 492, 497, 500, 512, 527, 535, 548, 553, 568, 576, 584, 595, 606]\n\n# Creating the histogram\nplt.hist(microbial_abundance, bins=10, edgecolor='black')\n\n# Setting the labels\nplt.xlabel('Microbial Abundance (cells/cm\u00b3)')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Distribution of Oceanic Microbial Abundance in Sediments')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Hide the bars that contain the center point of the bounding box.",
        "Input_image": "./test_dataset/Histogram/Histogram_2100e6e91e0270c7/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Given data points\nmicrobial_abundance = [120, 135, 148, 155, 169, 178, 185, 192, 205, 212, 227, 235, 242, 256, 264, 278, 285, \n                       292, 305, 312, 326, 332, 345, 353, 367, 372, 388, 395, 402, 417, 422, 436, 443, 458, \n                       465, 472, 485, 492, 497, 500, 512, 527, 535, 548, 553, 568, 576, 584, 595, 606]\n\n# Creating the histogram\nn, bins, patches = plt.hist(microbial_abundance, bins=10, edgecolor='black')\n\n# Setting the visibility of the object corresponding to the Target_object to False\nfor idx,patch in enumerate(patches):\n    if idx in[2,3,4,5]:\n        patch.set_visible(False)\n\n# Setting the labels\nplt.xlabel('Microbial Abundance (cells/cm\u00b3)')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Distribution of Oceanic Microbial Abundance in Sediments')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,3,4,5",
        "Test_image": "./test_dataset/Histogram/Histogram_2100e6e91e0270c7/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_2100e6e91e0270c7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_2100e6e91e0270c7/figure.png"
    },
    {
        "id": "Histogram_b77f3b8b7a4afc93",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ndistances = [1.2, 2.7, 3.5, 4.1, 5.9, 6.3, 7.4, 8.0, 9.2, 10.5, 11.3, 12.8, 13.5, 14.7, 15.1, 16.9, 17.3, 18.6, 19.2, 20.4, 21.7, 22.8, 23.4, 24.6, 25.0, 26.2, 27.3, 28.5, 29.1, 30.3]\n\n# Create Histogram\nplt.hist(distances, bins=20, edgecolor='black')\n\n# Set Labels\nplt.xlabel('Distance in meters')\nplt.ylabel('Number of robots')\nplt.title('Robot Swarm Movement Analysis')\n\n# Show Plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the bars that contain the center point of the bounding box to True, and change their face color to #42f49e.",
        "Input_image": "./test_dataset/Histogram/Histogram_b77f3b8b7a4afc93/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ndistances = [1.2, 2.7, 3.5, 4.1, 5.9, 6.3, 7.4, 8.0, 9.2, 10.5, 11.3, 12.8, 13.5, 14.7, 15.1, 16.9, 17.3, 18.6, 19.2, 20.4, 21.7, 22.8, 23.4, 24.6, 25.0, 26.2, 27.3, 28.5, 29.1, 30.3]\n\n# Create Histogram\nn, bins, patches = plt.hist(distances, bins=20, edgecolor='black')\n\n# Set Labels\nplt.xlabel('Distance in meters')\nplt.ylabel('Number of robots')\nplt.title('Robot Swarm Movement Analysis')\n\n# Modify specific bars\nfor i in [5, 10, 15]:  # Example indices\n    patches[i].set_animated(True)\n    patches[i].set_facecolor('#42f49e')\n\n# Show Plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "5,10,15",
        "Test_image": "./test_dataset/Histogram/Histogram_b77f3b8b7a4afc93/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_b77f3b8b7a4afc93/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_b77f3b8b7a4afc93/figure.png"
    },
    {
        "id": "Histogram_04a5c02fe97edefa",
        "Input_code": "import matplotlib.pyplot as plt\n\nspecies_richness = [8, 12, 15, 19, 23, 27, 31, 35]\nfrequency = [2, 5, 8, 10, 6, 3, 2, 1]\n\nplt.hist(species_richness, weights=frequency, bins=range(min(species_richness), max(species_richness) + 2, 2),\n      edgecolor='black')\n\nplt.xlabel('Species Richness')\nplt.ylabel('Frequency')\nplt.title('Distribution of Deep-sea Coral Species Richness in Different Reef Habitats')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the snap state of the bars that contain the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_04a5c02fe97edefa/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\nspecies_richness = [8, 12, 15, 19, 23, 27, 31, 35]\nfrequency = [2, 5, 8, 10, 6, 3, 2, 1]\n\nbars = plt.hist(species_richness, weights=frequency, bins=range(min(species_richness), max(species_richness) + 2, 2),\n      edgecolor='black')\n\nfor idx,bar in enumerate(plt.gca().patches):\n    if idx in {0,2,3}:\n        bar.set_snap(True)\n\nplt.xlabel('Species Richness')\nplt.ylabel('Frequency')\nplt.title('Distribution of Deep-sea Coral Species Richness in Different Reef Habitats')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2,3",
        "Test_image": "./test_dataset/Histogram/Histogram_04a5c02fe97edefa/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_04a5c02fe97edefa/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_04a5c02fe97edefa/figure.png"
    },
    {
        "id": "Histogram_1be49ed10f738355",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for temperature ranges and frequencies\ntemperature_ranges = ['10-20', '20-30', '30-40', '40-50', '50-60']\nfrequencies = [15, 30, 45, 25, 10]\n\n# Plotting the histogram\nplt.bar(temperature_ranges, frequencies)\n\n# Labeling the axes\nplt.xlabel('Temperature Ranges (in degrees Celsius)')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Temperature and Species Distribution')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the picker state of the bars that contain the center point of the bounding box to False. For the same bars, also set the rasterized state to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_1be49ed10f738355/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points for temperature ranges and frequencies\ntemperature_ranges = ['10-20', '20-30', '30-40', '40-50', '50-60']\nfrequencies = [15, 30, 45, 25, 10]\n\n# Plotting the histogram\nbars = plt.bar(temperature_ranges, frequencies)\n\n# Labeling the axes\nplt.xlabel('Temperature Ranges (in degrees Celsius)')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Temperature and Species Distribution')\n\n# Modifying the picker and rasterized state for selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:  # Selecting bars at index 1 and 3\n        bar.set_picker(False)\n        bar.set_rasterized(True)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_1be49ed10f738355/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_1be49ed10f738355/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_1be49ed10f738355/figure.png"
    },
    {
        "id": "Histogram_a632eac2fb41b508",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Settings for the dataset\ndepth_ranges = [\"0-100\", \"100-500\", \"500-1000\", \"1000-2000\", \"2000-4000\", \"4000-6000\", \"6000-8000\", \"8000-10000\"]\ndepth_measurements = [62, 48, 32, 20, 12, 6, 4, 2]\n\n# Create the histogram\nplt.hist(range(len(depth_ranges)), weights=depth_measurements, bins=len(depth_ranges), align='left', color='c', edgecolor='black')\n  \n# Set the title and labels\nplt.xlabel('Depth Ranges in meters')\nplt.ylabel('Frequency of Depth Measurements')\nplt.xticks(range(len(depth_ranges)), depth_ranges)\nplt.title('Distribution of Ocean Depths')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the bars that contain the center point of the bounding box to 4.78.",
        "Input_image": "./test_dataset/Histogram/Histogram_a632eac2fb41b508/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Settings for the dataset\ndepth_ranges = [\"0-100\", \"100-500\", \"500-1000\", \"1000-2000\", \"2000-4000\", \"4000-6000\", \"6000-8000\", \"8000-10000\"]\ndepth_measurements = [62, 48, 32, 20, 12, 6, 4, 2]\n\n# Create the histogram\nn, bins, patches = plt.hist(range(len(depth_ranges)), weights=depth_measurements, bins=len(depth_ranges), align='left', color='c', edgecolor='black')\n\n# Set the linewidth of the object corresponding to the Target_object to 4.78\nfor patch in patches:\n    patch.set_linewidth(4.78)\n\n# Set the title and labels\nplt.xlabel('Depth Ranges in meters')\nplt.ylabel('Frequency of Depth Measurements')\nplt.xticks(range(len(depth_ranges)), depth_ranges)\nplt.title('Distribution of Ocean Depths')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,1,2,3,4,5,6,7",
        "Test_image": "./test_dataset/Histogram/Histogram_a632eac2fb41b508/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_a632eac2fb41b508/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_a632eac2fb41b508/figure.png"
    },
    {
        "id": "Histogram_4fcf66ac5823a4cd",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Dataset\nweights = [\n    5.2, 6.9, 7.1, 4.8, 8.5, 7.9, 9.2, 6.4, 5.7, 5.3, 8.1, 7.6, 6.3, 8.4, 7.2, \n    6.1, 4.9, 7.5, 7.3, 8.2, 7.8, 6.2, 5.9, 6.5, 5.6, 7.4, 6.6, 9.5, 5.4, 8.9, \n    7.7, 7.0, 6.7, 5.1, 7.8, 6.0, 8.3, 7.6, 9.4, 5.8, 6.8, 5.0, 6.4, 7.5, 7.9, \n    8.6, 7.1, 6.6, 8.7, 7.2, 5.2, 6.3, 8.0, 4.7, 9.9\n]\n\nplt.hist(weights, bins='auto', edgecolor='black')\nplt.title('Body Weight Distribution of Feline Friends')\nplt.xlabel('Weight (pounds)')\nplt.ylabel('Frequency')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the histogram that contains the center point of the bounding box to 0.87. Also, set the snap state of this histogram to True for the same points.",
        "Input_image": "./test_dataset/Histogram/Histogram_4fcf66ac5823a4cd/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Dataset\nweights = [\n    5.2, 6.9, 7.1, 4.8, 8.5, 7.9, 9.2, 6.4, 5.7, 5.3, 8.1, 7.6, 6.3, 8.4, 7.2, \n    6.1, 4.9, 7.5, 7.3, 8.2, 7.8, 6.2, 5.9, 6.5, 5.6, 7.4, 6.6, 9.5, 5.4, 8.9, \n    7.7, 7.0, 6.7, 5.1, 7.8, 6.0, 8.3, 7.6, 9.4, 5.8, 6.8, 5.0, 6.4, 7.5, 7.9, \n    8.6, 7.1, 6.6, 8.7, 7.2, 5.2, 6.3, 8.0, 4.7, 9.9\n]\n\nn, bins, patches = plt.hist(weights, bins='auto', edgecolor='black')\nfor idx,patch in enumerate(patches):\n    if idx in [1,3]:\n        patch.set_linewidth(0.87)\n        patch.set_snap(True)\nplt.title('Body Weight Distribution of Feline Friends')\nplt.xlabel('Weight (pounds)')\nplt.ylabel('Frequency')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_4fcf66ac5823a4cd/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_4fcf66ac5823a4cd/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_4fcf66ac5823a4cd/figure.png"
    },
    {
        "id": "Histogram_a4bc6ebfe65f82e0",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ndistances = [1.2, 2.7, 3.5, 4.1, 5.9, 6.3, 7.4, 8.0, 9.2, 10.5, 11.3, 12.8, 13.5, 14.7, 15.1, 16.9, 17.3, 18.6, 19.2, 20.4, 21.7, 22.8, 23.4, 24.6, 25.0, 26.2, 27.3, 28.5, 29.1, 30.3]\n\n# Create Histogram\nplt.hist(distances, bins=20, edgecolor='black')\n\n# Set Labels\nplt.xlabel('Distance in meters')\nplt.ylabel('Number of robots')\nplt.title('Robot Swarm Movement Analysis')\n\n# Show Plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the bars that contain the center point of the bounding box to 0.57, and change their face color to #a19664.",
        "Input_image": "./test_dataset/Histogram/Histogram_a4bc6ebfe65f82e0/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ndistances = [1.2, 2.7, 3.5, 4.1, 5.9, 6.3, 7.4, 8.0, 9.2, 10.5, 11.3, 12.8, 13.5, 14.7, 15.1, 16.9, 17.3, 18.6, 19.2, 20.4, 21.7, 22.8, 23.4, 24.6, 25.0, 26.2, 27.3, 28.5, 29.1, 30.3]\n\n# Create Histogram\nn, bins, patches = plt.hist(distances, bins=20, edgecolor='black')\n\n# Modify specific bars\nfor i in [5, 10, 15]:  # Example indices\n    patches[i].set_alpha(0.57)\n    patches[i].set_facecolor('#a19664')\n\n# Set Labels\nplt.xlabel('Distance in meters')\nplt.ylabel('Number of robots')\nplt.title('Robot Swarm Movement Analysis')\n\n# Show Plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "5,10,15",
        "Test_image": "./test_dataset/Histogram/Histogram_a4bc6ebfe65f82e0/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_a4bc6ebfe65f82e0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_a4bc6ebfe65f82e0/figure.png"
    },
    {
        "id": "Histogram_15e566f1a665d33c",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Cloud cover percentage ranges\nx = ['0-10%', '10-20%', '20-30%', '30-40%', '40-50%', '50-60%', '60-70%', '70-80%', '80-90%', '90-100%']\n\n# Frequency of cloud cover percentages\ny = [25, 32, 38, 45, 50, 48, 42, 35, 28, 20]\n\nplt.figure(figsize=(10, 6))\n\n# Plotting the data using a histogram\nplt.bar(x, y, color='skyblue', edgecolor='black')\n\nplt.xlabel('Cloud Cover Percentage', fontsize=12)\nplt.ylabel('Frequency of Cloud Cover Percentage', fontsize=12)\nplt.title('Distribution of Cloud Coverage Percentages Observed in Satellite Images', fontsize=15)\nplt.xticks(rotation=45)\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the bars that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_15e566f1a665d33c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Cloud cover percentage ranges\nx = ['0-10%', '10-20%', '20-30%', '30-40%', '40-50%', '50-60%', '60-70%', '70-80%', '80-90%', '90-100%']\n\n# Frequency of cloud cover percentages\ny = [25, 32, 38, 45, 50, 48, 42, 35, 28, 20]\n\nplt.figure(figsize=(10, 6))\n\n# Plotting the data using a histogram\nbars = plt.bar(x, y, color='skyblue', edgecolor='black')\n\nplt.xlabel('Cloud Cover Percentage', fontsize=12)\nplt.ylabel('Frequency of Cloud Cover Percentage', fontsize=12)\nplt.title('Distribution of Cloud Coverage Percentages Observed in Satellite Images', fontsize=15)\nplt.xticks(rotation=45)\n\nplt.grid(True)\nplt.tight_layout()\nfor idx, bar in enumerate(bars):\n    if idx in [2, 5]:\n        bar.set_animated(False)\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Histogram/Histogram_15e566f1a665d33c/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_15e566f1a665d33c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_15e566f1a665d33c/figure.png"
    },
    {
        "id": "Histogram_3ff654e1b2618672",
        "Input_code": "# import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# x-axis data, i.e., depth categories\ndepth_categories = [\"50-100\", \"100-200\", \"200-300\", \"300-400\", \"400-500\", \"500-600\", \"600-700\", \"700-800\", \"800-900\", \"900-1000\"]\n\n# y-axis data, i.e., frequency of cave depths\nfrequency = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\n\n# Create histogram\nplt.figure(figsize=(10, 5))  # handles large labels\nplt.bar(depth_categories, frequency)\n\n# add labels and title\nplt.xlabel('Depth Categories in Meters')\nplt.ylabel('Frequency of Cave Depths')\nplt.title('Distribution of Underwater Cave Depths')\n\nplt.xticks(rotation=45)  # makes labels readable\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow below the bars that contain the center point of the bounding box, with a shadow offset of (5, 4) units. Additionally, apply a dashed outline around these bars, using a thickness of 1.16 and the color '#3faae1'.",
        "Input_image": "./test_dataset/Histogram/Histogram_3ff654e1b2618672/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import withSimplePatchShadow\n\n# x-axis data, i.e., depth categories\ndepth_categories = [\"50-100\", \"100-200\", \"200-300\", \"300-400\", \"400-500\", \"500-600\", \"600-700\", \"700-800\", \"800-900\", \"900-1000\"]\n\n# y-axis data, i.e., frequency of cave depths\nfrequency = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\n\n# Create histogram\nplt.figure(figsize=(10, 5))  # handles large labels\nbars = plt.bar(depth_categories, frequency)\n\n# add labels and title\nplt.xlabel('Depth Categories in Meters')\nplt.ylabel('Frequency of Cave Depths')\nplt.title('Distribution of Underwater Cave Depths')\n\nplt.xticks(rotation=45)  # makes labels readable\n\n# Apply modifications to the target objects\nfor idx, bar in enumerate(bars):\n    if idx in {2, 5, 8}:\n        bar.set_path_effects([withSimplePatchShadow(offset=(5, 4))])\n\nfor idx, bar in enumerate(bars):\n    if idx in {2, 5, 8}:\n        bar.set_edgecolor('#3faae1')\n        bar.set_linewidth(1.16)\n        bar.set_linestyle('dashed')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,8",
        "Test_image": "./test_dataset/Histogram/Histogram_3ff654e1b2618672/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_3ff654e1b2618672/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_3ff654e1b2618672/figure.png"
    },
    {
        "id": "Histogram_069e1414c2a7777b",
        "Input_code": "import matplotlib.pyplot as plt\n\n#Given data\nelevation_ranges = ['1000-1100', '1100-1200', '1200-1300', '1300-1400', '1400-1500', '1500-1600', '1600-1700', '1700-1800']\nfrequency_samples = [12, 18, 25, 30, 28, 20, 15, 10]\n\n# Creating the histogram\nplt.figure(figsize=(10,6)) # To make sure the labels are readable\nplt.bar(elevation_ranges, frequency_samples, color='green', alpha=0.7)\n\n# Let's set up titles and labels\nplt.title('Alien Planet Terrain Elevation Analysis')\nplt.xlabel('Elevation Ranges (in meters)')\nplt.ylabel('Frequency of Terrain Samples')\n\n# Displaying the histogram\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the label of the bars that contain the center point of the bounding box to 'A new Label'. Also, update the line color for those same bars to #464915.",
        "Input_image": "./test_dataset/Histogram/Histogram_069e1414c2a7777b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n#Given data\nelevation_ranges = ['1000-1100', '1100-1200', '1200-1300', '1300-1400', '1400-1500', '1500-1600', '1600-1700', '1700-1800']\nfrequency_samples = [12, 18, 25, 30, 28, 20, 15, 10]\n\n# Creating the histogram\nplt.figure(figsize=(10,6)) # To make sure the labels are readable\nbars = plt.bar(elevation_ranges, frequency_samples, color='green', alpha=0.7)\n\n# Let's set up titles and labels\nplt.title('Alien Planet Terrain Elevation Analysis')\nplt.xlabel('Elevation Ranges (in meters)')\nplt.ylabel('Frequency of Terrain Samples')\n\n# Modifying the label and linecolor of the Target_object\nfor idx, bar in enumerate(bars):\n    if idx in [2, 4]:\n        bar.set_label('A new Label')\n        bar.set_edgecolor('#464915')\n\n# Displaying the histogram\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,4",
        "Test_image": "./test_dataset/Histogram/Histogram_069e1414c2a7777b/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_069e1414c2a7777b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_069e1414c2a7777b/figure.png"
    },
    {
        "id": "Histogram_fafe30c38a073f38",
        "Input_code": "# necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#data\nx = [\"10-20\", \"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-90\", \"90-100\"]\ny = [5, 12, 8, 15, 20, 18, 10, 6, 4]\n\n\n#creating figure and axis objects\nfig, ax = plt.subplots()\n\n#creating barplot \nax.bar(x, y, color='b', alpha=0.7)\n\n#setting labels and title\nax.set_xlabel('Marine Species Richness')\nax.set_ylabel('Frequency of Reef Areas')\nplt.title('Marine Biodiversity in Reef Ecosystem')\n\n#rotating x-axis labels for better readability\nplt.xticks(rotation=45)\n\n#showing the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, using a shadow offset of (3.92, 3.66) and a gray shadow color. Additionally, make sure the clipping state for these bars is set to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_fafe30c38a073f38/Visual_figure.png",
        "Test_code": "# necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n#data\nx = [\"10-20\", \"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-90\", \"90-100\"]\ny = [5, 12, 8, 15, 20, 18, 10, 6, 4]\n\n\n#creating figure and axis objects\nfig, ax = plt.subplots()\n\n#creating barplot \nbars = ax.bar(x, y, color='b', alpha=0.7)\n\n#setting labels and title\nax.set_xlabel('Marine Species Richness')\nax.set_ylabel('Frequency of Reef Areas')\nplt.title('Marine Biodiversity in Reef Ecosystem')\n\n#rotating x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Apply shadow effect and clipping state to selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_path_effects([SimplePatchShadow(offset=(3.92,3.66), shadow_rgbFace='gray'), Normal()])\n        bar.set_clip_on(True)\n\n#showing the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_fafe30c38a073f38/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_fafe30c38a073f38/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_fafe30c38a073f38/figure.png"
    },
    {
        "id": "Histogram_212e9a561a700e21",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for Insect Swarm Movement Dynamics Study\ninterval_limits = np.array([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])  # Include both ends of the last interval\nfrequency_of_insects = [10, 15, 20, 25, 20, 15, 10, 5, 3, 2]\n\n# Simulate raw data based on the frequency of each interval\nraw_data = np.repeat((interval_limits[:-1] + interval_limits[1:])/2, frequency_of_insects)\n\n# Generate histogram\nplt.figure(figsize=(10, 6))\nplt.hist(raw_data, bins=interval_limits, edgecolor='black', color='lightgreen')\nplt.xlabel('Speed Intervals (cm/s)')\nplt.ylabel('Frequency of Insects')\nplt.title('Insect Swarm Movement Dynamics: Speed Distribution')\nplt.grid(axis='y', linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the bars that contain the center point of the bounding box to a gradient starting with #da9be9 and transitioning to #0204f8 by order. Additionally, add a dashed outline around these bars with a thickness of 0.80 and a color of '#ff80bf'.",
        "Input_image": "./test_dataset/Histogram/Histogram_212e9a561a700e21/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Data points for Insect Swarm Movement Dynamics Study\ninterval_limits = np.array([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])  # Include both ends of the last interval\nfrequency_of_insects = [10, 15, 20, 25, 20, 15, 10, 5, 3, 2]\n\n# Simulate raw data based on the frequency of each interval\nraw_data = np.repeat((interval_limits[:-1] + interval_limits[1:])/2, frequency_of_insects)\n\n# Generate histogram\nplt.figure(figsize=(10, 6))\nn, bins, patches = plt.hist(raw_data, bins=interval_limits, edgecolor='black', color='lightgreen')\n\n# Set the edge color of the bars to a gradient\ngradient = LinearSegmentedColormap.from_list('gradient', ['#da9be9', '#0204f8'])\nfor idx, patch in enumerate(patches):\n    if idx in {2, 5, 7}:\n        patch.set_edgecolor(gradient(idx / len(patches)))\n\n# Add a dashed outline around the bars\nfor idx, patch in enumerate(patches):\n    if idx in {2, 5, 7}:\n        patch.set_linestyle('dashed')\n        patch.set_linewidth(0.80)\n        patch.set_edgecolor('#ff80bf')\n\nplt.xlabel('Speed Intervals (cm/s)')\nplt.ylabel('Frequency of Insects')\nplt.title('Insect Swarm Movement Dynamics: Speed Distribution')\nplt.grid(axis='y', linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_212e9a561a700e21/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_212e9a561a700e21/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_212e9a561a700e21/figure.png"
    },
    {
        "id": "Histogram_9203521c96e8e091",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for survival outcomes and counts\nsurvival_outcomes = ['Survived', 'Did not survive']\ncounts = [342, 549]\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nax.bar(survival_outcomes, counts, color=['green','red'])\n\n# Labeling the axes\nplt.xlabel('Survival Outcomes')\nplt.ylabel('Count')\n\n# Setting the title\nplt.title('Survival Rate of Shipwreck Passengers')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Stroke the bars that contain the center point of the bounding box with a line width of 2.95 and a foreground color of #ef21c5.",
        "Input_image": "./test_dataset/Histogram/Histogram_9203521c96e8e091/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Data points for survival outcomes and counts\nsurvival_outcomes = ['Survived', 'Did not survive']\ncounts = [342, 549]\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nbars = ax.bar(survival_outcomes, counts, color=['green','red'])\n\n# Applying stroke effect to the first bar\nstroke_effect = path_effects.withStroke(linewidth=2.9504357739260145, foreground='#ef21c5')\nbars[0].set_path_effects([stroke_effect])\n\n# Labeling the axes\nplt.xlabel('Survival Outcomes')\nplt.ylabel('Count')\n\n# Setting the title\nplt.title('Survival Rate of Shipwreck Passengers')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Histogram/Histogram_9203521c96e8e091/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_9203521c96e8e091/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_9203521c96e8e091/figure.png"
    },
    {
        "id": "Histogram_39d37de1a63fe0ee",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the ranges and their frequencies\nranges = ['0-50', '51-100', '101-150', '151-200', '201-250', '251-300']\nfrequencies = [12, 9, 17, 6, 3, 1]\n\n# Set the figure size for better visibility\nplt.figure(figsize=[10,8])\n\n# Create the histogram\nplt.hist(ranges, bins=6, weights=frequencies, alpha=0.6, color='skyblue', edgecolor='black')\n\n# Label the axes and title\nplt.xlabel('Depth Ranges in Meters', fontsize=14)\nplt.ylabel('Frequency of Caves Found', fontsize=14)\nplt.title('Histogram of Underwater Cave Depths Explored by Sonar', fontsize=16)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, with a shadow offset of (2.29, 3.18) and using gold for the shadow color.",
        "Input_image": "./test_dataset/Histogram/Histogram_39d37de1a63fe0ee/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Define the ranges and their frequencies\nranges = ['0-50', '51-100', '101-150', '151-200', '201-250', '251-300']\nfrequencies = [12, 9, 17, 6, 3, 1]\n\n# Set the figure size for better visibility\nplt.figure(figsize=[10,8])\n\n# Create the histogram\nbars = plt.hist(ranges, bins=6, weights=frequencies, alpha=0.6, color='skyblue', edgecolor='black')\n\n# Apply shadow effect to the first and third bars\nfor idx, bar in enumerate(bars[2]):\n    if idx in [0, 2]:\n        bar.set_path_effects([SimplePatchShadow(offset=(2.29,3.18), shadow_rgbFace='gold'), Normal()])\n\n# Label the axes and title\nplt.xlabel('Depth Ranges in Meters', fontsize=14)\nplt.ylabel('Frequency of Caves Found', fontsize=14)\nplt.title('Histogram of Underwater Cave Depths Explored by Sonar', fontsize=16)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Histogram/Histogram_39d37de1a63fe0ee/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_39d37de1a63fe0ee/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_39d37de1a63fe0ee/figure.png"
    },
    {
        "id": "Histogram_6c96eabd32320462",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Center points of ranges for the X-axis (Tree Density per sq. km)\nx = [25, 75, 125, 175, 225, 275, 325, 375, 425, 475]\n\n# Data points for the Y-axis (Frequency of Occurrences)\nw = [10, 15, 20, 25, 30, 25, 20, 15, 10, 5]\n\n# Plot histogram\nplt.hist(x, bins=10, weights=w, color='skyblue')\n\n# set labels for better readability\nplt.xlabel('Tree Density per sq. km')\nplt.ylabel('Frequency of Occurrences')\nplt.title('Jungle Canopy Density Distribution Pattern')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a glow effect to the bars that contain the center point of the bounding box, with an intensity of 0.257 and a color of #02fa10.",
        "Input_image": "./test_dataset/Histogram/Histogram_6c96eabd32320462/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import Rectangle\nimport matplotlib.patheffects as pe\n\n# Center points of ranges for the X-axis (Tree Density per sq. km)\nx = [25, 75, 125, 175, 225, 275, 325, 375, 425, 475]\n\n# Data points for the Y-axis (Frequency of Occurrences)\nw = [10, 15, 20, 25, 30, 25, 20, 15, 10, 5]\n\n# Plot histogram\nplt.hist(x, bins=10, weights=w, color='skyblue')\n\n# set labels for better readability\nplt.xlabel('Tree Density per sq. km')\nplt.ylabel('Frequency of Occurrences')\nplt.title('Jungle Canopy Density Distribution Pattern')\n\n# Add a glow effect to the bars in the histogram corresponding to the Target_object\ntarget_indices = {1, 3, 5}\nglow_intensity = 0.25744683715735783\nglow_color = '#02fa10'\nfor i, bar in enumerate(plt.gca().patches):\n    if i in target_indices:\n        bar.set_path_effects([pe.withStroke(linewidth=10*glow_intensity, foreground=glow_color, alpha=0.4), pe.Normal()])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3,5",
        "Test_image": "./test_dataset/Histogram/Histogram_6c96eabd32320462/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_6c96eabd32320462/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_6c96eabd32320462/figure.png"
    },
    {
        "id": "Histogram_1436a2752b2f0ad7",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nplastic_waste_ppm = [14, 19, 26, 31, 38, 45, 52, 59, 66, 71, 78, 83, 89, 96, 103, 110, \n                     117, 123, 130, 137, 144, 150, 157, 164, 171, 178, 184, 191, 198, 205, \n                     212, 219, 225, 232, 239, 246, 253, 259, 266, 273, 280, 287, 293, 300, \n                     307, 314, 320, 327, 334]\n\n# Create histogram\nplt.hist(plastic_waste_ppm, bins='auto', edgecolor='black')\n\n# Labels and title\nplt.title('Distribution of Plastic Waste Levels in Ocean Water Samples')\nplt.xlabel('Plastic Waste Concentration (ppm)')\nplt.ylabel('Frequency')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the areas in the histogram that contain the center point of the bounding box to 0.80. Also, redefine the clipping box for these areas to a bounding box starting at the lower-left corner (465, 219) with a width of 600 and a height of 664, following the matplotlib.transforms.Bbox format.",
        "Input_image": "./test_dataset/Histogram/Histogram_1436a2752b2f0ad7/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\n\n# Data\nplastic_waste_ppm = [14, 19, 26, 31, 38, 45, 52, 59, 66, 71, 78, 83, 89, 96, 103, 110, \n                     117, 123, 130, 137, 144, 150, 157, 164, 171, 178, 184, 191, 198, 205, \n                     212, 219, 225, 232, 239, 246, 253, 259, 266, 273, 280, 287, 293, 300, \n                     307, 314, 320, 327, 334]\n\n# Create histogram\nn, bins, patches = plt.hist(plastic_waste_ppm, bins='auto', edgecolor='black')\n\n# Modify specific bars\nfor i in [5]:  # Example indices\n    patches[i].set_alpha(0.80)\n    bbox = mtransforms.Bbox.from_bounds(465, 219, 600, 664)\n    patches[i].set_clip_box(bbox)\n\n# Labels and title\nplt.title('Distribution of Plastic Waste Levels in Ocean Water Samples')\nplt.xlabel('Plastic Waste Concentration (ppm)')\nplt.ylabel('Frequency')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "5",
        "Test_image": "./test_dataset/Histogram/Histogram_1436a2752b2f0ad7/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_1436a2752b2f0ad7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_1436a2752b2f0ad7/figure.png"
    },
    {
        "id": "Histogram_feadab086059032d",
        "Input_code": "# import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# established data\nbirth_weights = [2050, 2150, 2250, 2350, 2450, 2550, 2650, 2750, 2850, 2950]\nfrequencies = [5, 12, 8, 15, 10, 3, 6, 2, 5, 1]\n\n# repeats each weight by its frequency to simulate the dataset\ndata = np.repeat(birth_weights, frequencies)\n\n# create histogram\nplt.figure(figsize=(10,6))\nplt.hist(data, bins=np.arange(2000, 3000, 100), edgecolor = 'black')\n\n# add labels and title\nplt.xlabel('Birth weight (grams)')\nplt.ylabel('Number of newborns')\nplt.title('Distribution of Neonatal Birth Weights')\n\n# make x-axis readable\nplt.xticks(np.arange(2000, 3000, 100))\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow below the bars that contain the center point of the bounding box, with a shadow offset of (4, 4). Additionally, change the border style of these bars to dotted (':'), set the border width to 2.6, and use '#3a51d4' for the border color.",
        "Input_image": "./test_dataset/Histogram/Histogram_feadab086059032d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import withSimplePatchShadow\n\n# established data\nbirth_weights = [2050, 2150, 2250, 2350, 2450, 2550, 2650, 2750, 2850, 2950]\nfrequencies = [5, 12, 8, 15, 10, 3, 6, 2, 5, 1]\n\n# repeats each weight by its frequency to simulate the dataset\ndata = np.repeat(birth_weights, frequencies)\n\n# create histogram\nplt.figure(figsize=(10,6))\nn, bins, patches = plt.hist(data, bins=np.arange(2000, 3000, 100), edgecolor = 'black')\n\n# add labels and title\nplt.xlabel('Birth weight (grams)')\nplt.ylabel('Number of newborns')\nplt.title('Distribution of Neonatal Birth Weights')\n\n# make x-axis readable\nplt.xticks(np.arange(2000, 3000, 100))\n\n# Target objects\nfor idx, patch in enumerate(patches):\n    if idx in {2, 5, 7}:\n        patch.set_path_effects([withSimplePatchShadow(offset=(4, 4))])\n\nfor idx, patch in enumerate(patches):\n    if idx in {2, 5, 7}:\n        patch.set_edgecolor('#3a51d4')\n        patch.set_linewidth(2.6)\n        patch.set_linestyle(':')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_feadab086059032d/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_feadab086059032d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_feadab086059032d/figure.png"
    },
    {
        "id": "Histogram_54a6d5c26284eb26",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nelevation_ranges_meters = ['0-1000', '1000-2000', '2000-3000', '3000-4000', '4000-5000']\nfrequency = [25, 18, 12, 6, 3] \n\n# Create Histogram\nplt.hist(elevation_ranges_meters, weights=frequency, bins=5, alpha=0.7, color='skyblue', edgecolor='black')\n\n# Title and labels\nplt.title('Planet Surface Elevation Mapping')\nplt.xlabel('Elevation Ranges (in meters)')\nplt.ylabel('Frequency of Elevation Data Points')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the picker state of the bars that contain the center point of the bounding box to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_54a6d5c26284eb26/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\nelevation_ranges_meters = ['0-1000', '1000-2000', '2000-3000', '3000-4000', '4000-5000']\nfrequency = [25, 18, 12, 6, 3] \n\n# Create Histogram\nbars = plt.hist(elevation_ranges_meters, weights=frequency, bins=5, alpha=0.7, color='skyblue', edgecolor='black')\n\n# Set picker state\nfor bar in bars[2]:\n    bar.set_picker(True)\n\n# Title and labels\nplt.title('Planet Surface Elevation Mapping')\nplt.xlabel('Elevation Ranges (in meters)')\nplt.ylabel('Frequency of Elevation Data Points')\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Histogram/Histogram_54a6d5c26284eb26/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_54a6d5c26284eb26/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_54a6d5c26284eb26/figure.png"
    },
    {
        "id": "Histogram_2ffeebc97d306d28",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Goals and their frequencies\ngoals = list(range(0, 11))\nmatches = [3, 8, 12, 9, 5, 2, 1, 0, 0, 0, 1]\n\n# Create the histogram\nplt.hist(goals, weights=matches, bins=range(11), alpha=0.7, rwidth=0.85, color='blue', edgecolor='black')\n\n# Set the title and labels\nplt.title('Football Team Performance Analysis')\nplt.xlabel('Number of Goals Scored')\nplt.ylabel('Frequency of Matches')\n\n# Display the histogram\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, with a shadow offset of (3.61, 3.92) and a shadow color of gray. Additionally, set the line width of these bars to 2.84.",
        "Input_image": "./test_dataset/Histogram/Histogram_2ffeebc97d306d28/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Goals and their frequencies\ngoals = list(range(0, 11))\nmatches = [3, 8, 12, 9, 5, 2, 1, 0, 0, 0, 1]\n\n# Create the histogram\nbars = plt.hist(goals, weights=matches, bins=range(11), alpha=0.7, rwidth=0.85, color='blue', edgecolor='black')\n\n# Set the title and labels\nplt.title('Football Team Performance Analysis')\nplt.xlabel('Number of Goals Scored')\nplt.ylabel('Frequency of Matches')\n\n# Apply shadow and linewidth effects\nfor idx, bar in enumerate(bars[2]):\n    if idx in [1, 3]:\n        bar.set_path_effects([SimplePatchShadow(offset=(3.61,3.92), shadow_rgbFace='gray'), Normal()])\n        bar.set_linewidth(2.84)\n\n# Display the histogram\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_2ffeebc97d306d28/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_2ffeebc97d306d28/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_2ffeebc97d306d28/figure.png"
    },
    {
        "id": "Histogram_095648d5be867030",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Goals and their frequencies\ngoals = list(range(0, 11))\nmatches = [3, 8, 12, 9, 5, 2, 1, 0, 0, 0, 1]\n\n# Create the histogram\nplt.hist(goals, weights=matches, bins=range(11), alpha=0.7, rwidth=0.85, color='blue', edgecolor='black')\n\n# Set the title and labels\nplt.title('Football Team Performance Analysis')\nplt.xlabel('Number of Goals Scored')\nplt.ylabel('Frequency of Matches')\n\n# Display the histogram\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "For the bars that contain the center point of the bounding box, set the stroke line width to 2.07 and the foreground color to #1abbd1. Also, change the line color of these bars to #7fab17.",
        "Input_image": "./test_dataset/Histogram/Histogram_095648d5be867030/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Goals and their frequencies\ngoals = list(range(0, 11))\nmatches = [3, 8, 12, 9, 5, 2, 1, 0, 0, 0, 1]\n\n# Create the histogram\nbars = plt.hist(goals, weights=matches, bins=range(11), alpha=0.7, rwidth=0.85, color='blue', edgecolor='black')\n\n# Apply stroke and linecolor effects\nstroke_effect = path_effects.withStroke(linewidth=2.0668740321664894, foreground='#1abbd1')\nfor idx,bar in enumerate(plt.gca().patches):\n    if idx==2:\n        bar.set_path_effects([stroke_effect])\n        bar.set_edgecolor('#7fab17')\n\n# Set the title and labels\nplt.title('Football Team Performance Analysis')\nplt.xlabel('Number of Goals Scored')\nplt.ylabel('Frequency of Matches')\n\n# Display the histogram\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2",
        "Test_image": "./test_dataset/Histogram/Histogram_095648d5be867030/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_095648d5be867030/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_095648d5be867030/figure.png"
    },
    {
        "id": "Histogram_12c3d4aae6bf3fdf",
        "Input_code": "# import necessary library\nimport matplotlib.pyplot as plt\n\n# provided salary data\nsalaries = [55000, 60000, 63000, 67000, 70000, 74000, 76000, 80000, 82000, 85000, 88000, 90000, 93000, 97000, 99000, \n            102000, 105000, 108000, 110000, 115000, 119000, 122000, 126000, 129000, 132000, 135000, 138000, 141000,\n            144000, 148000, 151000, 155000, 159000, 162000, 165000, 168000, 172000, 175000, 179000, 183000, 187000, \n            191000, 195000, 199000, 203000, 207000, 211000, 215000, 220000]\n\n# create histogram\nplt.hist(salaries, bins=10, edgecolor='black')\n\n# labeling\nplt.xlabel(\"Salary ($)\")\nplt.ylabel(\"Number of Engineers\")\nplt.title(\"Salary Distribution of Software Engineers in Tech Industry\")\n\n# display plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a glow outline to the bars that contain the center point of the bounding box, with a thickness of 1.29 and the color '#c2c9a8'.",
        "Input_image": "./test_dataset/Histogram/Histogram_12c3d4aae6bf3fdf/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as pe\n\n# provided salary data\nsalaries = [55000, 60000, 63000, 67000, 70000, 74000, 76000, 80000, 82000, 85000, 88000, 90000, 93000, 97000, 99000, \n            102000, 105000, 108000, 110000, 115000, 119000, 122000, 126000, 129000, 132000, 135000, 138000, 141000,\n            144000, 148000, 151000, 155000, 159000, 162000, 165000, 168000, 172000, 175000, 179000, 183000, 187000, \n            191000, 195000, 199000, 203000, 207000, 211000, 215000, 220000]\n\n# create histogram\nplt.hist(salaries, bins=10, edgecolor='black')\n\n# labeling\nplt.xlabel(\"Salary ($)\")\nplt.ylabel(\"Number of Engineers\")\nplt.title(\"Salary Distribution of Software Engineers in Tech Industry\")\n\n# Add a glow outline to the bars in the histogram corresponding to the Target_object with a thickness of 1.29 and color '#c2c9a8'\ntarget_indices = {2, 5, 7}\nfor i, bar in enumerate(plt.gca().patches):\n    if i in target_indices:\n        bar.set_path_effects([pe.withStroke(linewidth=1.29, foreground='#c2c9a8'), pe.Normal()])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_12c3d4aae6bf3fdf/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_12c3d4aae6bf3fdf/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_12c3d4aae6bf3fdf/figure.png"
    },
    {
        "id": "Histogram_3e037c2350559b93",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\n\n# Dataset for ocean currents\ncurrent_speeds = [0.95, 0.86, 1.23, 1.45, 1.09, 1.32, 1.75, 1.63, 1.28, 1.09, 1.45, 1.69, 1.82, 1.93, 1.75, 1.69, \n                  1.32, 1.21, 1.07, 0.98, 0.86, 1.03, 1.15, 1.29, 1.35, 1.40, 1.52, 1.62, 1.75, 1.86, 1.98, 1.79, \n                  1.65, 1.52, 1.47, 1.34, 1.21, 1.18, 1.04, 0.95, 0.85, 1.07, 1.34, 1.57, 1.72, 1.89, 1.71, 1.63, \n                  1.45, 1.38, 1.26, 1.12, 1.02, 0.97, 0.85, 1.09, 1.23, 1.41, 1.67]\n\n# Calculate the number of bins - \n#formula can be adjusted accordingly, this is one of the common ones known as the square-root choice\nnum_bins = int(len(current_speeds)**0.5)\n\n# Create histogram using matplotlib\nplt.hist(current_speeds, bins=num_bins, edgecolor='black')\n\n# Adding Labels and title\nplt.title('Ocean Currents Speed Over Past 50 Years')\nplt.xlabel('Current Speed (m/s)')\nplt.ylabel('Frequency')\n\n# Show Plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Stroke the bars that contain the center point of the bounding box with a line width of 3.96 and a foreground color of #e9d479. Additionally, make sure to set the clipping state of these bars to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_3e037c2350559b93/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Dataset for ocean currents\ncurrent_speeds = [0.95, 0.86, 1.23, 1.45, 1.09, 1.32, 1.75, 1.63, 1.28, 1.09, 1.45, 1.69, 1.82, 1.93, 1.75, 1.69, \n                  1.32, 1.21, 1.07, 0.98, 0.86, 1.03, 1.15, 1.29, 1.35, 1.40, 1.52, 1.62, 1.75, 1.86, 1.98, 1.79, \n                  1.65, 1.52, 1.47, 1.34, 1.21, 1.18, 1.04, 0.95, 0.85, 1.07, 1.34, 1.57, 1.72, 1.89, 1.71, 1.63, \n                  1.45, 1.38, 1.26, 1.12, 1.02, 0.97, 0.85, 1.09, 1.23, 1.41, 1.67]\n\n# Calculate the number of bins - \n#formula can be adjusted accordingly, this is one of the common ones known as the square-root choice\nnum_bins = int(len(current_speeds)**0.5)\n\n# Create histogram using matplotlib\nn, bins, patches = plt.hist(current_speeds, bins=num_bins, edgecolor='black')\n\n# Adding Labels and title\nplt.title('Ocean Currents Speed Over Past 50 Years')\nplt.xlabel('Current Speed (m/s)')\nplt.ylabel('Frequency')\n\n# Stroke and clip the selected bars\nstroke_effect = path_effects.withStroke(linewidth=3.9621935485242568, foreground='#e9d479')\nfor idx, patch in enumerate(patches):\n    if idx in [2, 5, 8]:  # Example indices to modify\n        patch.set_path_effects([stroke_effect])\n        patch.set_clip_on(True)\n\n# Show Plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,8",
        "Test_image": "./test_dataset/Histogram/Histogram_3e037c2350559b93/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_3e037c2350559b93/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_3e037c2350559b93/figure.png"
    },
    {
        "id": "Histogram_c6d2e6f88641223c",
        "Input_code": "import matplotlib.pyplot as plt\n\ncount_ranges = ['0-1000', '1000-2000', '2000-3000', '3000-4000', '4000-5000', '5000-6000', '6000-7000', '7000-8000', '8000-9000', '9000-10000']\nfrequencies = [150, 200, 180, 140, 120, 90, 70, 50, 30, 20]\n\nplt.bar(count_ranges, frequencies)\nplt.xlabel('Streaming Count Ranges')\nplt.ylabel('Frequency of Days')\nplt.title('Distribution of Daily Music Streaming Counts')\nplt.xticks(rotation=45)\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping state of the bars that contain the center point of the bounding box to False. For the same points, change the line color of the bars linked to the target to #cadde0.",
        "Input_image": "./test_dataset/Histogram/Histogram_c6d2e6f88641223c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\ncount_ranges = ['0-1000', '1000-2000', '2000-3000', '3000-4000', '4000-5000', '5000-6000', '6000-7000', '7000-8000', '8000-9000', '9000-10000']\nfrequencies = [150, 200, 180, 140, 120, 90, 70, 50, 30, 20]\n\nbars = plt.bar(count_ranges, frequencies)\nplt.xlabel('Streaming Count Ranges')\nplt.ylabel('Frequency of Days')\nplt.title('Distribution of Daily Music Streaming Counts')\nplt.xticks(rotation=45)\nfor idx, bar in enumerate(bars):\n    if idx in [2, 5]:\n        bar.set_clip_on(False)\n        bar.set_edgecolor('#cadde0')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Histogram/Histogram_c6d2e6f88641223c/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_c6d2e6f88641223c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_c6d2e6f88641223c/figure.png"
    },
    {
        "id": "Histogram_8e517cdf3881dede",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\n\n# Data\nrock_diameters = [\"10-20\", \"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-90\", \"90-100\"]\nfrequency = [15, 12, 9, 7, 5, 3, 2, 1, 1]\n\n# Creating histogram\nplt.figure(figsize=[10,8])\nplt.bar(rock_diameters, frequency,color='blue', alpha=0.7)\n\n# Labels\nplt.xlabel(\"Rock Diameter Ranges (in cm)\", fontsize=12)\nplt.ylabel(\"Frequency of Rock Diameters\", fontsize=12)\nplt.title(\"Histogram of Rock Diameters encountered by Alien Rover\", fontsize=16)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the clipping state of the bars that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_8e517cdf3881dede/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\n\n# Data\nrock_diameters = [\"10-20\", \"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-90\", \"90-100\"]\nfrequency = [15, 12, 9, 7, 5, 3, 2, 1, 1]\n\n# Creating histogram\nplt.figure(figsize=[10,8])\nbars = plt.bar(rock_diameters, frequency,color='blue', alpha=0.7)\n\n# Labels\nplt.xlabel(\"Rock Diameter Ranges (in cm)\", fontsize=12)\nplt.ylabel(\"Frequency of Rock Diameters\", fontsize=12)\nplt.title(\"Histogram of Rock Diameters encountered by Alien Rover\", fontsize=16)\n\n# Set the clipping state of the object corresponding to the Target_object to False\nfor idx, bar in enumerate(bars):\n    if idx in [2, 4]:\n        bar.set_clip_on(False)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,4",
        "Test_image": "./test_dataset/Histogram/Histogram_8e517cdf3881dede/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_8e517cdf3881dede/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_8e517cdf3881dede/figure.png"
    },
    {
        "id": "Histogram_22b907a0f4b8879c",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\nminerals = ['Silica', 'Iron Oxide', 'Aluminum Oxide', 'Calcium Sulfate', 'Magnesium Oxide']\nfrequency = [43, 29, 18, 35, 22]\n\n# Creating an array with indices of mineral types\nx = np.arange(len(minerals))\n\n# Creating the histogram\nplt.bar(x, frequency, align='center', alpha=0.7)\n\n# Adding labels\nplt.xlabel('Mineral Types')\nplt.ylabel('Frequency of Mineral Occurrence')\nplt.title('Martian Soil Composition Analysis')\n\n# Displaying mineral names on the x-axis\nplt.xticks(x, minerals)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Apply a frosted glass effect to the bars that contain the center point of the bounding box. Set their transparency to 0.6157, change the border style to 'dashed', and adjust the border width to 2.9 with a color of '#94d5ab'.",
        "Input_image": "./test_dataset/Histogram/Histogram_22b907a0f4b8879c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given Data\nminerals = ['Silica', 'Iron Oxide', 'Aluminum Oxide', 'Calcium Sulfate', 'Magnesium Oxide']\nfrequency = [43, 29, 18, 35, 22]\n\n# Creating an array with indices of mineral types\nx = np.arange(len(minerals))\n\n# Creating the histogram\nbars = plt.bar(x, frequency, align='center', alpha=0.7)\n\n# Adding labels\nplt.xlabel('Mineral Types')\nplt.ylabel('Frequency of Mineral Occurrence')\nplt.title('Martian Soil Composition Analysis')\n\n# Displaying mineral names on the x-axis\nplt.xticks(x, minerals)\n\n# Modifying the bars\nfor idx, bar in enumerate(bars):\n    if idx in {1, 3}:\n        bar.set_alpha(0.6156960795724166)\nfor idx, bar in enumerate(bars):\n    if idx in {1, 3}:\n        bar.set_edgecolor('#94d5ab')\n        bar.set_linewidth(2.9)\n        bar.set_linestyle('dashed')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_22b907a0f4b8879c/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_22b907a0f4b8879c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_22b907a0f4b8879c/figure.png"
    },
    {
        "id": "Histogram_d0a47197747f85a0",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Confirmed COVID-19 cases in each state\ncases = [65000, 8500, 134000, 45000, 550000, 80000, 60000, 18000, 450000, 220000, 6000, \n         35000, 300000, 105000, 45000, 30000, 35000, 95000, 7500, 95000, 200000, 160000,\n         55000, 58000, 90000, 7000, 25000, 70000, 9000, 280000, 32000, 450000, 140000,\n         7000, 130000, 65000, 25000, 135000, 23000, 125000, 9000, 145000, 500000, 66000,\n         1500, 130000, 80000, 6000, 75000, 5000]\n\n# States in the USA \nstates = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', \n          'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', \n          'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', \n          'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska',\n          'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', \n          'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', \n          'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\n          'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n\nplt.figure(figsize=[20,10]) # Increase the size of the plot\nplt.bar(states, cases, align='center', color='blue', edgecolor='black')\nplt.xticks(rotation=90) \nplt.xlabel('States')\nplt.ylabel('Confirmed COVID-19 Cases')\nplt.title('Distribution of Confirmed COVID-19 Cases across the States in the USA') \nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Apply a stroke to the bars that contain the center point of the bounding box, using a linewidth of 4.27 and a foreground color of #fff893. Also, update the linewidth of these bars to 2.96.",
        "Input_image": "./test_dataset/Histogram/Histogram_d0a47197747f85a0/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\n# Confirmed COVID-19 cases in each state\ncases = [65000, 8500, 134000, 45000, 550000, 80000, 60000, 18000, 450000, 220000, 6000, \n         35000, 300000, 105000, 45000, 30000, 35000, 95000, 7500, 95000, 200000, 160000,\n         55000, 58000, 90000, 7000, 25000, 70000, 9000, 280000, 32000, 450000, 140000,\n         7000, 130000, 65000, 25000, 135000, 23000, 125000, 9000, 145000, 500000, 66000,\n         1500, 130000, 80000, 6000, 75000, 5000]\n\n# States in the USA \nstates = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', \n          'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', \n          'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', \n          'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska',\n          'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', \n          'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', \n          'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\n          'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n\nplt.figure(figsize=[20,10]) # Increase the size of the plot\nbars = plt.bar(states, cases, align='center', color='blue', edgecolor='black')\nplt.xticks(rotation=90) \nplt.xlabel('States')\nplt.ylabel('Confirmed COVID-19 Cases')\nplt.title('Distribution of Confirmed COVID-19 Cases across the States in the USA') \n\n# Apply stroke effect and set linewidth for selected bars\nstroke_effect = path_effects.withStroke(linewidth=4.274459372906779, foreground='#fff893')\nfor idx, bar in enumerate(bars):\n    if idx in [3, 7, 15]:  # Example indices\n        bar.set_path_effects([stroke_effect])\n        bar.set_linewidth(2.96)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "3,7,15",
        "Test_image": "./test_dataset/Histogram/Histogram_d0a47197747f85a0/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_d0a47197747f85a0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_d0a47197747f85a0/figure.png"
    },
    {
        "id": "Histogram_dc81858cc0669773",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Given data\nx = [\"400-425\", \"425-450\", \"450-475\", \"475-500\", \"500-525\", \"525-550\", \"550-575\", \"575-600\", \"600-625\", \"625-650\"]\ny = [15, 18, 22, 28, 32, 35, 30, 25, 20, 18]\n\n# Generate the histogram\nplt.bar(x, y, color='blue', alpha=0.7)\n\n# Set the title and labels\nplt.title('Colorful Interstellar Nebulae Formation Patterns')\nplt.xlabel('Color Wavelength Ranges (in nanometers)')\nplt.ylabel('Frequency of Color Wavelengths')\n\n# Show the figure with homogeneously distributed color bars\nplt.xticks(rotation='vertical')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a glow outline to the bars that contain the center point of the bounding box, with a thickness of 1.23 and a color of '#59cd2d'.",
        "Input_image": "./test_dataset/Histogram/Histogram_dc81858cc0669773/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import Rectangle\nimport matplotlib.patheffects as pe\n\n# Given data\nx = [\"400-425\", \"425-450\", \"450-475\", \"475-500\", \"500-525\", \"525-550\", \"550-575\", \"575-600\", \"600-625\", \"625-650\"]\ny = [15, 18, 22, 28, 32, 35, 30, 25, 20, 18]\n\n# Generate the histogram\nbars = plt.bar(x, y, color='blue', alpha=0.7)\n\n# Set the title and labels\nplt.title('Colorful Interstellar Nebulae Formation Patterns')\nplt.xlabel('Color Wavelength Ranges (in nanometers)')\nplt.ylabel('Frequency of Color Wavelengths')\n\n# Add a glow outline to the bars in the histogram corresponding to the Target_object with a thickness of 1.23 and color '#59cd2d'\ntarget_indices = {2, 5, 7}\nfor i, bar in enumerate(bars):\n    if i in target_indices:\n        bar.set_path_effects([pe.withStroke(linewidth=1.23, foreground='#59cd2d', alpha=0.8), pe.Normal()])\n\nplt.xticks(rotation='vertical')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_dc81858cc0669773/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_dc81858cc0669773/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_dc81858cc0669773/figure.png"
    },
    {
        "id": "Histogram_5d7d070390478384",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for energy consumption levels and frequencies\nenergy_levels = ['100-500 GWh', '500-1000 GWh', '1000-1500 GWh', '1500-2000 GWh', '2000-2500 GWh']\nfrequencies = [20, 35, 25, 15, 10]\n\n# Plotting the histogram\nplt.bar(energy_levels, frequencies, color='blue')\n\n# Labeling the axes\nplt.xlabel('Energy Consumption Levels (GWh)', fontsize=12)\nplt.ylabel('Number of Countries', fontsize=12)\n\n# Setting the title\nplt.title('Energy Consumption Trends Over 10 Years', fontsize=16)\n\n# Rotating the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the bars that contain the center point of the bounding box to 0.42. For these same bars, set the picker state to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_5d7d070390478384/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for energy consumption levels and frequencies\nenergy_levels = ['100-500 GWh', '500-1000 GWh', '1000-1500 GWh', '1500-2000 GWh', '2000-2500 GWh']\nfrequencies = [20, 35, 25, 15, 10]\n\n# Plotting the histogram\nbars = plt.bar(energy_levels, frequencies, color='blue')\n\n# Setting transparency and picker state for the target object\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_alpha(0.42)\n        bar.set_picker(False)\n\n# Labeling the axes\nplt.xlabel('Energy Consumption Levels (GWh)', fontsize=12)\nplt.ylabel('Number of Countries', fontsize=12)\n\n# Setting the title\nplt.title('Energy Consumption Trends Over 10 Years', fontsize=16)\n\n# Rotating the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_5d7d070390478384/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_5d7d070390478384/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_5d7d070390478384/figure.png"
    },
    {
        "id": "Histogram_d63a92545d852071",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Defining the dataset\nelevation_values = [150, 300, 450, 600, 900, 1200, 1550, 1800, 2150, 2450, 2700, 2950]\n\n# Create bins for the range of elevation values\nbins = np.arange(0,3001,300) \n\n# Setting plot size\nplt.figure(figsize=(10,7))\n\n# Making the histogram\nplt.hist(elevation_values, bins=bins, edgecolor='black', alpha=0.7)\n\n# Setting plot labels and title\nplt.xlabel('Elevation (in meters)', fontsize=13)\nplt.ylabel('Frequency', fontsize=13)\nplt.title('Distribution of Elevations in Geological Layers', fontsize=15)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the line color of the bars that contain the center point of the bounding box to #fa7b54, and make these bars invisible by setting their visibility to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_d63a92545d852071/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Defining the dataset\nelevation_values = [150, 300, 450, 600, 900, 1200, 1550, 1800, 2150, 2450, 2700, 2950]\n\n# Create bins for the range of elevation values\nbins = np.arange(0,3001,300) \n\n# Setting plot size\nplt.figure(figsize=(10,7))\n\n# Making the histogram\nn, bins, patches = plt.hist(elevation_values, bins=bins, edgecolor='black', alpha=0.7)\n\n# Modify the linecolor and visibility of the selected bars\nfor i in [2, 5]:\n    patches[i].set_edgecolor('#fa7b54')\n    patches[i].set_visible(False)\n\n# Setting plot labels and title\nplt.xlabel('Elevation (in meters)', fontsize=13)\nplt.ylabel('Frequency', fontsize=13)\nplt.title('Distribution of Elevations in Geological Layers', fontsize=15)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Histogram/Histogram_d63a92545d852071/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_d63a92545d852071/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_d63a92545d852071/figure.png"
    },
    {
        "id": "Histogram_4a5ddbaf25e11e2c",
        "Input_code": "# Importing required libraries\nimport matplotlib.pyplot as plt\n\n# Dataset\ncloud_cover_duration_in_mins = [5, 7, 9, 12, 15, 18, 20, 25, 27, 29, 32, 35, 37, 40, 42, 45, 47, 50, 52, 55, 57, 60, 62, 65, \n                                68, 70, 73, 75, 78, 80, 83, 85, 87, 90, 92, 95, 97]\n\n# Create Histogram\nplt.hist(cloud_cover_duration_in_mins, bins=10, edgecolor='black')\n\n# Set labels\nplt.title('Histogram of cloud cover duration over a mountain landscape')\nplt.xlabel('Cloud Cover Duration in Minutes')\nplt.ylabel('Frequency')\n\n# Display Plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, with a shadow offset of (2.80, 3.83) and gold as the shadow color. Also, adjust the clipping box for those same bars to fit within a bounding box defined by the coordinates (26, 215) and a size of 333 in width and 540 in height, using the pattern of `matplotlib.transforms.Bbox`.",
        "Input_image": "./test_dataset/Histogram/Histogram_4a5ddbaf25e11e2c/Visual_figure.png",
        "Test_code": "# Importing required libraries\nimport matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\nfrom matplotlib.transforms import Bbox\n\n# Dataset\ncloud_cover_duration_in_mins = [5, 7, 9, 12, 15, 18, 20, 25, 27, 29, 32, 35, 37, 40, 42, 45, 47, 50, 52, 55, 57, 60, 62, 65, \n                                68, 70, 73, 75, 78, 80, 83, 85, 87, 90, 92, 95, 97]\n\n# Create Histogram\nn, bins, patches = plt.hist(cloud_cover_duration_in_mins, bins=10, edgecolor='black')\n\n# Set shadow effect and clip box for selected bars\nfor idx, patch in enumerate(patches):\n    if idx in [2, 4]:  # Example indices, adjust as needed\n        patch.set_path_effects([SimplePatchShadow(offset=(2.80,3.83), shadow_rgbFace='gold'), Normal()])\n        patch.set_clip_box(Bbox.from_bounds(26, 215, 333, 540))\n\n# Set labels\nplt.title('Histogram of cloud cover duration over a mountain landscape')\nplt.xlabel('Cloud Cover Duration in Minutes')\nplt.ylabel('Frequency')\n\n# Display Plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,4",
        "Test_image": "./test_dataset/Histogram/Histogram_4a5ddbaf25e11e2c/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_4a5ddbaf25e11e2c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_4a5ddbaf25e11e2c/figure.png"
    },
    {
        "id": "Histogram_95fae9b71e9639a4",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ndensity_ranges = ['10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70-80']\ndust_particles = [15, 22, 18, 25, 12, 16, 9]\n\n# Create Figure and Axis\nfig, ax = plt.subplots()\n\n# Create Histogram\nax.bar(density_ranges, dust_particles, color='skyblue', edgecolor='black')\n\n# Set Labels and Title\nax.set_xlabel('Density Range of Cosmic Dust', fontsize=14)\nax.set_ylabel('Amount of Dust Particles', fontsize=14)\nax.set_title('Cosmic Dust Distribution in Galaxy', fontsize=16)\n\n# Show Figure\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the bars containing the center point of the bounding box to #f5976c, and update their label to 'A new Label'.",
        "Input_image": "./test_dataset/Histogram/Histogram_95fae9b71e9639a4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data\ndensity_ranges = ['10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70-80']\ndust_particles = [15, 22, 18, 25, 12, 16, 9]\n\n# Create Figure and Axis\nfig, ax = plt.subplots()\n\n# Create Histogram\nbars = ax.bar(density_ranges, dust_particles, color='skyblue', edgecolor='black')\n\n# Modify specific bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:  # Selecting bars at index 1 and 3\n        bar.set_facecolor('#f5976c')\n        bar.set_label('A new Label')\n\n# Set Labels and Title\nax.set_xlabel('Density Range of Cosmic Dust', fontsize=14)\nax.set_ylabel('Amount of Dust Particles', fontsize=14)\nax.set_title('Cosmic Dust Distribution in Galaxy', fontsize=16)\n\n# Show Figure\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_95fae9b71e9639a4/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_95fae9b71e9639a4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_95fae9b71e9639a4/figure.png"
    },
    {
        "id": "Histogram_ff19ec3a4a13960a",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for calorie ranges and frequencies\ncalories = [250]*20 + [350]*40 + [450]*65 + [550]*45 + [650]*30 + [750]*25\n\n# Create bins\nbins = [200, 300, 400, 500, 600, 700, 800]\n\n# Plotting the histogram\nplt.hist(calories, bins, edgecolor='black')\n\n# Labeling the axes\nplt.xlabel('Calorie Intervals')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Cheeseburger Calorie Distribution')\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the snap state of the bars containing the center point of the bounding box to False, and also set their visibility to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_ff19ec3a4a13960a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points for calorie ranges and frequencies\ncalories = [250]*20 + [350]*40 + [450]*65 + [550]*45 + [650]*30 + [750]*25\n\n# Create bins\nbins = [200, 300, 400, 500, 600, 700, 800]\n\n# Plotting the histogram\nn, bins, patches = plt.hist(calories, bins, edgecolor='black')\n\n# Labeling the axes\nplt.xlabel('Calorie Intervals')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Cheeseburger Calorie Distribution')\n\n# Modifying the snap state and visibility of the selected bars\nfor i in [2, 4]:  # Selecting bars at indices 2 and 4\n    patches[i].set_snap(False)\n    patches[i].set_visible(False)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,4",
        "Test_image": "./test_dataset/Histogram/Histogram_ff19ec3a4a13960a/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_ff19ec3a4a13960a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_ff19ec3a4a13960a/figure.png"
    },
    {
        "id": "Histogram_0308607df92dec20",
        "Input_code": "# importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Setting X and Y data\nx_labels = ['5-10', '10-20', '20-50', '50-100', '100-200', '200-500', '500-1000']\ny_values = [12, 19, 27, 35, 24, 15, 8]\n\n# creating a new figure\nplt.figure(figsize=(10,5))\n\n# plotting the bar chart\nplt.bar(x_labels, y_values, color='skyblue')\n\n# setting the title\nplt.title('Galactic Black Hole Mass Analysis')\n\n# setting x-axis label\nplt.xlabel('Black Hole Mass Intervals (in Solar Masses)')\n\n# setting y-axis label\nplt.ylabel('Frequency of Black Holes')\n\n# displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge style of the bars that contain the center point of the bounding box to 'dotted' and set their edge color to '#f28d95'.",
        "Input_image": "./test_dataset/Histogram/Histogram_0308607df92dec20/Visual_figure.png",
        "Test_code": "# importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Setting X and Y data\nx_labels = ['5-10', '10-20', '20-50', '50-100', '100-200', '200-500', '500-1000']\ny_values = [12, 19, 27, 35, 24, 15, 8]\n\n# creating a new figure\nplt.figure(figsize=(10,5))\n\n# plotting the bar chart\nbars = plt.bar(x_labels, y_values, color='skyblue')\n\n# setting the title\nplt.title('Galactic Black Hole Mass Analysis')\n\n# setting x-axis label\nplt.xlabel('Black Hole Mass Intervals (in Solar Masses)')\n\n# setting y-axis label\nplt.ylabel('Frequency of Black Holes')\n\n# Set the edge style of the bars in the histogram corresponding to the Target_object to 'dotted' with edge color '#f28d95'\ntarget_indices = {1, 3, 5}\nfor i, bar in enumerate(bars):\n    if i in target_indices:\n        bar.set_edgecolor('#f28d95')\n        bar.set_linestyle('dotted')\n\n# displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3,5",
        "Test_image": "./test_dataset/Histogram/Histogram_0308607df92dec20/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_0308607df92dec20/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_0308607df92dec20/figure.png"
    },
    {
        "id": "Histogram_15730c21520f461f",
        "Input_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Marine species and their respective encounter frequency\nspecies = ['Coral Reefs', 'Blue Whales', 'Clownfish', 'Sea Turtles', 'Jellyfish']\nfrequency = [30, 8, 15, 20, 12]\n\n# Plotting histogram\nplt.bar(species, frequency, color=('r','b','g','y','c'))\nplt.xlabel('Marine Species',fontsize=12)\nplt.ylabel('Frequency of Species Encounters',fontsize=12)\nplt.title('Oceanic Underwater Life Biodiversity Mapping',fontsize=15)\nplt.xticks(rotation=45,fontsize=10)\nplt.yticks(fontsize=10)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Apply a glow effect to the bars that contain the center point of the bounding box, with a glow intensity of 0.4257698023291733 and the color #c0369e.",
        "Input_image": "./test_dataset/Histogram/Histogram_15730c21520f461f/Visual_figure.png",
        "Test_code": "# Importing necessary libraries\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport matplotlib.patheffects as pe\n\n# Marine species and their respective encounter frequency\nspecies = ['Coral Reefs', 'Blue Whales', 'Clownfish', 'Sea Turtles', 'Jellyfish']\nfrequency = [30, 8, 15, 20, 12]\n\n# Plotting histogram\nbars = plt.bar(species, frequency, color=('r','b','g','y','c'))\nplt.xlabel('Marine Species',fontsize=12)\nplt.ylabel('Frequency of Species Encounters',fontsize=12)\nplt.title('Oceanic Underwater Life Biodiversity Mapping',fontsize=15)\nplt.xticks(rotation=45,fontsize=10)\nplt.yticks(fontsize=10)\n\n# Adding glow effect to the bars corresponding to the Target_object\ntarget_indices = {1, 3}  # Randomly selected bars\nglow_intensity = 0.4257698023291733\nglow_color = '#c0369e'\nfor i, bar in enumerate(plt.gca().patches):\n    if i in target_indices:\n        bar.set_path_effects([pe.withStroke(linewidth=10*glow_intensity, foreground=glow_color, alpha=0.4), pe.Normal()])\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_15730c21520f461f/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_15730c21520f461f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_15730c21520f461f/figure.png"
    },
    {
        "id": "Histogram_9c476c921e7f276b",
        "Input_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\n\n# Dataset With Alpha Helix Lengths\nalpha_helix_lengths = [4.5, 7.2, 9.1, 12.3, 15.6, 18.2, 21.0, 24.5, 27.8, 30.2, 33.1, 36.7, 39.4, \n                       42.0, 45.5, 48.3, 51.6, 55.0, 58.7, 62.1, 65.6, 68.9, 71.5, 74.2, 77.8, 80.4, \n                       83.2, 86.6, 89.3, 92.1, 95.5, 98.4, 101.0, 104.5, 107.3, 110.2, 113.6, 116.7, \n                       119.3, 122.0, 125.6, 128.4, 131.0, 134.5, 137.3, 140.2, 143.6, 146.7, 149.3, 152.0, 155.6]\n\n# Create the histogram\nplt.hist(alpha_helix_lengths, bins=10, edgecolor='black')\n\n# Set the title and labels\nplt.title('Distribution of Alpha Helix Lengths in Protein Structures')\nplt.xlabel('Length of Alpha Helix (Angstroms)')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Update the linewidth of the bar that contains the center point of the bounding box to 3.09 and change its line color to #15035a.",
        "Input_image": "./test_dataset/Histogram/Histogram_9c476c921e7f276b/Visual_figure.png",
        "Test_code": "# Import necessary libraries\nimport matplotlib.pyplot as plt\n\n# Dataset With Alpha Helix Lengths\nalpha_helix_lengths = [4.5, 7.2, 9.1, 12.3, 15.6, 18.2, 21.0, 24.5, 27.8, 30.2, 33.1, 36.7, 39.4, \n                       42.0, 45.5, 48.3, 51.6, 55.0, 58.7, 62.1, 65.6, 68.9, 71.5, 74.2, 77.8, 80.4, \n                       83.2, 86.6, 89.3, 92.1, 95.5, 98.4, 101.0, 104.5, 107.3, 110.2, 113.6, 116.7, \n                       119.3, 122.0, 125.6, 128.4, 131.0, 134.5, 137.3, 140.2, 143.6, 146.7, 149.3, 152.0, 155.6]\n\n# Create the histogram\nn, bins, patches = plt.hist(alpha_helix_lengths, bins=10, edgecolor='black')\n\n# Modify the linewidth and linecolor of the first and third bins\nfor patch in [patches[0], patches[2]]:\n    patch.set_linewidth(3.09)\n    patch.set_edgecolor('#15035a')\n\n# Set the title and labels\nplt.title('Distribution of Alpha Helix Lengths in Protein Structures')\nplt.xlabel('Length of Alpha Helix (Angstroms)')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Histogram/Histogram_9c476c921e7f276b/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_9c476c921e7f276b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_9c476c921e7f276b/figure.png"
    },
    {
        "id": "Histogram_e76d350ffc7ab883",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Center points of ranges for the X-axis (Tree Density per sq. km)\nx = [25, 75, 125, 175, 225, 275, 325, 375, 425, 475]\n\n# Data points for the Y-axis (Frequency of Occurrences)\nw = [10, 15, 20, 25, 30, 25, 20, 15, 10, 5]\n\n# Plot histogram\nplt.hist(x, bins=10, weights=w, color='skyblue')\n\n# set labels for better readability\nplt.xlabel('Tree Density per sq. km')\nplt.ylabel('Frequency of Occurrences')\nplt.title('Jungle Canopy Density Distribution Pattern')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the facecolor of the bars that contain the center point of the bounding box to #f08903, and also change the linestyle of these bars to 'dashed'.",
        "Input_image": "./test_dataset/Histogram/Histogram_e76d350ffc7ab883/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Center points of ranges for the X-axis (Tree Density per sq. km)\nx = [25, 75, 125, 175, 225, 275, 325, 375, 425, 475]\n\n# Data points for the Y-axis (Frequency of Occurrences)\nw = [10, 15, 20, 25, 30, 25, 20, 15, 10, 5]\n\n# Plot histogram\nn, bins, patches = plt.hist(x, bins=10, weights=w, color='skyblue')\n\n# Modify specific bars\nfor i in [2, 4]:  # Selecting bars at indices 2 and 4\n    patches[i].set_facecolor('#f08903')\n    patches[i].set_linestyle('dashed')\n\n# set labels for better readability\nplt.xlabel('Tree Density per sq. km')\nplt.ylabel('Frequency of Occurrences')\nplt.title('Jungle Canopy Density Distribution Pattern')\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,4",
        "Test_image": "./test_dataset/Histogram/Histogram_e76d350ffc7ab883/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_e76d350ffc7ab883/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_e76d350ffc7ab883/figure.png"
    },
    {
        "id": "Histogram_4a517a0a74ae9457",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Sizes of Galactic Gas Clouds (in light-years)\nsizes = [1000, 1500, 1200, 1350, 1400, 1250, 1300, 1550, 1100,\n         1450, 1600, 1150, 1700, 1020, 1800, 1230, 1320, 1270,\n         1380, 1420, 1650, 1900, 1120, 1180, 1750, 1080]\n\n# Create histogram\nplt.hist(sizes, bins='auto', color='skyblue', edgecolor='black')\n\n# Set Labels and Title\nplt.xlabel('Size of Galactic Gas Clouds (in light-years)')\nplt.ylabel('Frequency')\nplt.title('Distribution of Sizes of Galactic Gas Clouds')\n\n# Ensuring all labels are readable\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a glow effect to the bars that contain the center point of the bounding box, with an intensity of 0.3027321156917125 and a color of #27cf79.",
        "Input_image": "./test_dataset/Histogram/Histogram_4a517a0a74ae9457/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport matplotlib.patheffects as pe\n\n# Sizes of Galactic Gas Clouds (in light-years)\nsizes = [1000, 1500, 1200, 1350, 1400, 1250, 1300, 1550, 1100,\n         1450, 1600, 1150, 1700, 1020, 1800, 1230, 1320, 1270,\n         1380, 1420, 1650, 1900, 1120, 1180, 1750, 1080]\n\n# Create histogram\nplt.hist(sizes, bins='auto', color='skyblue', edgecolor='black')\n\n# Set Labels and Title\nplt.xlabel('Size of Galactic Gas Clouds (in light-years)')\nplt.ylabel('Frequency')\nplt.title('Distribution of Sizes of Galactic Gas Clouds')\n\n# Add a glow effect to the bars in the histogram corresponding to the Target_object with glow intensity of 0.3027321156917125 and color #27cf79\ntarget_indices = {2, 5, 7}\nglow_intensity = 0.3027321156917125\nglow_color = '#27cf79'\nfor i, bar in enumerate(plt.gca().patches):\n    if i in target_indices:\n        bar.set_path_effects([pe.withStroke(linewidth=10*glow_intensity, foreground=glow_color, alpha=0.4), pe.Normal()])\n\n# Ensuring all labels are readable\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_4a517a0a74ae9457/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_4a517a0a74ae9457/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_4a517a0a74ae9457/figure.png"
    },
    {
        "id": "Histogram_812af4fce5cce51f",
        "Input_code": "# Start by importing necessary libraries for data visualization \nimport matplotlib.pyplot as plt \n\n# Set the data points\ndata = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150]\n\n# Create the histogram using the hist() function\nplt.hist(data, bins=10, edgecolor='black') \n\n# Set the title and labels \nplt.title('Distribution of Twilight Transition Times') \nplt.xlabel('Time Interval (Minutes)') \nplt.ylabel('Frequency') \n\n# Show the plot \nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the bars that contain the center point of the bounding box to #ee976d. Also, disable the picker state for these bars by setting it to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_812af4fce5cce51f/Visual_figure.png",
        "Test_code": "# Start by importing necessary libraries for data visualization \nimport matplotlib.pyplot as plt \n\n# Set the data points\ndata = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150]\n\n# Create the histogram using the hist() function\nn, bins, patches = plt.hist(data, bins=10, edgecolor='black') \n\n# Set the facecolor and picker state of the selected bars\nfor i in [2, 5]:\n    patches[i].set_facecolor('#ee976d')\n    patches[i].set_picker(False)\n\n# Set the title and labels \nplt.title('Distribution of Twilight Transition Times') \nplt.xlabel('Time Interval (Minutes)') \nplt.ylabel('Frequency') \n\n# Show the plot \nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Histogram/Histogram_812af4fce5cce51f/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_812af4fce5cce51f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_812af4fce5cce51f/figure.png"
    },
    {
        "id": "Histogram_f87bc6aa681dfd83",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Heights in inches (converted from feet and inches to inches)\nheights_inches = [\n    60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72, 72, 73, 74, 74, 75, 75, 76, 76, 77, 78, 79, 79, 80, 81, 81, 82, 82, 82, 83, 83, 84, 84, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 93, 96, 96, 97\n]\n\n# Create a histogram of the heights\nplt.hist(heights_inches, bins=range(59, 99,2), edgecolor='black', alpha=0.75)\nplt.title('Comic Book Characters Height Distribution')\nplt.xlabel('Height (inches)')\nplt.ylabel('Frequency')\nplt.grid(True)\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, using a shadow offset of (4.00, 3.90) and gold as the shadow color. Also, stroke these same bars with a linewidth of 4.58 and a foreground color of #c364b5.",
        "Input_image": "./test_dataset/Histogram/Histogram_f87bc6aa681dfd83/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, withStroke, Normal\n\n# Heights in inches (converted from feet and inches to inches)\nheights_inches = [\n    60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72, 72, 73, 74, 74, 75, 75, 76, 76, 77, 78, 79, 79, 80, 81, 81, 82, 82, 82, 83, 83, 84, 84, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 93, 96, 96, 97\n]\n\n# Create a histogram of the heights\nn, bins, patches = plt.hist(heights_inches, bins=range(59, 99,2), edgecolor='black', alpha=0.75)\n\n# Apply shadow and stroke effects to selected bars\nfor i in [0, 2, 4]:  # Example indices of bars to modify\n    patches[i].set_path_effects([\n        SimplePatchShadow(offset=(4.00,3.90), shadow_rgbFace='gold'),\n        withStroke(linewidth=4.578780481346964, foreground='#c364b5'),\n        Normal()\n    ])\n\nplt.title('Comic Book Characters Height Distribution')\nplt.xlabel('Height (inches)')\nplt.ylabel('Frequency')\nplt.grid(True)\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2,4",
        "Test_image": "./test_dataset/Histogram/Histogram_f87bc6aa681dfd83/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_f87bc6aa681dfd83/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_f87bc6aa681dfd83/figure.png"
    },
    {
        "id": "Histogram_cc416e698beb487d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Heights in inches (converted from feet and inches to inches)\nheights_inches = [\n    60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72, 72, 73, 74, 74, 75, 75, 76, 76, 77, 78, 79, 79, 80, 81, 81, 82, 82, 82, 83, 83, 84, 84, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 93, 96, 96, 97\n]\n\n# Create a histogram of the heights\nplt.hist(heights_inches, bins=range(59, 99,2), edgecolor='black', alpha=0.75)\nplt.title('Comic Book Characters Height Distribution')\nplt.xlabel('Height (inches)')\nplt.ylabel('Frequency')\nplt.grid(True)\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the bars that contain the center point of the bounding box to the one defined by the bottom-left corner at (83, 355), a width of 668, and a height of 399, following the `matplotlib.transforms.Bbox` pattern. Also, make sure that the animated state of these bars is set to False for the specified points.",
        "Input_image": "./test_dataset/Histogram/Histogram_cc416e698beb487d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.transforms as transforms\n\n# Heights in inches (converted from feet and inches to inches)\nheights_inches = [\n    60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72, 72, 73, 74, 74, 75, 75, 76, 76, 77, 78, 79, 79, 80, 81, 81, 82, 82, 82, 83, 83, 84, 84, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 93, 96, 96, 97\n]\n\n# Create a histogram of the heights\nhist = plt.hist(heights_inches, bins=range(59, 99,2), edgecolor='black', alpha=0.75)\nplt.title('Comic Book Characters Height Distribution')\nplt.xlabel('Height (inches)')\nplt.ylabel('Frequency')\nplt.grid(True)\n\n# Set the clip box and animated state for the first bar\nfor idx,rect in enumerate(plt.gca().patches):\n    if idx in [1,3,5]:\n        rect.set_clip_box(transforms.Bbox.from_bounds(83, 155, 268, 399))\n        rect.set_animated(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3,5",
        "Test_image": "./test_dataset/Histogram/Histogram_cc416e698beb487d/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_cc416e698beb487d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_cc416e698beb487d/figure.png"
    },
    {
        "id": "Histogram_135a0a3c7d01f2a6",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for birth months and frequencies\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\nfrequencies = [75, 80, 70, 85, 90, 120, 110, 95, 80, 85, 75, 70]\n\n# Convert months to numbers for histogram\nmonth_numbers = [months.index(month)+1 for month in months]\n\n# Plotting the histogram with frequencies as weights\nplt.hist(month_numbers, bins=12, weights=frequencies, alpha=0.6, color='r')\n\n# Labeling the axes\nplt.xlabel('Birth Months')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Birth Month and Personality Traits')\n\n# Setting x-axis ticks to month names\nplt.xticks(range(1, 13), months, rotation='vertical')\n\n# Display the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge style of the bars that contain the center point of the bounding box to 'dotted', and set their edge color to '#0121de'.",
        "Input_image": "./test_dataset/Histogram/Histogram_135a0a3c7d01f2a6/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points for birth months and frequencies\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\nfrequencies = [75, 80, 70, 85, 90, 120, 110, 95, 80, 85, 75, 70]\n\n# Convert months to numbers for histogram\nmonth_numbers = [months.index(month)+1 for month in months]\n\n# Plotting the histogram with frequencies as weights\nplt.hist(month_numbers, bins=12, weights=frequencies, alpha=0.6, color='r')\n\n# Labeling the axes\nplt.xlabel('Birth Months')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Birth Month and Personality Traits')\n\n# Setting x-axis ticks to month names\nplt.xticks(range(1, 13), months, rotation='vertical')\n\n# Modify the edge style of the bars corresponding to the Target_object\nbars = plt.gca().patches\ntarget_indices = {1, 5, 7}  # Randomly selected bars\nfor idx, bar in enumerate(bars):\n    if idx in target_indices:\n        bar.set_edgecolor('#0121de')\n        bar.set_linestyle('dotted')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_135a0a3c7d01f2a6/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_135a0a3c7d01f2a6/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_135a0a3c7d01f2a6/figure.png"
    },
    {
        "id": "Histogram_e05375315becfada",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for birth months and frequencies\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\nfrequencies = [75, 80, 70, 85, 90, 120, 110, 95, 80, 85, 75, 70]\n\n# Convert months to numbers for histogram\nmonth_numbers = [months.index(month)+1 for month in months]\n\n# Plotting the histogram with frequencies as weights\nplt.hist(month_numbers, bins=12, weights=frequencies, alpha=0.6, color='r')\n\n# Labeling the axes\nplt.xlabel('Birth Months')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Birth Month and Personality Traits')\n\n# Setting x-axis ticks to month names\nplt.xticks(range(1, 13), months, rotation='vertical')\n\n# Display the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the clipping box for the bars that contain the center point of the bounding box to have a bottom-left corner at (6, 4), with a width of 121 and a height of 98, following the matplotlib.transforms.Bbox pattern.",
        "Input_image": "./test_dataset/Histogram/Histogram_e05375315becfada/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.transforms import Bbox\n\n# Data points for birth months and frequencies\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\nfrequencies = [75, 80, 70, 85, 90, 120, 110, 95, 80, 85, 75, 70]\n\n# Convert months to numbers for histogram\nmonth_numbers = [months.index(month)+1 for month in months]\n\n# Plotting the histogram with frequencies as weights\nn, bins, patches = plt.hist(month_numbers, bins=12, weights=frequencies, alpha=0.6, color='r')\n\n# Setting the clip box for the first bar\npatches[0].set_clip_box(Bbox.from_bounds(6, 43, 121, 98))\n\n# Labeling the axes\nplt.xlabel('Birth Months')\nplt.ylabel('Frequency')\n\n# Setting the title\nplt.title('Birth Month and Personality Traits')\n\n# Setting x-axis ticks to month names\nplt.xticks(range(1, 13), months, rotation='vertical')\n\n# Display the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Histogram/Histogram_e05375315becfada/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_e05375315becfada/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_e05375315becfada/figure.png"
    },
    {
        "id": "Histogram_4654b813a7234ff8",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for breed categories and frequencies\nbreeds = [\"Siamese\", \"Persian\", \"Maine Coon\", \"Bengal\", \"Sphynx\"]\nweight_categories = [\"2-4\", \"4-6\", \"6-8\", \"8-10\", \"10-12\"]\nfrequencies = np.array([\n    [10, 15, 8, 5, 2],\n    [5, 20, 12, 10, 3],\n    [2, 8, 10, 15, 6],\n    [9, 12, 10, 7, 4],\n    [4, 6, 7, 10, 12]\n])\n\nx = np.arange(len(weight_categories))\nwidth = 0.15\n\nfig, ax = plt.subplots()\nfor i in range(len(breeds)):\n    rects = ax.bar(x - 2*width + i*width, frequencies[i], width, label=breeds[i])\n\nax.set_ylabel('Number of Cats')\nax.set_xlabel('Weight (pounds)')\nax.set_title('Weight Distribution of Cats by Breed')\nax.set_xticks(x)\nax.set_xticklabels(weight_categories)\nax.legend()\n\nfig.tight_layout()\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a glow outline to the bars in the histogram that include the center point of the bounding box, with a thickness of 0.89 and a color of '#1ec9ba'.",
        "Input_image": "./test_dataset/Histogram/Histogram_4654b813a7234ff8/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import withStroke\n# Data points for breed categories and frequencies\nbreeds = [\"Siamese\", \"Persian\", \"Maine Coon\", \"Bengal\", \"Sphynx\"]\nweight_categories = [\"2-4\", \"4-6\", \"6-8\", \"8-10\", \"10-12\"]\nfrequencies = np.array([\n    [10, 15, 8, 5, 2],\n    [5, 20, 12, 10, 3],\n    [2, 8, 10, 15, 6],\n    [9, 12, 10, 7, 4],\n    [4, 6, 7, 10, 12]\n])\n\n# Define the Target_object bars (e.g., breed index 1 and 3)\ntarget_indices = [1, 3]  # Corresponds to \"Persian\" and \"Bengal\"\nglow_color = '#1ec9ba'\nglow_thickness = 0.89\n\nx = np.arange(len(weight_categories))\nwidth = 0.15\n\nfig, ax = plt.subplots()\n\nfor i in range(len(breeds)):\n    rects = ax.bar(x - 2*width + i*width, frequencies[i], width, label=breeds[i])\n    \n # Add glow outline for the target bars\nfor i,_ in enumerate(plt.gca().containers):\n    if i in target_indices:\n        for rect in plt.gca().containers[i]:\n            # Create a larger rectangle behind the bar for the glow effect\n            rect.set_path_effects([withStroke(linewidth=0.89, foreground=glow_color)])\n\n        \n\n# Add labels and titles\nax.set_ylabel('Number of Cats')\nax.set_xlabel('Weight (pounds)')\nax.set_title('Weight Distribution of Cats by Breed')\nax.set_xticks(x)\nax.set_xticklabels(weight_categories)\nax.legend()\n\nfig.tight_layout()\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\nplt.show()\n",
        "Target_legend": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_4654b813a7234ff8/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_4654b813a7234ff8/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_4654b813a7234ff8/figure.png"
    },
    {
        "id": "Histogram_94b11ed60511f76e",
        "Input_code": "# necessary libraries\nimport matplotlib.pyplot as plt\n\n# dataset\ndata = [32, 96, 45, 67, 76, 28, 79, 62, 43, 81, 70, 61, 95, 44, 60, 69, 71, 23, 69, 54, 76, 67, 82, 97, 26, 34, 18, 16, 59, 88, 29, 30, 66, 23, 65, 72, 20, 78, 49, 73, 62, 87, 37, 68, 81, 80, 77, 92, 81, 52, 43, 68, 71, 86]\n\n# create histogram\nplt.hist(data, bins = 10, edgecolor = 'black')\n\n# create labels\nplt.xlabel('Value Ranges')\nplt.ylabel('Frequency')\nplt.title('Data Points Histogram')\n\n# display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the edge color of the bars that contain the center point of the bounding box to a gradient that starts with #a2b830 and ends with #770a0a. Additionally, apply a soft glow effect to these bars using a glow color of '#b9fe9a' with an intensity of 0.497.",
        "Input_image": "./test_dataset/Histogram/Histogram_94b11ed60511f76e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# dataset\ndata = [32, 96, 45, 67, 76, 28, 79, 62, 43, 81, 70, 61, 95, 44, 60, 69, 71, 23, 69, 54, 76, 67, 82, 97, 26, 34, 18, 16, 59, 88, 29, 30, 66, 23, 65, 72, 20, 78, 49, 73, 62, 87, 37, 68, 81, 80, 77, 92, 81, 52, 43, 68, 71, 86]\n\n# create histogram\nn, bins, patches = plt.hist(data, bins=10, edgecolor='black')\n\n# Set the edge color of the bars in the histogram corresponding to the Target_object to a gradient\nfor idx, patch in enumerate(patches):\n    if idx in {2, 5, 7}:\n        gradient = LinearSegmentedColormap.from_list(\"gradient\", [\"#a2b830\", \"#770a0a\"])\n        patch.set_edgecolor(gradient(idx / len(patches)))\n\n# Add a soft glow effect to the bars in the histogram corresponding to the Target_object\nfor idx, patch in enumerate(patches):\n    if idx in {2, 5, 7}:\n        patch.set_alpha(0.4974558820996098)\n        patch.set_facecolor('#b9fe9a')\n\n# create labels\nplt.xlabel('Value Ranges')\nplt.ylabel('Frequency')\nplt.title('Data Points Histogram')\n\n# display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_94b11ed60511f76e/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_94b11ed60511f76e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_94b11ed60511f76e/figure.png"
    },
    {
        "id": "Histogram_155a5f13d3fdb0c5",
        "Input_code": "# necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# data points\ncell_size = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\nfrequency = np.array([15, 20, 30, 35, 45, 50, 40, 25, 20, 10])\n\n# creating histogram using hist() function\nplt.hist(cell_size, weights=frequency, bins=10, edgecolor='black')\n\n# label for x and y axis\nplt.xlabel('Cell Size (in micrometers)')\nplt.ylabel('Frequency')\n\n# Plot title\nplt.title('Histogram for Microscopic Cell Size Distribution')\n\n# show the histogram\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Apply a shadow effect to the bars that contain the center point of the bounding box, with a shadow offset of (2.28, 3.96) and a shadow color of gray. Also, make these bars invisible by setting their visibility to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_155a5f13d3fdb0c5/Visual_figure.png",
        "Test_code": "# necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# data points\ncell_size = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\nfrequency = np.array([15, 20, 30, 35, 45, 50, 40, 25, 20, 10])\n\n# creating histogram using hist() function\nn, bins, patches = plt.hist(cell_size, weights=frequency, bins=10, edgecolor='black')\n\n# Apply shadow effect and set visibility to False for selected patches\nfor idx, patch in enumerate(patches):\n    if idx in [2, 5]:  # Example indices, adjust as needed\n        patch.set_visible(False)\n        patch.set_path_effects([SimplePatchShadow(offset=(2.28,3.96), shadow_rgbFace='gray'), Normal()])\n\n# label for x and y axis\nplt.xlabel('Cell Size (in micrometers)')\nplt.ylabel('Frequency')\n\n# Plot title\nplt.title('Histogram for Microscopic Cell Size Distribution')\n\n# show the histogram\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Histogram/Histogram_155a5f13d3fdb0c5/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_155a5f13d3fdb0c5/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_155a5f13d3fdb0c5/figure.png"
    },
    {
        "id": "Histogram_3adb90d31749b513",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# data\naltitude_intervals = np.array([7.5, 17.5, 27.5, 37.5, 47.5, 57.5])\nfruit_specimens = np.array([8, 12, 18, 21, 15, 9])\n\n# plot\nplt.figure(figsize=(8,6))\nplt.hist(altitude_intervals, weights=fruit_specimens, bins=6, alpha=0.5, color='green', edgecolor='black')\n\n# labels\nplt.xlabel('Altitude Intervals (m)', fontsize=14)\nplt.ylabel('Number of Fruit Specimens', fontsize=14)\nplt.title('Vertical Dispersion of Various Fruits in the Rainforest Canopy', fontsize=16)\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Show a text label of the bar that contains the center point of the bounding box using 'A new Label'.",
        "Input_image": "./test_dataset/Histogram/Histogram_3adb90d31749b513/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# data\naltitude_intervals = np.array([7.5, 17.5, 27.5, 37.5, 47.5, 57.5])\nfruit_specimens = np.array([8, 12, 18, 21, 15, 9])\n\n# plot\nplt.figure(figsize=(8,6))\nhist = plt.hist(altitude_intervals, weights=fruit_specimens, bins=6, alpha=0.5, color='green', edgecolor='black')\n\n# labels\nplt.xlabel('Altitude Intervals (m)', fontsize=14)\nplt.ylabel('Number of Fruit Specimens', fontsize=14)\nplt.title('Vertical Dispersion of Various Fruits in the Rainforest Canopy', fontsize=16)\n\n# Modify the label of the first bar\nfor idx,rect in enumerate(hist[2]):\n    if idx==0:\n        height = rect.get_height()\n        plt.text(rect.get_x() + rect.get_width()/2., height, 'A new Label', ha='center', va='bottom')\n\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0",
        "Test_image": "./test_dataset/Histogram/Histogram_3adb90d31749b513/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_3adb90d31749b513/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_3adb90d31749b513/figure.png"
    },
    {
        "id": "Histogram_dfc307e588f2701b",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for the Ocean Floor Seabed Topography Mapping dataset\ndepth_intervals = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200]\nmeasurement_frequencies = [2, 3, 5, 8, 10, 12, 15, 18, 20, 22, 24, 26, 28, 30, 32, 33, 31, 28, 25, 22, 18, 15, 12, 10, 8, 7, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8]\n\n# preparing data for histogram\ndata = np.repeat(depth_intervals, measurement_frequencies)\n\n#plotting\nplt.figure(figsize=(10,5)) \nplt.hist(data, bins = np.arange(10,205,5), color ='lightblue', edgecolor ='gray')\nplt.xlabel('Depth Intervals (meters)', fontsize = 12)\nplt.ylabel('Frequency of Measurements', fontsize = 12)\nplt.title('Ocean Floor Seabed Topography Mapping', fontsize = 14)\nplt.grid(axis='y', alpha=0.75)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add an outline to the bars that contain the center point of the bounding box, using a line intensity of 1.332 and a color of #eeea37.",
        "Input_image": "./test_dataset/Histogram/Histogram_dfc307e588f2701b/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import Rectangle\nimport matplotlib.patheffects as pe\n\n# Data points for the Ocean Floor Seabed Topography Mapping dataset\ndepth_intervals = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200]\nmeasurement_frequencies = [2, 3, 5, 8, 10, 12, 15, 18, 20, 22, 24, 26, 28, 30, 32, 33, 31, 28, 25, 22, 18, 15, 12, 10, 8, 7, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8]\n\n# preparing data for histogram\ndata = np.repeat(depth_intervals, measurement_frequencies)\n\n#plotting\nplt.figure(figsize=(10,5)) \nplt.hist(data, bins = np.arange(10,205,5), color ='lightblue', edgecolor ='gray')\nplt.xlabel('Depth Intervals (meters)', fontsize = 12)\nplt.ylabel('Frequency of Measurements', fontsize = 12)\nplt.title('Ocean Floor Seabed Topography Mapping', fontsize = 14)\nplt.grid(axis='y', alpha=0.75)\n\n# Add a glow effect to the bars in the histogram corresponding to the Target_object with glow intensity of 0.3322807815714847 and color #2e5a37\ntarget_indices = {5, 10, 15}  # Randomly selected bars\nglow_color = '#eeea37'\nbars = plt.gca().patches\nfor i, bar in enumerate(bars):\n    if i in target_indices:\n        bar.set_path_effects([pe.withStroke(linewidth=1.332, foreground=glow_color, alpha=0.4), pe.Normal()])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "5,10,15",
        "Test_image": "./test_dataset/Histogram/Histogram_dfc307e588f2701b/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_dfc307e588f2701b/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_dfc307e588f2701b/figure.png"
    },
    {
        "id": "Histogram_4b098bb0a9f8ecda",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for Ocean Current Speeds Histogram\nspeed_intervals = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\nfrequency_of_currents = [2, 7, 12, 18, 23, 15, 10, 5, 3, 2]\n\nplt.figure(figsize=(10, 6))\nplt.hist(speed_intervals, bins=10, weights=frequency_of_currents, color='lightseagreen')\nplt.xlabel('Speed Intervals (cm/s)')\nplt.ylabel('Frequency of Currents')\nplt.title('Ocean Current Speeds Distribution')\nplt.grid(axis='y', linestyle='--', alpha=0.6)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the bars that contain the center point of the bounding box to True. Additionally, for the same points, set the clipping state of those bars to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_4b098bb0a9f8ecda/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Data points for Ocean Current Speeds Histogram\nspeed_intervals = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\nfrequency_of_currents = [2, 7, 12, 18, 23, 15, 10, 5, 3, 2]\n\nplt.figure(figsize=(10, 6))\nhist = plt.hist(speed_intervals, bins=10, weights=frequency_of_currents, color='lightseagreen')\nplt.xlabel('Speed Intervals (cm/s)')\nplt.ylabel('Frequency of Currents')\nplt.title('Ocean Current Speeds Distribution')\nplt.grid(axis='y', linestyle='--', alpha=0.6)\nplt.tight_layout()\nfor idx,rect in enumerate(plt.gca().patches):\n    if idx in [2,3,4]:\n        rect.set_animated(True)\n        rect.set_clip_on(True)\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,3,4",
        "Test_image": "./test_dataset/Histogram/Histogram_4b098bb0a9f8ecda/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_4b098bb0a9f8ecda/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_4b098bb0a9f8ecda/figure.png"
    },
    {
        "id": "Histogram_d1462a3e55ba233f",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for continents, energy consumption intervals, and frequencies\ncontinents = ['Asia', 'Europe', 'North America', 'South America']\nenergy_consumption_intervals = ['10-20 GW', '20-30 GW', '30-40 GW', '40-50 GW', '50-60 GW']\nfrequencies = np.array([[8, 12, 10, 5, 3],\n                        [5, 7, 8, 9, 6],\n                        [6, 7, 4, 3, 2],\n                        [2, 3, 5, 4, 1]])\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nwidth = 0.15\nx = np.arange(len(energy_consumption_intervals))\n\nfor i, continent in enumerate(continents):\n    ax.bar(x + width * i, frequencies[i], width=width, label=continent)\n\n# Labeling the axes\nplt.xlabel('Energy Consumption Intervals (GW)')\nplt.ylabel('Number of Cities')\n\n# Setting the title\nplt.title('Energy Consumption in Major Cities')\n\n# Adding a legend\nax.legend(loc='upper right')\n\n# Adjusting the x-axis tick labels\nax.set_xticks(x + width * (len(continents) - 1) / 2)\nax.set_xticklabels(energy_consumption_intervals)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the opacity of the bars that share the same legend as the bar containing the center point of the bounding box to 0.567. Also, overlay a diagonal stripe pattern on these bars.",
        "Input_image": "./test_dataset/Histogram/Histogram_d1462a3e55ba233f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for continents, energy consumption intervals, and frequencies\ncontinents = ['Asia', 'Europe', 'North America', 'South America']\nenergy_consumption_intervals = ['10-20 GW', '20-30 GW', '30-40 GW', '40-50 GW', '50-60 GW']\nfrequencies = np.array([[8, 12, 10, 5, 3],\n                        [5, 7, 8, 9, 6],\n                        [6, 7, 4, 3, 2],\n                        [2, 3, 5, 4, 1]])\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nwidth = 0.15\nx = np.arange(len(energy_consumption_intervals))\n\nbars = []\nfor i, continent in enumerate(continents):\n    bar_group = ax.bar(x + width * i, frequencies[i], width=width, label=continent)\n    bars.extend(bar_group)\n# Set the opacity and add diagonal stripe patterns for target bars\ntarget_indices = {0, 2}  # Target indices from \"Target_object\"\nopacity = 0.5674343210448315\nbarhs=plt.gca().containers\nfor i, bar in enumerate(barhs):\n    if i in target_indices:\n        for bar in barhs[i]:\n            bar.set_alpha(opacity)\n            bar.set_hatch('////')  \n# Labeling the axes\nplt.xlabel('Energy Consumption Intervals (GW)')\nplt.ylabel('Number of Cities')\n\n# Setting the title\nplt.title('Energy Consumption in Major Cities')\n\n# Adding a legend\nax.legend(loc='upper right')\n\n# Adjusting the x-axis tick labels\nax.set_xticks(x + width * (len(continents) - 1) / 2)\nax.set_xticklabels(energy_consumption_intervals)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\nplt.show()\n",
        "Target_object": "0,2",
        "Test_image": "./test_dataset/Histogram/Histogram_d1462a3e55ba233f/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_d1462a3e55ba233f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_d1462a3e55ba233f/figure.png"
    },
    {
        "id": "Histogram_8ad9758e0c07080d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Depth Intervals in meters\ndepth_intervals = [\"0-1000\", \"1000-2000\", \"2000-3000\", \"3000-4000\", \"4000-5000\", \"5000-6000\", \"6000-7000\"]\n\n# Frequency of Depth Measurements\nfrequency = [32, 48, 56, 62, 50, 38, 24]\n\n# Creating histogram plot\nplt.figure(figsize=(10,7))\nplt.bar(depth_intervals, frequency, color='blue', edgecolor='black')\n\n# Adding labels and title\nplt.title(\"Depth Distribution in the Pacific Ocean\", fontsize=20)\nplt.xlabel(\"Depth Intervals (in meters)\", fontsize=16)\nplt.ylabel(\"Frequency of Depth Measurements\", fontsize=16)\nplt.xticks(rotation=45, fontsize=12)\nplt.yticks(fontsize=12)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the rasterized state of the bars that contain the center point of the bounding box to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_8ad9758e0c07080d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Depth Intervals in meters\ndepth_intervals = [\"0-1000\", \"1000-2000\", \"2000-3000\", \"3000-4000\", \"4000-5000\", \"5000-6000\", \"6000-7000\"]\n\n# Frequency of Depth Measurements\nfrequency = [32, 48, 56, 62, 50, 38, 24]\n\n# Creating histogram plot\nplt.figure(figsize=(10,7))\nbars = plt.bar(depth_intervals, frequency, color='blue', edgecolor='black')\n\n# Adding labels and title\nplt.title(\"Depth Distribution in the Pacific Ocean\", fontsize=20)\nplt.xlabel(\"Depth Intervals (in meters)\", fontsize=16)\nplt.ylabel(\"Frequency of Depth Measurements\", fontsize=16)\nplt.xticks(rotation=45, fontsize=12)\nplt.yticks(fontsize=12)\n\n# Set the rasterized state of the object corresponding to the Target_object to False\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_rasterized(False)\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_8ad9758e0c07080d/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_8ad9758e0c07080d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_8ad9758e0c07080d/figure.png"
    },
    {
        "id": "Histogram_7d5f280f126a559e",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for continents, energy consumption intervals, and frequencies\ncontinents = ['Asia', 'Europe', 'North America', 'South America']\nenergy_consumption_intervals = ['10-20 GW', '20-30 GW', '30-40 GW', '40-50 GW', '50-60 GW']\nfrequencies = np.array([[8, 12, 10, 5, 3],\n                        [5, 7, 8, 9, 6],\n                        [6, 7, 4, 3, 2],\n                        [2, 3, 5, 4, 1]])\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nwidth = 0.15\nx = np.arange(len(energy_consumption_intervals))\n\nfor i, continent in enumerate(continents):\n    ax.bar(x + width * i, frequencies[i], width=width, label=continent)\n\n# Labeling the axes\nplt.xlabel('Energy Consumption Intervals (GW)')\nplt.ylabel('Number of Cities')\n\n# Setting the title\nplt.title('Energy Consumption in Major Cities')\n\n# Adding a legend\nax.legend(loc='upper right')\n\n# Adjusting the x-axis tick labels\nax.set_xticks(x + width * (len(continents) - 1) / 2)\nax.set_xticklabels(energy_consumption_intervals)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the linestyle of the bars that share the same legend with the bar that contains the center point of the bounding box to 'dashdot' and edge color to red, and ensure that the snap state for these bars is set to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_7d5f280f126a559e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for continents, energy consumption intervals, and frequencies\ncontinents = ['Asia', 'Europe', 'North America', 'South America']\nenergy_consumption_intervals = ['10-20 GW', '20-30 GW', '30-40 GW', '40-50 GW', '50-60 GW']\nfrequencies = np.array([[8, 12, 10, 5, 3],\n                        [5, 7, 8, 9, 6],\n                        [6, 7, 4, 3, 2],\n                        [2, 3, 5, 4, 1]])\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nwidth = 0.15\nx = np.arange(len(energy_consumption_intervals))\n\nfor i, continent in enumerate(continents):\n    bars = ax.bar(x + width * i, frequencies[i], width=width, label=continent)\n    if i == 1:  # Targeting 'Europe'\n        for bar in bars:\n            bar.set_linestyle('dashdot')\n            bar.set_snap(True)\n            bar.set_edgecolor('red')\n\n# Labeling the axes\nplt.xlabel('Energy Consumption Intervals (GW)')\nplt.ylabel('Number of Cities')\n\n# Setting the title\nplt.title('Energy Consumption in Major Cities')\n\n# Adding a legend\nax.legend(loc='upper right')\n\n# Adjusting the x-axis tick labels\nax.set_xticks(x + width * (len(continents) - 1) / 2)\nax.set_xticklabels(energy_consumption_intervals)\n\n# Displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Histogram/Histogram_7d5f280f126a559e/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_7d5f280f126a559e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_7d5f280f126a559e/figure.png"
    },
    {
        "id": "Histogram_fbafbbe18f43cc5c",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Having your data\ndata = [0.5, 0.7, 0.9, 1.2, 1.1, 1.6, 1.8, 2.0, 1.9, 2.3, 2.5, 2.4, 2.7, 2.9, \n        3.1, 3.0, 3.2, 3.4, 3.5, 3.9, 4.0, 4.2, 4.3, 4.6, 4.8, 4.7, 5.0, 5.2, \n        5.5, 5.8, 6.0]\n\n# Create a histogram using matplotlib\nplt.hist(data, bins=10, edgecolor='black')\n\n# Specify the title and the labels of the histogram\nplt.title('Neural Activity Levels Across Different Brain Regions')\nplt.xlabel('Activity Level (Spikes/Minute)')\nplt.ylabel('Number of Occurrences')\n\n# Increase font size for readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the bars that contain the center point of the bounding box to #caabef.",
        "Input_image": "./test_dataset/Histogram/Histogram_fbafbbe18f43cc5c/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Having your data\ndata = [0.5, 0.7, 0.9, 1.2, 1.1, 1.6, 1.8, 2.0, 1.9, 2.3, 2.5, 2.4, 2.7, 2.9, \n        3.1, 3.0, 3.2, 3.4, 3.5, 3.9, 4.0, 4.2, 4.3, 4.6, 4.8, 4.7, 5.0, 5.2, \n        5.5, 5.8, 6.0]\n\n# Create a histogram using matplotlib\nn, bins, patches = plt.hist(data, bins=10, edgecolor='black')\n\n# Set the facecolor of the object corresponding to the Target_object to #caabef\nfor idx,patch in enumerate(patches):\n    if idx in [6,7,8]:\n        patch.set_facecolor('#caabef')\n\n# Specify the title and the labels of the histogram\nplt.title('Neural Activity Levels Across Different Brain Regions')\nplt.xlabel('Activity Level (Spikes/Minute)')\nplt.ylabel('Number of Occurrences')\n\n# Increase font size for readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "6,7,8",
        "Test_image": "./test_dataset/Histogram/Histogram_fbafbbe18f43cc5c/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_fbafbbe18f43cc5c/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_fbafbbe18f43cc5c/figure.png"
    },
    {
        "id": "Histogram_b7de27a1c517992a",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define wait time intervals and their frequencies\ntime_intervals = ['0 - 5 minutes', '5 - 10 minutes', '10 - 15 minutes', '15 - 20 minutes', '20 - 25 minutes', '25 - 30 minutes']\nfrequencies = [40, 55, 30, 15, 10, 5]\n\nplt.figure(figsize=(10,6))\n\n# Create histogram\nplt.bar(time_intervals, frequencies, color='blue', alpha=0.7)\n\n# Add labels\nplt.xlabel('Wait time intervals')\nplt.ylabel('Frequency')\nplt.title('Distribution of customer wait times at a popular restaurant')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the linestyle of the bars that contain the center point of the bounding box to 'dashdot', and update their line color to #051926.",
        "Input_image": "./test_dataset/Histogram/Histogram_b7de27a1c517992a/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Define wait time intervals and their frequencies\ntime_intervals = ['0 - 5 minutes', '5 - 10 minutes', '10 - 15 minutes', '15 - 20 minutes', '20 - 25 minutes', '25 - 30 minutes']\nfrequencies = [40, 55, 30, 15, 10, 5]\n\nplt.figure(figsize=(10,6))\n\n# Create histogram\nbars = plt.bar(time_intervals, frequencies, color='blue', alpha=0.7)\n\n# Modify specific bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_linestyle('dashdot')\n        bar.set_edgecolor('#051926')\n\n# Add labels\nplt.xlabel('Wait time intervals')\nplt.ylabel('Frequency')\nplt.title('Distribution of customer wait times at a popular restaurant')\n\n# Display the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_b7de27a1c517992a/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_b7de27a1c517992a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_b7de27a1c517992a/figure.png"
    },
    {
        "id": "Histogram_d7ebd6fb35ddc0b0",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data points for Galactic Clustering in Dark Matter Model\ngalactic_clustering_distances = [18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94]\n\n# Creating histogram plot\nplt.figure(figsize=(8, 6))\nplt.hist(galactic_clustering_distances, bins='auto', color='skyblue', edgecolor='black', alpha=0.7)\nplt.xlabel('Galactic Clustering Distances')\nplt.ylabel('Frequency')\nplt.title('Galactic Clustering in Dark Matter Model Distribution')\nplt.grid(axis='y', alpha=0.75)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the transparency of bars that contain the center point of the bounding box to 0.5096 and use a gradient fill that transitions from #144c77 to #8cc5cb in order.",
        "Input_image": "./test_dataset/Histogram/Histogram_d7ebd6fb35ddc0b0/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import LinearSegmentedColormap\n\ngalactic_clustering_distances = [18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94]\n\nplt.figure(figsize=(8, 6))\nn, bins, patches = plt.hist(galactic_clustering_distances, bins='auto', color='skyblue', edgecolor='black', alpha=0.7)\n\n# Create a gradient colormap\ngradient = LinearSegmentedColormap.from_list('gradient', ['#144c77', '#8cc5cb'])\n\n# Apply modifications to the target objects\nfor idx, patch in enumerate(patches):\n    if idx in {2, 5, 7}:\n        patch.set_alpha(0.5096324150662375)\n        patch.set_facecolor(gradient(idx / len(patches)))\n\nplt.xlabel('Galactic Clustering Distances')\nplt.ylabel('Frequency')\nplt.title('Galactic Clustering in Dark Matter Model Distribution')\nplt.grid(axis='y', alpha=0.75)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_d7ebd6fb35ddc0b0/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_d7ebd6fb35ddc0b0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_d7ebd6fb35ddc0b0/figure.png"
    },
    {
        "id": "Histogram_86621c24280eef8d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Confirmed COVID-19 cases in each state\ncases = [65000, 8500, 134000, 45000, 550000, 80000, 60000, 18000, 450000, 220000, 6000, \n         35000, 300000, 105000, 45000, 30000, 35000, 95000, 7500, 95000, 200000, 160000,\n         55000, 58000, 90000, 7000, 25000, 70000, 9000, 280000, 32000, 450000, 140000,\n         7000, 130000, 65000, 25000, 135000, 23000, 125000, 9000, 145000, 500000, 66000,\n         1500, 130000, 80000, 6000, 75000, 5000]\n\n# States in the USA \nstates = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', \n          'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', \n          'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', \n          'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska',\n          'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', \n          'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', \n          'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\n          'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n\nplt.figure(figsize=[20,10]) # Increase the size of the plot\nplt.bar(states, cases, align='center', color='blue', edgecolor='black')\nplt.xticks(rotation=90) \nplt.xlabel('States')\nplt.ylabel('Confirmed COVID-19 Cases')\nplt.title('Distribution of Confirmed COVID-19 Cases across the States in the USA') \nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge color of the bars that contain the center point of the bounding box to a gradient that transitions from #3c9cd9 to #72dba2 by order. Additionally, reduce the height of these bars to 70% of their original height.",
        "Input_image": "./test_dataset/Histogram/Histogram_86621c24280eef8d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Confirmed COVID-19 cases in each state\ncases = [65000, 8500, 134000, 45000, 550000, 80000, 60000, 18000, 450000, 220000, 6000, \n         35000, 300000, 105000, 45000, 30000, 35000, 95000, 7500, 95000, 200000, 160000,\n         55000, 58000, 90000, 7000, 25000, 70000, 9000, 280000, 32000, 450000, 140000,\n         7000, 130000, 65000, 25000, 135000, 23000, 125000, 9000, 145000, 500000, 66000,\n         1500, 130000, 80000, 6000, 75000, 5000]\n\n# States in the USA \nstates = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', \n          'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', \n          'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', \n          'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska',\n          'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', \n          'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', \n          'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\n          'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n\nplt.figure(figsize=[20,10]) # Increase the size of the plot\nbars = plt.bar(states, cases, align='center', color='blue', edgecolor='black')\n\n# Set the edge color of the bars to a gradient\nfor idx, bar in enumerate(bars):\n    if idx in {5, 15, 25, 35, 45}:\n        gradient = LinearSegmentedColormap.from_list(\"gradient\", [\"#3c9cd9\", \"#72dba2\"])\n        bar.set_edgecolor(gradient(idx / len(bars)))\n\n# Reduce the height of the bars\nfor idx, bar in enumerate(bars):\n    if idx in {5, 15, 25, 35, 45}:\n        bar.set_height(bar.get_height() * 0.7)\n\nplt.xticks(rotation=90) \nplt.xlabel('States')\nplt.ylabel('Confirmed COVID-19 Cases')\nplt.title('Distribution of Confirmed COVID-19 Cases across the States in the USA') \nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "5,15,25,35,45",
        "Test_image": "./test_dataset/Histogram/Histogram_86621c24280eef8d/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_86621c24280eef8d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_86621c24280eef8d/figure.png"
    },
    {
        "id": "Histogram_824a755cd711999d",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Crime rates for cities\ncity_crime_rates = [2.4, 3.1, 5.5, 6.8, 7.2, 8.3, 8.6, 9.1, 9.4, 9.8, 10.2, 10.5, 10.9,\n11.3, 11.7, 12.1, 12.4, 12.7, 13.2, 13.6, 14.1, 14.5, 15.0, 15.4, 15.8, 16.2, 16.7, 17.1,\n17.4, 17.9, 18.3, 18.8, 19.2, 19.7, 20.1, 20.5, 20.9, 21.4, 21.8, 22.3, 22.8, 23.1, 23.6,\n24.0, 24.5, 25.0, 25.3, 25.8, 26.4, 26.8, 27.2]\nplt.figure(figsize=(10,5))\nplt.hist(city_crime_rates, bins=10, alpha=0.5, color='b')\nplt.title('Distribution of Crime Rates in Cities')\nplt.xlabel('Crime Rate')\nplt.ylabel('Number of Cities')\nplt.grid(True)\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Apply a glow outline to the bars that contain the center point of the bounding box, with a thickness of 0.84 and a color of '#04e6e1'.",
        "Input_image": "./test_dataset/Histogram/Histogram_824a755cd711999d/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as pe\n\n# Crime rates for cities\ncity_crime_rates = [2.4, 3.1, 5.5, 6.8, 7.2, 8.3, 8.6, 9.1, 9.4, 9.8, 10.2, 10.5, 10.9, 11.3, 11.7, 12.1, 12.4, 12.7, 13.2, 13.6, 14.1, 14.5, 15.0, 15.4, 15.8, 16.2, 16.7, 17.1, 17.4, 17.9, 18.3, 18.8, 19.2, 19.7, 20.1, 20.5, 20.9, 21.4, 21.8, 22.3, 22.8, 23.1, 23.6, 24.0, 24.5, 25.0, 25.3, 25.8, 26.4, 26.8, 27.2]\nplt.figure(figsize=(10,5))\nplt.hist(city_crime_rates, bins=10, alpha=0.5, color='b')\n\n# Adding glow outline to the bars corresponding to the Target_object\nbars = plt.gca().patches\ntarget_indices = {2, 5, 7}  # Randomly selected bars\nfor idx, bar in enumerate(bars):\n    if idx in target_indices:\n        bar.set_path_effects([pe.withStroke(linewidth=0.84, foreground='#04e6e1', alpha=0.5), pe.Normal()])\n\nplt.title('Distribution of Crime Rates in Cities')\nplt.xlabel('Crime Rate')\nplt.ylabel('Number of Cities')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_824a755cd711999d/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_824a755cd711999d/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_824a755cd711999d/figure.png"
    },
    {
        "id": "Histogram_041cd16322167db0",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Define data\nelevation_ranges = [\"-6500 to -6000\", \"-6000 to -5500\", \"-5500 to -5000\", \"-5000 to -4500\", \"-4500 to -4000\", \"-4000 to -3500\", \"-3500 to -3000\", \"-3000 to -2500\", \"-2500 to -2000\", \"-2000 to -1500\", \"-1500 to -1000\", \"-1000 to -500\", \"-500 to 0\"]\nfrequency_occurrences = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\n\n# Create histogram\nplt.figure(figsize=[10,5])\nplt.bar(elevation_ranges, frequency_occurrences)\nplt.xticks(rotation=90) # make labels on the x-axis readable\n\n# Label axes and set title\nplt.xlabel('Elevation Ranges (meters below sea level)')\nplt.ylabel('Frequency of Occurrences')\nplt.title('Oceanic Floor Elevation Mapping')\nplt.grid(True)\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow below the bars that contain the center point of the bounding box, with a shadow offset of (3, 3). Also, increase the width and height of these bars in the histogram by a factor of 1.07.",
        "Input_image": "./test_dataset/Histogram/Histogram_041cd16322167db0/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import withSimplePatchShadow\n\n# Define data\nelevation_ranges = [\"-6500 to -6000\", \"-6000 to -5500\", \"-5500 to -5000\", \"-5000 to -4500\", \"-4500 to -4000\", \"-4000 to -3500\", \"-3500 to -3000\", \"-3000 to -2500\", \"-2500 to -2000\", \"-2000 to -1500\", \"-1500 to -1000\", \"-1000 to -500\", \"-500 to 0\"]\nfrequency_occurrences = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\n\n# Create histogram\nplt.figure(figsize=[10,5])\nbars = plt.bar(elevation_ranges, frequency_occurrences)\nplt.xticks(rotation=90) # make labels on the x-axis readable\n\n# Label axes and set title\nplt.xlabel('Elevation Ranges (meters below sea level)')\nplt.ylabel('Frequency of Occurrences')\nplt.title('Oceanic Floor Elevation Mapping')\nplt.grid(True)\n\n# Modify the bars\nfor idx, bar in enumerate(bars):\n    if idx in {2, 5, 8}:\n        bar.set_path_effects([withSimplePatchShadow(offset=(3, 3))])\nfor idx, bar in enumerate(bars):\n    if idx in {2, 5, 8}:\n        bar.set_height(bar.get_height() * 1.07)\n        bar.set_width(bar.get_width() * 1.07)\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_object": "2,5,8",
        "Test_image": "./test_dataset/Histogram/Histogram_041cd16322167db0/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_041cd16322167db0/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_041cd16322167db0/figure.png"
    },
    {
        "id": "Histogram_a4095154ef742d20",
        "Input_code": "# importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Setting X and Y data\nx_labels = ['5-10', '10-20', '20-50', '50-100', '100-200', '200-500', '500-1000']\ny_values = [12, 19, 27, 35, 24, 15, 8]\n\n# creating a new figure\nplt.figure(figsize=(10,5))\n\n# plotting the bar chart\nplt.bar(x_labels, y_values, color='skyblue')\n\n# setting the title\nplt.title('Galactic Black Hole Mass Analysis')\n\n# setting x-axis label\nplt.xlabel('Black Hole Mass Intervals (in Solar Masses)')\n\n# setting y-axis label\nplt.ylabel('Frequency of Black Holes')\n\n# displaying the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the rasterized state of the bars that contain the center point of the bounding box to True. Also, make those bars invisible by setting their visibility to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_a4095154ef742d20/Visual_figure.png",
        "Test_code": "# importing necessary libraries\nimport matplotlib.pyplot as plt\n\n# Setting X and Y data\nx_labels = ['5-10', '10-20', '20-50', '50-100', '100-200', '200-500', '500-1000']\ny_values = [12, 19, 27, 35, 24, 15, 8]\n\n# creating a new figure\nplt.figure(figsize=(10,5))\n\n# plotting the bar chart\nbars = plt.bar(x_labels, y_values, color='skyblue')\n\n# setting the title\nplt.title('Galactic Black Hole Mass Analysis')\n\n# setting x-axis label\nplt.xlabel('Black Hole Mass Intervals (in Solar Masses)')\n\n# setting y-axis label\nplt.ylabel('Frequency of Black Holes')\n\n# modifying the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_rasterized(True)\n        bar.set_visible(False)\n\n# displaying the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_a4095154ef742d20/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_a4095154ef742d20/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_a4095154ef742d20/figure.png"
    },
    {
        "id": "Histogram_1b4ec0784032da85",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Set intervals, must be the same amount of elements\ntemperature_intervals = [\"-2 to -1\",\"-1 to 0\",\"0 to 1\", \"1 to 2\", \"2 to 3\", \"3 to 4\", \"4 to 5\", \"5 to 6\"]\nintervals_freq = np.array([10, 15, 20, 30, 35, 25, 18, 12])\n\n# Preparing data for histogram\ntemp_data = []\nfor i, interval in enumerate(temperature_intervals):\n    lower, upper = map(float, interval.split(' to '))\n    temp_data.extend(list(np.random.uniform(lower, upper, intervals_freq[i])))\n\n# Create histogram\nplt.hist(temp_data, bins=len(temperature_intervals), edgecolor='black')\n\n# Set the labels and title\nplt.xlabel(\"Temperature Intervals (in Celsius)\")\nplt.ylabel(\"Frequency of Temperature Intervals\")\nplt.title(\"Ocean Temperature Variability in the Arctic Ocean\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Stroke the bars that contain the center point of the bounding box with a linewidth of 3.68 and a foreground color of #17ae1f. Also, adjust the transparency of those bars to 0.38.",
        "Input_image": "./test_dataset/Histogram/Histogram_1b4ec0784032da85/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patheffects as path_effects\n\n# Set intervals, must be the same amount of elements\ntemperature_intervals = [\"-2 to -1\",\"-1 to 0\",\"0 to 1\", \"1 to 2\", \"2 to 3\", \"3 to 4\", \"4 to 5\", \"5 to 6\"]\nintervals_freq = np.array([10, 15, 20, 30, 35, 25, 18, 12])\n\n# Preparing data for histogram\ntemp_data = []\nfor i, interval in enumerate(temperature_intervals):\n    lower, upper = map(float, interval.split(' to '))\n    temp_data.extend(list(np.random.uniform(lower, upper, intervals_freq[i])))\n\n# Create histogram\nn, bins, patches = plt.hist(temp_data, bins=len(temperature_intervals), edgecolor='black')\n\n# Apply modifications to selected bars\nstroke_effect = path_effects.withStroke(linewidth=3.6810415548362196, foreground='#17ae1f')\nfor patch in patches:\n    patch.set_path_effects([stroke_effect])\n    patch.set_alpha(0.38)\n\n# Set the labels and title\nplt.xlabel(\"Temperature Intervals (in Celsius)\")\nplt.ylabel(\"Frequency of Temperature Intervals\")\nplt.title(\"Ocean Temperature Variability in the Arctic Ocean\")\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,1,2,3,4,5,6,7",
        "Test_image": "./test_dataset/Histogram/Histogram_1b4ec0784032da85/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_1b4ec0784032da85/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_1b4ec0784032da85/figure.png"
    },
    {
        "id": "Histogram_19ad694707cb133f",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Heights in inches (converted from feet and inches to inches)\nheights_inches = [\n    60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72, 72, 73, 74, 74, 75, 75, 76, 76, 77, 78, 79, 79, 80, 81, 81, 82, 82, 82, 83, 83, 84, 84, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 93, 96, 96, 97\n]\n\n# Create a histogram of the heights\nplt.hist(heights_inches, bins=range(59, 99,2), edgecolor='black', alpha=0.75)\nplt.title('Comic Book Characters Height Distribution')\nplt.xlabel('Height (inches)')\nplt.ylabel('Frequency')\nplt.grid(True)\n\n# Show the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a glowing outline to the bars that contain the center point of the bounding box, with a thickness of 0.98 and a color of '#ba0c12'.",
        "Input_image": "./test_dataset/Histogram/Histogram_19ad694707cb133f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as pe\n\n# Heights in inches (converted from feet and inches to inches)\nheights_inches = [\n    60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72, 72, 73, 74, 74, 75, 75, 76, 76, 77, 78, 79, 79, 80, 81, 81, 82, 82, 82, 83, 83, 84, 84, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 93, 96, 96, 97\n]\n\n# Create a histogram of the heights\nplt.hist(heights_inches, bins=range(59, 99,2), edgecolor='black', alpha=0.75)\nplt.title('Comic Book Characters Height Distribution')\nplt.xlabel('Height (inches)')\nplt.ylabel('Frequency')\nplt.grid(True)\n\n# Add a glow outline to the bars in the histogram corresponding to the Target_object\nbars = plt.gca().patches\ntarget_indices = {2, 5, 7}  # Randomly selected bars\nfor i, bar in enumerate(bars):\n    if i in target_indices:\n        bar.set_path_effects([pe.withStroke(linewidth=0.98, foreground='#ba0c12', alpha=0.75), pe.Normal()])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_19ad694707cb133f/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_19ad694707cb133f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_19ad694707cb133f/figure.png"
    },
    {
        "id": "Histogram_d42be332f74aa8e7",
        "Input_code": "# Required Libraries\nimport matplotlib.pyplot as plt\n\n# Data\ndepth_bins = [\"0-100\", \"101-200\", \"201-300\", \"301-400\", \"401-500\"]\njellyfish_sightings = [5, 12, 8, 14, 6]\n\n# Create histogram\nplt.figure(figsize=(10,6))\nplt.bar(depth_bins, jellyfish_sightings, color='c', alpha=0.7)\n\n# x-axis and y-axis labels\nplt.xlabel('Depth Ranges in Meters', fontsize=14)\nplt.ylabel('Frequency of Jellyfish Sightings', fontsize=14)\n\n# Title\nplt.title('Jellyfish Sightings at Different Ocean Depths', fontsize=16)\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the rasterized state of the histogram bars that contain the center point of the bounding box to True. Additionally, ensure that the snapping state for these histogram bars is also set to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_d42be332f74aa8e7/Visual_figure.png",
        "Test_code": "# Required Libraries\nimport matplotlib.pyplot as plt\n\n# Data\ndepth_bins = [\"0-100\", \"101-200\", \"201-300\", \"301-400\", \"401-500\"]\njellyfish_sightings = [5, 12, 8, 14, 6]\n\n# Create histogram\nplt.figure(figsize=(10,6))\nbars = plt.bar(depth_bins, jellyfish_sightings, color='c', alpha=0.7)\n\n# x-axis and y-axis labels\nplt.xlabel('Depth Ranges in Meters', fontsize=14)\nplt.ylabel('Frequency of Jellyfish Sightings', fontsize=14)\n\n# Title\nplt.title('Jellyfish Sightings at Different Ocean Depths', fontsize=16)\n\n# Modify the rasterized and snap state of the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [1, 3]:\n        bar.set_rasterized(True)\n        bar.set_snap(True)\n\n# Show plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3",
        "Test_image": "./test_dataset/Histogram/Histogram_d42be332f74aa8e7/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_d42be332f74aa8e7/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_d42be332f74aa8e7/figure.png"
    },
    {
        "id": "Histogram_90878194738f624e",
        "Input_code": "import matplotlib.pyplot as plt\n\nspecies_richness = [8, 12, 15, 19, 23, 27, 31, 35]\nfrequency = [2, 5, 8, 10, 6, 3, 2, 1]\n\nplt.hist(species_richness, weights=frequency, bins=range(min(species_richness), max(species_richness) + 2, 2),\n      edgecolor='black')\n\nplt.xlabel('Species Richness')\nplt.ylabel('Frequency')\nplt.title('Distribution of Deep-sea Coral Species Richness in Different Reef Habitats')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that contain the center point of the bounding box, with a shadow offset of (2.01, 2.88) and using gray as the shadow color. Also, change the line style of these bars to 'dotted'.",
        "Input_image": "./test_dataset/Histogram/Histogram_90878194738f624e/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\n\nspecies_richness = [8, 12, 15, 19, 23, 27, 31, 35]\nfrequency = [2, 5, 8, 10, 6, 3, 2, 1]\n\nfig, ax = plt.subplots()\nn, bins, patches = ax.hist(species_richness, weights=frequency, bins=range(min(species_richness), max(species_richness) + 2, 2), edgecolor='black')\n\nfor idx, patch in enumerate(patches):\n    if idx in [ 3]:\n        patch.set_linestyle('dotted')\n        patch.set_path_effects([path_effects.SimplePatchShadow(offset=(2.01,2.88), shadow_rgbFace='gray'), path_effects.Normal()])\n\nplt.xlabel('Species Richness')\nplt.ylabel('Frequency')\nplt.title('Distribution of Deep-sea Coral Species Richness in Different Reef Habitats')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "3",
        "Test_image": "./test_dataset/Histogram/Histogram_90878194738f624e/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_90878194738f624e/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_90878194738f624e/figure.png"
    },
    {
        "id": "Histogram_8cd60cf1cb3f64ef",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Dataset for the first histogram\nformation_thickness = [42, 65, 78, 92, 105, 112, 127, 132, 148, 155, 168, 175, 188, 195, 203, 217, 225, 238, 242, 255]\n\nplt.figure(figsize=(10,6))\nplt.hist(formation_thickness, bins=10, edgecolor='black')\nplt.title('Distribution of Geological Formation Thickness')\nplt.xlabel('Thickness (meters)')\nplt.ylabel('Frequency')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the face color of the bars that contain the center point of the bounding box to #17b0b0, and ensure that these bars are not rasterized by setting their rasterized state to False.",
        "Input_image": "./test_dataset/Histogram/Histogram_8cd60cf1cb3f64ef/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Dataset for the first histogram\nformation_thickness = [42, 65, 78, 92, 105, 112, 127, 132, 148, 155, 168, 175, 188, 195, 203, 217, 225, 238, 242, 255]\n\nplt.figure(figsize=(10,6))\nn, bins, patches = plt.hist(formation_thickness, bins=10, edgecolor='black')\nfor patch in [patches[0], patches[2], patches[4]]:\n    patch.set_facecolor('#17b0b0')\n    patch.set_rasterized(False)\nplt.title('Distribution of Geological Formation Thickness')\nplt.xlabel('Thickness (meters)')\nplt.ylabel('Frequency')\nplt.grid(True)\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "0,2,4",
        "Test_image": "./test_dataset/Histogram/Histogram_8cd60cf1cb3f64ef/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_8cd60cf1cb3f64ef/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_8cd60cf1cb3f64ef/figure.png"
    },
    {
        "id": "Histogram_69f64866030d66c4",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for fruits, ripening time intervals, and frequencies\nfruits = ['Mango', 'Papaya', 'Pineapple']\nripening_time_intervals = ['1-3 days', '3-5 days', '5-7 days', '7-9 days', '9-11 days']\nfrequencies = np.array([[15, 20, 25, 30, 15],\n                        [10, 25, 40, 30, 20],\n                        [5, 15, 25, 30, 35]])\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nwidth = 0.2\nx = np.arange(len(ripening_time_intervals))\n\nfor i, fruit in enumerate(fruits):\n    ax.bar(x + width * i, frequencies[i], width=width, label=fruit)\n\n# Labeling the axes\nax.set_xlabel('Ripening Time Intervals (days)')\nax.set_ylabel('Frequency')\n\n# Setting the title\nax.set_title('Ripening Time Distribution of Tropical Fruits')\n\n# Adding a legend\nax.legend(loc='upper right')\n\n# Adjusting the x-axis tick labels\nax.set_xticks(x + width * (len(fruits) - 1) / 2)\nax.set_xticklabels(ripening_time_intervals)\n\n# Displaying the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the transparency of the bars that share the same legend with the bar that contains the center point of the bounding box to 0.29, and enable rasterization for these bars by setting the rasterized state to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_69f64866030d66c4/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Data points for fruits, ripening time intervals, and frequencies\nfruits = ['Mango', 'Papaya', 'Pineapple']\nripening_time_intervals = ['1-3 days', '3-5 days', '5-7 days', '7-9 days', '9-11 days']\nfrequencies = np.array([[15, 20, 25, 30, 15],\n                        [10, 25, 40, 30, 20],\n                        [5, 15, 25, 30, 35]])\n\n# Plotting the histogram\nfig, ax = plt.subplots()\nwidth = 0.2\nx = np.arange(len(ripening_time_intervals))\n\nfor i, fruit in enumerate(fruits):\n    bars = ax.bar(x + width * i, frequencies[i], width=width, label=fruit)\n    if i == 1:  # Targeting 'Papaya'\n        for bar in bars:\n            bar.set_alpha(0.29)\n            bar.set_rasterized(True)\n\n# Labeling the axes\nax.set_xlabel('Ripening Time Intervals (days)')\nax.set_ylabel('Frequency')\n\n# Setting the title\nax.set_title('Ripening Time Distribution of Tropical Fruits')\n\n# Adding a legend\nax.legend(loc='upper right')\n\n# Adjusting the x-axis tick labels\nax.set_xticks(x + width * (len(fruits) - 1) / 2)\nax.set_xticklabels(ripening_time_intervals)\n\n# Displaying the plot\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")\n",
        "Target_legend": "1",
        "Test_image": "./test_dataset/Histogram/Histogram_69f64866030d66c4/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_69f64866030d66c4/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_69f64866030d66c4/figure.png"
    },
    {
        "id": "Histogram_e4980da2c28ceb2a",
        "Input_code": "# import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# x-axis data, i.e., depth categories\ndepth_categories = [\"50-100\", \"100-200\", \"200-300\", \"300-400\", \"400-500\", \"500-600\", \"600-700\", \"700-800\", \"800-900\", \"900-1000\"]\n\n# y-axis data, i.e., frequency of cave depths\nfrequency = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\n\n# Create histogram\nplt.figure(figsize=(10, 5))  # handles large labels\nplt.bar(depth_categories, frequency)\n\n# add labels and title\nplt.xlabel('Depth Categories in Meters')\nplt.ylabel('Frequency of Cave Depths')\nplt.title('Distribution of Underwater Cave Depths')\n\nplt.xticks(rotation=45)  # makes labels readable\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Set the animated state of the bars that contain the center point of the bounding box to True, and also update their linewidth to 2.65, edge color to black.",
        "Input_image": "./test_dataset/Histogram/Histogram_e4980da2c28ceb2a/Visual_figure.png",
        "Test_code": "# import necessary libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# x-axis data, i.e., depth categories\ndepth_categories = [\"50-100\", \"100-200\", \"200-300\", \"300-400\", \"400-500\", \"500-600\", \"600-700\", \"700-800\", \"800-900\", \"900-1000\"]\n\n# y-axis data, i.e., frequency of cave depths\nfrequency = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\n\n# Create histogram\nplt.figure(figsize=(10, 5))  # handles large labels\nbars = plt.bar(depth_categories, frequency)\n\n# add labels and title\nplt.xlabel('Depth Categories in Meters')\nplt.ylabel('Frequency of Cave Depths')\nplt.title('Distribution of Underwater Cave Depths')\n\nplt.xticks(rotation=45)  # makes labels readable\n\n# Set the animated state and linewidth for the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [2, 5]:  # Example indices, modify as needed\n        bar.set_animated(True)\n        bar.set_linewidth(2.65)\n        bar.set_edgecolor('black')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5",
        "Test_image": "./test_dataset/Histogram/Histogram_e4980da2c28ceb2a/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_e4980da2c28ceb2a/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_e4980da2c28ceb2a/figure.png"
    },
    {
        "id": "Histogram_3c74e474cbf59428",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Luminosity in Solar Luminosities (X-axis)\nluminosity = [12.5, 14.2, 15.8, 17.3, 18.9, 20.6, 22.1, 23.8, 25.4, 27.0, 28.7, 30.3, 32.0, 33.6, 35.2, 36.9, 38.5, 40.2, 41.8, 43.4, 45.1, 46.7, 48.4, 50.0, 51.6, 53.3, 54.9, 56.6, 58.2, 59.8]\n\n# Frequency of Stars (Y-axis)\nfrequency = [3, 5, 8, 12, 15, 20, 18, 24, 30, 28, 22, 20, 16, 14, 12, 10, 8, 6, 4, 3, 2, 1, 1, 2, 3, 4, 6, 8, 10, 12]\n\n# Create a new figure with a set of subplots\nfig, ax = plt.subplots()\n\n# Create a histogram\nax.hist(luminosity, weights=frequency, bins=30, alpha=0.7)\n\n# Sepecify a title, X and Y label\nax.set_title('Luminosity Distribution in a Galactic Cluster')\nax.set_xlabel('Luminosity in Solar Luminosities')\nax.set_ylabel('Frequency of Stars')\n\n# Show our plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a glow outline to the bars that contain the center point of the bounding box, with a thickness of 0.81 and a color of '#faab28'.",
        "Input_image": "./test_dataset/Histogram/Histogram_3c74e474cbf59428/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport matplotlib.patheffects as pe\n\n# Luminosity in Solar Luminosities (X-axis)\nluminosity = [12.5, 14.2, 15.8, 17.3, 18.9, 20.6, 22.1, 23.8, 25.4, 27.0, 28.7, 30.3, 32.0, 33.6, 35.2, 36.9, 38.5, 40.2, 41.8, 43.4, 45.1, 46.7, 48.4, 50.0, 51.6, 53.3, 54.9, 56.6, 58.2, 59.8]\n\n# Frequency of Stars (Y-axis)\nfrequency = [3, 5, 8, 12, 15, 20, 18, 24, 30, 28, 22, 20, 16, 14, 12, 10, 8, 6, 4, 3, 2, 1, 1, 2, 3, 4, 6, 8, 10, 12]\n\n# Create a new figure with a set of subplots\nfig, ax = plt.subplots()\n\n# Create a histogram\nax.hist(luminosity, weights=frequency, bins=30, alpha=0.7)\n\n# Sepecify a title, X and Y label\nax.set_title('Luminosity Distribution in a Galactic Cluster')\nax.set_xlabel('Luminosity in Solar Luminosities')\nax.set_ylabel('Frequency of Stars')\n\n# Add a glow outline to the bars in the histogram corresponding to the Target_object with a thickness of 0.81 and color '#faab28'\ntarget_indices = {5, 10, 15}\nfor i, bar in enumerate(plt.gca().patches):\n    if i in target_indices:\n        bar.set_path_effects([pe.withStroke(linewidth=0.81, foreground='#faab28', alpha=0.7)])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "5,10,15",
        "Test_image": "./test_dataset/Histogram/Histogram_3c74e474cbf59428/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_3c74e474cbf59428/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_3c74e474cbf59428/figure.png"
    },
    {
        "id": "Histogram_ddd2bb0d499861ba",
        "Input_code": "import matplotlib.pyplot as plt\n\n# calorie intervals\nbins = [0, 200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]\n\n# frequency or count of individuals\ncounts = [5, 12, 8, 15, 10, 3, 6, 2, 5, 1]\n\nplt.hist(bins[:-1], bins, weights=counts)\nplt.xticks(bins)\nplt.xlabel('Calorie Intervals')\nplt.ylabel('Number of Individuals')\nplt.title('Distribution of Daily Calorie Consumption')\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Scale the size of the bars that contain the center point of the bounding box in the histogram by a factor of 1.31 for both width and height. Additionally, set the edge color of these bars to a gradient that transitions from #925517 to #50d021.",
        "Input_image": "./test_dataset/Histogram/Histogram_ddd2bb0d499861ba/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# calorie intervals\nbins = [0, 200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]\n\n# frequency or count of individuals\ncounts = [5, 12, 8, 15, 10, 3, 6, 2, 5, 1]\n\nplt.hist(bins[:-1], bins, weights=counts)\nplt.xticks(bins)\nplt.xlabel('Calorie Intervals')\nplt.ylabel('Number of Individuals')\nplt.title('Distribution of Daily Calorie Consumption')\n\n# Adjusting the size and setting the edge color of the bars\nax = plt.gca()\ngradient = LinearSegmentedColormap.from_list('gradient', ['#925517', '#50d021'])\nfor idx, patch in enumerate(ax.patches):\n    if idx in {1, 3, 5}:  # Randomly selected bars\n        patch.set_height(patch.get_height() * 1.31)\n        patch.set_width(patch.get_width() * 1.31)\n        patch.set_edgecolor(gradient(idx / len(ax.patches)))\n\nplt.tight_layout()\nplt.savefig('Edit_figure.png')",
        "Target_object": "1,3,5",
        "Test_image": "./test_dataset/Histogram/Histogram_ddd2bb0d499861ba/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_ddd2bb0d499861ba/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_ddd2bb0d499861ba/figure.png"
    },
    {
        "id": "Histogram_2cc5552ebee93766",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\ncurrent_speeds = [0.2, 0.5, 0.8, 1.1, 1.4, 1.7, 2.0, 2.3, 2.6, 2.9, 3.2, 3.5, 3.8, 4.1, 4.4, 4.7, 5.0, 5.3, 5.6, 5.9, 6.2, 6.5, 6.8, 7.1, 7.4, 7.7, 8.0]\n\nplt.hist(current_speeds, bins=20, edgecolor='black') # You can adjust the number of bins as you deem fit\n\nplt.title('Histogram of Ocean Current Speeds')\nplt.xlabel('Speed (m/s)')\nplt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Add a shadow effect to the bars that include the center point of the bounding box, using an offset of (2.43, 3.09) and a shadow color of gold. Also, set the transparency of these bars to 0.87.",
        "Input_image": "./test_dataset/Histogram/Histogram_2cc5552ebee93766/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import SimplePatchShadow, Normal\n\n# Data\ncurrent_speeds = [0.2, 0.5, 0.8, 1.1, 1.4, 1.7, 2.0, 2.3, 2.6, 2.9, 3.2, 3.5, 3.8, 4.1, 4.4, 4.7, 5.0, 5.3, 5.6, 5.9, 6.2, 6.5, 6.8, 7.1, 7.4, 7.7, 8.0]\n\nfig, ax = plt.subplots()\nn, bins, patches = plt.hist(current_speeds, bins=20, edgecolor='black') # You can adjust the number of bins as you deem fit\n\nfor idx, patch in enumerate(patches):\n    if idx in [5, 10, 15]:\n        patch.set_path_effects([SimplePatchShadow(offset=(2.43,3.09), shadow_rgbFace='gold'), Normal()])\n        patch.set_alpha(0.87)\n\nplt.title('Histogram of Ocean Current Speeds')\nplt.xlabel('Speed (m/s)')\nplt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "5,10,15",
        "Test_image": "./test_dataset/Histogram/Histogram_2cc5552ebee93766/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_2cc5552ebee93766/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_2cc5552ebee93766/figure.png"
    },
    {
        "id": "Histogram_4182a34332988860",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Data\nincome_pop = [20, 25, 32, 40, 45, 35, 38, 50, 55, 60, 45, 38, 42, 48, 55, 58, \n              62, 65, 50, 40, 36, 42, 49, 55, 58, 63, 70, 75, 80, 90, 85, 82, \n              78, 83, 88, 92, 98, 100, 98, 95, 92, 88, 85, 83, 80, 78, 75, 70, \n              66, 63, 58, 55, 52, 50, 48, 45, 42, 40, 36, 32, 28, 25, 20]\n\nincome_emp = list(range(30, 1010, 5))\n\n# Plot for population income\nplt.figure(figsize=(10,6))\nplt.hist(income_pop, bins=range(min(income_pop), max(income_pop) + 10, 10))\nplt.xlabel('Income in thousands of dollars')\nplt.ylabel('Frequency')\nplt.title('Income distribution of a population')\nplt.grid(True)\n# plt.show()\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Stroke the bars that contain the center point of the bounding box, using an linewidth of 3 and the color #e5df38. Also, apply a shadow below these bars with an offset of (3, 6) units.",
        "Input_image": "./test_dataset/Histogram/Histogram_4182a34332988860/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nfrom matplotlib.patheffects import withSimplePatchShadow\nfrom matplotlib.patheffects import withStroke\n# Data\nincome_pop = [20, 25, 32, 40, 45, 35, 38, 50, 55, 60, 45, 38, 42, 48, 55, 58, 62, 65, 50, 40, 36, 42, 49, 55, 58, 63, 70, 75, 80, 90, 85, 82, 78, 83, 88, 92, 98, 100, 98, 95, 92, 88, 85, 83, 80, 78, 75, 70, 66, 63, 58, 55, 52, 50, 48, 45, 42, 40, 36, 32, 28, 25, 20]\nincome_emp = list(range(30, 1010, 5))\n\n# Plot for population income\nplt.figure(figsize=(10,6))\nn, bins, patches = plt.hist(income_pop, bins=range(min(income_pop), max(income_pop) + 10, 10))\nplt.xlabel('Income in thousands of dollars')\nplt.ylabel('Frequency')\nplt.title('Income distribution of a population')\nplt.grid(True)\n\n# Adding soft glow effect and shadow to the bars\nfor idx, patch in enumerate(plt.gca().patches):\n    if idx in {2, 5, 7}:\n        patch.set_path_effects([withStroke(linewidth=3, foreground='#e5df38'),withSimplePatchShadow(offset=(3, 6))])\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,5,7",
        "Test_image": "./test_dataset/Histogram/Histogram_4182a34332988860/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_4182a34332988860/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_4182a34332988860/figure.png"
    },
    {
        "id": "Histogram_1ae9b59800d62629",
        "Input_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Our bins will be every 15 minutes\nbins = np.arange(0, 165, 15) \n\n# Reconstructed data with the given frequencies\ndata = np.repeat(np.arange(15, 165, 15), [800, 600, 400, 300, 200, 150, 100, 70, 50, 30]) \n\nplt.hist(data, bins = bins, edgecolor='black', alpha=0.7)\nplt.xticks(bins)\n\nplt.xlabel('Delay Ranges (minutes)')\nplt.ylabel('Frequency of Flights')\nplt.title('Distribution of Flight Delays')\n\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Change the edge style of the bars that contain the center point of the bounding box to 'dashed' and set their edge color to '#946655'.",
        "Input_image": "./test_dataset/Histogram/Histogram_1ae9b59800d62629/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Our bins will be every 15 minutes\nbins = np.arange(0, 165, 15) \n\n# Reconstructed data with the given frequencies\ndata = np.repeat(np.arange(15, 165, 15), [800, 600, 400, 300, 200, 150, 100, 70, 50, 30]) \n\nplt.hist(data, bins = bins, edgecolor='black', alpha=0.7)\nplt.xticks(bins)\n\nplt.xlabel('Delay Ranges (minutes)')\nplt.ylabel('Frequency of Flights')\nplt.title('Distribution of Flight Delays')\n\n# Set the edge style of the bars in the histogram corresponding to the Target_object to 'dashed' with edge color '#946655'\ntarget_indices = {1, 3, 5}\nfor i, bar in enumerate(plt.gca().patches):\n    if i in target_indices:\n        bar.set_edgecolor('#946655')\n        bar.set_linestyle('dashed')\n\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "1,3,5",
        "Test_image": "./test_dataset/Histogram/Histogram_1ae9b59800d62629/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_1ae9b59800d62629/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_1ae9b59800d62629/figure.png"
    },
    {
        "id": "Histogram_ce1402d469e7f15f",
        "Input_code": "import matplotlib.pyplot as plt\n\n# Depth Intervals\ndepth_intervals = [\"0-100\", \"100-200\", \"200-300\", \"300-400\", \"400-500\", \n                   \"500-600\", \"600-700\", \"700-800\", \"800-900\", \"900-1000\"]\n\n# Frequency of Marine Life Occurances\nmarine_life_freq = [15, 28, 33, 41, 54, 62, 49, 37, 23, 9]\n\nplt.figure(figsize=(10,7))\nplt.bar(depth_intervals, marine_life_freq, color='blue')\n\n# Add title and labels\nplt.title('Distribution of Marine Life across Different Depth Zones in the Ocean')\nplt.xlabel('Depth Intervals (meters)')\nplt.ylabel('Frequency of Marine Life Occurrences')\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"figure.png\")",
        "Instruction": "Adjust the line width of the bars that contain the center point of the bounding box to 1.03, and enable the picker state for these bars by setting it to True.",
        "Input_image": "./test_dataset/Histogram/Histogram_ce1402d469e7f15f/Visual_figure.png",
        "Test_code": "import matplotlib.pyplot as plt\n\n# Depth Intervals\ndepth_intervals = [\"0-100\", \"100-200\", \"200-300\", \"300-400\", \"400-500\", \n                   \"500-600\", \"600-700\", \"700-800\", \"800-900\", \"900-1000\"]\n\n# Frequency of Marine Life Occurances\nmarine_life_freq = [15, 28, 33, 41, 54, 62, 49, 37, 23, 9]\n\nplt.figure(figsize=(10,7))\nbars = plt.bar(depth_intervals, marine_life_freq, color='blue')\n\n# Add title and labels\nplt.title('Distribution of Marine Life across Different Depth Zones in the Ocean')\nplt.xlabel('Depth Intervals (meters)')\nplt.ylabel('Frequency of Marine Life Occurrences')\n\n# Modify the linewidth and picker state for the selected bars\nfor idx, bar in enumerate(bars):\n    if idx in [2, 4]:\n        bar.set_linewidth(1.03)\n        bar.set_picker(True)\n\n# Show the plot\nplt.tight_layout()\nplt.savefig(\"Edit_figure.png\")",
        "Target_object": "2,4",
        "Test_image": "./test_dataset/Histogram/Histogram_ce1402d469e7f15f/Edit_figure.png",
        "Masked_image": "./test_dataset/Histogram/Histogram_ce1402d469e7f15f/Masked_figure.png",
        "Initial_figure": "./test_dataset/Histogram/Histogram_ce1402d469e7f15f/figure.png"
    }
]